.. _ov_kernel_iec_task_mgmt:

IEC Task Management
-------------------

The IEC task management is done in the component CmpIecTask.

Four different types of tasks are possible:

1. Cyclic tasks:
   These tasks are executed in a specified interval.

2. Event tasks:
   These tasks are executed once every time, if a specified IEC
   BOOL variable changed its value from FALSE to TRUE.

3. Freewheeling tasks:
   These tasks are executed without a specified cycle in a loop. To
   enable running tasks with a lower priority, the freewheeling task
   frees the processor in a specified way:

-  Default: 20% of its execution time, the task will sleep at the end of
   a cycle
-  If a processor load maximum is specified in the scheduler, this is
   the load value for the freewheeling tasks too, e.g.
   
   | processor load maximum = 60%
   | execution time of the freewheeling task = 10ms
   | -> Sleep time = (100% - processor load maximum) \* 10ms = 40% \* 10ms = **4ms**

-  Fix sleep time:

   | A fix sleep time can be specified for the freewheeling task.
   | This value can be specified additionally in the scheduler with the following setting:
   | [CmpSchedule]
   | Task.Freewheeling.Cycletime=10
   | In this example, every freewheeling task sleeps at the end of its cycle 10ms.

4. External Event tasks:
   An external event task is executed every time, an external (runtime event, hardware event) occurred. The event is specified by name in the
   device description of the device. This event can be specified in the
   task configuration in CODESYS, if external event task is selected.

The list of all IEC-tasks in an application is generated by CODESYS in
the form of initialized IEC data structures. At download, this list is
created during initialization and is transmitted to the CmpIecTask
component after initialization. The tasks are reported then to the
scheduler and are created specifically, in accordance with their type,
as operating system tasks.

The format of the task description is explained in more detail below.

Data Format of the task description
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The download message contains information about an application's tasks
in the form of initialized IEC data structures.

The IEC data structures are initialized with the other variables after
the download.

The data structures are defined as follows:

.. code-block:: C

    #define Cyclic 0x0000
    #define Event 0x0001
    #define External 0x0002
    #define Freewheeling 0x0003
    typedef struct
    {
      char stName[51];
      short nPriority;
      short KindOfTask;
      char bMicroseconds;
      unsigned int dwInterval;
      unsigned int dwEventFunctionPointer;
      char stExternalEvent[51];
      unsigned int dwTaskEntryFunctionPointer;
      int tLastCycleTime;
      int tAverageCycleTime;
      int tMaxCycleTime;
      int tMinCycleTime;
      int tJitterMax;
      int tJitterLast;
    }Task\_Info;
	
    typedef struct
    {
      short nTasks;
      char stApplicationName[51];
      Task_Info* ptaskinfo;
    }sys_setup_tasks_struct;

The sys\_setup\_tasks\_struct structure contains the entire task
configuration of an application.

Creating IEC tasks
~~~~~~~~~~~~~~~~~~

.. code-block:: C

    void CDECL __sys__setup__tasks(sys_setup_tasks_struct* p)

This function is called after a download or after the boot project has
been loaded. A pointer to a variable in the sys\_setup\_tasks\_struct
structure is passed. This function saves a pointer to each task and adds
this task to the scheduler component.

Creating an external event task
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As an external event we describe an event in the runtime system, on
which a task can be activated. This event is typically generated out of
a runtime system component, but could also be generated out of the
IEC-Code. An external event is always identified by its name, so the
name of the event must be known.

To realize an external event task, the following issues must be implemented:

1. You need a description of this external event in your device
   description. For this the following settings are needed (see :ref:`Task configuration`):

   | (1) /DeviceDescription/Device/ExtendedSettings/ts:TargetSettings/ts:section[@name='taskconfiguration']/ts:setting[@name='supportexternal']/ts:value=1

   | (2) /DeviceDescription/Device/ExtendedSettings/ts:TargetSettings/ts:section[@name='taskconfiguration']/ts:setting[@name='externalevents']/ts:value=<externalevents>
       <externalevent> <name>myCyclicInterrupt</name>
       </externalevent></externalevents>

   | Example of an external event named "myCyclicInterrupt":

   .. code-block:: C

    <ts:section name="taskconfiguration">
       <ts:setting name="externalevents" type="cdata" access="hide">
          <ts:value><![CDATA[
             <externalevents>
                 <externalevent>
                     <name>myCyclicInterrupt</name>
                 </externalevent>
             </externalevents>
         ]]></ts:value>
       </ts:setting>
    </ts:section>

2. The runtime system must be able to recognizes and store the event, that was assigned to the specified task. There are two ways: 
  
   | Option 1: 
     All schedulers of CODESYS Control are now supporting a new interface to easily implement "external events" which can be used for "external event tasks".
   | The interface functions might be used like this:
   
     .. code-block:: C

      HookFunction():
      case CH\_INIT3:
      {
      s\_hExtEventTask = SchedRegisterExternalEvent("myCyclicInterrupt", NULL);
      ...
      case CH\_EXIT3:
      {
      SchedUnregisterExternalEvent(s\_hExtEventTask);
      ...
      myCyclicInterruptHandler():
      SchedPostExternalEvent(s\_hExtEventTask);
      ...

   |  Option 2:
   |  In the runtime system, the CmpSchedule component offers two events called EVT\_ExternalEventTaskCreateDone and EVT\_PrepareExternalEventTaskDelete for the case that an external event task is created or deleted. So first you have to register to these events (how to handle an external event is implemented as an example in the CmpTemplate.c module of the Runtime Toolkit).
   |  In your callback routine of the EVT\_ExternalEventTaskCreateDone event you have to store the hEvent parameter. And in the callback routine of the EVT\_PrepareExternalEventTaskDelete event, you have to remove the hEvent.
   |  Last but not least you have to send this event always when the corresponding external event has occurred in the runtime system (like an interrupt, etc.). To activate the task once, that is assigned to this external event task, you have to send this event by CAL\_SysEventSet(hEvent).
   |  After this, you can assign the external event specified in the device description to your task in your IEC program. After downloading your application this task should be executed every time the event is sent in the runtime system.

Equivalent to the handling in the runtime system, you can handle an
external event in IEC-Code. All needed runtime system interfaces for
that are available as external System-Libraries.

.. Note:: Debugging inside of external events is only supported for
CmpSchedule. All other scheduler variants are ignoring breakpoints
within external events.
