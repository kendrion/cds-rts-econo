

=================
Interactive Login
=================

Interactive Login allows to guarantee connection to the correct PLC, and to identify a PLC in a network. The following usecases are supported:

1) Wink:
The user can select a device in the Gateway dialog, and let it "blink". This allows to identify a device in the list of devices found in the scan. This may be expecially neccessary while PLC don't have unique or meaningful names yet.

2) Secure Login:
During login, it can be guaranteed that the user is connecting to the correct PLC.

---------------------

The following target settings are necessary for this feature:

- :ref:`runtime_features_interactive_login_mode`
    The mode to be used for logins. 0 = DISABLED (=default), 1 = ID_STRING, 2 = PRESS_KEY, 4 = BLINK.

- :ref:`runtime_features_interactive_login_timeout_seconds`
    The timeout for interactive login. (with confirmation)

- :ref:`runtime_features_interactive_login_wink`
    The feature to show the active device the user is currently logged in. Typically a blinking LED on the device.

These target strings define the user texts:

- interactivelogin_id_string

- interactivelogin_key_press

- interactivelogin_blink

Example:

.. code-block:: xml

  <Strings namespace="security">
    <Language lang="de">
      <String identifier="interactivelogin_id_string">Bitte geben Sie die Seriennummer des Gerätes in das Eingabefeld unten ein.</String>
      <String identifier="interactivelogin_key_press">Bitte drücken Sie den Identifikationsknopf des Gerätes.</String>
      <String identifier="interactivelogin_blink">Die Identifikations-LED des Gerätes blinkt jetzt. Bitte überprüfen Sie visuell, ob dies das korrekte Gerät ist. Klicken Sie dann 'OK' um fortzufahren oder 'Abbrechen' um den Login-Vorgang abzubrechen.</String>
    </Language>
    <Language lang="en">
      <String identifier="interactivelogin_id_string">Please enter the serial number of the device in the text field below.</String>
      <String identifier="interactivelogin_key_press">Please go to the device and press the confirmation button there.</String>
      <String identifier="interactivelogin_blink">Please identify the correct device by checking that its LED is blinking. Then press 'OK' to continue or "Cancel" to abort the login.</String>
    </Language>
  </Strings>

---------------------

CODESYS will send online services to the runtime if enabled. The runtime will send a runtime system event when such a message is received.
An OEM can react on these events by creating an OEM specific runtime component.
The OEM specific runtime component is informed by this runtime system event: EVT_CmpDevice_InteractiveLogin (see :ref:`group___cmp_device_itf___events`), issued by CMPID_CmpDevice.

This structure is passed with the event:

.. code-block:: c

    typedef struct
    {
        RTS_UI32 ui32LoginCommand;  /* See category Interactive login commands */
        RTS_UI32 ui32LoginMode;     /* See category Interactive login mode flags. Only used for command DEV_ILC_LOGIN_REQUEST */
        RTS_UI8* pui8LoginData;     /* Login information to be checked by the runtime system. Only used for mode DEV_ILM_STRING */
        RTS_RESULT rLoginResult;    /* Result of event handler. See Interactive online service for possible results */
    } EVTPARAM_CmpDevice_InteractiveLogin;

    #define EVTPARAMID_CmpDevice_InteractiveLogin 0x0001
    #define EVTVERSION_CmpDevice_InteractiveLogin 0x0001

An example implementation can be found in the template component CmpTemplate, in file :ref:`group___rts_interactive_login` (Templates/CmpTemplate/RtsInteractiveLogin.c). See here how to register the event callback function, and how to react on the events.
In the template, a log message is written on every event.

