
.. _tag_openssl:

OpenSSL
=======

Introduction
------------

To realize most of the security features, you need a crypto component that can implement the following interfaces:

- :ref:`group___cmp_crypto_itf`
- :ref:`group___cmp_tls_itf`
- :ref:`group___cmp_x509_cert_itf`
- :ref:`group___sys_socket2_itf`

In the runtime system we use here the open source component `OpenSSL <https://www.openssl.org/>`_ by default. This component is encapsulated in the CmpOpenSSL component of the runtime system.

Integration of OpenSSL
----------------------

The integration of OpenSSL can be done in 2 variants:

1. Operating system integrated OpenSSL:

   If your operating system contains an implementation of OpenSSL, you can use the CmpOpenSSL component of the runtime system _without_ the OpenSSL implementation. In this case you have to define the compiler
   switch CMPOPENSSL_USE_SYSLIB for compiling the runtime system!

2. Using the OpenSSL source components shipped with the runtime system:

   If your operating system does _not_ contain an implementation of OpenSSL, you can use the CmpOpenSSL component of the runtime system _with_ the OpenSSL implementation. In this case you must not define the 
   compiler switch CMPOPENSSL_USE_SYSLIB for compiling the runtime system. Additionally you have to include all OpenSSL modules into your build project specified in CmpOpenSSLDep.h.

_`Certificate handling`
-----------------------

The above mentionned security features are realized by using X.509 certificates. Actually, the certificates are stored in the file system
of the runtime in a hidden folder ".pki", including the private keys for own certificates. The OEM must make sure that this
folder is not accessed from outside, especially the private keys must not be copied from one device to another. This 
configuration is only available until a backend component for managing certificates is available. This will be removed in future!

There are two possibilities to equip the runtime with the necessary certificates:

#. Selfsigned certificates:
        The runtime is able to create a selfsigned certificates (e.g. by using the PLCShell command "cert-genselfsigned").

#. CA signed certificates:
    These certificates are generated by a certificate authority (e.g. VeriSign, GeoTrust, etc.) or by a CA hosted in the plant of the operator.

    How to get a CA signed certificate:

    - The runtime creates a CSR (Certificate Signing Request) and keeps its private key on the device (e.g. by using the PLCShell command "cert-createcsr").
      In this case the CSR file can be found in the "cert/export" folder.
    - Get the CSR file out of the export folder per file transfer
    - Send the CSR to a CA and let them generate a signed certificate
    - Send the signed certificate into the import folder ("cert/import") per file transfer
    - The signed certificate from the authority can then be imported to the runtime (e.g. with the PLCShell command "cert-import").

Requirements
------------

The following runtime system components are necessary for this feature:

- `OpenSSL <tag_openssl_>`_ or equivalent crypto component
- CmpSecurityManager: :ref:`group___cmp_security_manager_itf`                
