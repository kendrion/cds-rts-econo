.. _summary_basic_concepts_macros:

Macros for Function Calls
-------------------------

The C syntax of calling functions from other components depends on the
linking method.

-  Static linking (all components are compiled and linked to one
   binary): A function can be called just using its name.

   Example: MyFunction();

-  Dynamic/Mixed linking (every component is linked to one library). For
   example, this is a .dll in Windows or a .so in Linux: Function
   pointers are needed. The function pointer has to be

   -  declared,

   -  filled with the correct value, or

   -  exported,

   -  checked if valid and

   -  used for the call.

Therefore, the following macros are used. They are generated by the m4
mechanism:

-  Function pointers are declared in this macro:

   USE_STMT

   It must be placed at the beginning of the C source file.

-  Functions are exposed to the rest of the runtime, and exported to the
   component manager, with this macro:

   EXPORT_STMT

   It must be placed inside ExportFunctions().

-  Function pointers from other interfaces/components are retrieved in
   this macro:

   IMPORT_STMT

   It must be placed inside ImportFunctions().

-  Function pointers are checked for “availability” with this macro:

   CHK_<function name>

   It must be used before calling a function from another component.

   Example: Before calling function EventOpen() from component
   CmpEventMgr, use this macro:

..

   if (CHK_EventOpen)

   …

-  Functions are called with this macro:

   CAL_<function name>

   It must be used when calling a function from another
   interface/component.

   Example: For calling function EventOpen() from component CmpEventMgr,
   use this macro:

..

   s_hEvent = CAL_EventOpen(…);

**When writing a component, use macros like CHK\_ and CAL\_ to call
functions from other components.**
   