.. first line of composition.rst template

.. first line of group.rst template

.. _group___sys_task_itf:

==========
SysTaskItf
==========

 :ref:`More... <group___sys_task_itf-details>`

Modules
-------

- :ref:`Event parameter <group___sys_task_itf___eventparameter>`

- :ref:`Events <group___sys_task_itf___events>`

- :ref:`Feature flags <group___sys_task_itf___featureflags>`

- :ref:`Priority ranges <group___sys_task_itf___priorityranges>`

- :ref:`Settings <group___sys_task_itf___settings>`

- :ref:`Static defines <group___sys_task_itf___staticdefines>`

- :ref:`Task status bits <group___sys_task_itf___taskstatusbits>`

- :ref:`Task status definitions <group___sys_task_itf___taskstatusdefinitions>`

- :ref:`Task status macros <group___sys_task_itf___taskstatusmacros>`

Data Structures
---------------

- struct :ref:`tagSYS_TASK_PARAM <structtag_s_y_s___t_a_s_k___p_a_r_a_m>`

- struct :ref:`tagSYS_TASK_INFO <structtag_s_y_s___t_a_s_k___i_n_f_o>`

- struct :ref:`tagsystaskautoreleaseonexit_struct <structtagsystaskautoreleaseonexit__struct>`

- struct :ref:`tagsystaskcheckstack_struct <structtagsystaskcheckstack__struct>`

- struct :ref:`tagsystaskcreate_struct <structtagsystaskcreate__struct>`

- struct :ref:`tagsystaskcreate2_struct <structtagsystaskcreate2__struct>`

- struct :ref:`tagsystaskdestroy_struct <structtagsystaskdestroy__struct>`

- struct :ref:`tagsystaskend_struct <structtagsystaskend__struct>`

- struct :ref:`tagsystaskenter_struct <structtagsystaskenter__struct>`

- struct :ref:`tagsystaskexit_struct <structtagsystaskexit__struct>`

- struct :ref:`tagsystaskgenerateexception_struct <structtagsystaskgenerateexception__struct>`

- struct :ref:`tagsystaskgetcontext_struct <structtagsystaskgetcontext__struct>`

- struct :ref:`tagsystaskgetcurrent_struct <structtagsystaskgetcurrent__struct>`

- struct :ref:`tagsystaskgetcurrentoshandle_struct <structtagsystaskgetcurrentoshandle__struct>`

- struct :ref:`tagsystaskgetinfo_struct <structtagsystaskgetinfo__struct>`

- struct :ref:`tagsystaskgetinterval_struct <structtagsystaskgetinterval__struct>`

- struct :ref:`tagsystaskgetname_struct <structtagsystaskgetname__struct>`

- struct :ref:`tagsystaskgetoshandle_struct <structtagsystaskgetoshandle__struct>`

- struct :ref:`tagsystaskgetospriority_struct <structtagsystaskgetospriority__struct>`

- struct :ref:`tagsystaskgetpriority_struct <structtagsystaskgetpriority__struct>`

- struct :ref:`tagsystaskjoin_struct <structtagsystaskjoin__struct>`

- struct :ref:`tagsystaskleave_struct <structtagsystaskleave__struct>`

- struct :ref:`tagsystaskresume_struct <structtagsystaskresume__struct>`

- struct :ref:`tagsystasksetexit_struct <structtagsystasksetexit__struct>`

- struct :ref:`tagsystasksetinterval_struct <structtagsystasksetinterval__struct>`

- struct :ref:`tagsystasksetpriority_struct <structtagsystasksetpriority__struct>`

- struct :ref:`tagsystasksuspend_struct <structtagsystasksuspend__struct>`

- struct :ref:`tagsystaskwaitinterval_struct <structtagsystaskwaitinterval__struct>`

- struct :ref:`tagsystaskwaitsleep_struct <structtagsystaskwaitsleep__struct>`

- struct :ref:`tagsystaskwaitsleepus_struct <structtagsystaskwaitsleepus__struct>`

- struct :ref:`systaskgettaskhandle_struct <structsystaskgettaskhandle__struct>`

- struct :ref:`ISysTask_C <struct_i_sys_task___c>`

Macros
------

- #define :ref:`ITF_SysTask <group___sys_task_itf_1gadbda13c20a288aa7602135d08d0e96f8>`

- #define :ref:`EXTITF_SysTask <group___sys_task_itf_1gaf308fca1518925f53ec30eb1a2c5fc8e>`

Typedefs
--------

- typedef struct :ref:`tagSYS_TASK_PARAM <structtag_s_y_s___t_a_s_k___p_a_r_a_m>` :ref:`SYS_TASK_PARAM <group___sys_task_itf_1ga25b4c7c3c4fbfde69512a84298791658>`

- typedef struct :ref:`tagSYS_TASK_INFO <structtag_s_y_s___t_a_s_k___i_n_f_o>` :ref:`SYS_TASK_INFO <group___sys_task_itf_1ga9483fcdb600821ff56a2cb7cb7847219>`

- typedef struct :ref:`tagsystaskautoreleaseonexit_struct <structtagsystaskautoreleaseonexit__struct>` :ref:`systaskautoreleaseonexit_struct <group___sys_task_itf_1ga7f38fdd151779cb9931f6f2ac92c7c75>`

- typedef struct :ref:`tagsystaskcheckstack_struct <structtagsystaskcheckstack__struct>` :ref:`systaskcheckstack_struct <group___sys_task_itf_1ga1f9f62871821e6aefe7fc6e20cfef40a>`

- typedef struct :ref:`tagsystaskcreate_struct <structtagsystaskcreate__struct>` :ref:`systaskcreate_struct <group___sys_task_itf_1gafcf93a3f93ec2a6446f9a881606e1feb>`

- typedef struct :ref:`tagsystaskcreate2_struct <structtagsystaskcreate2__struct>` :ref:`systaskcreate2_struct <group___sys_task_itf_1ga32ba46b8dae14c4a5af66a5975f0ee45>`

- typedef struct :ref:`tagsystaskdestroy_struct <structtagsystaskdestroy__struct>` :ref:`systaskdestroy_struct <group___sys_task_itf_1ga4541832ccb9f92bb824d213284aafdc7>`

- typedef struct :ref:`tagsystaskend_struct <structtagsystaskend__struct>` :ref:`systaskend_struct <group___sys_task_itf_1ga8092bbf35ce489e3fb263488803fe809>`

- typedef struct :ref:`tagsystaskenter_struct <structtagsystaskenter__struct>` :ref:`systaskenter_struct <group___sys_task_itf_1ga5a12f919072b8d7870ca0d2042eaeefc>`

- typedef struct :ref:`tagsystaskexit_struct <structtagsystaskexit__struct>` :ref:`systaskexit_struct <group___sys_task_itf_1gae43a0f4ea21e48cfa17729fffa57217d>`

- typedef struct :ref:`tagsystaskgenerateexception_struct <structtagsystaskgenerateexception__struct>` :ref:`systaskgenerateexception_struct <group___sys_task_itf_1ga633304e61eec9bb40643691501c8c578>`

- typedef struct :ref:`tagsystaskgetcontext_struct <structtagsystaskgetcontext__struct>` :ref:`systaskgetcontext_struct <group___sys_task_itf_1ga9ee14e4f81bbb5002e602f420fd04d91>`

- typedef struct :ref:`tagsystaskgetcurrent_struct <structtagsystaskgetcurrent__struct>` :ref:`systaskgetcurrent_struct <group___sys_task_itf_1gaa51d5695075091f02db7ac800a16cad2>`

- typedef struct :ref:`tagsystaskgetcurrentoshandle_struct <structtagsystaskgetcurrentoshandle__struct>` :ref:`systaskgetcurrentoshandle_struct <group___sys_task_itf_1gaeae2d5ba40daeb25e14b9b8f6eaae4ae>`

- typedef struct :ref:`tagsystaskgetinfo_struct <structtagsystaskgetinfo__struct>` :ref:`systaskgetinfo_struct <group___sys_task_itf_1ga36da00da66e022e85e247527f1c6003d>`

- typedef struct :ref:`tagsystaskgetinterval_struct <structtagsystaskgetinterval__struct>` :ref:`systaskgetinterval_struct <group___sys_task_itf_1gaaf6f9ad86a032982ccb51981cd65014e>`

- typedef struct :ref:`tagsystaskgetname_struct <structtagsystaskgetname__struct>` :ref:`systaskgetname_struct <group___sys_task_itf_1gaaf6d75b3ccd6ac35209ffb5dd3d6b61b>`

- typedef struct :ref:`tagsystaskgetoshandle_struct <structtagsystaskgetoshandle__struct>` :ref:`systaskgetoshandle_struct <group___sys_task_itf_1gabdde52d8e8d3a41476b0ac9601065ef5>`

- typedef struct :ref:`tagsystaskgetospriority_struct <structtagsystaskgetospriority__struct>` :ref:`systaskgetospriority_struct <group___sys_task_itf_1gac6c64504a409581be4150ca2bf1c19d9>`

- typedef struct :ref:`tagsystaskgetpriority_struct <structtagsystaskgetpriority__struct>` :ref:`systaskgetpriority_struct <group___sys_task_itf_1gaea837c1ddac5961f630652b4b2de6dca>`

- typedef struct :ref:`tagsystaskjoin_struct <structtagsystaskjoin__struct>` :ref:`systaskjoin_struct <group___sys_task_itf_1gac42280e865793347ff2c3a868ec5388a>`

- typedef struct :ref:`tagsystaskleave_struct <structtagsystaskleave__struct>` :ref:`systaskleave_struct <group___sys_task_itf_1ga4d2f91e698b0b538852f02709dbaf25c>`

- typedef struct :ref:`tagsystaskresume_struct <structtagsystaskresume__struct>` :ref:`systaskresume_struct <group___sys_task_itf_1ga30a91132f57f670a2c5ec3ce65699583>`

- typedef struct :ref:`tagsystasksetexit_struct <structtagsystasksetexit__struct>` :ref:`systasksetexit_struct <group___sys_task_itf_1ga728deea7295335ed6ac952c9add6945a>`

- typedef struct :ref:`tagsystasksetinterval_struct <structtagsystasksetinterval__struct>` :ref:`systasksetinterval_struct <group___sys_task_itf_1gae239ecb8a86ba38fa910a884d0f43de4>`

- typedef struct :ref:`tagsystasksetpriority_struct <structtagsystasksetpriority__struct>` :ref:`systasksetpriority_struct <group___sys_task_itf_1ga3f25f5044ad5d52bed4c92edb09631c2>`

- typedef struct :ref:`tagsystasksuspend_struct <structtagsystasksuspend__struct>` :ref:`systasksuspend_struct <group___sys_task_itf_1gacd81113792962945a3580f71ba62b3c0>`

- typedef struct :ref:`tagsystaskwaitinterval_struct <structtagsystaskwaitinterval__struct>` :ref:`systaskwaitinterval_struct <group___sys_task_itf_1gabd6449b23641bfef9357a1a88c7a26cd>`

- typedef struct :ref:`tagsystaskwaitsleep_struct <structtagsystaskwaitsleep__struct>` :ref:`systaskwaitsleep_struct <group___sys_task_itf_1gabab00c76212a0ea89b130615a0feebd0>`

- typedef struct :ref:`tagsystaskwaitsleepus_struct <structtagsystaskwaitsleepus__struct>` :ref:`systaskwaitsleepus_struct <group___sys_task_itf_1ga0bb62b23c35846a188de097357fae229>`

- typedef RTS_HANDLE(* :ref:`PFSYSTASKOSGETOSHANDLEFROMTASKINFO <group___sys_task_itf_1ga4198381bd4b1479a27aa6585dddfb530>`)(SYS_TASK_INFO *pTask)

- typedef :ref:`ISysTask_C <struct_i_sys_task___c>` :ref:`ISysTask <group___sys_task_itf_1ga2abf737cc224663ecbc8ed38692b02aa>`

Functions
---------

- void :ref:`systaskautoreleaseonexit <group___sys_task_itf_1gaca997b2130e8e4fdfe66428653050d55>` (:ref:`systaskautoreleaseonexit_struct <group___sys_task_itf_1ga7f38fdd151779cb9931f6f2ac92c7c75>` * p)

- void :ref:`systaskcheckstack <group___sys_task_itf_1ga890107f30d9d3aac251a6303d95ed5e8>` (:ref:`systaskcheckstack_struct <group___sys_task_itf_1ga1f9f62871821e6aefe7fc6e20cfef40a>` * p)

- void :ref:`systaskcreate <group___sys_task_itf_1gab8e9d8edcade4832169edccd360c9622>` (:ref:`systaskcreate_struct <group___sys_task_itf_1gafcf93a3f93ec2a6446f9a881606e1feb>` * p)

- void :ref:`systaskcreate2 <group___sys_task_itf_1gac37f6f06d87c624397a141ca7334810e>` (:ref:`systaskcreate2_struct <group___sys_task_itf_1ga32ba46b8dae14c4a5af66a5975f0ee45>` * p)

- void :ref:`systaskdestroy <group___sys_task_itf_1ga928f9807ce4c9a670aea0d110123a72e>` (:ref:`systaskdestroy_struct <group___sys_task_itf_1ga4541832ccb9f92bb824d213284aafdc7>` * p)

- void :ref:`systaskend <group___sys_task_itf_1ga50f6434a04ea7e567efb9f95b945e0a7>` (:ref:`systaskend_struct <group___sys_task_itf_1ga8092bbf35ce489e3fb263488803fe809>` * p)

- void :ref:`systaskenter <group___sys_task_itf_1ga27776fbeb4358667c94762df8a9f0f42>` (:ref:`systaskenter_struct <group___sys_task_itf_1ga5a12f919072b8d7870ca0d2042eaeefc>` * p)

- void :ref:`systaskexit <group___sys_task_itf_1ga796a20b0551f659f9cae443820458541>` (:ref:`systaskexit_struct <group___sys_task_itf_1gae43a0f4ea21e48cfa17729fffa57217d>` * p)

- void :ref:`systaskgenerateexception <group___sys_task_itf_1gae208e286cb1b41f7cdbed34ce18fc78a>` (:ref:`systaskgenerateexception_struct <group___sys_task_itf_1ga633304e61eec9bb40643691501c8c578>` * p)

- void :ref:`systaskgetcontext <group___sys_task_itf_1gaf078730d1e896f594ed2318b8677469e>` (:ref:`systaskgetcontext_struct <group___sys_task_itf_1ga9ee14e4f81bbb5002e602f420fd04d91>` * p)

- void :ref:`systaskgetcurrent <group___sys_task_itf_1gacb330b8e1132735446b8fa3804926005>` (:ref:`systaskgetcurrent_struct <group___sys_task_itf_1gaa51d5695075091f02db7ac800a16cad2>` * p)

- void :ref:`systaskgetcurrentoshandle <group___sys_task_itf_1gad51a8fbe1532676b1652f0ef3af2e8c1>` (:ref:`systaskgetcurrentoshandle_struct <group___sys_task_itf_1gaeae2d5ba40daeb25e14b9b8f6eaae4ae>` * p)

- void :ref:`systaskgetinfo <group___sys_task_itf_1ga4c3814d9f74aa60a293a9f54e46673d6>` (:ref:`systaskgetinfo_struct <group___sys_task_itf_1ga36da00da66e022e85e247527f1c6003d>` * p)

- void :ref:`systaskgetinterval <group___sys_task_itf_1gacbd1d4a3ac15e57160a868b0c6be3b34>` (:ref:`systaskgetinterval_struct <group___sys_task_itf_1gaaf6f9ad86a032982ccb51981cd65014e>` * p)

- void :ref:`systaskgetname <group___sys_task_itf_1gab6fb43257a4c35957ac016cb14ddb43d>` (:ref:`systaskgetname_struct <group___sys_task_itf_1gaaf6d75b3ccd6ac35209ffb5dd3d6b61b>` * p)

- void :ref:`systaskgetoshandle <group___sys_task_itf_1ga3ba7815c9a1ee473c87fcfff93ddfd08>` (:ref:`systaskgetoshandle_struct <group___sys_task_itf_1gabdde52d8e8d3a41476b0ac9601065ef5>` * p)

- void :ref:`systaskgetospriority <group___sys_task_itf_1gab2a2948d80dd8ec36db908a160f5d395>` (:ref:`systaskgetospriority_struct <group___sys_task_itf_1gac6c64504a409581be4150ca2bf1c19d9>` * p)

- void :ref:`systaskgetpriority <group___sys_task_itf_1gaa055154a1252922110dd40168fc6e850>` (:ref:`systaskgetpriority_struct <group___sys_task_itf_1gaea837c1ddac5961f630652b4b2de6dca>` * p)

- void :ref:`systaskjoin <group___sys_task_itf_1ga86d27078d2ddd30ce779a026b29841fe>` (:ref:`systaskjoin_struct <group___sys_task_itf_1gac42280e865793347ff2c3a868ec5388a>` * p)

- void :ref:`systaskleave <group___sys_task_itf_1ga459e3e1d4e4a11fe595745b6b616a316>` (:ref:`systaskleave_struct <group___sys_task_itf_1ga4d2f91e698b0b538852f02709dbaf25c>` * p)

- void :ref:`systaskresume <group___sys_task_itf_1gade600f7d23deb7a50eca1a7164fde0c6>` (:ref:`systaskresume_struct <group___sys_task_itf_1ga30a91132f57f670a2c5ec3ce65699583>` * p)

- void :ref:`systasksetexit <group___sys_task_itf_1ga20566a65524a3ba5b7b6653ec4b5e681>` (:ref:`systasksetexit_struct <group___sys_task_itf_1ga728deea7295335ed6ac952c9add6945a>` * p)

- void :ref:`systasksetinterval <group___sys_task_itf_1gacec5ccaad202823b8f522940b8a421f6>` (:ref:`systasksetinterval_struct <group___sys_task_itf_1gae239ecb8a86ba38fa910a884d0f43de4>` * p)

- void :ref:`systasksetpriority <group___sys_task_itf_1gae267a50e88b00b86ce6eb54fac433a44>` (:ref:`systasksetpriority_struct <group___sys_task_itf_1ga3f25f5044ad5d52bed4c92edb09631c2>` * p)

- void :ref:`systasksuspend <group___sys_task_itf_1ga9bad6536a599bf81c3ff563957b47836>` (:ref:`systasksuspend_struct <group___sys_task_itf_1gacd81113792962945a3580f71ba62b3c0>` * p)

- void :ref:`systaskwaitinterval <group___sys_task_itf_1ga49b984e3c2983df6fd721bd9f7f3788f>` (:ref:`systaskwaitinterval_struct <group___sys_task_itf_1gabd6449b23641bfef9357a1a88c7a26cd>` * p)

- void :ref:`systaskwaitsleep <group___sys_task_itf_1ga3526657dc9eb09cb1ce73377471b641d>` (:ref:`systaskwaitsleep_struct <group___sys_task_itf_1gabab00c76212a0ea89b130615a0feebd0>` * p)

- void :ref:`systaskwaitsleepus <group___sys_task_itf_1gad0330474bb431bd59e59dcf505c3db18>` (:ref:`systaskwaitsleepus_struct <group___sys_task_itf_1ga0bb62b23c35846a188de097357fae229>` * p)

- RTS_RESULT :ref:`SysTaskOSInit <group___sys_task_itf_1gaf36e81ef1e02bf8052697f77861a1255>` (INIT_STRUCT * pInit)

- RTS_RESULT :ref:`SysTaskOSHookFunction <group___sys_task_itf_1gaa0fe7987fd2eb8f20247f5c9733f00c0>` (RTS_UI32 ulHook, RTS_UINTPTR ulParam1, RTS_UINTPTR ulParam2)

- RTS_HANDLE :ref:`SysTaskOSGetOSHandleFromTaskInfo <group___sys_task_itf_1ga216bd5b882e544ca32bf37ab4f523f34>` (:ref:`SYS_TASK_INFO <group___sys_task_itf_1ga9483fcdb600821ff56a2cb7cb7847219>` * pTask)

- RTS_RESULT :ref:`SysTaskRegisterGetOSHandleFromTaskInfo <group___sys_task_itf_1ga5275286e9b63eb63b986da0d5e81e6bb>` (:ref:`PFSYSTASKOSGETOSHANDLEFROMTASKINFO <group___sys_task_itf_1ga4198381bd4b1479a27aa6585dddfb530>`  pfSysTaskOSGetOSHandleFromTaskInfo)

- RTS_HANDLE :ref:`SysTaskCreate <group___sys_task_itf_1ga964f49e68d21683330d1b5cb0c691386>` (char * pszTaskName, :ref:`PFSYS_TASK_FUNCTION <group___sys_task_itf___featureflags_1ga922fb1217289b8b3adb1c502d1d81b29>`  pFunction, void * pParam, RTS_UI32 ulPriority, RTS_UI32 ulInterval, RTS_UI32 ulStackSize, :ref:`PFSYS_TASK_EXCEPTIONHANDLER <group___sys_task_itf___settings_1ga31aa6ad834f16cedb1c03889f5e7340a>`  pExceptionHandler, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`SysTaskCreate2 <group___sys_task_itf_1ga810499522c5e9821c5790298ff52d1cb>` (char * pszTaskName, char * pszTaskGroup, :ref:`PFSYS_TASK_FUNCTION <group___sys_task_itf___featureflags_1ga922fb1217289b8b3adb1c502d1d81b29>`  pFunction, void * pParam, RTS_UI32 ulPriority, RTS_UI32 ulInterval, RTS_UI32 ulStackSize, :ref:`PFSYS_TASK_EXCEPTIONHANDLER <group___sys_task_itf___settings_1ga31aa6ad834f16cedb1c03889f5e7340a>`  pExceptionHandler, RTS_RESULT * pResult)

- RTS_RESULT :ref:`SysTaskExit <group___sys_task_itf_1ga2b66d971cefdb0812f714cd2447727ce>` (RTS_HANDLE hTask, RTS_UI32 ulTimeoutMs)

- RTS_RESULT :ref:`SysTaskSetExit <group___sys_task_itf_1gaec87aea210bbfb32385673ce54827095>` (RTS_HANDLE hTask)

- RTS_RESULT :ref:`SysTaskAutoReleaseOnExit <group___sys_task_itf_1ga1ac643f351df0d476ad7d62d241855be>` (RTS_HANDLE hTask)

- RTS_RESULT :ref:`SysTaskDestroy <group___sys_task_itf_1ga2a983a3672fa81e2d097dea9c96af481>` (RTS_HANDLE hTask)

- RTS_RESULT :ref:`SysTaskSuspend <group___sys_task_itf_1ga62fd1dea620df347eab787499ff449eb>` (RTS_HANDLE hTask)

- RTS_RESULT :ref:`SysTaskResume <group___sys_task_itf_1gaaeb03111bb86bf6c1bff05bf7ca33068>` (RTS_HANDLE hTask)

- RTS_RESULT :ref:`SysTaskEnd <group___sys_task_itf_1ga6f6681092071f09c3de15110ffdb7ec1>` (RTS_HANDLE hTask, RTS_UINTPTR ulExitCode)

- RTS_RESULT :ref:`SysTaskWaitSleep <group___sys_task_itf_1ga2f3635e86d116bb6252ee60f0b83d301>` (RTS_HANDLE hTask, RTS_UI32 ulMilliSeconds)

- RTS_RESULT :ref:`SysTaskWaitSleepUs <group___sys_task_itf_1gad78859ce286d621f51d61c4059bafd4d>` (RTS_HANDLE hTask, :ref:`RTS_SYSTIME <group___sys_time_itf_1ga10c9d9a4c57129d83432fb02923858bf>` * ptSleepUs)

- RTS_RESULT :ref:`SysTaskWaitInterval <group___sys_task_itf_1gac6616866fefd142f6db517dbd178eead>` (RTS_HANDLE hTask)

- RTS_RESULT :ref:`SysTaskJoin <group___sys_task_itf_1gad6bea13cd175ee0cff795704827bba00>` (RTS_HANDLE hTaskToJoin, RTS_UI32 ulTimeoutMs)

- RTS_RESULT :ref:`SysTaskGetCurrent <group___sys_task_itf_1ga4bf4edfb681b2ec5363fcf38b27b1c4e>` (RTS_HANDLE * phTask)

- RTS_RESULT :ref:`SysTaskGetCurrentOSHandle <group___sys_task_itf_1ga1b3fb16f4617fc8bb60648015c037c7e>` (RTS_HANDLE * puiTaskOSHandle)

- RTS_RESULT :ref:`SysTaskSetPriority <group___sys_task_itf_1ga5f2932a1b0e4a2acb36c60a64164c268>` (RTS_HANDLE hTask, RTS_UI32 ulPriority)

- RTS_RESULT :ref:`SysTaskGetPriority <group___sys_task_itf_1ga1d2ce1ade37c9785566aa15676a1033a>` (RTS_HANDLE hTask, RTS_UI32 * pulPriority)

- RTS_RESULT :ref:`SysTaskGetOSPriority <group___sys_task_itf_1ga638d4e6cb0c942bb9962960052a4d622>` (RTS_HANDLE hTask, RTS_UI32 * pulOSPriority)

- RTS_RESULT :ref:`SysTaskGetInfo <group___sys_task_itf_1ga51aa7d470913f992cf02bef5bd7890c9>` (RTS_HANDLE hTask, :ref:`SYS_TASK_INFO <group___sys_task_itf_1ga9483fcdb600821ff56a2cb7cb7847219>` ** ppInfo)

- char * :ref:`SysTaskGetName <group___sys_task_itf_1gabace98ead3c3841789aa6a630edb823b>` (RTS_HANDLE hTask, RTS_RESULT * pResult)

- RTS_RESULT :ref:`SysTaskEnter <group___sys_task_itf_1ga3e38459b4d30a310ebf5e13bc91a9cb5>` (RTS_HANDLE hTask)

- RTS_RESULT :ref:`SysTaskLeave <group___sys_task_itf_1gab2100b03694291cefc624ebd7013b914>` (RTS_HANDLE hTask)

- RTS_RESULT :ref:`SysTaskGetContext <group___sys_task_itf_1gaf02ab8edba2e75d7a71b085a8fd7414f>` (RTS_HANDLE hTask, :ref:`RegContext <group___sys_except_itf___exceptioncontext_1gab00884ef66266dc256618d479aade118>` * pContext)

- RTS_RESULT :ref:`SysTaskGenerateException <group___sys_task_itf_1gaf83db6ecd6262b7ecfb0d52302c252e0>` (RTS_HANDLE uiTaskOSHandle, RTS_UI32 ulException, :ref:`RegContext <group___sys_except_itf___exceptioncontext_1gab00884ef66266dc256618d479aade118>`  Context)

- RTS_RESULT :ref:`SysTaskCheckStack <group___sys_task_itf_1gac6624b70717fe6009900d3dbde865200>` (RTS_HANDLE hTask, RTS_UI32 * pulMaxDepth)

- RTS_HANDLE :ref:`SysTaskGetOSHandle <group___sys_task_itf_1gaaac494b00a673dd03535ebd95652ea42>` (RTS_HANDLE hTask)

- :ref:`SYS_TASK_INFO <group___sys_task_itf_1ga9483fcdb600821ff56a2cb7cb7847219>` * :ref:`SysTaskGetByOSHandle <group___sys_task_itf_1ga0801e0abaab3b86bbfb16f20d0f31adb>` (RTS_HANDLE uiTaskOSHandle)

- RTS_UI32 :ref:`SysTaskGetConfiguredPriority <group___sys_task_itf_1ga0e3056a0ed732c59cc961b4419090ea4>` (RTS_UI32 ulPriority, RTS_RESULT * pResult)

- RTS_UI32 :ref:`SysTaskGetConfiguredPriority2 <group___sys_task_itf_1gab0ddef665955b2133c6486846808a86e>` (RTS_HANDLE hTask, RTS_UI32 ulPriority, RTS_RESULT * pResult)

- RTS_RESULT :ref:`SysTaskGetInterval <group___sys_task_itf_1gae33ba87e92e7f9da4e0c08612c3470a7>` (RTS_HANDLE hTask, RTS_UI32 * pulInterval)

- RTS_RESULT :ref:`SysTaskSetInterval <group___sys_task_itf_1ga2c12856462591ad81cbfaaf615a18252>` (RTS_HANDLE hTask, RTS_UI32 ulInterval)

- void :ref:`systaskgettaskhandle <group___sys_task_itf_1gaf203fa3d47acde5002ed17a1b9f92b2a>` (:ref:`systaskgettaskhandle_struct <structsystaskgettaskhandle__struct>` * p)

.. _group___sys_task_itf-details:

Detailed Description
--------------------





Macro Definition Documentation
------------------------------
.. _group___sys_task_itf_1gadbda13c20a288aa7602135d08d0e96f8:

#define ITF_SysTask
^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1gaf308fca1518925f53ec30eb1a2c5fc8e:

#define EXTITF_SysTask
^^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___sys_task_itf_1ga25b4c7c3c4fbfde69512a84298791658:

typedef struct tagSYS_TASK_PARAM  SYS_TASK_PARAM
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

SYS_TASK_PARAM

.. _group___sys_task_itf_1ga9483fcdb600821ff56a2cb7cb7847219:

typedef struct tagSYS_TASK_INFO  SYS_TASK_INFO
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

SYS_TASK_INFO

.. _group___sys_task_itf_1ga7f38fdd151779cb9931f6f2ac92c7c75:

typedef struct tagsystaskautoreleaseonexit_struct  systaskautoreleaseonexit_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EXTERN LIB SECTION BEGIN

The creator of a task can call this function to release the task object, if the task ends is execution. So the task is responsible itself to delete this object. NOTE: The task object must not be used from outside the task after calling this function!
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1ga1f9f62871821e6aefe7fc6e20cfef40a:

typedef struct tagsystaskcheckstack_struct  systaskcheckstack_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

NOT IMPLEMENTED YET! Function to investigate the stack task.
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1gafcf93a3f93ec2a6446f9a881606e1feb:

typedef struct tagsystaskcreate_struct  systaskcreate_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Is called to create a task in _run_ mode.
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1ga32ba46b8dae14c4a5af66a5975f0ee45:

typedef struct tagsystaskcreate2_struct  systaskcreate2_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Is called to create a task in _suspended_ mode. SysTaskResume must be called afterwards!
**Returns:**

*RESULT: Handle to the created task

.. _group___sys_task_itf_1ga4541832ccb9f92bb824d213284aafdc7:

typedef struct tagsystaskdestroy_struct  systaskdestroy_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Is called to destroy the given task.
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1ga8092bbf35ce489e3fb263488803fe809:

typedef struct tagsystaskend_struct  systaskend_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Is called from the task itself, that ends its execution.
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1ga5a12f919072b8d7870ca0d2042eaeefc:

typedef struct tagsystaskenter_struct  systaskenter_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function is called to mark entering the while loop.
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1gae43a0f4ea21e48cfa17729fffa57217d:

typedef struct tagsystaskexit_struct  systaskexit_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Tries to exit the given task gracefully. If the task doesn't answer in the specified timeout, then the task will be deleted hard!
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1ga633304e61eec9bb40643691501c8c578:

typedef struct tagsystaskgenerateexception_struct  systaskgenerateexception_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Call the corresponding exception handler of the task.
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1ga9ee14e4f81bbb5002e602f420fd04d91:

typedef struct tagsystaskgetcontext_struct  systaskgetcontext_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the current register context of the task. Task must be in suspended mode!
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1gaa51d5695075091f02db7ac800a16cad2:

typedef struct tagsystaskgetcurrent_struct  systaskgetcurrent_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns the handle of the current running task.
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1gaeae2d5ba40daeb25e14b9b8f6eaae4ae:

typedef struct tagsystaskgetcurrentoshandle_struct  systaskgetcurrentoshandle_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns the operating system handle of the current running task.
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1ga36da00da66e022e85e247527f1c6003d:

typedef struct tagsystaskgetinfo_struct  systaskgetinfo_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns the task info of the specified task.
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1gaaf6f9ad86a032982ccb51981cd65014e:

typedef struct tagsystaskgetinterval_struct  systaskgetinterval_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the actual interval of a cyclic task. If the specified task is no cyclic task, the function return an error.
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1gaaf6d75b3ccd6ac35209ffb5dd3d6b61b:

typedef struct tagsystaskgetname_struct  systaskgetname_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns the task name of the specified task.
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1gabdde52d8e8d3a41476b0ac9601065ef5:

typedef struct tagsystaskgetoshandle_struct  systaskgetoshandle_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to get the operating system specific handle.
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1gac6c64504a409581be4150ca2bf1c19d9:

typedef struct tagsystaskgetospriority_struct  systaskgetospriority_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns the operating system priority of the given task.
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1gaea837c1ddac5961f630652b4b2de6dca:

typedef struct tagsystaskgetpriority_struct  systaskgetpriority_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the runtime system priority of the given task.
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1gac42280e865793347ff2c3a868ec5388a:

typedef struct tagsystaskjoin_struct  systaskjoin_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Is used to wait for exit of the specified join task.
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1ga4d2f91e698b0b538852f02709dbaf25c:

typedef struct tagsystaskleave_struct  systaskleave_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function is called to mark leaving the while loop.
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1ga30a91132f57f670a2c5ec3ce65699583:

typedef struct tagsystaskresume_struct  systaskresume_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Is called to resume the given task, if the task was suspended.
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1ga728deea7295335ed6ac952c9add6945a:

typedef struct tagsystasksetexit_struct  systasksetexit_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Set the exit flag of the specified task. On the next cycle, the task will exit.
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1gae239ecb8a86ba38fa910a884d0f43de4:

typedef struct tagsystasksetinterval_struct  systasksetinterval_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Set the actual interval of a cyclic task. If the specified task is no cyclic task, the function return an error. This interface can be used to synchronize a task to another task or to events.

**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1ga3f25f5044ad5d52bed4c92edb09631c2:

typedef struct tagsystasksetpriority_struct  systasksetpriority_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Set the priority of the given task.

**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1gacd81113792962945a3580f71ba62b3c0:

typedef struct tagsystasksuspend_struct  systasksuspend_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Is called to suspend the given task.

**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1gabd6449b23641bfef9357a1a88c7a26cd:

typedef struct tagsystaskwaitinterval_struct  systaskwaitinterval_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Wait to the next interval to be activated, if OS supports cyclic task.

**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1gabab00c76212a0ea89b130615a0feebd0:

typedef struct tagsystaskwaitsleep_struct  systaskwaitsleep_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

S This function serves to pause the processing of a running task for a time interval specified in milliseconds. Processing will be continued after the time interval elapsed.

**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_task_itf_1ga0bb62b23c35846a188de097357fae229:

typedef struct tagsystaskwaitsleepus_struct  systaskwaitsleepus_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function serves to pause the processing of a running task for a time interval specified in microseconds. The function is not implemented on every platform.

**Returns:**

error code

.. _group___sys_task_itf_1ga4198381bd4b1479a27aa6585dddfb530:

typedef RTS_HANDLE( * PFSYSTASKOSGETOSHANDLEFROMTASKINFO)(SYS_TASK_INFO *pTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1ga2abf737cc224663ecbc8ed38692b02aa:

typedef ISysTask_C ISysTask
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function Documentation
----------------------

.. _group___sys_task_itf_1gaca997b2130e8e4fdfe66428653050d55:

void systaskautoreleaseonexit (systaskautoreleaseonexit_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1ga890107f30d9d3aac251a6303d95ed5e8:

void systaskcheckstack (systaskcheckstack_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1gab8e9d8edcade4832169edccd360c9622:

void systaskcreate (systaskcreate_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1gac37f6f06d87c624397a141ca7334810e:

void systaskcreate2 (systaskcreate2_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1ga928f9807ce4c9a670aea0d110123a72e:

void systaskdestroy (systaskdestroy_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1ga50f6434a04ea7e567efb9f95b945e0a7:

void systaskend (systaskend_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1ga27776fbeb4358667c94762df8a9f0f42:

void systaskenter (systaskenter_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1ga796a20b0551f659f9cae443820458541:

void systaskexit (systaskexit_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1gae208e286cb1b41f7cdbed34ce18fc78a:

void systaskgenerateexception (systaskgenerateexception_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1gaf078730d1e896f594ed2318b8677469e:

void systaskgetcontext (systaskgetcontext_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1gacb330b8e1132735446b8fa3804926005:

void systaskgetcurrent (systaskgetcurrent_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1gad51a8fbe1532676b1652f0ef3af2e8c1:

void systaskgetcurrentoshandle (systaskgetcurrentoshandle_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1ga4c3814d9f74aa60a293a9f54e46673d6:

void systaskgetinfo (systaskgetinfo_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1gacbd1d4a3ac15e57160a868b0c6be3b34:

void systaskgetinterval (systaskgetinterval_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1gab6fb43257a4c35957ac016cb14ddb43d:

void systaskgetname (systaskgetname_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1ga3ba7815c9a1ee473c87fcfff93ddfd08:

void systaskgetoshandle (systaskgetoshandle_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1gab2a2948d80dd8ec36db908a160f5d395:

void systaskgetospriority (systaskgetospriority_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1gaa055154a1252922110dd40168fc6e850:

void systaskgetpriority (systaskgetpriority_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1ga86d27078d2ddd30ce779a026b29841fe:

void systaskjoin (systaskjoin_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1ga459e3e1d4e4a11fe595745b6b616a316:

void systaskleave (systaskleave_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1gade600f7d23deb7a50eca1a7164fde0c6:

void systaskresume (systaskresume_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1ga20566a65524a3ba5b7b6653ec4b5e681:

void systasksetexit (systasksetexit_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1gacec5ccaad202823b8f522940b8a421f6:

void systasksetinterval (systasksetinterval_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1gae267a50e88b00b86ce6eb54fac433a44:

void systasksetpriority (systasksetpriority_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1ga9bad6536a599bf81c3ff563957b47836:

void systasksuspend (systasksuspend_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1ga49b984e3c2983df6fd721bd9f7f3788f:

void systaskwaitinterval (systaskwaitinterval_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1ga3526657dc9eb09cb1ce73377471b641d:

void systaskwaitsleep (systaskwaitsleep_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1gad0330474bb431bd59e59dcf505c3db18:

void systaskwaitsleepus (systaskwaitsleepus_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1gaf36e81ef1e02bf8052697f77861a1255:

RTS_RESULT SysTaskOSInit (INIT_STRUCT *pInit)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EXTERN LIB SECTION END

.. _group___sys_task_itf_1gaa0fe7987fd2eb8f20247f5c9733f00c0:

RTS_RESULT SysTaskOSHookFunction (RTS_UI32 ulHook, RTS_UINTPTR ulParam1, RTS_UINTPTR ulParam2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1ga216bd5b882e544ca32bf37ab4f523f34:

RTS_HANDLE SysTaskOSGetOSHandleFromTaskInfo (SYS_TASK_INFO *pTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1ga5275286e9b63eb63b986da0d5e81e6bb:

RTS_RESULT SysTaskRegisterGetOSHandleFromTaskInfo (PFSYSTASKOSGETOSHANDLEFROMTASKINFO pfSysTaskOSGetOSHandleFromTaskInfo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_task_itf_1ga964f49e68d21683330d1b5cb0c691386:

RTS_HANDLE SysTaskCreate (char *pszTaskName, PFSYS_TASK_FUNCTION pFunction, void *pParam, RTS_UI32 ulPriority, RTS_UI32 ulInterval, RTS_UI32 ulStackSize, PFSYS_TASK_EXCEPTIONHANDLER pExceptionHandler, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the first task

**Parameters**

+---------+---------+-----------------------+
| [out]   | pResult | Pointer to error code |
+---------+---------+-----------------------+

**Return values**

+--------------------+----------------------------------+
| ERR_OK             | Task found                       |
+--------------------+----------------------------------+
| ERR_NO_OBJECT      | No more task available           |
+--------------------+----------------------------------+
| ERR_PARAMETER      | Invalid parameters               |
+--------------------+----------------------------------+
| ERR_NOTINITIALIZED | The task list is not initialized |
+--------------------+----------------------------------+

**Returns:**

Handle to the task or RTS_INVALID_HANDLE if failed
Get the next task

**Parameters**

+---------+---------+-----------------------+
| [out]   | pResult | Pointer to error code |
+---------+---------+-----------------------+

**Return values**

+--------------------+----------------------------------+
| ERR_OK             | Task found                       |
+--------------------+----------------------------------+
| ERR_NO_OBJECT      | No more task available           |
+--------------------+----------------------------------+
| ERR_PARAMETER      | Invalid parameters               |
+--------------------+----------------------------------+
| ERR_NOTINITIALIZED | The task list is not initialized |
+--------------------+----------------------------------+

**Returns:**

Handle to the task or RTS_INVALID_HANDLE if failed
Is called to create a task in suspended mode. IMPLEMENTATION NOTE: The task must be created _suspended_! After creating a task, the task must be resumed manually to run the task. If the operating system does not support creating tasks in suspended mode, a task frame must be setup in the SysTaskOS implementation, where the first call does a :ref:`SysTaskSuspend() <group___cmp_schedule_dep___taskplaceholder_1ga34cc47bd7e486a3d21f257d6c06ff3fc>` on itself.

**Parameters**

+---------+-------------------+--------------------------------------------------------------------------------------------------+
| [in]    | pszTaskName       | The name of the task                                                                             |
+---------+-------------------+--------------------------------------------------------------------------------------------------+
| [in]    | pFunction         | Function which implements the task                                                               |
+---------+-------------------+--------------------------------------------------------------------------------------------------+
| [in]    | pParam            | Pointer to the argument which is passed on entry                                                 |
+---------+-------------------+--------------------------------------------------------------------------------------------------+
| [in]    | ulPriority        | Priority of the task                                                                             |
+---------+-------------------+--------------------------------------------------------------------------------------------------+
| [in]    | ulInterval        | Interval in microseconds                                                                         |
+---------+-------------------+--------------------------------------------------------------------------------------------------+
| [in]    | ulStackSize       | Stack size of task in bytes. 0=Default                                                           |
+---------+-------------------+--------------------------------------------------------------------------------------------------+
| [in]    | pExceptionHandler | Function pointer to exception handler that is called after an exception has occurred in the task |
+---------+-------------------+--------------------------------------------------------------------------------------------------+
| [out]   | pResult           | Pointer to error code                                                                            |
+---------+-------------------+--------------------------------------------------------------------------------------------------+

**Returns:**

Handle to the created task

.. _group___sys_task_itf_1ga810499522c5e9821c5790298ff52d1cb:

RTS_HANDLE SysTaskCreate2 (char *pszTaskName, char *pszTaskGroup, PFSYS_TASK_FUNCTION pFunction, void *pParam, RTS_UI32 ulPriority, RTS_UI32 ulInterval, RTS_UI32 ulStackSize, PFSYS_TASK_EXCEPTIONHANDLER pExceptionHandler, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This call extends SysTaskCreate (s.a.) with the name of the task group in order to add this task to the group.

**Parameters**

+---------+--------------+------------------------+
| [in]    | pszTaskGroup | Name of the task group |
+---------+--------------+------------------------+

.. _group___sys_task_itf_1ga2b66d971cefdb0812f714cd2447727ce:

RTS_RESULT SysTaskExit (RTS_HANDLE hTask, RTS_UI32 ulTimeoutMs)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Tries exit the specified task gracefully. If the task doesn't come to its end within the timeout, then the task will be killed hard! IMPLEMENTATION NOTE: Use TaskTryExit(RTS_HANDLE hTask, RTS_UI32 ulTimeoutMs) first to handle the standard way to release a task gracefully. If this function returned ERR_FAILED, the task doesn't comes to its end within the timeout. In this case, the task must be killed hard!

**Parameters**

+---------+-------------+-----------------------------------------------------------------------------------------------------------------------------+
| [in]    | hTask       | Handle to task                                                                                                              |
+---------+-------------+-----------------------------------------------------------------------------------------------------------------------------+
| [in]    | ulTimeoutMs | Timeout in milliseconds. Defined values RTS_TIMEOUT_INFINITE, RTS_TIMEOUT_DEFAULT and RTS_TIMEOUT_NO_WAIT can be used here. |
+---------+-------------+-----------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+-----------------------------------------------------------------------------------------------------------------------------+
| ERR_OK        | Task exit gracefully                                                                                                        |
+---------------+-----------------------------------------------------------------------------------------------------------------------------+
| ERR_PARAMETER | Handle to task is invalid                                                                                                   |
+---------------+-----------------------------------------------------------------------------------------------------------------------------+
| ERR_FAILED    | Task does not exit and could not be deleted hard! After this, only a reboot of the controller can heal this situation!      |
+---------------+-----------------------------------------------------------------------------------------------------------------------------+
| ERR_TIMEOUT   | Task does not exit within the timeout, but could be deleted hard. This is only a hint for the caller, but no serious error. |
+---------------+-----------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_task_itf_1gaec87aea210bbfb32385673ce54827095:

RTS_RESULT SysTaskSetExit (RTS_HANDLE hTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Set the exit flag of the specified task. On the next cycle, the task will exit.

**Parameters**

+---------+-------+----------------+
| [in]    | hTask | Handle to task |
+---------+-------+----------------+

**Returns:**

error code

.. _group___sys_task_itf_1ga1ac643f351df0d476ad7d62d241855be:

RTS_RESULT SysTaskAutoReleaseOnExit (RTS_HANDLE hTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The creator of a task can call this function to release the task object, if the task ends is execution. So the task is responsible itself to delete this object. NOTE: The task object must not be used from outside the task after calling this function!

**Parameters**

+---------+-------+----------------+
| [in]    | hTask | Handle to task |
+---------+-------+----------------+

**Returns:**

error code

.. _group___sys_task_itf_1ga2a983a3672fa81e2d097dea9c96af481:

RTS_RESULT SysTaskDestroy (RTS_HANDLE hTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Is called to destroy the given task.

**Parameters**

+---------+-------+----------------+
| [in]    | hTask | Handle to task |
+---------+-------+----------------+

**Returns:**

error code

.. _group___sys_task_itf_1ga62fd1dea620df347eab787499ff449eb:

RTS_RESULT SysTaskSuspend (RTS_HANDLE hTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Is called to suspend the given task.

**Parameters**

+---------+-------+----------------+
| [in]    | hTask | Handle to task |
+---------+-------+----------------+

**Returns:**

error code

.. _group___sys_task_itf_1gaaeb03111bb86bf6c1bff05bf7ca33068:

RTS_RESULT SysTaskResume (RTS_HANDLE hTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Is called to resume the given task.

**Parameters**

+---------+-------+----------------+
| [in]    | hTask | Handle to task |
+---------+-------+----------------+

**Returns:**

error code

.. _group___sys_task_itf_1ga6f6681092071f09c3de15110ffdb7ec1:

RTS_RESULT SysTaskEnd (RTS_HANDLE hTask, RTS_UINTPTR ulExitCode)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Is called from the task, that end its execution.

**Parameters**

+---------+------------+----------------+
| [in]    | hTask      | Handle to task |
+---------+------------+----------------+
| [in]    | ulExitCode | Exit code      |
+---------+------------+----------------+

**Returns:**

error code

.. _group___sys_task_itf_1ga2f3635e86d116bb6252ee60f0b83d301:

RTS_RESULT SysTaskWaitSleep (RTS_HANDLE hTask, RTS_UI32 ulMilliSeconds)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Prevents excecution of the current task and addresses the OS scheduler to resume excecution after the given time (ms). IMPLEMENTATION NOTE:

- Don't use hTask in the implementation! If you must have the task handle, get it with SysTaskGetCurrent!

**Parameters**

+---------+----------------+--------------------------------------------------------------------------------------------+
| [in]    | hTask          | Obsolete: Should be removed in future versions! Handle to task. Can be RTS_INVALID_HANDLE. |
+---------+----------------+--------------------------------------------------------------------------------------------+
| [in]    | ulMilliSeconds | Time in milliseconds to sleep                                                              |
+---------+----------------+--------------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___sys_task_itf_1gad78859ce286d621f51d61c4059bafd4d:

RTS_RESULT SysTaskWaitSleepUs (RTS_HANDLE hTask, RTS_SYSTIME *ptSleepUs)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Prevents excecution of the current task and addresses the OS scheduler to resume excecution after the given time (us). IMPLEMENTATION NOTE:

- Don't use hTask in the implementation! If you must have the task handle, get it with SysTaskGetCurrent!

**Parameters**

+---------+-----------+--------------------------------------------------------------------------------------------+
| [in]    | hTask     | Obsolete: Should be removed in future versions! Handle to task. Can be RTS_INVALID_HANDLE. |
+---------+-----------+--------------------------------------------------------------------------------------------+
| [in]    | ptSleepUs | Time in microseconds to sleep                                                              |
+---------+-----------+--------------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___sys_task_itf_1gac6616866fefd142f6db517dbd178eead:

RTS_RESULT SysTaskWaitInterval (RTS_HANDLE hTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Wait to the next interval to be activated, if OS supports cyclic task.

**Parameters**

+---------+-------+----------------+
| [in]    | hTask | Handle to task |
+---------+-------+----------------+

**Returns:**

error code

.. _group___sys_task_itf_1gad6bea13cd175ee0cff795704827bba00:

RTS_RESULT SysTaskJoin (RTS_HANDLE hTaskToJoin, RTS_UI32 ulTimeoutMs)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Is used to wait for exit of the specified join task.

**Parameters**

+---------+-------------+-----------------------------------------------+
| [in]    | hTaskToJoin | Task to join                                  |
+---------+-------------+-----------------------------------------------+
| [in]    | ulTimeoutMs | Timeout in milliseconds to wait for join task |
+---------+-------------+-----------------------------------------------+

**Returns:**

error code

.. _group___sys_task_itf_1ga4bf4edfb681b2ec5363fcf38b27b1c4e:

RTS_RESULT SysTaskGetCurrent (RTS_HANDLE *phTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns the task handle of the current running task.

**Parameters**

+---------+--------+------------------------+
| [out]   | phTask | Pointer to task handle |
+---------+--------+------------------------+

**Returns:**

error code

.. _group___sys_task_itf_1ga1b3fb16f4617fc8bb60648015c037c7e:

RTS_RESULT SysTaskGetCurrentOSHandle (RTS_HANDLE *puiTaskOSHandle)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns the operating system handle of the current running task.

**Parameters**

+---------+-----------------+-----------------------------------------+
| [out]   | puiTaskOSHandle | Pointer to operating system task handle |
+---------+-----------------+-----------------------------------------+

**Returns:**

error code

.. _group___sys_task_itf_1ga5f2932a1b0e4a2acb36c60a64164c268:

RTS_RESULT SysTaskSetPriority (RTS_HANDLE hTask, RTS_UI32 ulPriority)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Set the priority of the given task.

**Parameters**

+---------+------------+------------------------------------------------------------------------------------------------+
| [in]    | hTask      | Handle to task                                                                                 |
+---------+------------+------------------------------------------------------------------------------------------------+
| [in]    | ulPriority | Task priority to set. Is the virtual priority between 0..255 and will be mapped to OS priority |
+---------+------------+------------------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___sys_task_itf_1ga1d2ce1ade37c9785566aa15676a1033a:

RTS_RESULT SysTaskGetPriority (RTS_HANDLE hTask, RTS_UI32 *pulPriority)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the runtime system priority of the given task.

**Parameters**

+---------+-------------+-------------------------+
| [in]    | hTask       | Handle to task          |
+---------+-------------+-------------------------+
| [out]   | pulPriority | Pointer to get priority |
+---------+-------------+-------------------------+

**Returns:**

error code

.. _group___sys_task_itf_1ga638d4e6cb0c942bb9962960052a4d622:

RTS_RESULT SysTaskGetOSPriority (RTS_HANDLE hTask, RTS_UI32 *pulOSPriority)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns the operating system priority of the given task.

**Parameters**

+---------+---------------+------------------------------------------+
| [in]    | hTask         | Handle to task                           |
+---------+---------------+------------------------------------------+
| [out]   | pulOSPriority | Pointer to get operating system priority |
+---------+---------------+------------------------------------------+

**Returns:**

error code

.. _group___sys_task_itf_1ga51aa7d470913f992cf02bef5bd7890c9:

RTS_RESULT SysTaskGetInfo (RTS_HANDLE hTask, SYS_TASK_INFO **ppInfo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns the task info of the specified task.

**Parameters**

+---------+--------+--------------------------------------------+
| [in]    | hTask  | Handle to task                             |
+---------+--------+--------------------------------------------+
| [out]   | ppInfo | Pointer pointer to get task info structure |
+---------+--------+--------------------------------------------+

**Returns:**

error code

.. _group___sys_task_itf_1gabace98ead3c3841789aa6a630edb823b:

char* SysTaskGetName (RTS_HANDLE hTask, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns the task name of the specified task.

**Parameters**

+---------+---------+-----------------------+
| [in]    | hTask   | Handle to task        |
+---------+---------+-----------------------+
| [out]   | pResult | Pointer to error code |
+---------+---------+-----------------------+

**Return values**

+---------------+---------------------+
| ERR_OK        | Task name found     |
+---------------+---------------------+
| ERR_PARAMETER | Invalid parameters  |
+---------------+---------------------+
| ERR_FAILED    | Task name not found |
+---------------+---------------------+

**Returns:**

pointer to task name

.. _group___sys_task_itf_1ga3e38459b4d30a310ebf5e13bc91a9cb5:

RTS_RESULT SysTaskEnter (RTS_HANDLE hTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function is called to mark entering the while loop.

**Parameters**

+---------+-------+----------------+
| [in]    | hTask | Handle to task |
+---------+-------+----------------+

**Returns:**

error code

.. _group___sys_task_itf_1gab2100b03694291cefc624ebd7013b914:

RTS_RESULT SysTaskLeave (RTS_HANDLE hTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function is called to mark leaving the while loop.

**Parameters**

+---------+-------+----------------+
| [in]    | hTask | Handle to task |
+---------+-------+----------------+

**Returns:**

error code

.. _group___sys_task_itf_1gaf02ab8edba2e75d7a71b085a8fd7414f:

RTS_RESULT SysTaskGetContext (RTS_HANDLE hTask, RegContext *pContext)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the current register context of the task. Task must be in suspended mode!

**Parameters**

+---------+----------+--------------------+
| [in]    | hTask    | Handle to task     |
+---------+----------+--------------------+
| [out]   | pContext | Pointer to context |
+---------+----------+--------------------+

**Returns:**

error code

.. _group___sys_task_itf_1gaf83db6ecd6262b7ecfb0d52302c252e0:

RTS_RESULT SysTaskGenerateException (RTS_HANDLE uiTaskOSHandle, RTS_UI32 ulException, RegContext Context)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Call the corresponding exception handler of the task.

**Parameters**

+---------+-------------+------------------------------------------------------------------+
| [in]    | hTask       | Handle to task                                                   |
+---------+-------------+------------------------------------------------------------------+
| [in]    | ulException | Rts standard exception                                           |
+---------+-------------+------------------------------------------------------------------+
| [in]    | Context     | Context to detect the code location where the exception occurred |
+---------+-------------+------------------------------------------------------------------+

**Returns:**

error code

.. _group___sys_task_itf_1gac6624b70717fe6009900d3dbde865200:

RTS_RESULT SysTaskCheckStack (RTS_HANDLE hTask, RTS_UI32 *pulMaxDepth)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to investigate the stack task.

**Parameters**

+---------+-------------+---------------------+
| [in]    | hTask       | Handle to task      |
+---------+-------------+---------------------+
| [out]   | pulMaxDepth | Maximum stack depth |
+---------+-------------+---------------------+

**Returns:**

error code

.. _group___sys_task_itf_1gaaac494b00a673dd03535ebd95652ea42:

RTS_HANDLE SysTaskGetOSHandle (RTS_HANDLE hTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to get the operating system specific handle.

**Parameters**

+---------+-------+----------------+
| [in]    | hTask | Handle to task |
+---------+-------+----------------+

**Returns:**

error code

.. _group___sys_task_itf_1ga0801e0abaab3b86bbfb16f20d0f31adb:

SYS_TASK_INFO* SysTaskGetByOSHandle (RTS_HANDLE uiTaskOSHandle)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

OBSOLETE FUNCTION: Use SysTaskGetHandleByOSHandle() and :ref:`SysTaskGetInfo() <group___cmp_schedule_dep___taskplaceholder_1ga80b7f8320c67cca2cca2491d5a553fee>` instead! Function to get the task handle specified by the operating system task handle.

**Parameters**

+---------+----------------+---------------------------------------------+
| [in]    | uiTaskOSHandle | Opertating system task handleHandle to task |
+---------+----------------+---------------------------------------------+

**Returns:**

Pointer to SYS_TASK_INFO

.. _group___sys_task_itf_1ga0e3056a0ed732c59cc961b4419090ea4:

RTS_UI32 SysTaskGetConfiguredPriority (RTS_UI32 ulPriority, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to get the configured priority out of the settings. See category "Settings" | "Mapping task priorities" for details.

**Parameters**

+---------+------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ulPriority | Task priority                                                                                                                 |
+---------+------------+-------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult    | Pointer to error code. ERR_OK: Priority is mapped ERR_FAILED: Original priority is returned, because no mapping is configured |
+---------+------------+-------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Configured priority

.. _group___sys_task_itf_1gab0ddef665955b2133c6486846808a86e:

RTS_UI32 SysTaskGetConfiguredPriority2 (RTS_HANDLE hTask, RTS_UI32 ulPriority, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to get the configured priority of a specified task out of the settings. See category "Settings" | "Mapping task priorities" for details.

**Parameters**

+---------+------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hTask      | Handle to the task                                                                                                            |
+---------+------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ulPriority | Task priority                                                                                                                 |
+---------+------------+-------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult    | Pointer to error code. ERR_OK: Priority is mapped ERR_FAILED: Original priority is returned, because no mapping is configured |
+---------+------------+-------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Configured priority

.. _group___sys_task_itf_1gae33ba87e92e7f9da4e0c08612c3470a7:

RTS_RESULT SysTaskGetInterval (RTS_HANDLE hTask, RTS_UI32 *pulInterval)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the actual interval of a cyclic task. If the specified task is no cyclic task, the function return an error.

**Parameters**

+---------+-------------+------------------------------------------+
| [in]    | hTask       | Handle to the task                       |
+---------+-------------+------------------------------------------+
| [out]   | pulInterval | Pointer to the interval in microseconds! |
+---------+-------------+------------------------------------------+

**Returns:**

error code

.. _group___sys_task_itf_1ga2c12856462591ad81cbfaaf615a18252:

RTS_RESULT SysTaskSetInterval (RTS_HANDLE hTask, RTS_UI32 ulInterval)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Set the actual interval of a cyclic task. If the specified task is no cyclic task, the function return an error. This interface can be used to synchronize a task to another task or to events.

**Parameters**

+---------+------------+-------------------------------+
| [in]    | hTask      | Handle to the task            |
+---------+------------+-------------------------------+
| [in]    | ulInterval | New interval in microseconds! |
+---------+------------+-------------------------------+

**Returns:**

error code

.. _group___sys_task_itf_1gaf203fa3d47acde5002ed17a1b9f92b2a:

void systaskgettaskhandle (systaskgettaskhandle_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. last line of group.rst template
.. last line of composition.rst template


