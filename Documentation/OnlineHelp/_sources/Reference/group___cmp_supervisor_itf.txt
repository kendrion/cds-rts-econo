.. first line of composition.rst template

.. first line of group.rst template

.. _group___cmp_supervisor_itf:

================
CmpSupervisorItf
================

Interface of CmpSupervisor. :ref:`More... <group___cmp_supervisor_itf-details>`

Modules
-------

- :ref:`Event parameter <group___cmp_supervisor_itf___eventparameter>`

- :ref:`Events <group___cmp_supervisor_itf___events>`

- :ref:`OperationID <group___cmp_supervisor_itf___operation_i_d>`

- :ref:`Settings <group___cmp_supervisor_itf___settings>`

- :ref:`Supervisor flags <group___cmp_supervisor_itf___supervisorflags>`

Data Structures
---------------

- struct :ref:`tagSupervisorInstance <structtag_supervisor_instance>`

- struct :ref:`tagSupervisorEntry <structtag_supervisor_entry>`

- struct :ref:`tagSupervisorState <structtag_supervisor_state>`

- struct :ref:`tagsupervisoroperationalive_struct <structtagsupervisoroperationalive__struct>`

- struct :ref:`tagsupervisoroperationdead_struct <structtagsupervisoroperationdead__struct>`

- struct :ref:`tagsupervisoroperationdisable_struct <structtagsupervisoroperationdisable__struct>`

- struct :ref:`tagsupervisoroperationenable_struct <structtagsupervisoroperationenable__struct>`

- struct :ref:`tagsupervisoroperationgetentry_struct <structtagsupervisoroperationgetentry__struct>`

- struct :ref:`tagsupervisoroperationgetfirst_struct <structtagsupervisoroperationgetfirst__struct>`

- struct :ref:`tagsupervisoroperationgetnext_struct <structtagsupervisoroperationgetnext__struct>`

- struct :ref:`tagsupervisoroperationgetstate_struct <structtagsupervisoroperationgetstate__struct>`

- struct :ref:`tagsupervisoroperationgetstate2_struct <structtagsupervisoroperationgetstate2__struct>`

- struct :ref:`tagsupervisoroperationregister_struct <structtagsupervisoroperationregister__struct>`

- struct :ref:`tagsupervisoroperationsettimeout_struct <structtagsupervisoroperationsettimeout__struct>`

- struct :ref:`tagsupervisoroperationunregister_struct <structtagsupervisoroperationunregister__struct>`

- struct :ref:`ICmpSupervisor_C <struct_i_cmp_supervisor___c>`

Macros
------

- #define :ref:`ITF_CmpSupervisor <group___cmp_supervisor_itf_1ga5ef77c4264ec564be325cf64b1c22647>`

- #define :ref:`EXTITF_CmpSupervisor <group___cmp_supervisor_itf_1ga0430ec3a9357ebefd47ee79248d82641>`

Typedefs
--------

- typedef struct :ref:`tagSupervisorInstance <structtag_supervisor_instance>` :ref:`SupervisorInstance <group___cmp_supervisor_itf_1gad27ca62deb757661318372b7a906b11a>`

- typedef struct :ref:`tagSupervisorEntry <structtag_supervisor_entry>` :ref:`SupervisorEntry <group___cmp_supervisor_itf_1gac2f1c534073a2587fbc7a26c27aef946>`

- typedef struct :ref:`tagSupervisorState <structtag_supervisor_state>` :ref:`SupervisorState <group___cmp_supervisor_itf_1ga8287bdd1cf976595e1a9d736d2d67edf>`

- typedef struct :ref:`tagsupervisoroperationalive_struct <structtagsupervisoroperationalive__struct>` :ref:`supervisoroperationalive_struct <group___cmp_supervisor_itf_1ga846325ed24f11b162facafe30c6fbe24>`

- typedef struct :ref:`tagsupervisoroperationdead_struct <structtagsupervisoroperationdead__struct>` :ref:`supervisoroperationdead_struct <group___cmp_supervisor_itf_1ga7a84350ddcfebdaf41ddc332608c75b9>`

- typedef struct :ref:`tagsupervisoroperationdisable_struct <structtagsupervisoroperationdisable__struct>` :ref:`supervisoroperationdisable_struct <group___cmp_supervisor_itf_1gae38d1edbf53969313dfb891430e08700>`

- typedef struct :ref:`tagsupervisoroperationenable_struct <structtagsupervisoroperationenable__struct>` :ref:`supervisoroperationenable_struct <group___cmp_supervisor_itf_1ga26ed6fa798d390d5d44cff6b213fe066>`

- typedef struct :ref:`tagsupervisoroperationgetentry_struct <structtagsupervisoroperationgetentry__struct>` :ref:`supervisoroperationgetentry_struct <group___cmp_supervisor_itf_1gaa1d539eba0d7e724c079cf07a0209d25>`

- typedef struct :ref:`tagsupervisoroperationgetfirst_struct <structtagsupervisoroperationgetfirst__struct>` :ref:`supervisoroperationgetfirst_struct <group___cmp_supervisor_itf_1ga9dfc1be586f832b4fcbbd36523c065d3>`

- typedef struct :ref:`tagsupervisoroperationgetnext_struct <structtagsupervisoroperationgetnext__struct>` :ref:`supervisoroperationgetnext_struct <group___cmp_supervisor_itf_1ga51e0dca475cf46c8ba5f68e5780ed0eb>`

- typedef struct :ref:`tagsupervisoroperationgetstate_struct <structtagsupervisoroperationgetstate__struct>` :ref:`supervisoroperationgetstate_struct <group___cmp_supervisor_itf_1ga8f0e2a222bbbf233fb746032a117cb03>`

- typedef struct :ref:`tagsupervisoroperationgetstate2_struct <structtagsupervisoroperationgetstate2__struct>` :ref:`supervisoroperationgetstate2_struct <group___cmp_supervisor_itf_1ga9968531ccfc5eff6e58ee37c0cf039c7>`

- typedef struct :ref:`tagsupervisoroperationregister_struct <structtagsupervisoroperationregister__struct>` :ref:`supervisoroperationregister_struct <group___cmp_supervisor_itf_1ga9b1de9a499b8d381eb8072d6af47034d>`

- typedef struct :ref:`tagsupervisoroperationsettimeout_struct <structtagsupervisoroperationsettimeout__struct>` :ref:`supervisoroperationsettimeout_struct <group___cmp_supervisor_itf_1ga630622d790bf644a619f30a68248d17d>`

- typedef struct :ref:`tagsupervisoroperationunregister_struct <structtagsupervisoroperationunregister__struct>` :ref:`supervisoroperationunregister_struct <group___cmp_supervisor_itf_1gae489b5f9a98507897d96ae37852926ba>`

- typedef :ref:`ICmpSupervisor_C <struct_i_cmp_supervisor___c>` :ref:`ICmpSupervisor <group___cmp_supervisor_itf_1ga31438eae3c22cefc55b017a59e1ffe69>`

Functions
---------

- void :ref:`supervisoroperationalive <group___cmp_supervisor_itf_1gac0a7a129a5c987b831ec797872246339>` (:ref:`supervisoroperationalive_struct <group___cmp_supervisor_itf_1ga846325ed24f11b162facafe30c6fbe24>` * p)

- void :ref:`supervisoroperationdead <group___cmp_supervisor_itf_1ga8dcb0fa7062fe9595daaf61013c25ab3>` (:ref:`supervisoroperationdead_struct <group___cmp_supervisor_itf_1ga7a84350ddcfebdaf41ddc332608c75b9>` * p)

- void :ref:`supervisoroperationdisable <group___cmp_supervisor_itf_1gac55e43b69b3a230991035f10c402d563>` (:ref:`supervisoroperationdisable_struct <group___cmp_supervisor_itf_1gae38d1edbf53969313dfb891430e08700>` * p)

- void :ref:`supervisoroperationenable <group___cmp_supervisor_itf_1gae800bf94ffde820c2ea32930766194b8>` (:ref:`supervisoroperationenable_struct <group___cmp_supervisor_itf_1ga26ed6fa798d390d5d44cff6b213fe066>` * p)

- void :ref:`supervisoroperationgetentry <group___cmp_supervisor_itf_1ga6115bad74184a04fb61acd15f9d006db>` (:ref:`supervisoroperationgetentry_struct <group___cmp_supervisor_itf_1gaa1d539eba0d7e724c079cf07a0209d25>` * p)

- void :ref:`supervisoroperationgetfirst <group___cmp_supervisor_itf_1ga26996a95c88f4dd74aede4aaadbe7245>` (:ref:`supervisoroperationgetfirst_struct <group___cmp_supervisor_itf_1ga9dfc1be586f832b4fcbbd36523c065d3>` * p)

- void :ref:`supervisoroperationgetnext <group___cmp_supervisor_itf_1gab44bbf7eace5c757d53ddc0dbbe7104b>` (:ref:`supervisoroperationgetnext_struct <group___cmp_supervisor_itf_1ga51e0dca475cf46c8ba5f68e5780ed0eb>` * p)

- void :ref:`supervisoroperationgetstate <group___cmp_supervisor_itf_1ga89c18ac1b9a24f1a03f23dcfe1b99e57>` (:ref:`supervisoroperationgetstate_struct <group___cmp_supervisor_itf_1ga8f0e2a222bbbf233fb746032a117cb03>` * p)

- void :ref:`supervisoroperationgetstate2 <group___cmp_supervisor_itf_1ga8d4dcc422dea19a988f7c58d4d0945d6>` (:ref:`supervisoroperationgetstate2_struct <group___cmp_supervisor_itf_1ga9968531ccfc5eff6e58ee37c0cf039c7>` * p)

- void :ref:`supervisoroperationregister <group___cmp_supervisor_itf_1gadfdc987827d52f9ab2a80b6d4d618e45>` (:ref:`supervisoroperationregister_struct <group___cmp_supervisor_itf_1ga9b1de9a499b8d381eb8072d6af47034d>` * p)

- void :ref:`supervisoroperationsettimeout <group___cmp_supervisor_itf_1ga68be5d31b40e8056a7fef4870f179d97>` (:ref:`supervisoroperationsettimeout_struct <group___cmp_supervisor_itf_1ga630622d790bf644a619f30a68248d17d>` * p)

- void :ref:`supervisoroperationunregister <group___cmp_supervisor_itf_1gaaf431f60a1a7abb8c6f828d7931abfbb>` (:ref:`supervisoroperationunregister_struct <group___cmp_supervisor_itf_1gae489b5f9a98507897d96ae37852926ba>` * p)

- RTS_HANDLE :ref:`SupervisorOperationRegister <group___cmp_supervisor_itf_1gacaad16db3866a6c3138b34f0cff9f994>` (RTS_UI32 ui32OperationID, CMPID cmpId, char * pszOperationDescription, :ref:`RTS_SYSTIME <group___sys_time_itf_1ga10c9d9a4c57129d83432fb02923858bf>`  stTimeoutUs, RTS_RESULT * pResult)

- RTS_RESULT :ref:`SupervisorOperationUnregister <group___cmp_supervisor_itf_1ga9e06546fdd64023fb60462bf5bdc44b7>` (RTS_HANDLE hOperation)

- :ref:`SupervisorState <group___cmp_supervisor_itf_1ga8287bdd1cf976595e1a9d736d2d67edf>` * :ref:`SupervisorOperationGetState <group___cmp_supervisor_itf_1gacdec02d481b824d9717baa21365c9f3c>` (RTS_RESULT * pResult)

- RTS_RESULT :ref:`SupervisorOperationGetState2 <group___cmp_supervisor_itf_1gae5bbfb7a4b6b5a024a3e5d6de4af17b7>` (:ref:`SupervisorState <group___cmp_supervisor_itf_1ga8287bdd1cf976595e1a9d736d2d67edf>` * pSupervisorState)

- RTS_HANDLE :ref:`SupervisorOperationGetFirst <group___cmp_supervisor_itf_1ga3cbf7aa4cb85263deb0877fa2bafc503>` (RTS_RESULT * pResult)

- RTS_HANDLE :ref:`SupervisorOperationGetNext <group___cmp_supervisor_itf_1gaaed285cec0f28c3923c1c082a033bf7b>` (RTS_HANDLE hPrevOperation, RTS_RESULT * pResult)

- :ref:`SupervisorEntry <group___cmp_supervisor_itf_1gac2f1c534073a2587fbc7a26c27aef946>` * :ref:`SupervisorOperationGetEntry <group___cmp_supervisor_itf_1gabb75661f7eecd9418d7e81cdf8de2af6>` (RTS_HANDLE hOperation, RTS_RESULT * pResult)

- RTS_RESULT :ref:`SupervisorOperationEnable <group___cmp_supervisor_itf_1ga6f99a56ecdd03f4d2829d7a5ec784496>` (RTS_HANDLE hOperation)

- RTS_RESULT :ref:`SupervisorOperationDisable <group___cmp_supervisor_itf_1gacd0be713c20c1ee14e63fd69c082fbfc>` (RTS_HANDLE hOperation)

- RTS_RESULT :ref:`SupervisorOperationAlive <group___cmp_supervisor_itf_1gaf925c810eccab73369cb322d07b6837c>` (RTS_HANDLE hOperation, :ref:`RTS_SYSTIME <group___sys_time_itf_1ga10c9d9a4c57129d83432fb02923858bf>` * pstTimestampUs)

- RTS_RESULT :ref:`SupervisorOperationDead <group___cmp_supervisor_itf_1gaba4768133a5a019cf1dc650cb8fcced4>` (RTS_HANDLE hOperation)

- RTS_RESULT :ref:`SupervisorOperationSetTimeout <group___cmp_supervisor_itf_1gae23842f61fa651d1d954652952667cce>` (RTS_HANDLE hOperation, :ref:`RTS_SYSTIME <group___sys_time_itf_1ga10c9d9a4c57129d83432fb02923858bf>`  stTimeoutUs)

- RTS_HANDLE :ref:`SupervisorOperationGet <group___cmp_supervisor_itf_1gaa11f7969bc152187cb3554397dd5926a>` (RTS_UI32 ui32OperationID, RTS_UI32 cmpId, RTS_RESULT * pResult)

.. _group___cmp_supervisor_itf-details:

Detailed Description
--------------------

Interface of CmpSupervisor.

This interface provides a generic and easy to handle supervisor for all vital operations in the runtime system. This interface can be used for example to retrigger a hardware watchdog to detect a failure in such a vital operation (in case of a software error).

Interface can be used to:

- Register/unregister a vital operation for supervision

- Retrigger a vital operation to be alive

- There is an explicit dead signal for desperate situations such as memory overwrite, etc. For these operations stTimeoutUs should be set to 0 to disable time check

- Interfaces to read the global state of all vital operations and to interate over all vital operations

Use case: Use supervisor to support a hardware watchdog: A cyclic task checks :ref:`SupervisorOperationGetState2() <group___cmp_supervisor_itf_1gae5bbfb7a4b6b5a024a3e5d6de4af17b7>` periodically and retriggers the hardware watchdog. In case the nNumOfFailedOperations is greater than 0 the cyclic task can

- just prevent the retriggering of the hardware watchdog so that it expires or

- check the causing operation and in the case it is not that important, give a second chance by reactivating its supervision. This is done by iterating through all operations by :ref:`SupervisorOperationGetFirst() <group___cmp_supervisor_itf_1ga3cbf7aa4cb85263deb0877fa2bafc503>` , :ref:`SupervisorOperationGetNext() <group___cmp_supervisor_itf_1gaaed285cec0f28c3923c1c082a033bf7b>` , and :ref:`SupervisorOperationGetEntry() <group___cmp_supervisor_itf_1gabb75661f7eecd9418d7e81cdf8de2af6>` to find the causing operation and then by calling :ref:`SupervisorOperationDisable() <group___cmp_supervisor_itf_1gacd0be713c20c1ee14e63fd69c082fbfc>` followed by :ref:`SupervisorOperationEnable() <group___cmp_supervisor_itf_1ga6f99a56ecdd03f4d2829d7a5ec784496>` to reactivate the supervision of the operation.

**Copyright:**

Copyright (c) 2017-2018 CODESYS GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved.

Macro Definition Documentation
------------------------------
.. _group___cmp_supervisor_itf_1ga5ef77c4264ec564be325cf64b1c22647:

#define ITF_CmpSupervisor
^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_supervisor_itf_1ga0430ec3a9357ebefd47ee79248d82641:

#define EXTITF_CmpSupervisor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___cmp_supervisor_itf_1gad27ca62deb757661318372b7a906b11a:

typedef struct tagSupervisorInstance  SupervisorInstance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EXTERN LIB SECTION BEGIN

SupervisorInstance

.. _group___cmp_supervisor_itf_1gac2f1c534073a2587fbc7a26c27aef946:

typedef struct tagSupervisorEntry  SupervisorEntry
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Single operation/function that is supervised.

.. _group___cmp_supervisor_itf_1ga8287bdd1cf976595e1a9d736d2d67edf:

typedef struct tagSupervisorState  SupervisorState
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

SupervisorState

.. _group___cmp_supervisor_itf_1ga846325ed24f11b162facafe30c6fbe24:

typedef struct tagsupervisoroperationalive_struct  supervisoroperationalive_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Reassures the alive state of the operation with the given timestamp in order to retrigger the hardware watchdog

:return: Error code

Error code: + ERR_OK: Alive state was successfully reassured + ERR_NOTINITIALIZED: The operation memory is not initialized + ERR_INVALID_HANDLE: The handle to the operation is invalid + ERR_PARAMETER: The handle to the operation is invalid + ERR_NO_CHANGE: Supervision is disabled for the operation + ERR_NOT_SUPPORTED">SysTimeGetUs is not supported

.. _group___cmp_supervisor_itf_1ga7a84350ddcfebdaf41ddc332608c75b9:

typedef struct tagsupervisoroperationdead_struct  supervisoroperationdead_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Signals a desperate situation of an operation in order to prevent the retriggering of the hardware watchdog. After this call, the operation is marked immediate as failed!

:return: Error code

Error code: + ERR_OK: Dead state was successfully signalled + ERR_NOTINITIALIZED: The operation memory is not initialized + ERR_INVALID_HANDLE: The handle to the operation is invalid + ERR_PARAMETER: The handle to the operation is invalid + ERR_NO_CHANGE: Supervision is disabled for the operation

.. _group___cmp_supervisor_itf_1gae38d1edbf53969313dfb891430e08700:

typedef struct tagsupervisoroperationdisable_struct  supervisoroperationdisable_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Disables supervision for this operation. This operation will never be supervised, until the next :ref:`SupervisorOperationEnable() <group___cmp_supervisor_itf_1ga6f99a56ecdd03f4d2829d7a5ec784496>` call!

:return: Error code

Error code: + ERR_OK: Supervision was successfully disabled + ERR_NOTINITIALIZED: The operation memory is not initialized + ERR_INVALID_HANDLE: The handle to the operation is invalid + ERR_PARAMETER: The handle to the operation is invalid + ERR_NO_CHANGE: The operation is already disabled

.. _group___cmp_supervisor_itf_1ga26ed6fa798d390d5d44cff6b213fe066:

typedef struct tagsupervisoroperationenable_struct  supervisoroperationenable_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Enables supervision for this operation: Sets timestamp to current time and alive flag

:return: Error code

Error code: + ERR_OK: Supervision was successfully enabled + ERR_NOTINITIALIZED: The operation memory is not initialized + ERR_INVALID_HANDLE: The handle to the operation is invalid + ERR_PARAMETER: The handle to the operation is invalid + ERR_NO_CHANGE: The operation is already supervised + ERR_NOT_SUPPORTED">SysTimeGetUs is not supported

.. _group___cmp_supervisor_itf_1gaa1d539eba0d7e724c079cf07a0209d25:

typedef struct tagsupervisoroperationgetentry_struct  supervisoroperationgetentry_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns the SupervisorEntry of a given operation handle

Error code: + ERR_OK: The SupervisorEntry was successfully retrieved + ERR_INVALID_HANDLE: The handle to the operation is invalid + ERR_PARAMETER: The handle to the operation is invalid

:return: Pointer to SupervisorEntry of the given operation handle or NULL in case of an error

.. _group___cmp_supervisor_itf_1ga9dfc1be586f832b4fcbbd36523c065d3:

typedef struct tagsupervisoroperationgetfirst_struct  supervisoroperationgetfirst_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Iteration interface to get the first registered operation

Error code: + ERR_OK: The first operation was successfully retrieved + ERR_NOTINITIALIZED: The operation memory is not initialized + ERR_NO_OBJECT: There are no registered operations

:return: Handle to the first operation or RTS_INVALID_HANDLE in case of an error

.. _group___cmp_supervisor_itf_1ga51e0dca475cf46c8ba5f68e5780ed0eb:

typedef struct tagsupervisoroperationgetnext_struct  supervisoroperationgetnext_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Iteration interface to get the next registered operation. Must be started with :ref:`SupervisorOperationGetFirst() <group___cmp_supervisor_itf_1ga3cbf7aa4cb85263deb0877fa2bafc503>`

Error code: + ERR_OK: The next operation was successfully retrieved + ERR_NOTINITIALIZED: The operation memory is not initialized + ERR_END_OF_OBJECT: There are no registered operations left

:return: Handle to the first operation or RTS_INVALID_HANDLE in case of an error

.. _group___cmp_supervisor_itf_1ga8f0e2a222bbbf233fb746032a117cb03:

typedef struct tagsupervisoroperationgetstate_struct  supervisoroperationgetstate_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Deprecated, use SupervisorOperationGetState2 instead.

Returns the global supervisor state for all supervised operations! Here you can check with one call how many operations failed.

Error code: + ERR_OK: The SupervisorState was successfully retrieved + ERR_NOTINITIALIZED: The operation memory is not initialized + ERR_NOT_SUPPORTED">SysTimeGetUs is not supported

:return: A pointer to the SupervisorState or NULL in case of an error

.. _group___cmp_supervisor_itf_1ga9968531ccfc5eff6e58ee37c0cf039c7:

typedef struct tagsupervisoroperationgetstate2_struct  supervisoroperationgetstate2_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Retrieves the supervisor state for all supervised operations! Here you can check with one call how many operations failed.

:return: Error code

Error code: + ERR_OK: The SupervisorState was successfully retrieved + ERR_NOTINITIALIZED: The operation memory is not initialized + ERR_PARAMETER: The pointer to the SupervisorState is invalid + ERR_NOT_SUPPORTED">SysTimeGetUs is not supported

.. _group___cmp_supervisor_itf_1ga9b1de9a499b8d381eb8072d6af47034d:

typedef struct tagsupervisoroperationregister_struct  supervisoroperationregister_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Register an operation for supervision. The operation will be regtistered disabled! To activate the supervision you have to call a subsequent :ref:`SupervisorOperationEnable() <group___cmp_supervisor_itf_1ga6f99a56ecdd03f4d2829d7a5ec784496>` !

Error code: + ERR_OK: Operation was successfully registered + ERR_FAILED: Register operation failed + ERR_NOTINITIALIZED: The operation memory is not initialized + ERR_DUPLICATE: The combination of ui32OperationID and cmpId is already registered + ERR_NOMEMORY: There is no more memory left to register the operation

:return: Handle to operation for all other management functions or RTS_INVALID_HANDLE in case of an error

.. _group___cmp_supervisor_itf_1ga630622d790bf644a619f30a68248d17d:

typedef struct tagsupervisoroperationsettimeout_struct  supervisoroperationsettimeout_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Sets a (new) timeout for the given operation Supervision must be disabled to modify the timeout and should be enabled afterwards.

:return: Error code

Error code: + ERR_OK: The timeout was successfully set + ERR_NOTINITIALIZED: The operation memory is not initialized + ERR_INVALID_HANDLE: The handle to the operation is invalid + ERR_PARAMETER: The handle to the operation is invalid + ERR_NO_CHANGE: The timeout was not modified because supervision is enabled!

.. _group___cmp_supervisor_itf_1gae489b5f9a98507897d96ae37852926ba:

typedef struct tagsupervisoroperationunregister_struct  supervisoroperationunregister_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Unregister a previously registered operation from supervision

:return: Error code

Error code: + ERR_OK: Operation was successfully unregistered + ERR_NOTINITIALIZED: The operation memory is not initialized + ERR_INVALID_HANDLE: The handle to the operation is invalid + ERR_PARAMETER: The handle to the operation is invalid

.. _group___cmp_supervisor_itf_1ga31438eae3c22cefc55b017a59e1ffe69:

typedef ICmpSupervisor_C ICmpSupervisor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function Documentation
----------------------

.. _group___cmp_supervisor_itf_1gac0a7a129a5c987b831ec797872246339:

void supervisoroperationalive (supervisoroperationalive_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_supervisor_itf_1ga8dcb0fa7062fe9595daaf61013c25ab3:

void supervisoroperationdead (supervisoroperationdead_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_supervisor_itf_1gac55e43b69b3a230991035f10c402d563:

void supervisoroperationdisable (supervisoroperationdisable_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_supervisor_itf_1gae800bf94ffde820c2ea32930766194b8:

void supervisoroperationenable (supervisoroperationenable_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_supervisor_itf_1ga6115bad74184a04fb61acd15f9d006db:

void supervisoroperationgetentry (supervisoroperationgetentry_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_supervisor_itf_1ga26996a95c88f4dd74aede4aaadbe7245:

void supervisoroperationgetfirst (supervisoroperationgetfirst_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_supervisor_itf_1gab44bbf7eace5c757d53ddc0dbbe7104b:

void supervisoroperationgetnext (supervisoroperationgetnext_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_supervisor_itf_1ga89c18ac1b9a24f1a03f23dcfe1b99e57:

void supervisoroperationgetstate (supervisoroperationgetstate_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_supervisor_itf_1ga8d4dcc422dea19a988f7c58d4d0945d6:

void supervisoroperationgetstate2 (supervisoroperationgetstate2_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_supervisor_itf_1gadfdc987827d52f9ab2a80b6d4d618e45:

void supervisoroperationregister (supervisoroperationregister_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_supervisor_itf_1ga68be5d31b40e8056a7fef4870f179d97:

void supervisoroperationsettimeout (supervisoroperationsettimeout_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_supervisor_itf_1gaaf431f60a1a7abb8c6f828d7931abfbb:

void supervisoroperationunregister (supervisoroperationunregister_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_supervisor_itf_1gacaad16db3866a6c3138b34f0cff9f994:

RTS_HANDLE SupervisorOperationRegister (RTS_UI32 ui32OperationID, CMPID cmpId, char *pszOperationDescription, RTS_SYSTIME stTimeoutUs, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EXTERN LIB SECTION END

.. _group___cmp_supervisor_itf_1ga9e06546fdd64023fb60462bf5bdc44b7:

RTS_RESULT SupervisorOperationUnregister (RTS_HANDLE hOperation)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_supervisor_itf_1gacdec02d481b824d9717baa21365c9f3c:

SupervisorState* SupervisorOperationGetState (RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Deprecated, use SupervisorOperationGetState2 instead. Returns the global supervisor state for all supervised operations! Here you can check with one call how many operations failed.

**Parameters**

+---------+---------+-----------------------+
| [out]   | pResult | Pointer to error code |
+---------+---------+-----------------------+

**Return values**

+--------------------+------------------------------------------------+
| ERR_OK             | The SupervisorState was successfully retrieved |
+--------------------+------------------------------------------------+
| ERR_NOTINITIALIZED | The operation memory is not initialized        |
+--------------------+------------------------------------------------+
| ERR_NOT_SUPPORTED  | SysTimeGetUs is not supported                  |
+--------------------+------------------------------------------------+

**Returns:**

A pointer to the SupervisorState or NULL in case of an error

.. _group___cmp_supervisor_itf_1gae5bbfb7a4b6b5a024a3e5d6de4af17b7:

RTS_RESULT SupervisorOperationGetState2 (SupervisorState *pSupervisorState)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns the global supervisor state for all supervised operations! Here you can check with one call how many operations failed.

**Parameters**

+---------+------------------+-----------------------------------------------------------------------------------------------------------------------+
| [out]   | pSupervisorState | Pointer to the SupervisorState, will be filled with the corresponding information. The caller has to hold the buffer. |
+---------+------------------+-----------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+--------------------+------------------------------------------------+
| ERR_OK             | The SupervisorState was successfully retrieved |
+--------------------+------------------------------------------------+
| ERR_NOTINITIALIZED | The operation memory is not initialized        |
+--------------------+------------------------------------------------+
| ERR_PARAMETER      | The pointer to the SupervisorState is invalid  |
+--------------------+------------------------------------------------+
| ERR_NOT_SUPPORTED  | SysTimeGetUs is not supported                  |
+--------------------+------------------------------------------------+

.. _group___cmp_supervisor_itf_1ga3cbf7aa4cb85263deb0877fa2bafc503:

RTS_HANDLE SupervisorOperationGetFirst (RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Iteration interface to get the first registered operation

**Parameters**

+---------+---------+-----------------------+
| [out]   | pResult | Pointer to error code |
+---------+---------+-----------------------+

**Return values**

+--------------------+------------------------------------------------+
| ERR_OK             | The first operation was successfully retrieved |
+--------------------+------------------------------------------------+
| ERR_NOTINITIALIZED | The operation memory is not initialized        |
+--------------------+------------------------------------------------+
| ERR_NO_OBJECT      | There are no registered operations             |
+--------------------+------------------------------------------------+

**Returns:**

Handle to the first operation or RTS_INVALID_HANDLE in case of an error

.. _group___cmp_supervisor_itf_1gaaed285cec0f28c3923c1c082a033bf7b:

RTS_HANDLE SupervisorOperationGetNext (RTS_HANDLE hPrevOperation, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Iteration interface to get the next registered operation. Must be started with :ref:`SupervisorOperationGetFirst() <group___cmp_supervisor_itf_1ga3cbf7aa4cb85263deb0877fa2bafc503>`

**Parameters**

+---------+----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hPrevOperation | Handle to the previous operation retrieved via :ref:`SupervisorOperationGetFirst() <group___cmp_supervisor_itf_1ga3cbf7aa4cb85263deb0877fa2bafc503>` or subsequent calls of :ref:`SupervisorOperationGetNext() <group___cmp_supervisor_itf_1gaaed285cec0f28c3923c1c082a033bf7b>` |
+---------+----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult        | Pointer to error code                                                                                                                                                                                                                                                            |
+---------+----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+--------------------+-------------------------------------------------+
| ERR_OK             | The next operation was successfully retrieved   |
+--------------------+-------------------------------------------------+
| ERR_NOTINITIALIZED | The operation memory is not initialized         |
+--------------------+-------------------------------------------------+
| ERR_INVALID_HANDLE | The handle to the previous operation is invalid |
+--------------------+-------------------------------------------------+
| ERR_PARAMETER      | The handle to the previous operation is invalid |
+--------------------+-------------------------------------------------+
| ERR_END_OF_OBJECT  | There are no registered operations left         |
+--------------------+-------------------------------------------------+

**Returns:**

Handle to the next operation or RTS_INVALID_HANDLE in case of an error

.. _group___cmp_supervisor_itf_1gabb75661f7eecd9418d7e81cdf8de2af6:

SupervisorEntry* SupervisorOperationGetEntry (RTS_HANDLE hOperation, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns the SupervisorEntry of a given operation handle

**Parameters**

+---------+------------+-------------------------+
| [in]    | hOperation | Handle to the operation |
+---------+------------+-------------------------+
| [out]   | pResult    | Pointer to error code   |
+---------+------------+-------------------------+

**Return values**

+--------------------+------------------------------------------------+
| ERR_OK             | The SupervisorEntry was successfully retrieved |
+--------------------+------------------------------------------------+
| ERR_INVALID_HANDLE | The handle to the operation is invalid         |
+--------------------+------------------------------------------------+
| ERR_PARAMETER      | The handle to the operation is invalid         |
+--------------------+------------------------------------------------+

**Returns:**

Pointer to SupervisorEntry of the given operation handle or NULL in case of an error

.. _group___cmp_supervisor_itf_1ga6f99a56ecdd03f4d2829d7a5ec784496:

RTS_RESULT SupervisorOperationEnable (RTS_HANDLE hOperation)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Enables supervision for this operation: Sets timestamp to current time and alive flag

**Parameters**

+---------+------------+-------------------------+
| [in]    | hOperation | Handle to the operation |
+---------+------------+-------------------------+

**Returns:**

Error code

**Return values**

+--------------------+-----------------------------------------+
| ERR_OK             | Supervision was successfully enabled    |
+--------------------+-----------------------------------------+
| ERR_NOTINITIALIZED | The operation memory is not initialized |
+--------------------+-----------------------------------------+
| ERR_INVALID_HANDLE | The handle to the operation is invalid  |
+--------------------+-----------------------------------------+
| ERR_PARAMETER      | The handle to the operation is invalid  |
+--------------------+-----------------------------------------+
| ERR_NO_CHANGE      | The operation is already supervised     |
+--------------------+-----------------------------------------+
| ERR_NOT_SUPPORTED  | SysTimeGetUs is not supported           |
+--------------------+-----------------------------------------+

.. _group___cmp_supervisor_itf_1gacd0be713c20c1ee14e63fd69c082fbfc:

RTS_RESULT SupervisorOperationDisable (RTS_HANDLE hOperation)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Disables supervision for this operation. This operation will never be supervised, until the next :ref:`SupervisorOperationEnable() <group___cmp_supervisor_itf_1ga6f99a56ecdd03f4d2829d7a5ec784496>` call!

**Parameters**

+---------+------------+-------------------------+
| [in]    | hOperation | Handle to the operation |
+---------+------------+-------------------------+

**Returns:**

Error code

**Return values**

+--------------------+-----------------------------------------+
| ERR_OK             | Supervision was successfully disabled   |
+--------------------+-----------------------------------------+
| ERR_NOTINITIALIZED | The operation memory is not initialized |
+--------------------+-----------------------------------------+
| ERR_INVALID_HANDLE | The handle to the operation is invalid  |
+--------------------+-----------------------------------------+
| ERR_PARAMETER      | The handle to the operation is invalid  |
+--------------------+-----------------------------------------+
| ERR_NO_CHANGE      | The operation is already disabled       |
+--------------------+-----------------------------------------+

.. _group___cmp_supervisor_itf_1gaf925c810eccab73369cb322d07b6837c:

RTS_RESULT SupervisorOperationAlive (RTS_HANDLE hOperation, RTS_SYSTIME *pstTimestampUs)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Reassures the alive state of the operation with the given timestamp in order to retrigger the hardware watchdog

**Parameters**

+---------+----------------+-----------------------------------------------------------------------------------------------+
| [in]    | hOperation     | Handle to the operation                                                                       |
+---------+----------------+-----------------------------------------------------------------------------------------------+
| [in]    | pstTimestampUs | Pointer to timestamp. May be NULL, if time check is enabled timestamp is set to current time. |
+---------+----------------+-----------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+--------------------+-------------------------------------------+
| ERR_OK             | Alive state was successfully reassured    |
+--------------------+-------------------------------------------+
| ERR_NOTINITIALIZED | The operation memory is not initialized   |
+--------------------+-------------------------------------------+
| ERR_INVALID_HANDLE | The handle to the operation is invalid    |
+--------------------+-------------------------------------------+
| ERR_PARAMETER      | The handle to the operation is invalid    |
+--------------------+-------------------------------------------+
| ERR_NO_CHANGE      | Supervision is disabled for the operation |
+--------------------+-------------------------------------------+
| ERR_NOT_SUPPORTED  | SysTimeGetUs is not supported             |
+--------------------+-------------------------------------------+

.. _group___cmp_supervisor_itf_1gaba4768133a5a019cf1dc650cb8fcced4:

RTS_RESULT SupervisorOperationDead (RTS_HANDLE hOperation)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Signals a desperate situation of an operation in order to prevent the retriggering of the hardware watchdog. After this call, the operation is marked immediate as failed!

**Parameters**

+---------+------------+-------------------------+
| [in]    | hOperation | Handle to the operation |
+---------+------------+-------------------------+

**Returns:**

Error code

**Return values**

+--------------------+-------------------------------------------+
| ERR_OK             | Dead state was successfully signalled     |
+--------------------+-------------------------------------------+
| ERR_NOTINITIALIZED | The operation memory is not initialized   |
+--------------------+-------------------------------------------+
| ERR_INVALID_HANDLE | The handle to the operation is invalid    |
+--------------------+-------------------------------------------+
| ERR_PARAMETER      | The handle to the operation is invalid    |
+--------------------+-------------------------------------------+
| ERR_NO_CHANGE      | Supervision is disabled for the operation |
+--------------------+-------------------------------------------+

.. _group___cmp_supervisor_itf_1gae23842f61fa651d1d954652952667cce:

RTS_RESULT SupervisorOperationSetTimeout (RTS_HANDLE hOperation, RTS_SYSTIME stTimeoutUs)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Sets a (new) timeout for the given operation Supervision must be disabled to modify the timeout and should be enabled afterwards.

**Parameters**

+---------+------------+-------------------------+
| [in]    | hOperation | Handle to the operation |
+---------+------------+-------------------------+

**Returns:**

Error code

**Return values**

+--------------------+--------------------------------------------------------------+
| ERR_OK             | The timeout was successfully set                             |
+--------------------+--------------------------------------------------------------+
| ERR_NOTINITIALIZED | The operation memory is not initialized                      |
+--------------------+--------------------------------------------------------------+
| ERR_INVALID_HANDLE | The handle to the operation is invalid                       |
+--------------------+--------------------------------------------------------------+
| ERR_PARAMETER      | The handle to the operation is invalid                       |
+--------------------+--------------------------------------------------------------+
| ERR_NO_CHANGE      | The timeout was not modified because supervision is enabled! |
+--------------------+--------------------------------------------------------------+

.. _group___cmp_supervisor_itf_1gaa11f7969bc152187cb3554397dd5926a:

RTS_HANDLE SupervisorOperationGet (RTS_UI32 ui32OperationID, RTS_UI32 cmpId, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. last line of group.rst template
.. last line of composition.rst template


