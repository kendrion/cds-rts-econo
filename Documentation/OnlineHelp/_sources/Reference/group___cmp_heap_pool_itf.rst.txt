.. first line of composition.rst template

:orphan:

.. first line of group.rst template

.. _group___cmp_heap_pool_itf:

==============
CmpHeapPoolItf
==============

.. contents::
    :local:
    :depth: 1

Interface of CmpHeapPool.

Detailed Description
--------------------

Allocator for the heap management on limited targets.

This allocator implements a well-known buddy algorithm.

**Copyright:**

Copyright (c) 2017-2020 CODESYS Development GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved.

Data Structures
---------------

- struct :ref:`tagRTS_MEM_REGION <structtag_r_t_s___m_e_m___r_e_g_i_o_n>`

- struct :ref:`ICmpHeapPool_C <struct_i_cmp_heap_pool___c>`

Macros
------

- #define :ref:`RTS_MEM_REGION_DEFINED <group___cmp_heap_pool_itf_1ga094c3b86d162c900f09fa8b7da3251eb>`

- #define :ref:`USE_HeapPoolInit <group___cmp_heap_pool_itf_1gada786b9b978afeee513df907785e9e26>` :ref:`PFHEAPPOOLINIT <group___cmp_heap_pool_itf_1ga2d76b364d4fd0986921d821d71b03c48>` pfHeapPoolInit;

- #define :ref:`EXT_HeapPoolInit <group___cmp_heap_pool_itf_1ga8e2d3bb7df4aff1abb2feef44d376783>` extern :ref:`PFHEAPPOOLINIT <group___cmp_heap_pool_itf_1ga2d76b364d4fd0986921d821d71b03c48>` pfHeapPoolInit;

- #define :ref:`GET_HeapPoolInit <group___cmp_heap_pool_itf_1gaafed7c54c3834bc4516a7aa2c025192b>` s_pfCMGetAPI2( "HeapPoolInit", (RTS_VOID_FCTPTR *)&pfHeapPoolInit, (fl), 0, 0)

- #define :ref:`CAL_HeapPoolInit <group___cmp_heap_pool_itf_1gae7446b0b178fec0d857cf56d9c3d0a67>` pfHeapPoolInit

- #define :ref:`CHK_HeapPoolInit <group___cmp_heap_pool_itf_1ga478301cbb8f5d03fa865b0d2469ad5c0>` (pfHeapPoolInit != NULL)

- #define :ref:`EXP_HeapPoolInit <group___cmp_heap_pool_itf_1gabf507a317a9aa2bf68f329fece713483>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"HeapPoolInit", (RTS_UINTPTR) :ref:`HeapPoolInit <group___cmp_heap_pool_itf_1ga1c5a49ba0412c9989f7223321d31c76b>` , 0, 0)

- #define :ref:`USE_HeapPoolAlloc <group___cmp_heap_pool_itf_1gae1d88f883c18d7e83cf26aea1b89d805>` :ref:`PFHEAPPOOLALLOC <group___cmp_heap_pool_itf_1ga9e367bdf16099b9e909c74420abde941>` pfHeapPoolAlloc;

- #define :ref:`EXT_HeapPoolAlloc <group___cmp_heap_pool_itf_1ga5aa44cca1306dcd894fa8400ea5170ec>` extern :ref:`PFHEAPPOOLALLOC <group___cmp_heap_pool_itf_1ga9e367bdf16099b9e909c74420abde941>` pfHeapPoolAlloc;

- #define :ref:`GET_HeapPoolAlloc <group___cmp_heap_pool_itf_1gafbc7d522ab5ebff4c52ce0234f56caf0>` s_pfCMGetAPI2( "HeapPoolAlloc", (RTS_VOID_FCTPTR *)&pfHeapPoolAlloc, (fl), 0, 0)

- #define :ref:`CAL_HeapPoolAlloc <group___cmp_heap_pool_itf_1ga5b652621e4fbf6dfd8bb096d52f30ba7>` pfHeapPoolAlloc

- #define :ref:`CHK_HeapPoolAlloc <group___cmp_heap_pool_itf_1ga8929374dbff861f35e7e100f5ce81fc7>` (pfHeapPoolAlloc != NULL)

- #define :ref:`EXP_HeapPoolAlloc <group___cmp_heap_pool_itf_1ga7d71b041d66b6f340d81ac9c719075d8>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"HeapPoolAlloc", (RTS_UINTPTR) :ref:`HeapPoolAlloc <group___cmp_heap_pool_itf_1ga7b2a79b3e746a62b926c20a9bdfc8dcd>` , 0, 0)

- #define :ref:`USE_HeapPoolFree <group___cmp_heap_pool_itf_1ga1c37136988c179787b8616e7f0c57e08>` :ref:`PFHEAPPOOLFREE <group___cmp_heap_pool_itf_1ga475eae6b00a9f1a5b47c392355a55706>` pfHeapPoolFree;

- #define :ref:`EXT_HeapPoolFree <group___cmp_heap_pool_itf_1gaf3dbd82f0c86a2d9d293c9b8e8778db6>` extern :ref:`PFHEAPPOOLFREE <group___cmp_heap_pool_itf_1ga475eae6b00a9f1a5b47c392355a55706>` pfHeapPoolFree;

- #define :ref:`GET_HeapPoolFree <group___cmp_heap_pool_itf_1ga9c4afcc05b6b28ac042272f302ba9e32>` s_pfCMGetAPI2( "HeapPoolFree", (RTS_VOID_FCTPTR *)&pfHeapPoolFree, (fl), 0, 0)

- #define :ref:`CAL_HeapPoolFree <group___cmp_heap_pool_itf_1gaaf9c5aff84b2310a9f0a48d10ddcda51>` pfHeapPoolFree

- #define :ref:`CHK_HeapPoolFree <group___cmp_heap_pool_itf_1ga15f56b8227e14f48492c5231934e804b>` (pfHeapPoolFree != NULL)

- #define :ref:`EXP_HeapPoolFree <group___cmp_heap_pool_itf_1ga12c9fb564b67193b6678cb120a699ead>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"HeapPoolFree", (RTS_UINTPTR) :ref:`HeapPoolFree <group___cmp_heap_pool_itf_1gacb91a13818b81f4cd43728e77ccec039>` , 0, 0)

- #define :ref:`ITF_CmpHeapPool <group___cmp_heap_pool_itf_1gaaa97b27032497b4103af41481302b18a>`

- #define :ref:`EXTITF_CmpHeapPool <group___cmp_heap_pool_itf_1gaf04b458fae9d303838baf7df9a693d68>`

Typedefs
--------

- typedef struct :ref:`tagRTS_MEM_REGION <structtag_r_t_s___m_e_m___r_e_g_i_o_n>` :ref:`RTS_MEM_REGION <group___cmp_heap_pool_itf_1ga0ff62f1256dec2350d8ecc38c4fc63e9>`

- typedef RTS_HANDLE(* :ref:`PFHEAPPOOLINIT <group___cmp_heap_pool_itf_1ga2d76b364d4fd0986921d821d71b03c48>`)(RTS_MEM_REGION *pRegionsList, RTS_RESULT *pResult)

- typedef void *(* :ref:`PFHEAPPOOLALLOC <group___cmp_heap_pool_itf_1ga9e367bdf16099b9e909c74420abde941>`)(RTS_HANDLE hPool, RTS_SIZE size, RTS_RESULT *pResult)

- typedef RTS_RESULT(* :ref:`PFHEAPPOOLFREE <group___cmp_heap_pool_itf_1ga475eae6b00a9f1a5b47c392355a55706>`)(RTS_HANDLE hPool, void *pMem)

- typedef :ref:`ICmpHeapPool_C <struct_i_cmp_heap_pool___c>` :ref:`ICmpHeapPool <group___cmp_heap_pool_itf_1gaa10300b18ad236fdfe5a30c3130c8f2b>`

Functions
---------

- RTS_HANDLE :ref:`HeapPoolInit <group___cmp_heap_pool_itf_1ga1c5a49ba0412c9989f7223321d31c76b>` (:ref:`RTS_MEM_REGION <group___cmp_heap_pool_itf_1ga0ff62f1256dec2350d8ecc38c4fc63e9>` * pRegionsList, RTS_RESULT * pResult)

- void * :ref:`HeapPoolAlloc <group___cmp_heap_pool_itf_1ga7b2a79b3e746a62b926c20a9bdfc8dcd>` (RTS_HANDLE hPool, RTS_SIZE size, RTS_RESULT * pResult)

- RTS_RESULT :ref:`HeapPoolFree <group___cmp_heap_pool_itf_1gacb91a13818b81f4cd43728e77ccec039>` (RTS_HANDLE hPool, void * pMem)

Macro Definition Documentation
------------------------------
.. _group___cmp_heap_pool_itf_1ga094c3b86d162c900f09fa8b7da3251eb:

#define RTS_MEM_REGION_DEFINED
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_heap_pool_itf_1gada786b9b978afeee513df907785e9e26:

#define USE_HeapPoolInit :ref:`PFHEAPPOOLINIT <group___cmp_heap_pool_itf_1ga2d76b364d4fd0986921d821d71b03c48>` pfHeapPoolInit;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_heap_pool_itf_1ga8e2d3bb7df4aff1abb2feef44d376783:

#define EXT_HeapPoolInit extern :ref:`PFHEAPPOOLINIT <group___cmp_heap_pool_itf_1ga2d76b364d4fd0986921d821d71b03c48>` pfHeapPoolInit;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_heap_pool_itf_1gaafed7c54c3834bc4516a7aa2c025192b:

#define GET_HeapPoolInit s_pfCMGetAPI2( "HeapPoolInit", (RTS_VOID_FCTPTR *)&pfHeapPoolInit, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_heap_pool_itf_1gae7446b0b178fec0d857cf56d9c3d0a67:

#define CAL_HeapPoolInit pfHeapPoolInit
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_heap_pool_itf_1ga478301cbb8f5d03fa865b0d2469ad5c0:

#define CHK_HeapPoolInit (pfHeapPoolInit != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_heap_pool_itf_1gabf507a317a9aa2bf68f329fece713483:

#define EXP_HeapPoolInit s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"HeapPoolInit", (RTS_UINTPTR) :ref:`HeapPoolInit <group___cmp_heap_pool_itf_1ga1c5a49ba0412c9989f7223321d31c76b>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_heap_pool_itf_1gae1d88f883c18d7e83cf26aea1b89d805:

#define USE_HeapPoolAlloc :ref:`PFHEAPPOOLALLOC <group___cmp_heap_pool_itf_1ga9e367bdf16099b9e909c74420abde941>` pfHeapPoolAlloc;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_heap_pool_itf_1ga5aa44cca1306dcd894fa8400ea5170ec:

#define EXT_HeapPoolAlloc extern :ref:`PFHEAPPOOLALLOC <group___cmp_heap_pool_itf_1ga9e367bdf16099b9e909c74420abde941>` pfHeapPoolAlloc;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_heap_pool_itf_1gafbc7d522ab5ebff4c52ce0234f56caf0:

#define GET_HeapPoolAlloc s_pfCMGetAPI2( "HeapPoolAlloc", (RTS_VOID_FCTPTR *)&pfHeapPoolAlloc, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_heap_pool_itf_1ga5b652621e4fbf6dfd8bb096d52f30ba7:

#define CAL_HeapPoolAlloc pfHeapPoolAlloc
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_heap_pool_itf_1ga8929374dbff861f35e7e100f5ce81fc7:

#define CHK_HeapPoolAlloc (pfHeapPoolAlloc != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_heap_pool_itf_1ga7d71b041d66b6f340d81ac9c719075d8:

#define EXP_HeapPoolAlloc s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"HeapPoolAlloc", (RTS_UINTPTR) :ref:`HeapPoolAlloc <group___cmp_heap_pool_itf_1ga7b2a79b3e746a62b926c20a9bdfc8dcd>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_heap_pool_itf_1ga1c37136988c179787b8616e7f0c57e08:

#define USE_HeapPoolFree :ref:`PFHEAPPOOLFREE <group___cmp_heap_pool_itf_1ga475eae6b00a9f1a5b47c392355a55706>` pfHeapPoolFree;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_heap_pool_itf_1gaf3dbd82f0c86a2d9d293c9b8e8778db6:

#define EXT_HeapPoolFree extern :ref:`PFHEAPPOOLFREE <group___cmp_heap_pool_itf_1ga475eae6b00a9f1a5b47c392355a55706>` pfHeapPoolFree;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_heap_pool_itf_1ga9c4afcc05b6b28ac042272f302ba9e32:

#define GET_HeapPoolFree s_pfCMGetAPI2( "HeapPoolFree", (RTS_VOID_FCTPTR *)&pfHeapPoolFree, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_heap_pool_itf_1gaaf9c5aff84b2310a9f0a48d10ddcda51:

#define CAL_HeapPoolFree pfHeapPoolFree
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_heap_pool_itf_1ga15f56b8227e14f48492c5231934e804b:

#define CHK_HeapPoolFree (pfHeapPoolFree != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_heap_pool_itf_1ga12c9fb564b67193b6678cb120a699ead:

#define EXP_HeapPoolFree s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"HeapPoolFree", (RTS_UINTPTR) :ref:`HeapPoolFree <group___cmp_heap_pool_itf_1gacb91a13818b81f4cd43728e77ccec039>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_heap_pool_itf_1gaaa97b27032497b4103af41481302b18a:

#define ITF_CmpHeapPool
^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_heap_pool_itf_1gaf04b458fae9d303838baf7df9a693d68:

#define EXTITF_CmpHeapPool
^^^^^^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___cmp_heap_pool_itf_1ga0ff62f1256dec2350d8ecc38c4fc63e9:

typedef struct tagRTS_MEM_REGION  RTS_MEM_REGION
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Abstract Memory Region.

.. _group___cmp_heap_pool_itf_1ga2d76b364d4fd0986921d821d71b03c48:

typedef RTS_HANDLE( *  PFHEAPPOOLINIT) (RTS_MEM_REGION *pRegionsList, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_heap_pool_itf_1ga9e367bdf16099b9e909c74420abde941:

typedef void*( *  PFHEAPPOOLALLOC) (RTS_HANDLE hPool, RTS_SIZE size, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_heap_pool_itf_1ga475eae6b00a9f1a5b47c392355a55706:

typedef RTS_RESULT( *  PFHEAPPOOLFREE) (RTS_HANDLE hPool, void *pMem)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_heap_pool_itf_1gaa10300b18ad236fdfe5a30c3130c8f2b:

typedef ICmpHeapPool_C ICmpHeapPool
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function Documentation
----------------------

.. _group___cmp_heap_pool_itf_1ga1c5a49ba0412c9989f7223321d31c76b:

RTS_HANDLE HeapPoolInit (RTS_MEM_REGION *pRegionsList, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Initializes a buddies pool: builds up sets of blocks with sizes of power of 2 using a list of memory regions supplied with the second parameter.

**Parameters**

+---------+--------------+-----------------------------------------------------------------------+
| [in]    | pRegionsList | Array of memory regions in which the last element should be of size 0 |
+---------+--------------+-----------------------------------------------------------------------+
| [out]   | pResult      | Pointer to an error code                                              |
+---------+--------------+-----------------------------------------------------------------------+

**Returns:**

Handle to the pool or RTS_INVALID_HANDLE

.. _group___cmp_heap_pool_itf_1ga7b2a79b3e746a62b926c20a9bdfc8dcd:

void* HeapPoolAlloc (RTS_HANDLE hPool, RTS_SIZE size, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Allocates a memory block out of the pool

**Parameters**

+---------+---------+------------------------------------------+
| [in]    | hPool   | Handle to a pool object                  |
+---------+---------+------------------------------------------+
| [in]    | size    | Requested size of memory to be allocated |
+---------+---------+------------------------------------------+
| [out]   | pResult | Pointer to an error code                 |
+---------+---------+------------------------------------------+

**Return values**

+--------------+--------------------------------------------------------+
| ERR_OK       | Memory block has been allocated successfully           |
+--------------+--------------------------------------------------------+
| ERR_NOMEMORY | Memory block could not be allocated, not enough memory |
+--------------+--------------------------------------------------------+
| ERR_FAILED   | Memory corrupted inside the pool                       |
+--------------+--------------------------------------------------------+

**Returns:**

Pointer to the allocated block of memory

.. _group___cmp_heap_pool_itf_1gacb91a13818b81f4cd43728e77ccec039:

RTS_RESULT HeapPoolFree (RTS_HANDLE hPool, void *pMem)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Puts a memory block back to the pool and performs defragmentation.

**Parameters**

+---------+-------+------------------------------------------------------+
| [in]    | hPool | Handle to a pool object                              |
+---------+-------+------------------------------------------------------+
| [in]    | pMem  | Pointer to a memory block to be returned to the pool |
+---------+-------+------------------------------------------------------+

**Returns:**

error code

.. last line of group.rst template
.. last line of composition.rst template


