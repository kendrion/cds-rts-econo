.. first line of composition.rst template

.. first line of group.rst template

.. _group___sys_internal_lib_itf:

=================
SysInternalLibItf
=================

Interface of SysInternalLib. :ref:`More... <group___sys_internal_lib_itf-details>`

Modules
-------

- :ref:`External IEC interface <group___sys_internal_lib_itf___external_i_e_cinterface>`

- :ref:`Type class <group___sys_internal_lib_itf___typeclass>`

Data Structures
---------------

- struct :ref:`tagsystimelock_struct <structtagsystimelock__struct>`

- struct :ref:`tagsystimeset_struct <structtagsystimeset__struct>`

- struct :ref:`tagsystimeunlock_struct <structtagsystimeunlock__struct>`

- struct :ref:`tagsystimeunset_struct <structtagsystimeunset__struct>`

- struct :ref:`ISysInternalLib_C <struct_i_sys_internal_lib___c>`

Macros
------

- #define :ref:`ITF_SysInternalLib <group___sys_internal_lib_itf_1gacd95ea97010e6e53fad66101a64140d3>`

- #define :ref:`EXTITF_SysInternalLib <group___sys_internal_lib_itf_1ga8a12a27680a4a8273f09bd33da72eb30>`

Typedefs
--------

- typedef struct :ref:`tagsystimelock_struct <structtagsystimelock__struct>` :ref:`systimelock_struct <group___sys_internal_lib_itf_1ga8223ea51271d69c573c71c7082733796>`

- typedef struct :ref:`tagsystimeset_struct <structtagsystimeset__struct>` :ref:`systimeset_struct <group___sys_internal_lib_itf_1ga719db3093b55b481c736ba8923cd2bfc>`

- typedef struct :ref:`tagsystimeunlock_struct <structtagsystimeunlock__struct>` :ref:`systimeunlock_struct <group___sys_internal_lib_itf_1ga9a1d50a24c9efd783f39d7ec68f4294e>`

- typedef struct :ref:`tagsystimeunset_struct <structtagsystimeunset__struct>` :ref:`systimeunset_struct <group___sys_internal_lib_itf_1ga766a4361a2ded4d22d17067973ebdff7>`

- typedef :ref:`ISysInternalLib_C <struct_i_sys_internal_lib___c>` :ref:`ISysInternalLib <group___sys_internal_lib_itf_1gad01d383bc6d6bb7c378aa62436efb96e>`

Functions
---------

- void :ref:`__memcopy <group___sys_internal_lib_itf_1ga7c0bac2f7bc68f0ee2e6869a7125fcdc>` (:ref:`__memcopy_struct <struct____memcopy__struct>` * p)

- void :ref:`__stringcompare <group___sys_internal_lib_itf_1gac5d4657e866831c388098829d70b9acd>` (:ref:`__stringcompare_struct <struct____stringcompare__struct>` * p)

- void :ref:`__wstringcompare <group___sys_internal_lib_itf_1ga8cb54a4abf025cd8c2740b8bf0ea11a6>` (:ref:`__wstringcompare_struct <struct____wstringcompare__struct>` * p)

- void :ref:`real32__eq <group___sys_internal_lib_itf_1gadf33bdffcd91c629dcb6d34fcf9e5642>` (:ref:`real_cmp_struct <structreal__cmp__struct>` * p)

- void :ref:`real32__ne <group___sys_internal_lib_itf_1gaf03cb208de5c1b863c4704db61bdc146>` (:ref:`real_cmp_struct <structreal__cmp__struct>` * p)

- void :ref:`real32__lt <group___sys_internal_lib_itf_1gae2ce3e8c5289cd6b5b0e42f0a236e819>` (:ref:`real_cmp_struct <structreal__cmp__struct>` * p)

- void :ref:`real32__le <group___sys_internal_lib_itf_1ga504ae1d7e5d1282dd1d38966e9170de8>` (:ref:`real_cmp_struct <structreal__cmp__struct>` * p)

- void :ref:`real32__gt <group___sys_internal_lib_itf_1ga7051ebfaea04f270506e28eed6d5a383>` (:ref:`real_cmp_struct <structreal__cmp__struct>` * p)

- void :ref:`real32__ge <group___sys_internal_lib_itf_1ga1e66457a5d3916e2202bf352590e399d>` (:ref:`real_cmp_struct <structreal__cmp__struct>` * p)

- void :ref:`real32__add <group___sys_internal_lib_itf_1ga289729ca6af4e784bb425213353bcce1>` (:ref:`real_2op_struct <structreal__2op__struct>` * p)

- void :ref:`real32__sub <group___sys_internal_lib_itf_1ga8bb37dcffe68d8f3d2caea8e87a4986e>` (:ref:`real_2op_struct <structreal__2op__struct>` * p)

- void :ref:`real32__mul <group___sys_internal_lib_itf_1ga7b41f5bce8e2c9ce9c2b33246f9333da>` (:ref:`real_2op_struct <structreal__2op__struct>` * p)

- void :ref:`real32__div <group___sys_internal_lib_itf_1gad9a176ad423b494648dd14f5100bd8cd>` (:ref:`real_2op_struct <structreal__2op__struct>` * p)

- void :ref:`real32__min <group___sys_internal_lib_itf_1gaa4f20d9bc8e49a04cedc80b684fb2ac1>` (:ref:`real_2op_struct <structreal__2op__struct>` * p)

- void :ref:`real32__max <group___sys_internal_lib_itf_1ga336dde92d1170acfb9c35704d2aa3738>` (:ref:`real_2op_struct <structreal__2op__struct>` * p)

- void :ref:`real32__limit <group___sys_internal_lib_itf_1ga37a3a68547a32cfcf89e2853097a0c6b>` (:ref:`real_3op_struct <structreal__3op__struct>` * p)

- void :ref:`real32__trunc <group___sys_internal_lib_itf_1ga55d835c96e927e73d8c2fe18460bdd09>` (:ref:`real_trunc_struct <structreal__trunc__struct>` * p)

- void :ref:`real32__tan <group___sys_internal_lib_itf_1gab275f0c9bbaa7accfeeacaa7eab1e470>` (:ref:`real_1op_struct <structreal__1op__struct>` * p)

- void :ref:`real32__sin <group___sys_internal_lib_itf_1ga49f12991b81283bb874767a598c164c3>` (:ref:`real_1op_struct <structreal__1op__struct>` * p)

- void :ref:`real32__cos <group___sys_internal_lib_itf_1ga5eae931140c4fc721145d926d1757fe7>` (:ref:`real_1op_struct <structreal__1op__struct>` * p)

- void :ref:`real32__atan <group___sys_internal_lib_itf_1ga75a1d374cd9d42392e103419f6124c97>` (:ref:`real_1op_struct <structreal__1op__struct>` * p)

- void :ref:`real32__asin <group___sys_internal_lib_itf_1gae5c1f9079d5eb9c4a9449af028fe5182>` (:ref:`real_1op_struct <structreal__1op__struct>` * p)

- void :ref:`real32__acos <group___sys_internal_lib_itf_1ga567f50e4e2357f5f651a1e2609d22f4e>` (:ref:`real_1op_struct <structreal__1op__struct>` * p)

- void :ref:`real32__ln <group___sys_internal_lib_itf_1gac2b84f047e27e23a207267b94beba3ff>` (:ref:`real_1op_struct <structreal__1op__struct>` * p)

- void :ref:`real32__log <group___sys_internal_lib_itf_1gafbb8977497173f028f4ab83da28b68d9>` (:ref:`real_1op_struct <structreal__1op__struct>` * p)

- void :ref:`real32__exp <group___sys_internal_lib_itf_1gabb7a51c573d318687c4cc6f748609bac>` (:ref:`real_1op_struct <structreal__1op__struct>` * p)

- void :ref:`real32__sqrt <group___sys_internal_lib_itf_1gaa05dd9fdded646f0afc1d5d004fdb161>` (:ref:`real_1op_struct <structreal__1op__struct>` * p)

- void :ref:`real32__abs <group___sys_internal_lib_itf_1ga49df4ecbdc0dc1b6496918f0554d5e18>` (:ref:`real_1op_struct <structreal__1op__struct>` * p)

- void :ref:`real32__expt <group___sys_internal_lib_itf_1ga58b146a3aa8c277b98ead36e34cafbac>` (:ref:`real_2op_struct <structreal__2op__struct>` * p)

- void :ref:`real64__eq <group___sys_internal_lib_itf_1gab1e35b358c909d62373a8bcf14f628a7>` (:ref:`lreal_cmp_struct <structlreal__cmp__struct>` * p)

- void :ref:`real64__ne <group___sys_internal_lib_itf_1gafd142871fefbe4b058dfc4e1e64461d6>` (:ref:`lreal_cmp_struct <structlreal__cmp__struct>` * p)

- void :ref:`real64__lt <group___sys_internal_lib_itf_1ga98b062447dd06e94e7a459c54cb0f66f>` (:ref:`lreal_cmp_struct <structlreal__cmp__struct>` * p)

- void :ref:`real64__le <group___sys_internal_lib_itf_1gaec399bb32f377f3554cb4e8a18d8044b>` (:ref:`lreal_cmp_struct <structlreal__cmp__struct>` * p)

- void :ref:`real64__gt <group___sys_internal_lib_itf_1gae8ccb3af053015ce55759f4538f0a353>` (:ref:`lreal_cmp_struct <structlreal__cmp__struct>` * p)

- void :ref:`real64__ge <group___sys_internal_lib_itf_1gae1af86e55fcae3696f43163f9fa8c836>` (:ref:`lreal_cmp_struct <structlreal__cmp__struct>` * p)

- void :ref:`real64__add <group___sys_internal_lib_itf_1gace73d2add91e8f44f4b0c19512d013ef>` (:ref:`lreal_2op_struct <structlreal__2op__struct>` * p)

- void :ref:`real64__sub <group___sys_internal_lib_itf_1ga27efab312fb9178ff887244936c682e5>` (:ref:`lreal_2op_struct <structlreal__2op__struct>` * p)

- void :ref:`real64__mul <group___sys_internal_lib_itf_1ga82ea6953d5de4efd2d028883e123bb97>` (:ref:`lreal_2op_struct <structlreal__2op__struct>` * p)

- void :ref:`real64__div <group___sys_internal_lib_itf_1gad617d7162e26fdc8da06909630ada2e4>` (:ref:`lreal_2op_struct <structlreal__2op__struct>` * p)

- void :ref:`real64__min <group___sys_internal_lib_itf_1ga961e6016babbfbb9944adbc64b95deba>` (:ref:`lreal_2op_struct <structlreal__2op__struct>` * p)

- void :ref:`real64__max <group___sys_internal_lib_itf_1ga3281d5ed7e5886ac6042a662d2d10b51>` (:ref:`lreal_2op_struct <structlreal__2op__struct>` * p)

- void :ref:`real64__limit <group___sys_internal_lib_itf_1ga864db9d9b787c99fa9c58b1b031092ff>` (:ref:`lreal_3op_struct <structlreal__3op__struct>` * p)

- void :ref:`real64__trunc <group___sys_internal_lib_itf_1ga073d0a5f328415628e8b8c7dcce3c53b>` (:ref:`lreal_trunc_struct <structlreal__trunc__struct>` * p)

- void :ref:`real64__tan <group___sys_internal_lib_itf_1ga416bb831ff5757b8b77e77ab2b410425>` (:ref:`lreal_1op_struct <structlreal__1op__struct>` * p)

- void :ref:`real64__sin <group___sys_internal_lib_itf_1ga227a39ed4fdb11dc45138f6801020da2>` (:ref:`lreal_1op_struct <structlreal__1op__struct>` * p)

- void :ref:`real64__cos <group___sys_internal_lib_itf_1ga54dc39113d6f704b0661cc881ece5627>` (:ref:`lreal_1op_struct <structlreal__1op__struct>` * p)

- void :ref:`real64__atan <group___sys_internal_lib_itf_1ga72b673d154c8e8143d2c0ff149e38bf2>` (:ref:`lreal_1op_struct <structlreal__1op__struct>` * p)

- void :ref:`real64__asin <group___sys_internal_lib_itf_1ga51755e07a5bf475f932448d7ffdbc2fa>` (:ref:`lreal_1op_struct <structlreal__1op__struct>` * p)

- void :ref:`real64__acos <group___sys_internal_lib_itf_1ga2676e68bcf816a8458c08d878245d389>` (:ref:`lreal_1op_struct <structlreal__1op__struct>` * p)

- void :ref:`real64__ln <group___sys_internal_lib_itf_1ga599f6bf184ffe2482c0614261ac22e37>` (:ref:`lreal_1op_struct <structlreal__1op__struct>` * p)

- void :ref:`real64__log <group___sys_internal_lib_itf_1gaa9e95537cb5b0c8950c644b3f5e48f16>` (:ref:`lreal_1op_struct <structlreal__1op__struct>` * p)

- void :ref:`real64__exp <group___sys_internal_lib_itf_1ga91011cc7f6e2a8bff2de8788fab23cca>` (:ref:`lreal_1op_struct <structlreal__1op__struct>` * p)

- void :ref:`real64__sqrt <group___sys_internal_lib_itf_1gacbb4cbb6ccfcbb989eea59541c5c819a>` (:ref:`lreal_1op_struct <structlreal__1op__struct>` * p)

- void :ref:`real64__abs <group___sys_internal_lib_itf_1ga8f43ee606254b187a38771ca0699b449>` (:ref:`lreal_1op_struct <structlreal__1op__struct>` * p)

- void :ref:`real64__expt <group___sys_internal_lib_itf_1ga60161e3882b3e7d0648b580d0a2a29eb>` (:ref:`lreal_2op_struct <structlreal__2op__struct>` * p)

- void :ref:`int64__add <group___sys_internal_lib_itf_1gac0397a1fb08a568fa15899485b10cd51>` (:ref:`lint_2op_struct <structlint__2op__struct>` * p)

- void :ref:`int64__sub <group___sys_internal_lib_itf_1gac9e35b83037fd02adb923d2e6244050c>` (:ref:`lint_2op_struct <structlint__2op__struct>` * p)

- void :ref:`int64__mul <group___sys_internal_lib_itf_1ga1bf7d9be0bcd1aa491908ba4c4e3960b>` (:ref:`lint_2op_struct <structlint__2op__struct>` * p)

- void :ref:`int64__div <group___sys_internal_lib_itf_1ga7a7babea0d6bfcf76f885ab433b62fde>` (:ref:`lint_2op_struct <structlint__2op__struct>` * p)

- void :ref:`int64__mod <group___sys_internal_lib_itf_1ga39e0a7bfd5b0cf1b2fb0b7f2fb19020e>` (:ref:`lint_2op_struct <structlint__2op__struct>` * p)

- void :ref:`int64__abs <group___sys_internal_lib_itf_1ga9078bc2372684f51b6fd84d28552be98>` (:ref:`lint_1op_struct <structlint__1op__struct>` * p)

- void :ref:`int64__min <group___sys_internal_lib_itf_1ga5727fb50251e2a00bba114d59604e2cc>` (:ref:`lint_2op_struct <structlint__2op__struct>` * p)

- void :ref:`int64__max <group___sys_internal_lib_itf_1ga9878f5ffbc34f13e1c883aa0819b21b9>` (:ref:`lint_2op_struct <structlint__2op__struct>` * p)

- void :ref:`int64__limit <group___sys_internal_lib_itf_1ga485449676d68a20cfb2f9e8488d4e303>` (:ref:`lint_3op_struct <structlint__3op__struct>` * p)

- void :ref:`int64__eq <group___sys_internal_lib_itf_1gae7b6d1fba99fbee56e4f461c9c3ca13b>` (:ref:`lint_cmp_struct <structlint__cmp__struct>` * p)

- void :ref:`int64__ne <group___sys_internal_lib_itf_1ga897d0470203b57d397021f1889980290>` (:ref:`lint_cmp_struct <structlint__cmp__struct>` * p)

- void :ref:`int64__lt <group___sys_internal_lib_itf_1gad3e12f744a21db039fcf160e933e6ba4>` (:ref:`lint_cmp_struct <structlint__cmp__struct>` * p)

- void :ref:`int64__le <group___sys_internal_lib_itf_1ga432c62c5d67ec892f46e8c2e07053dac>` (:ref:`lint_cmp_struct <structlint__cmp__struct>` * p)

- void :ref:`int64__gt <group___sys_internal_lib_itf_1ga053243a2428a77ead92d3261644d1d10>` (:ref:`lint_cmp_struct <structlint__cmp__struct>` * p)

- void :ref:`int64__ge <group___sys_internal_lib_itf_1ga9be40a2fb688510f2030bb875963c453>` (:ref:`lint_cmp_struct <structlint__cmp__struct>` * p)

- void :ref:`int64__shr <group___sys_internal_lib_itf_1ga6d548c2946b0da8ab28a91b6a05fa0a8>` (:ref:`lint_shift_struct <structlint__shift__struct>` * p)

- void :ref:`uint64__add <group___sys_internal_lib_itf_1gae2851145a6a0cf176f208affa6ecbed8>` (:ref:`ulint_2op_struct <structulint__2op__struct>` * p)

- void :ref:`uint64__sub <group___sys_internal_lib_itf_1gafdc7567fc31c95c393bc773708075e77>` (:ref:`ulint_2op_struct <structulint__2op__struct>` * p)

- void :ref:`uint64__mul <group___sys_internal_lib_itf_1gabd7b2bc3f3b4dbd4d6d2342f0ac57e33>` (:ref:`ulint_2op_struct <structulint__2op__struct>` * p)

- void :ref:`uint64__div <group___sys_internal_lib_itf_1gab65cbee452b013d546c302d68b519c0b>` (:ref:`ulint_2op_struct <structulint__2op__struct>` * p)

- void :ref:`uint64__mod <group___sys_internal_lib_itf_1gae423ececdbb0c37e08adc94b2ea2cc09>` (:ref:`ulint_2op_struct <structulint__2op__struct>` * p)

- void :ref:`uint64__min <group___sys_internal_lib_itf_1ga6293aa82f37b70f7424622b262639f19>` (:ref:`ulint_2op_struct <structulint__2op__struct>` * p)

- void :ref:`uint64__max <group___sys_internal_lib_itf_1ga6648e7fb690181500017d9784dbef4c5>` (:ref:`ulint_2op_struct <structulint__2op__struct>` * p)

- void :ref:`uint64__limit <group___sys_internal_lib_itf_1gae0e5a2f8226084656876970124e48d10>` (:ref:`ulint_3op_struct <structulint__3op__struct>` * p)

- void :ref:`uint64__ror <group___sys_internal_lib_itf_1ga55007d5307477bfbd27aaba2c4fa525a>` (:ref:`ulint_shift_struct <structulint__shift__struct>` * p)

- void :ref:`uint64__rol <group___sys_internal_lib_itf_1gaa79fe6f70a6de9a4c095f656284fa447>` (:ref:`ulint_shift_struct <structulint__shift__struct>` * p)

- void :ref:`uint64__shl <group___sys_internal_lib_itf_1ga293cbd38fe8c7661e09a4d50d4c1b840>` (:ref:`ulint_shift_struct <structulint__shift__struct>` * p)

- void :ref:`uint64__shr <group___sys_internal_lib_itf_1ga7ed95a99cf450b87bb76c3b685b235a2>` (:ref:`ulint_shift_struct <structulint__shift__struct>` * p)

- void :ref:`uint64__and <group___sys_internal_lib_itf_1ga3c16f9f9eeb84a22eaf566ca5b8203dd>` (:ref:`ulint_2op_struct <structulint__2op__struct>` * p)

- void :ref:`uint64__or <group___sys_internal_lib_itf_1ga2bd5eebdbc5954ea590f60b53f120f5e>` (:ref:`ulint_2op_struct <structulint__2op__struct>` * p)

- void :ref:`uint64__xor <group___sys_internal_lib_itf_1gaa9292aa33445e1636faa214668003d90>` (:ref:`ulint_2op_struct <structulint__2op__struct>` * p)

- void :ref:`uint64__not <group___sys_internal_lib_itf_1ga76c561736a217c8e78a6145d1e75b2e0>` (:ref:`ulint_1op_struct <structulint__1op__struct>` * p)

- void :ref:`uint64__eq <group___sys_internal_lib_itf_1ga13cdc303876b518e628fbe29fd1d9ce6>` (:ref:`ulint_cmp_struct <structulint__cmp__struct>` * p)

- void :ref:`uint64__ne <group___sys_internal_lib_itf_1gaad4473c53b3258c68956ecf074e1cc60>` (:ref:`ulint_cmp_struct <structulint__cmp__struct>` * p)

- void :ref:`uint64__lt <group___sys_internal_lib_itf_1gaed1171b1cb290d33c034095d0041d38c>` (:ref:`ulint_cmp_struct <structulint__cmp__struct>` * p)

- void :ref:`uint64__le <group___sys_internal_lib_itf_1ga124dded1e89c1d241b32bcb8ac81fc98>` (:ref:`ulint_cmp_struct <structulint__cmp__struct>` * p)

- void :ref:`uint64__gt <group___sys_internal_lib_itf_1gaec3fccbdbc82d39720124cb2c394ca23>` (:ref:`ulint_cmp_struct <structulint__cmp__struct>` * p)

- void :ref:`uint64__ge <group___sys_internal_lib_itf_1ga3ecaa4a4cd65c1b76e05e5e89b0de78a>` (:ref:`ulint_cmp_struct <structulint__cmp__struct>` * p)

- void :ref:`int32__mul <group___sys_internal_lib_itf_1ga359259fa4525a5060ddd86e8b201b3d5>` (:ref:`dint_2op_struct <structdint__2op__struct>` * p)

- void :ref:`uint32__mul <group___sys_internal_lib_itf_1ga2a19c8a96c0c0f03cdfea216bb770790>` (:ref:`udint_2op_struct <structudint__2op__struct>` * p)

- void :ref:`int32__div <group___sys_internal_lib_itf_1gac87f2ae78b211bf3b45a7cdb2ae53890>` (:ref:`dint_2op_struct <structdint__2op__struct>` * p)

- void :ref:`int32__mod <group___sys_internal_lib_itf_1ga882b7e5ff557ad49710817cd077634dc>` (:ref:`dint_2op_struct <structdint__2op__struct>` * p)

- void :ref:`uint32__div <group___sys_internal_lib_itf_1gafee2092953667ee61fccbfd92f7a8939>` (:ref:`udint_2op_struct <structudint__2op__struct>` * p)

- void :ref:`uint32__mod <group___sys_internal_lib_itf_1gaac85de139744020d33346be394b2bcd1>` (:ref:`udint_2op_struct <structudint__2op__struct>` * p)

- void :ref:`int32__abs <group___sys_internal_lib_itf_1ga3d3b8751475d8e7e6feaa5e03b24e724>` (:ref:`dint_1op_struct <structdint__1op__struct>` * p)

- void :ref:`uint32__limit <group___sys_internal_lib_itf_1ga38e88835f387e363b1939e932be740e4>` (:ref:`udint_3op_struct <structudint__3op__struct>` * p)

- void :ref:`int32__limit <group___sys_internal_lib_itf_1gabed060598d3bd4853eeb03458e21e56a>` (:ref:`dint_3op_struct <structdint__3op__struct>` * p)

- void :ref:`uint32__rol <group___sys_internal_lib_itf_1ga452448038422bb8b548da9c7ab6bce44>` (:ref:`udint_shift_struct <structudint__shift__struct>` * p)

- void :ref:`uint32__ror <group___sys_internal_lib_itf_1ga455b3b0b4e8743fb6fc6b65d11219480>` (:ref:`udint_shift_struct <structudint__shift__struct>` * p)

- void :ref:`uint32__shl <group___sys_internal_lib_itf_1gaeced55ef5aa1a17ed8173d7e6631b90e>` (:ref:`udint_shift_struct <structudint__shift__struct>` * p)

- void :ref:`uint32__shr <group___sys_internal_lib_itf_1gadd59a610c4ff39496b19932f20a62be9>` (:ref:`udint_shift_struct <structudint__shift__struct>` * p)

- void :ref:`int32__shr <group___sys_internal_lib_itf_1gab519664e9e20f3238a20bea66a5d903f>` (:ref:`dint_shift_struct <structdint__shift__struct>` * p)

- void :ref:`any32__to__int64 <group___sys_internal_lib_itf_1ga31bb67dcc2a992b899beb42bd6be1603>` (:ref:`any32_to_int64_struct <structany32__to__int64__struct>` * p)

- void :ref:`int64__to__any32 <group___sys_internal_lib_itf_1ga846ed897bab94cdb5bbb43c4b814b4d3>` (:ref:`int64_to_any32_struct <structint64__to__any32__struct>` * p)

- void :ref:`int64__atomicread <group___sys_internal_lib_itf_1gafdc0dec98a62c7271a63ff62a6c00aff>` (:ref:`int64_atomicread_struct <structint64__atomicread__struct>` * p)

- void :ref:`int64__atomicwrite <group___sys_internal_lib_itf_1ga47e731b2c966ad352a15ed13db995d43>` (:ref:`int64_atomicwrite_struct <structint64__atomicwrite__struct>` * p)

- void :ref:`real32__to__any32 <group___sys_internal_lib_itf_1ga23a6698447f26cce3b1338e636c16480>` (:ref:`real32_to_any32_struct <structreal32__to__any32__struct>` * p)

- void :ref:`any32__to__real32 <group___sys_internal_lib_itf_1gae8eb719ca8bf32391e276840f01fea53>` (:ref:`any32_to_real32_struct <structany32__to__real32__struct>` * p)

- void :ref:`real32__to__any64 <group___sys_internal_lib_itf_1gacd8010988afbf58bdd4f253de8863123>` (:ref:`real32_to_any64_struct <structreal32__to__any64__struct>` * p)

- void :ref:`any64__to__real32 <group___sys_internal_lib_itf_1ga26f0c01fd800e04a1a5cfb0453dcda25>` (:ref:`any64_to_real32_struct <structany64__to__real32__struct>` * p)

- void :ref:`real64__to__any32 <group___sys_internal_lib_itf_1ga2221d6d6c83303287f56efce54002015>` (:ref:`real64_to_any32_struct <structreal64__to__any32__struct>` * p)

- void :ref:`any32__to__real64 <group___sys_internal_lib_itf_1ga181b6ff338f9f54d81e5b3539cfe4c65>` (:ref:`any32_to_real64_struct <structany32__to__real64__struct>` * p)

- void :ref:`real64__to__any64 <group___sys_internal_lib_itf_1ga029d565210a843f73e968653fd368efe>` (:ref:`real64_to_any64_struct <structreal64__to__any64__struct>` * p)

- void :ref:`any64__to__real64 <group___sys_internal_lib_itf_1gaed74c334e34a311062b67dc2d3267946>` (:ref:`any64_to_real64_struct <structany64__to__real64__struct>` * p)

- void :ref:`real64__to__real32 <group___sys_internal_lib_itf_1ga5b4aa4bf87cbf99c690ebe5c820946c9>` (:ref:`real64_to_real32_struct <structreal64__to__real32__struct>` * p)

- void :ref:`real32__to__real64 <group___sys_internal_lib_itf_1ga196590d2a3de6e19b4616388839bbc9a>` (:ref:`real32_to_real64_struct <structreal32__to__real64__struct>` * p)

- void :ref:`real64__atomicread <group___sys_internal_lib_itf_1gaec072632505a9535d34fc7aa3582ea6e>` (:ref:`real64_atomicread_struct <structreal64__atomicread__struct>` * p)

- void :ref:`real64__atomicwrite <group___sys_internal_lib_itf_1gacccfca584e3180ddaaff46b6383211e8>` (:ref:`real64_atomicwrite_struct <structreal64__atomicwrite__struct>` * p)

- void :ref:`get__time <group___sys_internal_lib_itf_1gac3222897d2f27c2605567757d39d7799>` (:ref:`get_time_struct <structget__time__struct>` * p)

- void :ref:`get__ltime <group___sys_internal_lib_itf_1ga0ed99bc519095f8f0edc711d49e6a38e>` (:ref:`get_ltime_struct <structget__ltime__struct>` * p)

- void :ref:`exchange__and__add <group___sys_internal_lib_itf_1ga9f6623e44ffb8f4c794b6c94fd16cc74>` (:ref:`exchange_and_add_struct <structexchange__and__add__struct>` * p)

- void :ref:`test__and__set <group___sys_internal_lib_itf_1gae07ca9a7769b552660e48123a7d45b08>` (:ref:`test_and_set_struct <structtest__and__set__struct>` * p)

- void :ref:`compare__and__swap <group___sys_internal_lib_itf_1gaa11527b7ecdacf9d64a7ef4aa328ba1b>` (:ref:`compare_and_swap_struct <structcompare__and__swap__struct>` * p)

- void :ref:`__memset <group___sys_internal_lib_itf_1gaab0c0b5ac9bc040ff82d8ee0d1d6e99d>` (:ref:`__memset_struct <struct____memset__struct>` * p)

- void :ref:`trycatch <group___sys_internal_lib_itf_1ga99976476649713e371689625bd3b1f40>` (:ref:`trycatch_struct <structtrycatch__struct>` * p)

- void :ref:`systimelock <group___sys_internal_lib_itf_1ga756847d36324a518b4074c30e2c9e0b5>` (:ref:`systimelock_struct <group___sys_internal_lib_itf_1ga8223ea51271d69c573c71c7082733796>` * p)

- void :ref:`systimeset <group___sys_internal_lib_itf_1ga8b376f0f0d30a0a256596d4cfb191685>` (:ref:`systimeset_struct <group___sys_internal_lib_itf_1ga719db3093b55b481c736ba8923cd2bfc>` * p)

- void :ref:`systimeunlock <group___sys_internal_lib_itf_1gaaad768c59ee9534321155552101aaa3c>` (:ref:`systimeunlock_struct <group___sys_internal_lib_itf_1ga9a1d50a24c9efd783f39d7ec68f4294e>` * p)

- void :ref:`systimeunset <group___sys_internal_lib_itf_1gaf9203eccde94e421844c4d7f6fffe48e>` (:ref:`systimeunset_struct <group___sys_internal_lib_itf_1ga766a4361a2ded4d22d17067973ebdff7>` * p)

- RTS_UI16 :ref:`SysTimeUnlock <group___sys_internal_lib_itf_1ga6ee7c6fbe471cbc90bc59c5730c60ba9>` (void)

- RTS_UI16 :ref:`SysTimeLock <group___sys_internal_lib_itf_1ga5b9c45688ec0a3f2e5768f0660a42c13>` (RTS_UI32 ulTick, RTS_UI32 tTimeout)

- RTS_UI16 :ref:`SysTimeUnSet <group___sys_internal_lib_itf_1ga37d9b381e5f5b42ddcf1978376c7f85b>` (void)

- RTS_UI16 :ref:`SysTimeSet <group___sys_internal_lib_itf_1ga678a5c9ea445578aebaf00c0615852a0>` (RTS_UI32 ulTick, RTS_UI32 tTimeout)

- unsigned int :ref:`SysGetTypeSize <group___sys_internal_lib_itf_1ga45b08c34da05d3b51544c1804f234a45>` (:ref:`TypeClass3 <group___sys_internal_lib_itf___typeclass_1gaa0b5be7baae0808a4f3bb9ccc5c79a39>`  tc)

.. _group___sys_internal_lib_itf-details:

Detailed Description
--------------------

Interface of SysInternalLib.

The SysInternalLib interface is projected to implement all platform dependant routines for:

- Standard library routines

- Datatype conversion

This routines are used by CoDeSys for the Iec standard library implementation.

If the define SYSINTERNALLIB_DISABLE_INT_DIVBYZERO_CHECK is set, you can disable checking all int divisions on a zero divisor.

If the define SYSINTERNALLIB_DISABLE_REAL_DIVBYZERO_CHECK is set, you can disable checking all real divisions on a zero divisor.

**Copyright:**

Copyright (c) 2017-2018 CODESYS GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved.

Macro Definition Documentation
------------------------------
.. _group___sys_internal_lib_itf_1gacd95ea97010e6e53fad66101a64140d3:

#define ITF_SysInternalLib
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_internal_lib_itf_1ga8a12a27680a4a8273f09bd33da72eb30:

#define EXTITF_SysInternalLib
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___sys_internal_lib_itf_1ga8223ea51271d69c573c71c7082733796:

typedef struct tagsystimelock_struct  systimelock_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to lock the actual timestamp for all IEC timers.
**Returns:**

*RESULT: Returns always 0

.. _group___sys_internal_lib_itf_1ga719db3093b55b481c736ba8923cd2bfc:

typedef struct tagsystimeset_struct  systimeset_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to set the actual timestamp for all IEC timers. Differnt to SysTimeLock, the timer continues
**Returns:**

*RESULT: Returns always 0

.. _group___sys_internal_lib_itf_1ga9a1d50a24c9efd783f39d7ec68f4294e:

typedef struct tagsystimeunlock_struct  systimeunlock_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to unlock the actual timestamp for all IEC timers.
**Returns:**

*RESULT: Returns always 0

.. _group___sys_internal_lib_itf_1ga766a4361a2ded4d22d17067973ebdff7:

typedef struct tagsystimeunset_struct  systimeunset_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to un-set the actual timestamp for all IEC timers.
**Returns:**

*RESULT: Returns always 0

.. _group___sys_internal_lib_itf_1gad01d383bc6d6bb7c378aa62436efb96e:

typedef ISysInternalLib_C ISysInternalLib
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function Documentation
----------------------

.. _group___sys_internal_lib_itf_1ga7c0bac2f7bc68f0ee2e6869a7125fcdc:

void __memcopy (__memcopy_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function is a wrapper for a C style "memcpy" and behaves in the exact same way.

**Parameters**

+---------+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | p                    | Pointer to the input structure RANGE=[VALID_MEMCOPY_STRUCT]                                                                                                                                                                                                                                                          |
+---------+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | iDestAlignmentOffset | ***PSEUDO*** The parameter "pDest" is the destination pointer for the memcopy. It has to be always valid, as there is no input parameter check. The has to support all possible alignments. "iDestAlignmentOffset" specifies the number of bytes, deviating from a 16Bit alignment. RANGE=[0..7,8..15,15..31,31..63] |
+---------+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | iSrcAlignmentOffset  | ***PSEUDO*** The parameter "pSrc" is the source pointer for the memcopy. It has to be always valid, as there is no input parameter check. The has to support all possible alignments. "iSrcAlignmentOffset" specifies the number of bytes, deviating from a 16Bit alignment. RANGE=[0..7,8..15,15..31,31..63]        |
+---------+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | dwSize               | ***PSEUDO*** Number of bytes to be copied RANGE=[0..MEMCOPY_BUFFERSIZE]                                                                                                                                                                                                                                              |
+---------+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | dwPattern            | ***PSEUDO*** fill pattern, which is copied in the test RANGE=[0xAA55AA55,0x55AA55AA,0x00000000,0xFFFFFFFF]                                                                                                                                                                                                           |
+---------+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pRet                 | ***PSEUDO*** Pointer to the destination buffer.                                                                                                                                                                                                                                                                      |
+---------+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gac5d4657e866831c388098829d70b9acd:

void __stringcompare (__stringcompare_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function is a wrapper for a C style "strcmp" and behaves in the exact same way.

**Parameters**

+---------+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | p                    | Pointer to the input structure RANGE=[VALID_STRINGCOMPARE_STRUCT]                                                                                                                                                                                                                                                                                                    |
+---------+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | iCmp1AlignmentOffset | ***PSEUDO*** The parameter "pString1" is one of the compared buffers. It has to be always valid, as there is no input parameter check. The buffer has to be terminated with a terminating zero. The has to support all possible alignments. "iCmp1AlignmentOffset" specifies the number of bytes, deviating from a 16Bit alignment. RANGE=[0..7,8..15,15..31,31..63] |
+---------+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | iCmp2AlignmentOffset | ***PSEUDO*** The parameter "pString2" is one of the compared buffers. It has to be always valid, as there is no input parameter check. The buffer has to be terminated with a terminating zero. The has to support all possible alignments. "iCmp2AlignmentOffset" specifies the number of bytes, deviating from a 16Bit alignment. RANGE=[0..7,8..15,15..31,31..63] |
+---------+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pString1             | ***PSEUDO*** String type to be copied in the test RANGE=[LOWSTRING_SHORT,LOWSTRING_LONG,HIGHSTRING_SHORT,HIGHSTRING_LONG]                                                                                                                                                                                                                                            |
+---------+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pString2             | ***PSEUDO*** String type to be copied in the test RANGE=[LOWSTRING_SHORT,LOWSTRING_LONG,HIGHSTRING_SHORT,HIGHSTRING_LONG]                                                                                                                                                                                                                                            |
+---------+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | diRet                | ***PSEUDO*** Lexicographical result of "pString1" compared to "pString2". 0 if both are equal.                                                                                                                                                                                                                                                                       |
+---------+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga8cb54a4abf025cd8c2740b8bf0ea11a6:

void __wstringcompare (__wstringcompare_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function is a wrapper for a C style "wstrcmp" and behaves in the exact same way.

**Parameters**

+---------+----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | p                    | Pointer to the input structure RANGE=[VALID_WSTRINGCOMPARE_STRUCT]                                                                                                                                                                                                                                                                                                    |
+---------+----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | iCmp1AlignmentOffset | ***PSEUDO*** The parameter "pString1" is one of the compared buffers. It has to be always valid, as there is no input parameter check. The buffer has to be terminated with a terminating zero. The has to support all possible alignments. "iCmp1AlignmentOffset" specifies the number of bytes, deviating from a 16Bit alignment. RANGE=[0,2,6,8,14,16,30,32,62,64] |
+---------+----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | iCmp2AlignmentOffset | ***PSEUDO*** The parameter "pString2" is one of the compared buffers. It has to be always valid, as there is no input parameter check. The buffer has to be terminated with a terminating zero. The has to support all possible alignments. "iCmp2AlignmentOffset" specifies the number of bytes, deviating from a 16Bit alignment. RANGE=[0,2,6,8,14,16,30,32,62,64] |
+---------+----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pString1             | ***PSEUDO*** String type to be copied in the test RANGE=[LOWWSTRING_SHORT,LOWWSTRING_LONG,HIGHWSTRING_SHORT,HIGHWSTRING_LONG]                                                                                                                                                                                                                                         |
+---------+----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pString2             | ***PSEUDO*** String type to be copied in the test RANGE=[LOWWSTRING_SHORT,LOWWSTRING_LONG,HIGHWSTRING_SHORT,HIGHWSTRING_LONG]                                                                                                                                                                                                                                         |
+---------+----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | diRet                | ***PSEUDO*** Lexicographical result of "pString1" compared to "pString2". 0 if both are equal.                                                                                                                                                                                                                                                                        |
+---------+----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gadf33bdffcd91c629dcb6d34fcf9e5642:

void real32__eq (real_cmp_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function determines if two operands equal. The inputs are 32-bit real values.

**Parameters**

+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_REAL_CMP_STRUCT]                                                      |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]                                                            |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]                                                            |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** 1 if the input values are equal, 0 if they are not equal. The result is a 8-bit short integer value. |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gaf03cb208de5c1b863c4704db61bdc146:

void real32__ne (real_cmp_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function determines if two operands are not equal. The inputs are 32-bit real values.

**Parameters**

+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_REAL_CMP_STRUCT]                                                      |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]                                                            |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]                                                            |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** 1 if the input values are not equal, 0 if they are equal. The result is a 8-bit short integer value. |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gae2ce3e8c5289cd6b5b0e42f0a236e819:

void real32__lt (real_cmp_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function determines if an operand is lower than another. The inputs are 32-bit real values.

**Parameters**

+---------+-----+---------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_REAL_CMP_STRUCT]                                                        |
+---------+-----+---------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]                                                              |
+---------+-----+---------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]                                                              |
+---------+-----+---------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** 1 if in1 is lower than in2, 0 if in1 is not lower than in2. The result is a 8-bit short integer value. |
+---------+-----+---------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga504ae1d7e5d1282dd1d38966e9170de8:

void real32__le (real_cmp_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function determines if an operand is lower or equal than another. The inputs are 32-bit real values.

**Parameters**

+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_REAL_CMP_STRUCT]                                                                          |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]                                                                                |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]                                                                                |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** 1 if in1 is lower or equal than in2, 0 if in1 is not lower or equal than in2. The result is a 8-bit short integer value. |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga7051ebfaea04f270506e28eed6d5a383:

void real32__gt (real_cmp_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function determines if an operand is greater than another. The inputs are 32-bit real values.

**Parameters**

+---------+-----+-------------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_REAL_CMP_STRUCT]                                                            |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]                                                                  |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]                                                                  |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** 1 if in1 is greater than in2, 0 if in1 is not greater than in2. The result is a 8-bit short integer value. |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga1e66457a5d3916e2202bf352590e399d:

void real32__ge (real_cmp_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function determines if an operand is greater or equal than another. The inputs are 32-bit real values.

**Parameters**

+---------+-----+-------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_REAL_CMP_STRUCT]                                                                              |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]                                                                                    |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]                                                                                    |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** 1 if in1 is greater or equal than in2, 0 if in1 is not greater or equal than in2. The result is a 8-bit short integer value. |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga289729ca6af4e784bb425213353bcce1:

void real32__add (real_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes an addition of two 32-bit real values.

**Parameters**

+---------+--------------+----------------------------------------------------------------+
| [in]    | p            | Pointer to the input structure RANGE=[VALID_REAL_2OP_STRUCT]   |
+---------+--------------+----------------------------------------------------------------+
| [in]    | in1          | ***PSEUDO*** First summand RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]   |
+---------+--------------+----------------------------------------------------------------+
| [in]    | in2          | ***PSEUDO*** Second summand RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]  |
+---------+--------------+----------------------------------------------------------------+
| [out]   | bNegInfinity | ***PSEUDO*** The return value is -infinity                     |
+---------+--------------+----------------------------------------------------------------+
| [out]   | bInfinity    | ***PSEUDO*** The return value is infinity                      |
+---------+--------------+----------------------------------------------------------------+
| [out]   | out          | ***PSEUDO*** Sum of the two input values as 32-bit real value. |
+---------+--------------+----------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga8bb37dcffe68d8f3d2caea8e87a4986e:

void real32__sub (real_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a subtraction of one variable from another one. The inputs are 32-bit real values.

**Parameters**

+---------+--------------+-----------------------------------------------------------------------+
| [in]    | p            | Pointer to the input structure RANGE=[VALID_REAL_2OP_STRUCT]          |
+---------+--------------+-----------------------------------------------------------------------+
| [in]    | in1          | ***PSEUDO*** Minuend RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]                |
+---------+--------------+-----------------------------------------------------------------------+
| [in]    | in2          | ***PSEUDO*** Subtrahend RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]             |
+---------+--------------+-----------------------------------------------------------------------+
| [out]   | bNegInfinity | ***PSEUDO*** The return value is -infinity                            |
+---------+--------------+-----------------------------------------------------------------------+
| [out]   | bInfinity    | ***PSEUDO*** The return value is infinity                             |
+---------+--------------+-----------------------------------------------------------------------+
| [out]   | out          | ***PSEUDO*** Difference of the two input values as 32-bit real value. |
+---------+--------------+-----------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga7b41f5bce8e2c9ce9c2b33246f9333da:

void real32__mul (real_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a multiplication of two variables. The inputs are 32-bit real values.

**Parameters**

+---------+--------------+--------------------------------------------------------------------+
| [in]    | p            | Pointer to the input structure RANGE=[VALID_REAL_2OP_STRUCT]       |
+---------+--------------+--------------------------------------------------------------------+
| [in]    | in1          | ***PSEUDO*** First factor RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]        |
+---------+--------------+--------------------------------------------------------------------+
| [in]    | in2          | ***PSEUDO*** Second factor RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]       |
+---------+--------------+--------------------------------------------------------------------+
| [out]   | bNegInfinity | ***PSEUDO*** The return value is -infinity                         |
+---------+--------------+--------------------------------------------------------------------+
| [out]   | bInfinity    | ***PSEUDO*** The return value is infinity                          |
+---------+--------------+--------------------------------------------------------------------+
| [out]   | out          | ***PSEUDO*** Product of the two input values as 32-bit real value. |
+---------+--------------+--------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gad9a176ad423b494648dd14f5100bd8cd:

void real32__div (real_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a division of two variables. The inputs are 32-bit real values.

The behaviour for divisor = 0.0 might be platform dependent.

**Parameters**

+---------+------------+---------------------------------------------------------------------+
| [in]    | p          | Pointer to the input structure RANGE=[VALID_REAL_2OP_STRUCT]        |
+---------+------------+---------------------------------------------------------------------+
| [in]    | in1        | ***PSEUDO*** Dividend RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]             |
+---------+------------+---------------------------------------------------------------------+
| [in]    | in2        | ***PSEUDO*** Divisor RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]              |
+---------+------------+---------------------------------------------------------------------+
| [out]   | bException | ***PSEUDO*** Exception thrown                                       |
+---------+------------+---------------------------------------------------------------------+
| [out]   | out        | ***PSEUDO*** Quotient of the two input values as 32-bit real value. |
+---------+------------+---------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gaa4f20d9bc8e49a04cedc80b684fb2ac1:

void real32__min (real_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function builds the minimum of two variables. The inputs are 32-bit real values.

**Parameters**

+---------+-----+-----------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_REAL_2OP_STRUCT]    |
+---------+-----+-----------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]          |
+---------+-----+-----------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]          |
+---------+-----+-----------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The lesser of the two values as 32-bit real value. |
+---------+-----+-----------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga336dde92d1170acfb9c35704d2aa3738:

void real32__max (real_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function builds the maximum of two variables. The inputs are 32-bit real values.

**Parameters**

+---------+-----+------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_REAL_2OP_STRUCT]     |
+---------+-----+------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]           |
+---------+-----+------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]           |
+---------+-----+------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The greater of the two values as 32-bit real value. |
+---------+-----+------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga37a3a68547a32cfcf89e2853097a0c6b:

void real32__limit (real_3op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function limits an input value to a lower and an upper bound. The inputs are 32-bit real values.

**Parameters**

+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_REAL_3OP_STRUCT]                                                                                                  |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Lower bound RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]                                                                                                    |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input value RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]                                                                                                    |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in3 | ***PSEUDO*** Upper bound RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]                                                                                                    |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** in2 if in2 is in the range between in1 and in3, in1 if in2 is lower than in1, in3 if in2 is greater than in3. The result is a 32-bit real value. |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga55d835c96e927e73d8c2fe18460bdd09:

void real32__trunc (real_trunc_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function converts a 32-bit real value to a 32-bit integer value.

**Parameters**

+---------+-----+-----------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_REAL_TRUNC_STRUCT]              |
+---------+-----+-----------------------------------------------------------------------------+
| [in]    | in  | ***PSEUDO*** Input RANGE=[ANY_MIN, ANY_MID, ANY_MAX]                        |
+---------+-----+-----------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The whole number portion of the input as 32-bit integer value. |
+---------+-----+-----------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gab275f0c9bbaa7accfeeacaa7eab1e470:

void real32__tan (real_1op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the tangent of a 32-bit real value.

The behaviour for input values that are multiples of PI_HALF might be platform dependent.

**Parameters**

+---------+-----+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_REAL_1OP_STRUCT]                                                                                                               |
+---------+-----+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in  | ***PSEUDO*** Input RANGE=[(RTS_IEC_REAL)-PI_HALF,(RTS_IEC_REAL)-PI_HALF+MIN_DELTA..(RTS_IEC_REAL)0,(RTS_IEC_REAL)0..(RTS_IEC_REAL)PI_HALF-MIN_DELTA,(RTS_IEC_REAL)PI_HALF] |
+---------+-----+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The tangent of the input as 32-bit real value or NaN.                                                                                                         |
+---------+-----+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga49f12991b81283bb874767a598c164c3:

void real32__sin (real_1op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the sine of a 32-bit real value.

**Parameters**

+---------+-----+--------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_REAL_1OP_STRUCT]                                                 |
+---------+-----+--------------------------------------------------------------------------------------------------------------+
| [in]    | in  | ***PSEUDO*** Input RANGE=[(RTS_IEC_REAL)-PI,(RTS_IEC_REAL)-PI_HALF,0,(RTS_IEC_REAL)PI_HALF,(RTS_IEC_REAL)PI] |
+---------+-----+--------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The sine of the input as 32-bit real value.                                                     |
+---------+-----+--------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga5eae931140c4fc721145d926d1757fe7:

void real32__cos (real_1op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the cosine of a 32-bit real value.

**Parameters**

+---------+-----+--------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_REAL_1OP_STRUCT]                                                 |
+---------+-----+--------------------------------------------------------------------------------------------------------------+
| [in]    | in  | ***PSEUDO*** Input RANGE=[(RTS_IEC_REAL)-PI,(RTS_IEC_REAL)-PI_HALF,0,(RTS_IEC_REAL)PI_HALF,(RTS_IEC_REAL)PI] |
+---------+-----+--------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The cosine of the input as 32-bit real value.                                                   |
+---------+-----+--------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga75a1d374cd9d42392e103419f6124c97:

void real32__atan (real_1op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the arc tangent (inverse function of tangent) of a 32-bit real value.

**Parameters**

+---------+-----+-----------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_REAL_1OP_STRUCT]    |
+---------+-----+-----------------------------------------------------------------+
| [in]    | in  | ***PSEUDO*** Input RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]            |
+---------+-----+-----------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The arc tangent of the input as 32-bit real value. |
+---------+-----+-----------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gae5c1f9079d5eb9c4a9449af028fe5182:

void real32__asin (real_1op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the arc sine (inverse function of sine) of a 32-bit real value.

The behaviour for input values < -1.0 and > 1.0 might be platform dependent.

**Parameters**

+---------+-----+---------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_REAL_1OP_STRUCT]                                            |
+---------+-----+---------------------------------------------------------------------------------------------------------+
| [in]    | in  | ***PSEUDO*** Input RANGE=[(RTS_IEC_REAL)-1.01,(RTS_IEC_REAL)-1.0..(RTS_IEC_REAL)1.0,(RTS_IEC_REAL)1.01] |
+---------+-----+---------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The arc sine of the input as 32-bit real value or NaN.                                     |
+---------+-----+---------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga567f50e4e2357f5f651a1e2609d22f4e:

void real32__acos (real_1op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the arc cosine (inverse function of cosine) of a 32-bit real value.

The behaviour for input values < -1.0 and > 1.0 might be platform dependent.

**Parameters**

+---------+-----+---------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_REAL_1OP_STRUCT]                                            |
+---------+-----+---------------------------------------------------------------------------------------------------------+
| [in]    | in  | ***PSEUDO*** Input RANGE=[(RTS_IEC_REAL)-1.01,(RTS_IEC_REAL)-1.0..(RTS_IEC_REAL)1.0,(RTS_IEC_REAL)1.01] |
+---------+-----+---------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The arc cosine of the input as 32-bit real value or NaN.                                   |
+---------+-----+---------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gac2b84f047e27e23a207267b94beba3ff:

void real32__ln (real_1op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the natural logarithm of a 32-bit real value.

The behaviour for input values <= 0.0 might be platform dependent.

**Parameters**

+---------+--------------+-----------------------------------------------------------------------------------+
| [in]    | p            | Pointer to the input structure RANGE=[VALID_REAL_1OP_STRUCT]                      |
+---------+--------------+-----------------------------------------------------------------------------------+
| [in]    | in           | ***PSEUDO*** Input RANGE=[(RTS_IEC_REAL)0.0,(RTS_IEC_REAL)0.01..RTS_IEC_REAL_MAX] |
+---------+--------------+-----------------------------------------------------------------------------------+
| [out]   | bNegInfinity | ***PSEUDO*** The return value is -infinity                                        |
+---------+--------------+-----------------------------------------------------------------------------------+
| [out]   | out          | ***PSEUDO*** The natural logarithm of the input as 32-bit real value or NaN.      |
+---------+--------------+-----------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gafbb8977497173f028f4ab83da28b68d9:

void real32__log (real_1op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the logarithm in Base 10 of a 32-bit real value.

The behaviour for input values <= 0.0 might be platform dependent.

**Parameters**

+---------+--------------+-----------------------------------------------------------------------------------+
| [in]    | p            | Pointer to the input structure RANGE=[VALID_REAL_1OP_STRUCT]                      |
+---------+--------------+-----------------------------------------------------------------------------------+
| [in]    | in           | ***PSEUDO*** Input RANGE=[(RTS_IEC_REAL)0.0,(RTS_IEC_REAL)0.01..RTS_IEC_REAL_MAX] |
+---------+--------------+-----------------------------------------------------------------------------------+
| [out]   | bNegInfinity | ***PSEUDO*** The return value is -infinity                                        |
+---------+--------------+-----------------------------------------------------------------------------------+
| [out]   | out          | ***PSEUDO*** The logarithm in Base 10 of the input as 32-bit real value or NaN.   |
+---------+--------------+-----------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gabb7a51c573d318687c4cc6f748609bac:

void real32__exp (real_1op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the exponential function of a 32-bit real value.

**Parameters**

+---------+-----------+--------------------------------------------------------------------------+
| [in]    | p         | Pointer to the input structure RANGE=[VALID_REAL_1OP_STRUCT]             |
+---------+-----------+--------------------------------------------------------------------------+
| [in]    | in        | ***PSEUDO*** Input RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]                     |
+---------+-----------+--------------------------------------------------------------------------+
| [out]   | bInfinity | ***PSEUDO*** The return value is infinity                                |
+---------+-----------+--------------------------------------------------------------------------+
| [out]   | out       | ***PSEUDO*** The exponential function of the input as 32-bit real value. |
+---------+-----------+--------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gaa05dd9fdded646f0afc1d5d004fdb161:

void real32__sqrt (real_1op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the square root of a 32-bit real value.

The behaviour for input values < 0.0 might be platform dependent.

**Parameters**

+---------+-----+------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_REAL_1OP_STRUCT]                       |
+---------+-----+------------------------------------------------------------------------------------+
| [in]    | in  | ***PSEUDO*** Input RANGE=[(RTS_IEC_REAL)-0.01,(RTS_IEC_REAL)0.0..RTS_IEC_REAL_MAX] |
+---------+-----+------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The square root of the input as 32-bit real value or NaN.             |
+---------+-----+------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga49df4ecbdc0dc1b6496918f0554d5e18:

void real32__abs (real_1op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the absolute value of a 32-bit real value.

**Parameters**

+---------+-----+--------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_REAL_1OP_STRUCT]       |
+---------+-----+--------------------------------------------------------------------+
| [in]    | in  | ***PSEUDO*** Input RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]               |
+---------+-----+--------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The absolute value of the input as 32-bit real value. |
+---------+-----+--------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga58b146a3aa8c277b98ead36e34cafbac:

void real32__expt (real_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the exponation of a variable with another variable.

The behaviour for input values in1 = 0.0 and in2 < 0.0 might be platform dependent.

The inputs are 32-bit real values.

**Parameters**

+---------+-----------+--------------------------------------------------------------------------+
| [in]    | p         | Pointer to the input structure RANGE=[VALID_REAL_2OP_STRUCT]             |
+---------+-----------+--------------------------------------------------------------------------+
| [in]    | in1       | ***PSEUDO*** Base RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]                      |
+---------+-----------+--------------------------------------------------------------------------+
| [in]    | in2       | ***PSEUDO*** Exponent RANGE=[RTS_RANGE_OF_RTS_IEC_REAL]                  |
+---------+-----------+--------------------------------------------------------------------------+
| [out]   | bInfinity | ***PSEUDO*** The return value is infinity                                |
+---------+-----------+--------------------------------------------------------------------------+
| [out]   | out       | ***PSEUDO*** The exponation of in1 with in2 as 32-bit real value or NaN. |
+---------+-----------+--------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gab1e35b358c909d62373a8bcf14f628a7:

void real64__eq (lreal_cmp_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function determines if two operands equal. The inputs are 64-bit real values.

**Parameters**

+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LREAL_CMP_STRUCT]                                                     |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]                                                           |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]                                                           |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** 1 if the input values are equal, 0 if they are not equal. The result is a 8-bit short integer value. |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gafd142871fefbe4b058dfc4e1e64461d6:

void real64__ne (lreal_cmp_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function determines if two operands are not equal. The inputs are 64-bit real values.

**Parameters**

+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LREAL_CMP_STRUCT]                                                     |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]                                                           |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]                                                           |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** 1 if the input values are not equal, 0 if they are equal. The result is a 8-bit short integer value. |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga98b062447dd06e94e7a459c54cb0f66f:

void real64__lt (lreal_cmp_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function determines if an operand is lower than another. The inputs are 64-bit real values.

**Parameters**

+---------+-----+---------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LREAL_CMP_STRUCT]                                                       |
+---------+-----+---------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]                                                             |
+---------+-----+---------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]                                                             |
+---------+-----+---------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** 1 if in1 is lower than in2, 0 if in1 is not lower than in2. The result is a 8-bit short integer value. |
+---------+-----+---------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gaec399bb32f377f3554cb4e8a18d8044b:

void real64__le (lreal_cmp_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function determines if an operand is lower or equal than another. The inputs are 64-bit real values.

**Parameters**

+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LREAL_CMP_STRUCT]                                                                         |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]                                                                               |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]                                                                               |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** 1 if in1 is lower or equal than in2, 0 if in1 is not lower or equal than in2. The result is a 8-bit short integer value. |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gae8ccb3af053015ce55759f4538f0a353:

void real64__gt (lreal_cmp_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function determines if an operand is greater than another. The inputs are 64-bit real values.

**Parameters**

+---------+-----+-------------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LREAL_CMP_STRUCT]                                                           |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]                                                                 |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]                                                                 |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** 1 if in1 is greater than in2, 0 if in1 is not greater than in2. The result is a 8-bit short integer value. |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gae1af86e55fcae3696f43163f9fa8c836:

void real64__ge (lreal_cmp_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function determines if an operand is greater or equal than another. The inputs are 64-bit real values.

**Parameters**

+---------+-----+-------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LREAL_CMP_STRUCT]                                                                             |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]                                                                                   |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]                                                                                   |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** 1 if in1 is greater or equal than in2, 0 if in1 is not greater or equal than in2. The result is a 8-bit short integer value. |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gace73d2add91e8f44f4b0c19512d013ef:

void real64__add (lreal_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes an addition of two 64-bit real values.

**Parameters**

+---------+--------------+----------------------------------------------------------------+
| [in]    | p            | Pointer to the input structure RANGE=[VALID_LREAL_2OP_STRUCT]  |
+---------+--------------+----------------------------------------------------------------+
| [in]    | in1          | ***PSEUDO*** First summand RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]  |
+---------+--------------+----------------------------------------------------------------+
| [in]    | in2          | ***PSEUDO*** Second summand RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL] |
+---------+--------------+----------------------------------------------------------------+
| [out]   | bNegInfinity | ***PSEUDO*** The return value is -infinity                     |
+---------+--------------+----------------------------------------------------------------+
| [out]   | bInfinity    | ***PSEUDO*** The return value is infinity                      |
+---------+--------------+----------------------------------------------------------------+
| [out]   | out          | ***PSEUDO*** Sum of the two input values as 64-bit real value. |
+---------+--------------+----------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga27efab312fb9178ff887244936c682e5:

void real64__sub (lreal_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a subtraction of one variable from another one. The inputs are 64-bit real values.

**Parameters**

+---------+--------------+-----------------------------------------------------------------------+
| [in]    | p            | Pointer to the input structure RANGE=[VALID_LREAL_2OP_STRUCT]         |
+---------+--------------+-----------------------------------------------------------------------+
| [in]    | in1          | ***PSEUDO*** Minuend RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]               |
+---------+--------------+-----------------------------------------------------------------------+
| [in]    | in2          | ***PSEUDO*** Subtrahend RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]            |
+---------+--------------+-----------------------------------------------------------------------+
| [out]   | bNegInfinity | ***PSEUDO*** The return value is -infinity                            |
+---------+--------------+-----------------------------------------------------------------------+
| [out]   | bInfinity    | ***PSEUDO*** The return value is infinity                             |
+---------+--------------+-----------------------------------------------------------------------+
| [out]   | out          | ***PSEUDO*** Difference of the two input values as 64-bit real value. |
+---------+--------------+-----------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga82ea6953d5de4efd2d028883e123bb97:

void real64__mul (lreal_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a multiplication of two variables. The inputs are 64-bit real values.

**Parameters**

+---------+--------------+--------------------------------------------------------------------+
| [in]    | p            | Pointer to the input structure RANGE=[VALID_LREAL_2OP_STRUCT]      |
+---------+--------------+--------------------------------------------------------------------+
| [in]    | in1          | ***PSEUDO*** First factor RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]       |
+---------+--------------+--------------------------------------------------------------------+
| [in]    | in2          | ***PSEUDO*** Second factor RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]      |
+---------+--------------+--------------------------------------------------------------------+
| [out]   | bNegInfinity | ***PSEUDO*** The return value is -infinity                         |
+---------+--------------+--------------------------------------------------------------------+
| [out]   | bInfinity    | ***PSEUDO*** The return value is infinity                          |
+---------+--------------+--------------------------------------------------------------------+
| [out]   | out          | ***PSEUDO*** Product of the two input values as 64-bit real value. |
+---------+--------------+--------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gad617d7162e26fdc8da06909630ada2e4:

void real64__div (lreal_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a division of two variables. The inputs are 64-bit real values.

The behaviour for divisor = 0.0 might be platform dependent.

**Parameters**

+---------+------------+---------------------------------------------------------------------+
| [in]    | p          | Pointer to the input structure RANGE=[VALID_LREAL_2OP_STRUCT]       |
+---------+------------+---------------------------------------------------------------------+
| [in]    | in1        | ***PSEUDO*** Dividend RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]            |
+---------+------------+---------------------------------------------------------------------+
| [in]    | in2        | ***PSEUDO*** Divisor RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]             |
+---------+------------+---------------------------------------------------------------------+
| [out]   | bException | ***PSEUDO*** Exception thrown                                       |
+---------+------------+---------------------------------------------------------------------+
| [out]   | out        | ***PSEUDO*** Quotient of the two input values as 64-bit real value. |
+---------+------------+---------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga961e6016babbfbb9944adbc64b95deba:

void real64__min (lreal_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function builds the minimum of two variables. The inputs are 64-bit real values.

**Parameters**

+---------+-----+-----------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LREAL_2OP_STRUCT]   |
+---------+-----+-----------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]         |
+---------+-----+-----------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]         |
+---------+-----+-----------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The lesser of the two values as 64-bit real value. |
+---------+-----+-----------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga3281d5ed7e5886ac6042a662d2d10b51:

void real64__max (lreal_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function builds the maximum of two variables. The inputs are 64-bit real values.

**Parameters**

+---------+-----+------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LREAL_2OP_STRUCT]    |
+---------+-----+------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]          |
+---------+-----+------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]          |
+---------+-----+------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The greater of the two values as 64-bit real value. |
+---------+-----+------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga864db9d9b787c99fa9c58b1b031092ff:

void real64__limit (lreal_3op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function limits an input value to a lower and an upper bound. The inputs are 64-bit real values.

**Parameters**

+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LREAL_3OP_STRUCT]                                                                                                 |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Lower bound RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]                                                                                                   |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input value RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]                                                                                                   |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in3 | ***PSEUDO*** Upper bound RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]                                                                                                   |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** in2 if in2 is in the range between in1 and in3, in1 if in2 is lower than in1, in3 if in2 is greater than in3. The result is a 64-bit real value. |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga073d0a5f328415628e8b8c7dcce3c53b:

void real64__trunc (lreal_trunc_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function converts a 64-bit real value to a 64-bit integer value.

**Parameters**

+---------+-----+-----------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LREAL_TRUNC_STRUCT]             |
+---------+-----+-----------------------------------------------------------------------------+
| [in]    | in  | ***PSEUDO*** Input RANGE=[ANY_MIN, ANY_MID, ANY_MAX]                        |
+---------+-----+-----------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The whole number portion of the input as 64-bit integer value. |
+---------+-----+-----------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga416bb831ff5757b8b77e77ab2b410425:

void real64__tan (lreal_1op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the tangent of a 64-bit real value.

The behaviour for input values that are multiples of PI_HALF might be platform dependent.

**Parameters**

+---------+-----+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LREAL_1OP_STRUCT]                                                                                                                    |
+---------+-----+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in  | ***PSEUDO*** Input RANGE=[(RTS_IEC_LREAL)-PI_HALF,(RTS_IEC_LREAL)-PI_HALF+MIN_DELTA..(RTS_IEC_LREAL)0,(RTS_IEC_LREAL)0..(RTS_IEC_LREAL)PI_HALF-MIN_DELTA,(RTS_IEC_LREAL)PI_HALF] |
+---------+-----+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The tangent of the input as 64-bit real value or NaN.                                                                                                               |
+---------+-----+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga227a39ed4fdb11dc45138f6801020da2:

void real64__sin (lreal_1op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the sine of a 64-bit real value.

**Parameters**

+---------+-----+------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LREAL_1OP_STRUCT]                                                    |
+---------+-----+------------------------------------------------------------------------------------------------------------------+
| [in]    | in  | ***PSEUDO*** Input RANGE=[(RTS_IEC_LREAL)-PI,(RTS_IEC_LREAL)-PI_HALF,0,(RTS_IEC_LREAL)PI_HALF,(RTS_IEC_LREAL)PI] |
+---------+-----+------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The sine of the input as 64-bit real value.                                                         |
+---------+-----+------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga54dc39113d6f704b0661cc881ece5627:

void real64__cos (lreal_1op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the cosine of a 64-bit real value.

**Parameters**

+---------+-----+------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LREAL_1OP_STRUCT]                                                    |
+---------+-----+------------------------------------------------------------------------------------------------------------------+
| [in]    | in  | ***PSEUDO*** Input RANGE=[(RTS_IEC_LREAL)-PI,(RTS_IEC_LREAL)-PI_HALF,0,(RTS_IEC_LREAL)PI_HALF,(RTS_IEC_LREAL)PI] |
+---------+-----+------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The cosine of the input as 64-bit real value.                                                       |
+---------+-----+------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga72b673d154c8e8143d2c0ff149e38bf2:

void real64__atan (lreal_1op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the arc tangent (inverse function of tangent) of a 64-bit real value.

**Parameters**

+---------+-----+-----------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LREAL_1OP_STRUCT]   |
+---------+-----+-----------------------------------------------------------------+
| [in]    | in  | ***PSEUDO*** Input RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]           |
+---------+-----+-----------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The arc tangent of the input as 64-bit real value. |
+---------+-----+-----------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga51755e07a5bf475f932448d7ffdbc2fa:

void real64__asin (lreal_1op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the arc sine (inverse function of sine) of a 64-bit real value.

The behaviour for input values < -1.0 and > 1.0 might be platform dependent.

**Parameters**

+---------+-----+-------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LREAL_1OP_STRUCT]                                               |
+---------+-----+-------------------------------------------------------------------------------------------------------------+
| [in]    | in  | ***PSEUDO*** Input RANGE=[(RTS_IEC_LREAL)-1.01,(RTS_IEC_LREAL)-1.0..(RTS_IEC_LREAL)1.0,(RTS_IEC_LREAL)1.01] |
+---------+-----+-------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The arc sine of the input as 64-bit real value or NaN.                                         |
+---------+-----+-------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga2676e68bcf816a8458c08d878245d389:

void real64__acos (lreal_1op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the arc cosine (inverse function of cosine) of a 64-bit real value.

The behaviour for input values < -1.0 and > 1.0 might be platform dependent.

**Parameters**

+---------+-----+-------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LREAL_1OP_STRUCT]                                               |
+---------+-----+-------------------------------------------------------------------------------------------------------------+
| [in]    | in  | ***PSEUDO*** Input RANGE=[(RTS_IEC_LREAL)-1.01,(RTS_IEC_LREAL)-1.0..(RTS_IEC_LREAL)1.0,(RTS_IEC_LREAL)1.01] |
+---------+-----+-------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The arc cosine of the input as 64-bit real value or NaN.                                       |
+---------+-----+-------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga599f6bf184ffe2482c0614261ac22e37:

void real64__ln (lreal_1op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the natural logarithm of a 64-bit real value.

The behaviour for input values <= 0.0 might be platform dependent.

**Parameters**

+---------+--------------+------------------------------------------------------------------------------+
| [in]    | p            | Pointer to the input structure RANGE=[VALID_LREAL_1OP_STRUCT]                |
+---------+--------------+------------------------------------------------------------------------------+
| [in]    | in           | ***PSEUDO*** Input RANGE=[0.0,0.01..RTS_IEC_LREAL_MAX]                       |
+---------+--------------+------------------------------------------------------------------------------+
| [out]   | bNegInfinity | ***PSEUDO*** The return value is -infinity                                   |
+---------+--------------+------------------------------------------------------------------------------+
| [out]   | out          | ***PSEUDO*** The natural logarithm of the input as 64-bit real value or NaN. |
+---------+--------------+------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gaa9e95537cb5b0c8950c644b3f5e48f16:

void real64__log (lreal_1op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the logarithm in Base 10 of a 64-bit real value.

The behaviour for input values <= 0.0 might be platform dependent.

**Parameters**

+---------+--------------+--------------------------------------------------------------------------------------+
| [in]    | p            | Pointer to the input structure RANGE=[VALID_LREAL_1OP_STRUCT]                        |
+---------+--------------+--------------------------------------------------------------------------------------+
| [in]    | in           | ***PSEUDO*** Input RANGE=[(RTS_IEC_LREAL)0.0,(RTS_IEC_LREAL)0.01..RTS_IEC_LREAL_MAX] |
+---------+--------------+--------------------------------------------------------------------------------------+
| [out]   | bNegInfinity | ***PSEUDO*** The return value is -infinity                                           |
+---------+--------------+--------------------------------------------------------------------------------------+
| [out]   | out          | ***PSEUDO*** The logarithm in Base 10 of the input as 64-bit real value or NaN.      |
+---------+--------------+--------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga91011cc7f6e2a8bff2de8788fab23cca:

void real64__exp (lreal_1op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the exponential function of a 64-bit real value.

**Parameters**

+---------+-----------+--------------------------------------------------------------------------+
| [in]    | p         | Pointer to the input structure RANGE=[VALID_LREAL_1OP_STRUCT]            |
+---------+-----------+--------------------------------------------------------------------------+
| [in]    | in        | ***PSEUDO*** Input RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]                    |
+---------+-----------+--------------------------------------------------------------------------+
| [out]   | bInfinity | ***PSEUDO*** The return value is infinity                                |
+---------+-----------+--------------------------------------------------------------------------+
| [out]   | out       | ***PSEUDO*** The exponential function of the input as 64-bit real value. |
+---------+-----------+--------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gacbb4cbb6ccfcbb989eea59541c5c819a:

void real64__sqrt (lreal_1op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the square root of a 64-bit real value.

The behaviour for input values < 0.0 might be platform dependent.

**Parameters**

+---------+-----+---------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LREAL_1OP_STRUCT]                         |
+---------+-----+---------------------------------------------------------------------------------------+
| [in]    | in  | ***PSEUDO*** Input RANGE=[(RTS_IEC_LREAL)-0.01,(RTS_IEC_LREAL)0.0..RTS_IEC_LREAL_MAX] |
+---------+-----+---------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The square root of the input as 64-bit real value or NaN.                |
+---------+-----+---------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga8f43ee606254b187a38771ca0699b449:

void real64__abs (lreal_1op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the absolute value of a 64-bit real value.

**Parameters**

+---------+-----+--------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LREAL_1OP_STRUCT]      |
+---------+-----+--------------------------------------------------------------------+
| [in]    | in  | ***PSEUDO*** Input RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]              |
+---------+-----+--------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The absolute value of the input as 64-bit real value. |
+---------+-----+--------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga60161e3882b3e7d0648b580d0a2a29eb:

void real64__expt (lreal_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the exponation of a variable with another variable.

The behaviour for input values in1 = 0.0 and in2 < 0.0 might be platform dependent.

The inputs are 64-bit real values.

**Parameters**

+---------+-----------+--------------------------------------------------------------------------+
| [in]    | p         | Pointer to the input structure RANGE=[VALID_LREAL_2OP_STRUCT]            |
+---------+-----------+--------------------------------------------------------------------------+
| [in]    | in1       | ***PSEUDO*** Base RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]                     |
+---------+-----------+--------------------------------------------------------------------------+
| [in]    | in2       | ***PSEUDO*** Exponent RANGE=[RTS_RANGE_OF_RTS_IEC_LREAL]                 |
+---------+-----------+--------------------------------------------------------------------------+
| [out]   | bInfinity | ***PSEUDO*** The return value is infinity                                |
+---------+-----------+--------------------------------------------------------------------------+
| [out]   | out       | ***PSEUDO*** The exponation of in1 with in2 as 64-bit real value or NaN. |
+---------+-----------+--------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gac0397a1fb08a568fa15899485b10cd51:

void int64__add (lint_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes an addition of two 64-bit integer values.

**Parameters**

+---------+-----+-------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LINT_2OP_STRUCT]      |
+---------+-----+-------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** First summand RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]      |
+---------+-----+-------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Second summand RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]     |
+---------+-----+-------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Sum of the two input values as 64-bit integer value. |
+---------+-----+-------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gac9e35b83037fd02adb923d2e6244050c:

void int64__sub (lint_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a subtraction of one variable from another one. The inputs are 64-bit integer values.

**Parameters**

+---------+-----+--------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LINT_2OP_STRUCT]             |
+---------+-----+--------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Minuend RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]                   |
+---------+-----+--------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Subtrahend RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]                |
+---------+-----+--------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Difference of the two input values as 64-bit integer value. |
+---------+-----+--------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga1bf7d9be0bcd1aa491908ba4c4e3960b:

void int64__mul (lint_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a multiplication of two variables. The inputs are 64-bit integer values.

**Parameters**

+---------+-----+-----------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LINT_2OP_STRUCT]          |
+---------+-----+-----------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** First factor RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]           |
+---------+-----+-----------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Second factor RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]          |
+---------+-----+-----------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Product of the two input values as 64-bit integer value. |
+---------+-----+-----------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga7a7babea0d6bfcf76f885ab433b62fde:

void int64__div (lint_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a division of two variables. The inputs are 64-bit integer values.

The behaviour for divisor = 0 might be platform dependent.

**Parameters**

+---------+------------+------------------------------------------------------------------------+
| [in]    | p          | Pointer to the input structure RANGE=[VALID_LINT_2OP_STRUCT]           |
+---------+------------+------------------------------------------------------------------------+
| [in]    | in1        | ***PSEUDO*** Dividend RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]                |
+---------+------------+------------------------------------------------------------------------+
| [in]    | in2        | ***PSEUDO*** Divisor RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]                 |
+---------+------------+------------------------------------------------------------------------+
| [out]   | bException | ***PSEUDO*** Exception thrown                                          |
+---------+------------+------------------------------------------------------------------------+
| [out]   | out        | ***PSEUDO*** Quotient of the two input values as 64-bit integer value. |
+---------+------------+------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga39e0a7bfd5b0cf1b2fb0b7f2fb19020e:

void int64__mod (lint_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the remainder of division of one variable by another. The inputs are 64-bit integer values.

**Parameters**

+---------+-----+---------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LINT_2OP_STRUCT]                                                  |
+---------+-----+---------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Dividend RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]                                                       |
+---------+-----+---------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Divisor RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]                                                        |
+---------+-----+---------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Remainder of division of the two input values as 64-bit integer value, or 0 if the divisor is 0. |
+---------+-----+---------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga9078bc2372684f51b6fd84d28552be98:

void int64__abs (lint_1op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the absolute value of a 64-bit integer value.

**Parameters**

+---------+-----+------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LINT_1OP_STRUCT]                                         |
+---------+-----+------------------------------------------------------------------------------------------------------+
| [in]    | in  | ***PSEUDO*** Input RANGE=[RTS_IEC_LINT_MIN,RTS_IEC_LINT_MIN+1,0,RTS_IEC_LINT_MAX/2,RTS_IEC_LINT_MAX] |
+---------+-----+------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The absolute value of the input as 64-bit integer value.                                |
+---------+-----+------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga5727fb50251e2a00bba114d59604e2cc:

void int64__min (lint_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function builds the minimum of two variables. The inputs are 64-bit integer values.

**Parameters**

+---------+-----+--------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LINT_2OP_STRUCT]       |
+---------+-----+--------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]             |
+---------+-----+--------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]             |
+---------+-----+--------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The lesser of the two values as 64-bit integer value. |
+---------+-----+--------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga9878f5ffbc34f13e1c883aa0819b21b9:

void int64__max (lint_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function builds the maximum of two variables. The inputs are 64-bit integer values.

**Parameters**

+---------+-----+---------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LINT_2OP_STRUCT]        |
+---------+-----+---------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]              |
+---------+-----+---------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]              |
+---------+-----+---------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The greater of the two values as 64-bit integer value. |
+---------+-----+---------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga485449676d68a20cfb2f9e8488d4e303:

void int64__limit (lint_3op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function limits an input value to a lower and an upper bound. The inputs are 64-bit integer values.

**Parameters**

+---------+-----+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LINT_3OP_STRUCT]                                                                                                     |
+---------+-----+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Lower bound RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]                                                                                                       |
+---------+-----+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input value RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]                                                                                                       |
+---------+-----+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in3 | ***PSEUDO*** Upper bound RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]                                                                                                       |
+---------+-----+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** in2 if in2 is in the range between in1 and in3, in1 if in2 is lower than in1, in3 if in2 is greater than in3. The result is a 64-bit integer value. |
+---------+-----+------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gae7b6d1fba99fbee56e4f461c9c3ca13b:

void int64__eq (lint_cmp_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function determines if two operands equal. The inputs are 64-bit integer values.

**Parameters**

+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LINT_CMP_STRUCT]                                                      |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]                                                            |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]                                                            |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** 1 if the input values are equal, 0 if they are not equal. The result is a 8-bit short integer value. |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga897d0470203b57d397021f1889980290:

void int64__ne (lint_cmp_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function determines if two operands are not equal. The inputs are 64-bit integer values.

**Parameters**

+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LINT_CMP_STRUCT]                                                      |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]                                                            |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]                                                            |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** 1 if the input values are not equal, 0 if they are equal. The result is a 8-bit short integer value. |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gad3e12f744a21db039fcf160e933e6ba4:

void int64__lt (lint_cmp_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function determines if an operand is lower than another. The inputs are 64-bit integer values.

**Parameters**

+---------+-----+---------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LINT_CMP_STRUCT]                                                        |
+---------+-----+---------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]                                                              |
+---------+-----+---------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]                                                              |
+---------+-----+---------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** 1 if in1 is lower than in2, 0 if in1 is not lower than in2. The result is a 8-bit short integer value. |
+---------+-----+---------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga432c62c5d67ec892f46e8c2e07053dac:

void int64__le (lint_cmp_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function determines if an operand is lower or equal than another. The inputs are 64-bit integer values.

**Parameters**

+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LINT_CMP_STRUCT]                                                                          |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]                                                                                |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]                                                                                |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** 1 if in1 is lower or equal than in2, 0 if in1 is not lower or equal than in2. The result is a 8-bit short integer value. |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga053243a2428a77ead92d3261644d1d10:

void int64__gt (lint_cmp_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function determines if an operand is greater than another. The inputs are 64-bit integer values.

**Parameters**

+---------+-----+-------------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LINT_CMP_STRUCT]                                                            |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]                                                                  |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]                                                                  |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** 1 if in1 is greater than in2, 0 if in1 is not greater than in2. The result is a 8-bit short integer value. |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga9be40a2fb688510f2030bb875963c453:

void int64__ge (lint_cmp_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function determines if an operand is greater or equal than another. The inputs are 64-bit integer values.

**Parameters**

+---------+-----+-------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LINT_CMP_STRUCT]                                                                              |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]                                                                                    |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]                                                                                    |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** 1 if in1 is greater or equal than in2, 0 if in1 is not greater or equal than in2. The result is a 8-bit short integer value. |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga6d548c2946b0da8ab28a91b6a05fa0a8:

void int64__shr (lint_shift_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a bitwise right-shift on a 64-bit integer value.

The the newly exposed bits will be filled with the value of the topmost bit, that is 1 for negative and 0 for positive input values.

**Parameters**

+---------+-----+----------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_LINT_SHIFT_STRUCT]                               |
+---------+-----+----------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Operand to be shifted to the right RANGE=[RTS_RANGE_OF_RTS_IEC_LINT]            |
+---------+-----+----------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Number of bits, by which the operand gets shifted to the right RANGE=[0..63,64] |
+---------+-----+----------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Bitwise right-shifted 64-bit integer value.                                     |
+---------+-----+----------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gae2851145a6a0cf176f208affa6ecbed8:

void uint64__add (ulint_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes an addition of two 64-bit unsigned integer values.

**Parameters**

+---------+-----+----------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_ULINT_2OP_STRUCT]              |
+---------+-----+----------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** First summand RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]              |
+---------+-----+----------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Second summand RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]             |
+---------+-----+----------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Sum of the two input values as 64-bit unsigned integer value. |
+---------+-----+----------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gafdc7567fc31c95c393bc773708075e77:

void uint64__sub (ulint_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a subtraction of one variable from another one. The inputs are 64-bit unsigned integer values.

**Parameters**

+---------+-----+-----------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_ULINT_2OP_STRUCT]                     |
+---------+-----+-----------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Minuend RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                           |
+---------+-----+-----------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Subtrahend RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                        |
+---------+-----+-----------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Difference of the two input values as 64-bit unsigned integer value. |
+---------+-----+-----------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gabd7b2bc3f3b4dbd4d6d2342f0ac57e33:

void uint64__mul (ulint_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a multiplication of two variables. The inputs are 64-bit unsigned integer values.

**Parameters**

+---------+-----+--------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_ULINT_2OP_STRUCT]                  |
+---------+-----+--------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** First factor RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                   |
+---------+-----+--------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Second factor RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                  |
+---------+-----+--------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Product of the two input values as 64-bit unsigned integer value. |
+---------+-----+--------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gab65cbee452b013d546c302d68b519c0b:

void uint64__div (ulint_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a division of two variables. The inputs are 64-bit unsigned integer values.

The behaviour for divisor = 0 might be platform dependent.

**Parameters**

+---------+------------+---------------------------------------------------------------------------------+
| [in]    | p          | Pointer to the input structure RANGE=[VALID_ULINT_2OP_STRUCT]                   |
+---------+------------+---------------------------------------------------------------------------------+
| [in]    | in1        | ***PSEUDO*** Dividend RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                        |
+---------+------------+---------------------------------------------------------------------------------+
| [in]    | in2        | ***PSEUDO*** Divisor RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                         |
+---------+------------+---------------------------------------------------------------------------------+
| [out]   | bException | ***PSEUDO*** Exception thrown                                                   |
+---------+------------+---------------------------------------------------------------------------------+
| [out]   | out        | ***PSEUDO*** Quotient of the two input values as 64-bit unsigned integer value. |
+---------+------------+---------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gae423ececdbb0c37e08adc94b2ea2cc09:

void uint64__mod (ulint_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the remainder of division of one variable by another. The inputs are 64-bit unsigned integer values.

**Parameters**

+---------+-----+------------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_ULINT_2OP_STRUCT]                                                          |
+---------+-----+------------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Dividend RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                                                               |
+---------+-----+------------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Divisor RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                                                                |
+---------+-----+------------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Remainder of division of the two input values as 64-bit unsigned integer value, or 0 if the divisor is 0. |
+---------+-----+------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga6293aa82f37b70f7424622b262639f19:

void uint64__min (ulint_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function builds the minimum of two variables. The inputs are 64-bit unsigned integer values.

**Parameters**

+---------+-----+-----------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_ULINT_2OP_STRUCT]               |
+---------+-----+-----------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                     |
+---------+-----+-----------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                     |
+---------+-----+-----------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The lesser of the two values as 64-bit unsigned integer value. |
+---------+-----+-----------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga6648e7fb690181500017d9784dbef4c5:

void uint64__max (ulint_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function builds the maximum of two variables. The inputs are 64-bit unsigned integer values.

**Parameters**

+---------+-----+------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_ULINT_2OP_STRUCT]                |
+---------+-----+------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                      |
+---------+-----+------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                      |
+---------+-----+------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The greater of the two values as 64-bit unsigned integer value. |
+---------+-----+------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gae0e5a2f8226084656876970124e48d10:

void uint64__limit (ulint_3op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function limits an input value to a lower and an upper bound. The inputs are 64-bit unsigned integer values.

**Parameters**

+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_ULINT_3OP_STRUCT]                                                                                                             |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Lower bound RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                                                                                                               |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input value RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                                                                                                               |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in3 | ***PSEUDO*** Upper bound RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                                                                                                               |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** in2 if in2 is in the range between in1 and in3, in1 if in2 is lower than in1, in3 if in2 is greater than in3. The result is a 64-bit unsigned integer value. |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga55007d5307477bfbd27aaba2c4fa525a:

void uint64__ror (ulint_shift_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a bitwise rotation to the right of a 64-bit unsigned integer value.

The input operand will be shifted one bit position to the right n times while the bit that is furthest to the left will be reinserted from the left.

**Parameters**

+---------+-----+-----------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_ULINT_SHIFT_STRUCT]                                                 |
+---------+-----+-----------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Operand to be rotated to the right RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                              |
+---------+-----+-----------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Number n of bits, by which the operand gets rotated to the right RANGE=[RTS_RANGE_OF_RTS_IEC_UINT] |
+---------+-----+-----------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Bitwise right rotated 64-bit unsigned integer value.                                               |
+---------+-----+-----------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gaa79fe6f70a6de9a4c095f656284fa447:

void uint64__rol (ulint_shift_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a bitwise rotation to the left of a 64-bit unsigned integer value.

The input operand will be shifted one bit position to the left n times while the bit that is furthest to the right will be reinserted from the right.

**Parameters**

+---------+-----+----------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_ULINT_SHIFT_STRUCT]                                                |
+---------+-----+----------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Operand to be rotated to the left RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                              |
+---------+-----+----------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Number n of bits, by which the operand gets rotated to the left RANGE=[RTS_RANGE_OF_RTS_IEC_UINT] |
+---------+-----+----------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Bitwise left rotated 64-bit unsigned integer value.                                               |
+---------+-----+----------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga293cbd38fe8c7661e09a4d50d4c1b840:

void uint64__shl (ulint_shift_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a bitwise left-shift on a 64-bit unsigned integer value.

The the newly exposed bits will be filled with 0.

**Parameters**

+---------+-----+---------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_ULINT_SHIFT_STRUCT]                             |
+---------+-----+---------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Operand to be shifted to the left RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]           |
+---------+-----+---------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Number of bits, by which the operand gets shifted to the left RANGE=[0..63,64] |
+---------+-----+---------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Bitwise left-shifted 64-bit unsigned integer value.                            |
+---------+-----+---------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga7ed95a99cf450b87bb76c3b685b235a2:

void uint64__shr (ulint_shift_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a bitwise right-shift on a 64-bit unsigned integer value.

The the newly exposed bits will be filled with 0.

**Parameters**

+---------+-----+----------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_ULINT_SHIFT_STRUCT]                              |
+---------+-----+----------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Operand to be shifted to the right RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]           |
+---------+-----+----------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Number of bits, by which the operand gets shifted to the right RANGE=[0..63,64] |
+---------+-----+----------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Bitwise right-shifted 64-bit unsigned integer value.                            |
+---------+-----+----------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga3c16f9f9eeb84a22eaf566ca5b8203dd:

void uint64__and (ulint_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a bitwise AND of two 64-bit unsigned integer values.

If the input bits each are 1, then the resulting bit will be 1, otherwise 0.

**Parameters**

+---------+-----+------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_ULINT_2OP_STRUCT]                      |
+---------+-----+------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                            |
+---------+-----+------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                            |
+---------+-----+------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Bitwise AND of the two input values as 64-bit unsigned integer value. |
+---------+-----+------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga2bd5eebdbc5954ea590f60b53f120f5e:

void uint64__or (ulint_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a bitwise OR of two 64-bit unsigned integer values.

If at least one of the input bits is 1, the resulting bit will be 1, otherwise 0.

**Parameters**

+---------+-----+-----------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_ULINT_2OP_STRUCT]                     |
+---------+-----+-----------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                           |
+---------+-----+-----------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                           |
+---------+-----+-----------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Bitwise OR of the two input values as 64-bit unsigned integer value. |
+---------+-----+-----------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gaa9292aa33445e1636faa214668003d90:

void uint64__xor (ulint_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a bitwise XOR of two 64-bit unsigned integer values.

If only one of the input bits is 1, then the resulting bit will be 1; if both or none are 1, the resulting bit will be 0.

**Parameters**

+---------+-----+------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_ULINT_2OP_STRUCT]                      |
+---------+-----+------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                            |
+---------+-----+------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                            |
+---------+-----+------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Bitwise XOR of the two input values as 64-bit unsigned integer value. |
+---------+-----+------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga76c561736a217c8e78a6145d1e75b2e0:

void uint64__not (ulint_1op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a bitwise NOT of a 64-bit unsigned integer value.

The resulting bit will be 1, if the corresponding input bit is 0 and vice versa.

**Parameters**

+---------+-----+-------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_ULINT_1OP_STRUCT]                 |
+---------+-----+-------------------------------------------------------------------------------+
| [in]    | in  | ***PSEUDO*** Input RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                         |
+---------+-----+-------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Bitwise NOT of the input value as 64-bit unsigned integer value. |
+---------+-----+-------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga13cdc303876b518e628fbe29fd1d9ce6:

void uint64__eq (ulint_cmp_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function determines if two operands equal. The inputs are 64-bit unsigned integer values.

**Parameters**

+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_ULINT_CMP_STRUCT]                                                     |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                                                           |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                                                           |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** 1 if the input values are equal, 0 if they are not equal. The result is a 8-bit short integer value. |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gaad4473c53b3258c68956ecf074e1cc60:

void uint64__ne (ulint_cmp_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function determines if two operands are not equal. The inputs are 64-bit unsigned integer values.

**Parameters**

+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_ULINT_CMP_STRUCT]                                                     |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                                                           |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                                                           |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** 1 if the input values are not equal, 0 if they are equal. The result is a 8-bit short integer value. |
+---------+-----+-------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gaed1171b1cb290d33c034095d0041d38c:

void uint64__lt (ulint_cmp_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function determines if an operand is lower than another. The inputs are 64-bit unsigned integer values.

**Parameters**

+---------+-----+---------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_ULINT_CMP_STRUCT]                                                       |
+---------+-----+---------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                                                             |
+---------+-----+---------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                                                             |
+---------+-----+---------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** 1 if in1 is lower than in2, 0 if in1 is not lower than in2. The result is a 8-bit short integer value. |
+---------+-----+---------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga124dded1e89c1d241b32bcb8ac81fc98:

void uint64__le (ulint_cmp_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function determines if an operand is lower or equal than another. The inputs are 64-bit unsigned integer values.

**Parameters**

+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_ULINT_CMP_STRUCT]                                                                         |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                                                                               |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                                                                               |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** 1 if in1 is lower or equal than in2, 0 if in1 is not lower or equal than in2. The result is a 8-bit short integer value. |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gaec3fccbdbc82d39720124cb2c394ca23:

void uint64__gt (ulint_cmp_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function determines if an operand is greater than another. The inputs are 64-bit unsigned integer values.

**Parameters**

+---------+-----+-------------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_ULINT_CMP_STRUCT]                                                           |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                                                                 |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                                                                 |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** 1 if in1 is greater than in2, 0 if in1 is not greater than in2. The result is a 8-bit short integer value. |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga3ecaa4a4cd65c1b76e05e5e89b0de78a:

void uint64__ge (ulint_cmp_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function determines if an operand is greater or equal than another. The inputs are 64-bit unsigned integer values.

**Parameters**

+---------+-----+-------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_ULINT_CMP_STRUCT]                                                                             |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Input 1 RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                                                                                   |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input 2 RANGE=[RTS_RANGE_OF_RTS_IEC_ULINT]                                                                                   |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** 1 if in1 is greater or equal than in2, 0 if in1 is not greater or equal than in2. The result is a 8-bit short integer value. |
+---------+-----+-------------------------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga359259fa4525a5060ddd86e8b201b3d5:

void int32__mul (dint_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a multiplication of two variables. The inputs are 32-bit integer values.

**Parameters**

+---------+-----+-----------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_DINT_2OP_STRUCT]          |
+---------+-----+-----------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** First factor RANGE=[RTS_RANGE_OF_RTS_IEC_DINT]           |
+---------+-----+-----------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Second factor RANGE=[RTS_RANGE_OF_RTS_IEC_DINT]          |
+---------+-----+-----------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Product of the two input values as 32-bit integer value. |
+---------+-----+-----------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga2a19c8a96c0c0f03cdfea216bb770790:

void uint32__mul (udint_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a multiplication of two variables. The inputs are 32-bit unsigned integer values.

**Parameters**

+---------+-----+--------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_UDINT_2OP_STRUCT]                  |
+---------+-----+--------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** First factor RANGE=[RTS_RANGE_OF_RTS_IEC_UDINT]                   |
+---------+-----+--------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Second factor RANGE=[RTS_RANGE_OF_RTS_IEC_UDINT]                  |
+---------+-----+--------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Product of the two input values as 32-bit unsigned integer value. |
+---------+-----+--------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gac87f2ae78b211bf3b45a7cdb2ae53890:

void int32__div (dint_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a division of two variables. The inputs are 32-bit integer values.

The behaviour for divisor = 0 might be platform dependent.

**Parameters**

+---------+------------+------------------------------------------------------------------------+
| [in]    | p          | Pointer to the input structure RANGE=[VALID_DINT_2OP_STRUCT]           |
+---------+------------+------------------------------------------------------------------------+
| [in]    | in1        | ***PSEUDO*** Dividend RANGE=[RTS_RANGE_OF_RTS_IEC_DINT]                |
+---------+------------+------------------------------------------------------------------------+
| [in]    | in2        | ***PSEUDO*** Divisor RANGE=[RTS_RANGE_OF_RTS_IEC_DINT]                 |
+---------+------------+------------------------------------------------------------------------+
| [out]   | bException | ***PSEUDO*** Exception thrown                                          |
+---------+------------+------------------------------------------------------------------------+
| [out]   | out        | ***PSEUDO*** Quotient of the two input values as 32-bit integer value. |
+---------+------------+------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga882b7e5ff557ad49710817cd077634dc:

void int32__mod (dint_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the remainder of division of one variable by another. The inputs are 32-bit integer values.

**Parameters**

+---------+-----+---------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_DINT_2OP_STRUCT]                                                  |
+---------+-----+---------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Dividend RANGE=[RTS_RANGE_OF_RTS_IEC_DINT]                                                       |
+---------+-----+---------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Divisor RANGE=[RTS_RANGE_OF_RTS_IEC_DINT]                                                        |
+---------+-----+---------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Remainder of division of the two input values as 32-bit integer value, or 0 if the divisor is 0. |
+---------+-----+---------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gafee2092953667ee61fccbfd92f7a8939:

void uint32__div (udint_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a division of two variables. The inputs are 32-bit unsigned integer values.

The behaviour for divisor =0 might be platform dependent.

**Parameters**

+---------+------------+---------------------------------------------------------------------------------+
| [in]    | p          | Pointer to the input structure RANGE=[VALID_UDINT_2OP_STRUCT]                   |
+---------+------------+---------------------------------------------------------------------------------+
| [in]    | in1        | ***PSEUDO*** Dividend RANGE=[RTS_RANGE_OF_RTS_IEC_UDINT]                        |
+---------+------------+---------------------------------------------------------------------------------+
| [in]    | in2        | ***PSEUDO*** Divisor RANGE=[RTS_RANGE_OF_RTS_IEC_UDINT]                         |
+---------+------------+---------------------------------------------------------------------------------+
| [out]   | bException | ***PSEUDO*** Exception thrown                                                   |
+---------+------------+---------------------------------------------------------------------------------+
| [out]   | out        | ***PSEUDO*** Quotient of the two input values as 32-bit unsigned integer value. |
+---------+------------+---------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gaac85de139744020d33346be394b2bcd1:

void uint32__mod (udint_2op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the remainder of division of one variable by another. The inputs are 32-bit unsigned integer values.

**Parameters**

+---------+-----+------------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_UDINT_2OP_STRUCT]                                                          |
+---------+-----+------------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Dividend RANGE=[RTS_RANGE_OF_RTS_IEC_UDINT]                                                               |
+---------+-----+------------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Divisor RANGE=[RTS_RANGE_OF_RTS_IEC_UDINT]                                                                |
+---------+-----+------------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Remainder of division of the two input values as 32-bit unsigned integer value, or 0 if the divisor is 0. |
+---------+-----+------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga3d3b8751475d8e7e6feaa5e03b24e724:

void int32__abs (dint_1op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function calculates the absolute value of a 32-bit integer value.

**Parameters**

+---------+-----+------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_DINT_1OP_STRUCT]                                         |
+---------+-----+------------------------------------------------------------------------------------------------------+
| [in]    | in  | ***PSEUDO*** Input RANGE=[RTS_IEC_DINT_MIN,RTS_IEC_DINT_MIN+1,0,RTS_IEC_DINT_MAX/2,RTS_IEC_DINT_MAX] |
+---------+-----+------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** The absolute value of the input as 32-bit integer value.                                |
+---------+-----+------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga38e88835f387e363b1939e932be740e4:

void uint32__limit (udint_3op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function limits an input value to a lower and an upper bound. The inputs are 32-bit unsigned integer values.

**Parameters**

+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_UDINT_3OP_STRUCT]                                                                                                             |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Lower bound RANGE=[RTS_RANGE_OF_RTS_IEC_UDINT]                                                                                                               |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input value RANGE=[RTS_RANGE_OF_RTS_IEC_UDINT]                                                                                                               |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in3 | ***PSEUDO*** Upper bound RANGE=[RTS_RANGE_OF_RTS_IEC_UDINT]                                                                                                               |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** in2 if in2 is in the range between in1 and in3, in1 if in2 is lower than in1, in3 if in2 is greater than in3. The result is a 32-bit unsigned integer value. |
+---------+-----+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gabed060598d3bd4853eeb03458e21e56a:

void int32__limit (dint_3op_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function limits an input value to a lower and an upper bound. The inputs are 32-bit integer values.

**Parameters**

+---------+-----+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_DINT_3OP_STRUCT]                                                                                                     |
+---------+-----+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Lower bound RANGE=[RTS_RANGE_OF_RTS_IEC_DINT]                                                                                                       |
+---------+-----+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Input value RANGE=[RTS_RANGE_OF_RTS_IEC_DINT]                                                                                                       |
+---------+-----+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in3 | ***PSEUDO*** Upper bound RANGE=[RTS_RANGE_OF_RTS_IEC_DINT]                                                                                                       |
+---------+-----+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** in2 if in2 is in the range between in1 and in3, in1 if in2 is lower than in1, in3 if in2 is greater than in3. The result is a 32-bit integer value. |
+---------+-----+------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga452448038422bb8b548da9c7ab6bce44:

void uint32__rol (udint_shift_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a bitwise rotation to the left of a 32-bit unsigned integer value.

The input operand will be shifted one bit position to the left n times while the bit that is furthest to the right will be reinserted from the right.

**Parameters**

+---------+-----+----------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_UDINT_SHIFT_STRUCT]                                                |
+---------+-----+----------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Operand to be rotated to the left RANGE=[RTS_RANGE_OF_RTS_IEC_UDINT]                              |
+---------+-----+----------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Number n of bits, by which the operand gets rotated to the left RANGE=[RTS_RANGE_OF_RTS_IEC_UINT] |
+---------+-----+----------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Bitwise left rotated 32-bit unsigned integer value.                                               |
+---------+-----+----------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga455b3b0b4e8743fb6fc6b65d11219480:

void uint32__ror (udint_shift_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a bitwise rotation to the right of a 32-bit unsigned integer value.

The input operand will be shifted one bit position to the right n times while the bit that is furthest to the left will be reinserted from the left.

**Parameters**

+---------+-----+-----------------------------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_UDINT_SHIFT_STRUCT]                                                 |
+---------+-----+-----------------------------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Operand to be rotated to the right RANGE=[RTS_RANGE_OF_RTS_IEC_UDINT]                              |
+---------+-----+-----------------------------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Number n of bits, by which the operand gets rotated to the right RANGE=[RTS_RANGE_OF_RTS_IEC_UINT] |
+---------+-----+-----------------------------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Bitwise right rotated 32-bit unsigned integer value.                                               |
+---------+-----+-----------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gaeced55ef5aa1a17ed8173d7e6631b90e:

void uint32__shl (udint_shift_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a bitwise left-shift on a 32-bit unsigned integer value.

The the newly exposed bits will be filled with 0.

**Parameters**

+---------+-----+---------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_UDINT_SHIFT_STRUCT]                             |
+---------+-----+---------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Operand to be shifted to the left RANGE=[RTS_RANGE_OF_RTS_IEC_UDINT]           |
+---------+-----+---------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Number of bits, by which the operand gets shifted to the left RANGE=[0..31,32] |
+---------+-----+---------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Bitwise left-shifted 32-bit unsigned integer value.                            |
+---------+-----+---------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gadd59a610c4ff39496b19932f20a62be9:

void uint32__shr (udint_shift_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a bitwise right-shift on a 32-bit unsigned integer value.

The the newly exposed bits will be filled with 0.

**Parameters**

+---------+-----+----------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_UDINT_SHIFT_STRUCT]                              |
+---------+-----+----------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Operand to be shifted to the right RANGE=[RTS_RANGE_OF_RTS_IEC_UDINT]           |
+---------+-----+----------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Number of bits, by which the operand gets shifted to the right RANGE=[0..31,32] |
+---------+-----+----------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Bitwise right-shifted 32-bit unsigned integer value.                            |
+---------+-----+----------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gab519664e9e20f3238a20bea66a5d903f:

void int32__shr (dint_shift_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function makes a bitwise right-shift on a 32-bit integer value.

The the newly exposed bits will be filled with the value of the topmost bit, that is 1 for negative and 0 for positive input values.

**Parameters**

+---------+-----+----------------------------------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_DINT_SHIFT_STRUCT]                               |
+---------+-----+----------------------------------------------------------------------------------------------+
| [in]    | in1 | ***PSEUDO*** Operand to be shifted to the right RANGE=[RTS_RANGE_OF_RTS_IEC_DINT]            |
+---------+-----+----------------------------------------------------------------------------------------------+
| [in]    | in2 | ***PSEUDO*** Number of bits, by which the operand gets shifted to the right RANGE=[0..31,32] |
+---------+-----+----------------------------------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Bitwise right-shifted 32-bit integer value.                                     |
+---------+-----+----------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga31bb67dcc2a992b899beb42bd6be1603:

void any32__to__int64 (any32_to_int64_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function Converts any 32-bit numeric data type to a 64-bit integer value.

Data types with less than 32 bits are allowed but the input value has to be casted to 32 bits before.

Only integer datatypes are allowed.

**Parameters**

+---------+------------+---------------------------------------------------------------------------------------------------------------+
| [in]    | p          | Pointer to the input structure RANGE=[VALID_ANY32_TO_INT64_STRUCT]                                            |
+---------+------------+---------------------------------------------------------------------------------------------------------------+
| [in]    | in         | ***PSEUDO*** Input data RANGE=[ANY_MIN,ANY_MID,ANY_MAX]                                                       |
+---------+------------+---------------------------------------------------------------------------------------------------------------+
| [in]    | uiType     | ***PSEUDO*** Type of the input data (see TypeClass3 enumeration) RANGE=[TYPE3_DINT,TYPE3_UDINT,TYPE3_INVALID] |
+---------+------------+---------------------------------------------------------------------------------------------------------------+
| [out]   | bException | ***PSEUDO*** Exception thrown                                                                                 |
+---------+------------+---------------------------------------------------------------------------------------------------------------+
| [out]   | out        | ***PSEUDO*** Input data as 64-bit integer value.                                                              |
+---------+------------+---------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga846ed897bab94cdb5bbb43c4b814b4d3:

void int64__to__any32 (int64_to_any32_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function Converts a 64-bit integer value to any 32-bit numeric data type.

Data types with less than 32 bits are allowed but the output value is casted to 32 bits.

Only integer datatypes are allowed.

**Parameters**

+---------+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | p          | Pointer to the input structure RANGE=[VALID_INT64_TO_ANY32_STRUCT]                                                                                                                         |
+---------+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in         | ***PSEUDO*** Input value RANGE=[ANY_MIN,ANY_MID,ANY_MAX]                                                                                                                                   |
+---------+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | uiType     | ***PSEUDO*** Type of the output data (see TypeClass3 enumeration) RANGE=[TYPE3_BOOL, TYPE3_USINT,TYPE3_SINT, TYPE3_UINT,TYPE3_INT, TYPE3_UDINT,TYPE3_DINT, TYPE3_TIMEOFDAY, TYPE3_INVALID] |
+---------+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | bException | ***PSEUDO*** Exception thrown                                                                                                                                                              |
+---------+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | out        | ***PSEUDO*** Input value as 32-bit data type.                                                                                                                                              |
+---------+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gafdc0dec98a62c7271a63ff62a6c00aff:

void int64__atomicread (int64_atomicread_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function read a 64bit integer value atomic.

**Parameters**

+---------+---------+-----------------------------------------------------+
| [in]    | p       | Pointer to the input structure                      |
+---------+---------+-----------------------------------------------------+
| [in]    | pSrc    | ***PSEUDO*** Pointer to source address to read from |
+---------+---------+-----------------------------------------------------+
| [in]    | pResult | ***PSEUDO*** Pointer to error code                  |
+---------+---------+-----------------------------------------------------+
| [out]   | out     | ***PSEUDO*** Read 64bit integer value.              |
+---------+---------+-----------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga47e731b2c966ad352a15ed13db995d43:

void int64__atomicwrite (int64_atomicwrite_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function write a 64bit integer value atomic.

**Parameters**

+---------+-------+---------------------------------------------------------+
| [in]    | p     | Pointer to the input structure                          |
+---------+-------+---------------------------------------------------------+
| [in]    | pDest | ***PSEUDO*** Pointer to destination address to write to |
+---------+-------+---------------------------------------------------------+
| [in]    | write | ***PSEUDO*** Value to write                             |
+---------+-------+---------------------------------------------------------+
| [out]   | out   | ***PSEUDO*** Error code for result.                     |
+---------+-------+---------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga23a6698447f26cce3b1338e636c16480:

void real32__to__any32 (real32_to_any32_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function Converts a 32-bit real value to any 32-bit numeric data type.

Data types with less than 32 bits are allowed but the output value is casted to 32 bits.

Only integer datatypes are allowed.

**Parameters**

+---------+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | p          | Pointer to the input structure RANGE=[VALID_REAL32_TO_ANY32_STRUCT]                                                                                                                        |
+---------+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in         | ***PSEUDO*** Input value RANGE=[ANY_MIN,ANY_MID,ANY_MAX]                                                                                                                                   |
+---------+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | uiType     | ***PSEUDO*** Type of the output data (see TypeClass3 enumeration) RANGE=[TYPE3_BOOL, TYPE3_USINT,TYPE3_SINT, TYPE3_UINT,TYPE3_INT, TYPE3_UDINT,TYPE3_DINT, TYPE3_TIMEOFDAY, TYPE3_INVALID] |
+---------+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | bException | ***PSEUDO*** Exception thrown                                                                                                                                                              |
+---------+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | out        | ***PSEUDO*** Input value as 32-bit data type.                                                                                                                                              |
+---------+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gae8eb719ca8bf32391e276840f01fea53:

void any32__to__real32 (any32_to_real32_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function Converts any 32-bit numeric data type to a 32-bit real value.

Data types with less than 32 bits are allowed but the input value has to be casted to 32 bits before.

Only integer datatypes are allowed.

**Parameters**

+---------+------------+---------------------------------------------------------------------------------------------------------------+
| [in]    | p          | Pointer to the input structure RANGE=[VALID_ANY32_TO_REAL32_STRUCT]                                           |
+---------+------------+---------------------------------------------------------------------------------------------------------------+
| [in]    | in         | ***PSEUDO*** Input data RANGE=[ANY_MIN,ANY_MID,ANY_MAX]                                                       |
+---------+------------+---------------------------------------------------------------------------------------------------------------+
| [in]    | uiType     | ***PSEUDO*** Type of the input data (see TypeClass3 enumeration) RANGE=[TYPE3_DINT,TYPE3_UDINT,TYPE3_INVALID] |
+---------+------------+---------------------------------------------------------------------------------------------------------------+
| [out]   | bException | ***PSEUDO*** Exception thrown                                                                                 |
+---------+------------+---------------------------------------------------------------------------------------------------------------+
| [out]   | out        | ***PSEUDO*** Input data as 32-bit real value.                                                                 |
+---------+------------+---------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gacd8010988afbf58bdd4f253de8863123:

void real32__to__any64 (real32_to_any64_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function Converts a 32-bit real value to any 64-bit numeric data type.

Data types with less than 64 bits are allowed but the output value is casted to 64 bits.

**Parameters**

+---------+--------+--------------------------------------------------------------------------------------------------+
| [in]    | p      | Pointer to the input structure RANGE=[VALID_REAL32_TO_ANY64_STRUCT]                              |
+---------+--------+--------------------------------------------------------------------------------------------------+
| [in]    | in     | ***PSEUDO*** Input value RANGE=[ANY_MIN,ANY_MID,ANY_MAX]                                         |
+---------+--------+--------------------------------------------------------------------------------------------------+
| [in]    | uiType | ***PSEUDO*** Type of the output data (see TypeClass3 enumeration) RANGE=[TYPE3_LINT,TYPE3_ULINT] |
+---------+--------+--------------------------------------------------------------------------------------------------+
| [out]   | out    | ***PSEUDO*** Input value as 64-bit data type.                                                    |
+---------+--------+--------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga26f0c01fd800e04a1a5cfb0453dcda25:

void any64__to__real32 (any64_to_real32_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function Converts any 64-bit numeric data type to a 32-bit real value.

Data types with less than 64 bits are allowed but the input value has to be casted to 64 bits before.

Only integer datatypes are allowed.

**Parameters**

+---------+------------+---------------------------------------------------------------------------------------------------------------+
| [in]    | p          | Pointer to the input structure RANGE=[VALID_ANY64_TO_REAL32_STRUCT]                                           |
+---------+------------+---------------------------------------------------------------------------------------------------------------+
| [in]    | in         | ***PSEUDO*** Input data RANGE=[ANY_MIN,ANY_MID,ANY_MAX]                                                       |
+---------+------------+---------------------------------------------------------------------------------------------------------------+
| [in]    | uiType     | ***PSEUDO*** Type of the input data (see TypeClass3 enumeration) RANGE=[TYPE3_LINT,TYPE3_ULINT,TYPE3_INVALID] |
+---------+------------+---------------------------------------------------------------------------------------------------------------+
| [out]   | bException | ***PSEUDO*** Exception thrown                                                                                 |
+---------+------------+---------------------------------------------------------------------------------------------------------------+
| [out]   | out        | ***PSEUDO*** Input data as 32-bit real value.                                                                 |
+---------+------------+---------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga2221d6d6c83303287f56efce54002015:

void real64__to__any32 (real64_to_any32_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function Converts a 64-bit real value to any 32-bit numeric data type.

Data types with less than 32 bits are allowed but the output value is casted to 32 bits.

Only integer datatypes are allowed.

**Parameters**

+---------+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | p          | Pointer to the input structure RANGE=[VALID_REAL64_TO_ANY32_STRUCT]                                                                                                                        |
+---------+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | in         | ***PSEUDO*** Input value RANGE=[ANY_MIN,ANY_MID,ANY_MAX]                                                                                                                                   |
+---------+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | uiType     | ***PSEUDO*** Type of the output data (see TypeClass3 enumeration) RANGE=[TYPE3_BOOL, TYPE3_USINT,TYPE3_SINT, TYPE3_UINT,TYPE3_INT, TYPE3_UDINT,TYPE3_DINT, TYPE3_TIMEOFDAY, TYPE3_INVALID] |
+---------+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | bException | ***PSEUDO*** Exception thrown                                                                                                                                                              |
+---------+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | out        | ***PSEUDO*** Input value as 32-bit data type.                                                                                                                                              |
+---------+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga181b6ff338f9f54d81e5b3539cfe4c65:

void any32__to__real64 (any32_to_real64_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function Converts any 32-bit numeric data type to a 64-bit real value.

Data types with less than 32 bits are allowed but the input value has to be casted to 32 bits before.

Only integer datatypes are allowed.

**Parameters**

+---------+------------+---------------------------------------------------------------------------------------------------------------+
| [in]    | p          | Pointer to the input structure RANGE=[VALID_ANY32_TO_REAL64_STRUCT]                                           |
+---------+------------+---------------------------------------------------------------------------------------------------------------+
| [in]    | in         | ***PSEUDO*** Input data RANGE=[ANY_MIN,ANY_MID,ANY_MAX]                                                       |
+---------+------------+---------------------------------------------------------------------------------------------------------------+
| [in]    | uiType     | ***PSEUDO*** Type of the input data (see TypeClass3 enumeration) RANGE=[TYPE3_DINT,TYPE3_UDINT,TYPE3_INVALID] |
+---------+------------+---------------------------------------------------------------------------------------------------------------+
| [out]   | bException | ***PSEUDO*** Exception thrown                                                                                 |
+---------+------------+---------------------------------------------------------------------------------------------------------------+
| [out]   | out        | ***PSEUDO*** Input data as 64-bit real value.                                                                 |
+---------+------------+---------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga029d565210a843f73e968653fd368efe:

void real64__to__any64 (real64_to_any64_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function Converts a 64-bit real value to any 64-bit numeric data type.

Data types with less than 64 bits are allowed but the output value is casted to 64 bits.

**Parameters**

+---------+--------+--------------------------------------------------------------------------------------------------+
| [in]    | p      | Pointer to the input structure RANGE=[VALID_REAL64_TO_ANY64_STRUCT]                              |
+---------+--------+--------------------------------------------------------------------------------------------------+
| [in]    | in     | ***PSEUDO*** Input value RANGE=[ANY_MIN, ANY_MID, ANY_MAX]                                       |
+---------+--------+--------------------------------------------------------------------------------------------------+
| [in]    | uiType | ***PSEUDO*** Type of the output data (see TypeClass3 enumeration) RANGE=[TYPE3_LINT,TYPE3_ULINT] |
+---------+--------+--------------------------------------------------------------------------------------------------+
| [out]   | out    | ***PSEUDO*** Input value as 64-bit data type.                                                    |
+---------+--------+--------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gaed74c334e34a311062b67dc2d3267946:

void any64__to__real64 (any64_to_real64_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function Converts any 64-bit numeric data type to a 64-bit real value.

Data types with less than 64 bits are allowed but the input value has to be casted to 64 bits before.

Only integer datatypes are allowed.

**Parameters**

+---------+------------+---------------------------------------------------------------------------------------------------------------+
| [in]    | p          | Pointer to the input structure RANGE=[VALID_ANY64_TO_REAL64_STRUCT]                                           |
+---------+------------+---------------------------------------------------------------------------------------------------------------+
| [in]    | in         | ***PSEUDO*** Input data RANGE=[ANY_MIN, ANY_MID, ANY_MAX]                                                     |
+---------+------------+---------------------------------------------------------------------------------------------------------------+
| [in]    | uiType     | ***PSEUDO*** Type of the input data (see TypeClass3 enumeration) RANGE=[TYPE3_LINT,TYPE3_ULINT,TYPE3_INVALID] |
+---------+------------+---------------------------------------------------------------------------------------------------------------+
| [out]   | bException | ***PSEUDO*** Exception thrown                                                                                 |
+---------+------------+---------------------------------------------------------------------------------------------------------------+
| [out]   | out        | ***PSEUDO*** Input data as 64-bit real value.                                                                 |
+---------+------------+---------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga5b4aa4bf87cbf99c690ebe5c820946c9:

void real64__to__real32 (real64_to_real32_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function Converts a 64-bit real value to a 32-bit real value.

**Parameters**

+---------+-----+----------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_REAL64_TO_REAL32_STRUCT] |
+---------+-----+----------------------------------------------------------------------+
| [in]    | in  | ***PSEUDO*** Input value RANGE=[ANY_MIN, ANY_MID, ANY_MAX]           |
+---------+-----+----------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Input value as 32-bit real value.                       |
+---------+-----+----------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga196590d2a3de6e19b4616388839bbc9a:

void real32__to__real64 (real32_to_real64_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function Converts a 32-bit real value to a 64-bit real value.

**Parameters**

+---------+-----+----------------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_REAL32_TO_REAL64_STRUCT] |
+---------+-----+----------------------------------------------------------------------+
| [in]    | in  | ***PSEUDO*** Input value RANGE=[ANY_MIN, ANY_MID, ANY_MAX]           |
+---------+-----+----------------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** Input value as 64-bit real value.                       |
+---------+-----+----------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gaec072632505a9535d34fc7aa3582ea6e:

void real64__atomicread (real64_atomicread_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function read a 64bit real value atomic.

**Parameters**

+---------+---------+-----------------------------------------------------+
| [in]    | p       | Pointer to the input structure                      |
+---------+---------+-----------------------------------------------------+
| [in]    | pSrc    | ***PSEUDO*** Pointer to source address to read from |
+---------+---------+-----------------------------------------------------+
| [in]    | pResult | ***PSEUDO*** Pointer to error code                  |
+---------+---------+-----------------------------------------------------+
| [out]   | out     | ***PSEUDO*** Read 64bit integer value.              |
+---------+---------+-----------------------------------------------------+

.. _group___sys_internal_lib_itf_1gacccfca584e3180ddaaff46b6383211e8:

void real64__atomicwrite (real64_atomicwrite_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function write a 64bit real value atomic.

**Parameters**

+---------+-------+---------------------------------------------------------+
| [in]    | p     | Pointer to the input structure                          |
+---------+-------+---------------------------------------------------------+
| [in]    | pDest | ***PSEUDO*** Pointer to destination address to write to |
+---------+-------+---------------------------------------------------------+
| [in]    | write | ***PSEUDO*** Value to write                             |
+---------+-------+---------------------------------------------------------+
| [out]   | out   | ***PSEUDO*** Error code for result.                     |
+---------+-------+---------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gac3222897d2f27c2605567757d39d7799:

void get__time (get_time_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function returns a monotonic rising millisecond tick. This tick can be used for timeout and relative time measurements.

**Parameters**

+---------+-----+--------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_GET_TIME_STRUCT] |
+---------+-----+--------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** millisecond tick as 32-Bit value.               |
+---------+-----+--------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga0ed99bc519095f8f0edc711d49e6a38e:

void get__ltime (get_ltime_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function returns a monotonic rising nanosecond tick. This tick can be used for very high resolution time measurements.

**Parameters**

+---------+-----+---------------------------------------------------------------+
| [in]    | p   | Pointer to the input structure RANGE=[VALID_GET_LTIME_STRUCT] |
+---------+-----+---------------------------------------------------------------+
| [out]   | out | ***PSEUDO*** microsecond tick as 64-Bit value.                |
+---------+-----+---------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga9f6623e44ffb8f4c794b6c94fd16cc74:

void exchange__and__add (exchange_and_add_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function atomically adds a value to the value at a specific address. It works only on 32Bit values. It can only fail if the pointer, passed to the function is NULL. In this case, the behavior is unspecified. When the operation was successful, it will return the original value of the value at the address, specified by pSummand1. Note: This function roughly imitates the XADD instruction of an x86 processor.

**Parameters**

+---------+----------------+--------------------------------------------------------------------------------------------------------------------------------+
| [in]    | p              | Pointer to the input structure RANGE=[VALID_EXCHANGE_AND_ADD_STRUCT]                                                           |
+---------+----------------+--------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pSummand1      | ***PSEUDO*** This is the address of the value, which contains the first summand and the result. RANGE=[NULL,VALID_EAA_POINTER] |
+---------+----------------+--------------------------------------------------------------------------------------------------------------------------------+
| [inout] | pSummand1Value | ***PSEUDO*** This is the value of the first summand. RANGE=[RTS_RANGE_OF_RTS_DWORD]                                            |
+---------+----------------+--------------------------------------------------------------------------------------------------------------------------------+
| [in]    | nSummand2      | ***PSEUDO*** This is the value, which is added to the value at the address of pSummand1 RANGE=[RTS_RANGE_OF_RTS_DWORD]         |
+---------+----------------+--------------------------------------------------------------------------------------------------------------------------------+
| [out]   | out            | ***PSEUDO*** The result is the value at pSummand1 before the operation                                                         |
+---------+----------------+--------------------------------------------------------------------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1gae07ca9a7769b552660e48123a7d45b08:

void test__and__set (test_and_set_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function is trying to set bit 0 of the address, passed via pdwTest. If the bit was zero, the operation succeeds, if the bit was already set, the operation fails. Note, that this operation also fails under the folling conditions:

- pdwTest is NULL

- pdwTest is not 32Bit aligned

**Parameters**

+---------+--------------+-----------------------------------------------------------------------------------------------+
| [in]    | p            | Pointer to the input structure RANGE=[VALID_TEST_AND_SET_STRUCT]                              |
+---------+--------------+-----------------------------------------------------------------------------------------------+
| [in]    | pdwTest      | ***PSEUDO*** Pointer to the value, where the bit should be set RANGE=[NULL,VALID_TAS_POINTER] |
+---------+--------------+-----------------------------------------------------------------------------------------------+
| [inout] | pdwTestValue | ***PSEUDO*** Current value at the address of pdwTest RANGE=[RTS_RANGE_OF_RTS_DWORD]           |
+---------+--------------+-----------------------------------------------------------------------------------------------+
| [out]   | out          | ***PSEUDO*** 0 if operation succeeded, <>0 if it failed                                       |
+---------+--------------+-----------------------------------------------------------------------------------------------+

**Returns:**

0 on success, <>0 on error

.. _group___sys_internal_lib_itf_1gaa11527b7ecdacf9d64a7ef4aa328ba1b:

void compare__and__swap (compare_and_swap_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function copies xwNewValue to the location where pAddress points to. It fails if the value at the location doesn't match the value of xwExpected. When the operation fails, the value at pAddress remains untouched.

Possible errors:

- Value at pAddress doesn't match the value of xwExpected

- pAddress was NULL

- Swap is not supported on the size of an XWORD on this platform.

**Parameters**

+---------+---------------+--------------------------------------------------------------------------------------------------------------+
| [in]    | p             | Pointer to the input structure RANGE=[VALID_COMPARE_AND_SWAP_STRUCT]                                         |
+---------+---------------+--------------------------------------------------------------------------------------------------------------+
| [inout] | pAddressValue | ***PSEUDO*** Current value at the location of pAddress. RANGE=[RTS_RANGE_OF_RTS_IEC_XWORD]                   |
+---------+---------------+--------------------------------------------------------------------------------------------------------------+
| [in]    | pAddress      | ***PSEUDO*** Pointer to the location, that should be updated. RANGE=[NULL,VALID_CAS_ADDRESS]                 |
+---------+---------------+--------------------------------------------------------------------------------------------------------------+
| [in]    | xwExpected    | ***PSEUDO*** The value, which was read from the location of pAddress. RANGE=[RTS_RANGE_OF_RTS_IEC_XWORD]     |
+---------+---------------+--------------------------------------------------------------------------------------------------------------+
| [in]    | xwNewValue    | ***PSEUDO*** The value that should be copied to the location of pAddress. RANGE=[RTS_RANGE_OF_RTS_IEC_XWORD] |
+---------+---------------+--------------------------------------------------------------------------------------------------------------+
| [out]   | out           | ***PSEUDO*** 1 if swapped, 0 if an error occured                                                             |
+---------+---------------+--------------------------------------------------------------------------------------------------------------+

**Returns:**

BOOL: TRUE on success, FALSE on error

.. _group___sys_internal_lib_itf_1gaab0c0b5ac9bc040ff82d8ee0d1d6e99d:

void __memset (__memset_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Fill the buffer with a specified value. Routine is used as external library function for the plc program.

**Parameters**

+---------+-----+--------------------------------------------+
| [in]    | p   | Pointer to the input structure             |
+---------+-----+--------------------------------------------+
| [out]   | out | ***PSEUDO*** Value of pDest or 0 if failed |
+---------+-----+--------------------------------------------+

.. _group___sys_internal_lib_itf_1ga99976476649713e371689625bd3b1f40:

void trycatch (trycatch_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A simple exception handling function

**Parameters**

+---------+-----+--------------------------------------------------+
| [in]    | p   | Pointer to the input structure                   |
+---------+-----+--------------------------------------------------+
| [out]   | out | ***PSEUDO*** ExceptionCode or 0 for noeexception |
+---------+-----+--------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga756847d36324a518b4074c30e2c9e0b5:

void systimelock (systimelock_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_internal_lib_itf_1ga8b376f0f0d30a0a256596d4cfb191685:

void systimeset (systimeset_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_internal_lib_itf_1gaaad768c59ee9534321155552101aaa3c:

void systimeunlock (systimeunlock_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_internal_lib_itf_1gaf9203eccde94e421844c4d7f6fffe48e:

void systimeunset (systimeunset_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_internal_lib_itf_1ga6ee7c6fbe471cbc90bc59c5730c60ba9:

RTS_UI16 SysTimeUnlock (void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

systimeunlock: Use SysTimeLock.libaray

**Parameters**

+---------+---------------+-------------------------------------------------------------------+
| [in]    | p             | Pointer to the input structure RANGE=[VALID_SYSTIMEUNLOCK_STRUCT] |
+---------+---------------+-------------------------------------------------------------------+
| [out]   | SysTimeUnlock | ***PSEUDO*** Always 0                                             |
+---------+---------------+-------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga5b9c45688ec0a3f2e5768f0660a42c13:

RTS_UI16 SysTimeLock (RTS_UI32 ulTick, RTS_UI32 tTimeout)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

systimelock: Use SysTimeLock.libaray

**Parameters**

+---------+-------------+-----------------------------------------------------------------+
| [in]    | p           | Pointer to the input structure RANGE=[VALID_SYSTIMELOCK_STRUCT] |
+---------+-------------+-----------------------------------------------------------------+
| [in]    | ulTick      | ***PSEUDO*** Tick RANGE=[RTS_RANGE_OF_RTS_IEC_TIME]             |
+---------+-------------+-----------------------------------------------------------------+
| [in]    | tTimeout    | ***PSEUDO*** Timeout RANGE=[RTS_RANGE_OF_RTS_IEC_TIME]          |
+---------+-------------+-----------------------------------------------------------------+
| [out]   | SysTimeLock | ***PSEUDO*** Always 0                                           |
+---------+-------------+-----------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga37d9b381e5f5b42ddcf1978376c7f85b:

RTS_UI16 SysTimeUnSet (void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to un-set the actual timestamp for all IEC timers.

**Parameters**

+---------+---------------+------------------------------------------------------------------+
| [in]    | p             | Pointer to the input structure RANGE=[VALID_SYSTIMEUNSET_STRUCT] |
+---------+---------------+------------------------------------------------------------------+
| [out]   | SysTimeUnlock | ***PSEUDO*** Always 0                                            |
+---------+---------------+------------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga678a5c9ea445578aebaf00c0615852a0:

RTS_UI16 SysTimeSet (RTS_UI32 ulTick, RTS_UI32 tTimeout)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to set the actual timestamp for all IEC timers. Differnt to SysTimeLock, the timer continues

**Parameters**

+---------+------------+----------------------------------------------------------------+
| [in]    | p          | Pointer to the input structure RANGE=[VALID_SYSTIMESET_STRUCT] |
+---------+------------+----------------------------------------------------------------+
| [in]    | ulTick     | ***PSEUDO*** Tick RANGE=[RTS_RANGE_OF_RTS_IEC_TIME]            |
+---------+------------+----------------------------------------------------------------+
| [in]    | tTimeout   | ***PSEUDO*** Timeout RANGE=[RTS_RANGE_OF_RTS_IEC_TIME]         |
+---------+------------+----------------------------------------------------------------+
| [out]   | SysTimeSet | ***PSEUDO*** Always 0                                          |
+---------+------------+----------------------------------------------------------------+

.. _group___sys_internal_lib_itf_1ga45b08c34da05d3b51544c1804f234a45:

unsigned int SysGetTypeSize (TypeClass3 tc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns the size in bytes, of the specified IEC data type.

**Parameters**

+---------+----+----------------------------------------------------------+
| [in]    | tc | Pointer to the input structure RANGE=[0..TYPE3_MAX_TYPE] |
+---------+----+----------------------------------------------------------+

**Returns:**

Size in Bytes of Datatype, or 0 if unspecified

.. last line of group.rst template
.. last line of composition.rst template


