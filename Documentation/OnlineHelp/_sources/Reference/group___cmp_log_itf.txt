.. first line of composition.rst template

.. first line of group.rst template

.. _group___cmp_log_itf:

=========
CmpLogItf
=========

Interface of CmpLog. :ref:`More... <group___cmp_log_itf-details>`

Modules
-------

- :ref:`/filter								Log class/filter <group___cmp_log_itf___logclass>`

- :ref:`Event parameter <group___cmp_log_itf___eventparameter>`

- :ref:`Events <group___cmp_log_itf___events>`

- :ref:`Log filter <group___cmp_log_itf___logfilter>`

- :ref:`Log types <group___cmp_log_itf___logtypes>`

- :ref:`Logger <group___cmp_log_itf___logger>`

- :ref:`Online service tags <group___cmp_log_itf___onlineservicetags>`

- :ref:`Online services <group___cmp_log_itf___onlineservices>`

- :ref:`Settings <group___cmp_log_itf___settings>`

- :ref:`Static defines <group___cmp_log_itf___staticdefines>`

Data Structures
---------------

- struct :ref:`taglogadd_struct <structtaglogadd__struct>`

- struct :ref:`taglogadd2_struct <structtaglogadd2__struct>`

- struct :ref:`taglogclose_struct <structtaglogclose__struct>`

- struct :ref:`taglogcreate_struct <structtaglogcreate__struct>`

- struct :ref:`taglogdelete_struct <structtaglogdelete__struct>`

- struct :ref:`taglogopen_struct <structtaglogopen__struct>`

- struct :ref:`ICmpLog_C <struct_i_cmp_log___c>`

Macros
------

- #define :ref:`LOG_TEXT <group___cmp_log_itf_1ga98f942fa322554eeb848d30a7fce8ca0>` s

- #define :ref:`LOG_DEFAULT_NUM_OF_LOGGER <group___cmp_log_itf_1ga0afb7f32ccabb4c1095cb2d86eac18e6>` 1		/* Default number of loggers */

- #define :ref:`LOG_DEFAULT_NUM_OF_ITF <group___cmp_log_itf_1ga680dd59d9e0e2883cbd8f575071d2252>` 3		/* Default number of logger interfaces per logger */

- #define :ref:`LOGKEY_LOGGER_PREFIX <group___cmp_log_itf_1gaa40841c37b37669c300704e42a7db00d>` "Logger"

- #define :ref:`ITF_CmpLog <group___cmp_log_itf_1gae75aaa635b6226ef0ea851e78753d9bb>`

- #define :ref:`EXTITF_CmpLog <group___cmp_log_itf_1ga9568bef59f6120bf41bf8b47f100a8a2>`

Typedefs
--------

- typedef struct :ref:`taglogadd_struct <structtaglogadd__struct>` :ref:`logadd_struct <group___cmp_log_itf_1ga3f6ff8913954c07810745f0fc90c347c>`

- typedef struct :ref:`taglogadd2_struct <structtaglogadd2__struct>` :ref:`logadd2_struct <group___cmp_log_itf_1ga4c4d1c3825b7eeb168fb5e2c84d527d7>`

- typedef struct :ref:`taglogclose_struct <structtaglogclose__struct>` :ref:`logclose_struct <group___cmp_log_itf_1gae5bb5de73b3400e49e4f4782dc343851>`

- typedef struct :ref:`taglogcreate_struct <structtaglogcreate__struct>` :ref:`logcreate_struct <group___cmp_log_itf_1ga3c9260fac6bfa01f7e7ecaacbf038b3a>`

- typedef struct :ref:`taglogdelete_struct <structtaglogdelete__struct>` :ref:`logdelete_struct <group___cmp_log_itf_1ga846a6b8e92480af2c36288cfa4766349>`

- typedef struct :ref:`taglogopen_struct <structtaglogopen__struct>` :ref:`logopen_struct <group___cmp_log_itf_1ga741016eaab853866a0fcd6b971ba45e0>`

- typedef :ref:`ICmpLog_C <struct_i_cmp_log___c>` :ref:`ICmpLog <group___cmp_log_itf_1gaa09727f8b0191bc3ff5107fc04a78555>`

Functions
---------

- void :ref:`logadd <group___cmp_log_itf_1gada65f6e3b2007e0b6aac7787d95ca415>` (:ref:`logadd_struct <group___cmp_log_itf_1ga3f6ff8913954c07810745f0fc90c347c>` * p)

- void :ref:`logadd2 <group___cmp_log_itf_1ga30e2ddae29a8ddead33df49cfee827c2>` (:ref:`logadd2_struct <group___cmp_log_itf_1ga4c4d1c3825b7eeb168fb5e2c84d527d7>` * p)

- void :ref:`logclose <group___cmp_log_itf_1ga523681642db159b24b65b16c689c2358>` (:ref:`logclose_struct <group___cmp_log_itf_1gae5bb5de73b3400e49e4f4782dc343851>` * p)

- void :ref:`logcreate <group___cmp_log_itf_1ga6530e0ccd739cd0cd2656b8127218b7a>` (:ref:`logcreate_struct <group___cmp_log_itf_1ga3c9260fac6bfa01f7e7ecaacbf038b3a>` * p)

- void :ref:`logdelete <group___cmp_log_itf_1ga42b4dc58d925c0d39023715071db502b>` (:ref:`logdelete_struct <group___cmp_log_itf_1ga846a6b8e92480af2c36288cfa4766349>` * p)

- void :ref:`logopen <group___cmp_log_itf_1ga678885e89c7959c889280ede86a9976d>` (:ref:`logopen_struct <group___cmp_log_itf_1ga741016eaab853866a0fcd6b971ba45e0>` * p)

- RTS_HANDLE :ref:`LogCreate <group___cmp_log_itf_1gaddf553596536474e216ce11239ee82cb>` (:ref:`LogOptions <group___cmp_log_itf___logger_1ga0327ffeedb0153418de81ea6cb995c84>` * pOptions, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`LogOpen <group___cmp_log_itf_1gae23e3a9bcedee4de3397199e6ddf4d21>` (char * pszName, RTS_RESULT * pResult)

- RTS_RESULT :ref:`LogClose <group___cmp_log_itf_1ga4688eb53fde913086da5815190a6fddc>` (RTS_HANDLE hLog)

- RTS_RESULT :ref:`LogDelete <group___cmp_log_itf_1ga7e80acd5a08d481c0b507f3908b73301>` (RTS_HANDLE hLog)

- RTS_RESULT :ref:`LogGetOptions <group___cmp_log_itf_1ga8250cab022701d3defcb0e558a3e53f0>` (RTS_HANDLE hLog, :ref:`LogOptions <group___cmp_log_itf___logger_1ga0327ffeedb0153418de81ea6cb995c84>` ** ppOptions)

- RTS_RESULT :ref:`LogEnable <group___cmp_log_itf_1ga75b83176de130c0c2dbe7cd5c60a8276>` (RTS_HANDLE hLog)

- RTS_RESULT :ref:`LogDisable <group___cmp_log_itf_1gade9511572c43d83af0c21fdbad382d67>` (RTS_HANDLE hLog)

- RTS_RESULT :ref:`LogSetFilter <group___cmp_log_itf_1gaef0a9bc49749aa614d2646e1505140d3>` (RTS_HANDLE hLog, RTS_I32 iFilter)

- RTS_I32 :ref:`LogGetFilter <group___cmp_log_itf_1ga387451d3508eb698a59f8d1952e64c2e>` (RTS_HANDLE hLog)

- RTS_RESULT :ref:`LogAdd <group___cmp_log_itf_1gab55f6b8920a58f0a186805072d77c308>` (RTS_HANDLE hLog, CMPID CmpId, RTS_I32 iClassID, RTS_RESULT iErrorID, RTS_I32 iInfoID, char * pszInfo, ...)

- RTS_RESULT :ref:`LogAddArg <group___cmp_log_itf_1ga23a372f83768f93916234383aeece9f4>` (RTS_HANDLE hLog, CMPID CmpId, RTS_I32 iClassID, RTS_RESULT iErrorID, RTS_I32 iInfoID, char * pszInfo, va_list * pargList)

- RTS_RESULT :ref:`LogDumpAll <group___cmp_log_itf_1ga5862fee1364447aa2feae07e375f0e94>` (int iOptions)

- RTS_RESULT :ref:`LogDumpEntries <group___cmp_log_itf_1ga64a7c9bb8e41346d850e073f145174ad>` (RTS_HANDLE hLog)

- RTS_RESULT :ref:`LogRegisterInterface <group___cmp_log_itf_1ga8167c1ce7661241ded0640984fbb4c18>` (RTS_HANDLE hLog, CLASSID ClassId, :ref:`ICmpLogBackend <group___cmp_log_backend_itf_1ga8a75c550e8aaffbbd38b4d99e4d5dd29>` * pIBackend)

- RTS_RESULT :ref:`LogUnregisterInterface <group___cmp_log_itf_1gab7d7284e19e30aec24cb7c905ab421cf>` (RTS_HANDLE hLog, :ref:`ICmpLogBackend <group___cmp_log_backend_itf_1ga8a75c550e8aaffbbd38b4d99e4d5dd29>` * pIBackend)

- RTS_RESULT :ref:`LogRegisterBackend <group___cmp_log_itf_1gae10d012f267465935fef5e449155d562>` (RTS_HANDLE hLog, CLASSID ClassId)

- RTS_RESULT :ref:`LogUnregisterBackend <group___cmp_log_itf_1gab161d93550659d44e84301971e6474e4>` (RTS_HANDLE hLog, CLASSID ClassId)

- RTS_HANDLE :ref:`LogGetEntryByIndex <group___cmp_log_itf_1ga6c02147201f60a045c1547f55771e511>` (RTS_HANDLE hLog, int iIndex, :ref:`LogEntry <group___cmp_log_itf___logger_1ga160e4cd161c7cb4b77aa51764bbb4514>` * pLogEntry, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`LogGetEntryByQueueIndex <group___cmp_log_itf_1gaddd8773192bb7c1c0498117860035953>` (RTS_HANDLE hLog, int iQueueIndex, :ref:`LogEntry <group___cmp_log_itf___logger_1ga160e4cd161c7cb4b77aa51764bbb4514>` * pLogEntry, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`LogGetFirstEntry <group___cmp_log_itf_1ga8e006a946f2f5382e19e8e48ae381021>` (RTS_HANDLE hLog, :ref:`LogEntry <group___cmp_log_itf___logger_1ga160e4cd161c7cb4b77aa51764bbb4514>` * pLogEntry, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`LogGetNextEntry <group___cmp_log_itf_1ga21c522a6b15b6c11a9acc8e841503ad3>` (RTS_HANDLE hLog, RTS_HANDLE hEntry, :ref:`LogEntry <group___cmp_log_itf___logger_1ga160e4cd161c7cb4b77aa51764bbb4514>` * pLogEntry, RTS_RESULT * pResult)

- RTS_RESULT :ref:`LogGetEntry <group___cmp_log_itf_1ga7938f7e5a29bc8edab5cb3cf80b7fb29>` (RTS_HANDLE hLog, RTS_HANDLE hEntry, :ref:`LogEntry <group___cmp_log_itf___logger_1ga160e4cd161c7cb4b77aa51764bbb4514>` * pLogEntry)

- RTS_HANDLE :ref:`LogGetFirstLogger <group___cmp_log_itf_1ga45c0b9e734c0f25143e09b79855902f2>` (RTS_RESULT * pResult)

- RTS_HANDLE :ref:`LogGetNextLogger <group___cmp_log_itf_1ga5802e8a77c0af4a63f01b84143b10e18>` (RTS_HANDLE hLogger, RTS_RESULT * pResult)

- RTS_RESULT :ref:`LogGetName <group___cmp_log_itf_1ga6b72d5007defca9563b32de9b5ebd34e>` (RTS_HANDLE hLog, char * pszLoggerName, int nMaxLen)

- RTS_RESULT :ref:`LogGetUserNotify <group___cmp_log_itf_1gad39c25bf124b3eb6e6819c9b297a27c2>` (:ref:`LogEntry <group___cmp_log_itf___logger_1ga160e4cd161c7cb4b77aa51764bbb4514>` ** ppLogEntryUserNotify)

- RTS_UI32 :ref:`LogConvertTimestamp <group___cmp_log_itf_1ga8a3829f7bb504e0ed969cc67429e3b72>` (RTS_HANDLE hLog, :ref:`LogTimestamp <union_log_timestamp>`  tTimestamp, RTS_SYSTIMEDATE * pDate, RTS_RESULT * pResult)

.. _group___cmp_log_itf-details:

Detailed Description
--------------------

Interface of CmpLog.

Interface of the runtime system logger component.

The logger can log runtime system messages in form of strings, together with some describing informations, like message categories and IDs. The messages are saved in a local buffer in the RAM and uploaded to the CoDeSys programming system or an external service tool on demand.

The embedded variant of this component does not support backends and is therefore not able to save the log messages into a file.

Neither the log buffer in RAM, nor the communication medium are safe. Therefore one can not essentially rely on the content of the log messages. They can only be used for analytical purposes.

For runtimes with the define RTS_SIL2 defined, the component may be a bit more limited. For example, no events are supported.

**Copyright:**

Copyright (c) 2017-2018 CODESYS GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved.

Macro Definition Documentation
------------------------------
.. _group___cmp_log_itf_1ga98f942fa322554eeb848d30a7fce8ca0:

#define LOG_TEXT s
^^^^^^^^^^^^^^^^^^

.. _group___cmp_log_itf_1ga0afb7f32ccabb4c1095cb2d86eac18e6:

#define LOG_DEFAULT_NUM_OF_LOGGER 1		/* Default number of loggers */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_log_itf_1ga680dd59d9e0e2883cbd8f575071d2252:

#define LOG_DEFAULT_NUM_OF_ITF 3		/* Default number of logger interfaces per logger */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_log_itf_1gaa40841c37b37669c300704e42a7db00d:

#define LOGKEY_LOGGER_PREFIX "Logger"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_log_itf_1gae75aaa635b6226ef0ea851e78753d9bb:

#define ITF_CmpLog
^^^^^^^^^^^^^^^^^^

.. _group___cmp_log_itf_1ga9568bef59f6120bf41bf8b47f100a8a2:

#define EXTITF_CmpLog
^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___cmp_log_itf_1ga3f6ff8913954c07810745f0fc90c347c:

typedef struct taglogadd_struct  logadd_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EXTERN LIB SECTION BEGIN <SIL2>

.. _group___cmp_log_itf_1ga4c4d1c3825b7eeb168fb5e2c84d527d7:

typedef struct taglogadd2_struct  logadd2_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

<SIL2>

.. _group___cmp_log_itf_1gae5bb5de73b3400e49e4f4782dc343851:

typedef struct taglogclose_struct  logclose_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

<SIL2>

.. _group___cmp_log_itf_1ga3c9260fac6bfa01f7e7ecaacbf038b3a:

typedef struct taglogcreate_struct  logcreate_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

<SIL2>

.. _group___cmp_log_itf_1ga846a6b8e92480af2c36288cfa4766349:

typedef struct taglogdelete_struct  logdelete_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

<SIL2>

.. _group___cmp_log_itf_1ga741016eaab853866a0fcd6b971ba45e0:

typedef struct taglogopen_struct  logopen_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

<SIL2>

.. _group___cmp_log_itf_1gaa09727f8b0191bc3ff5107fc04a78555:

typedef ICmpLog_C ICmpLog
^^^^^^^^^^^^^^^^^^^^^^^^^

Function Documentation
----------------------

.. _group___cmp_log_itf_1gada65f6e3b2007e0b6aac7787d95ca415:

void logadd (logadd_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_log_itf_1ga30e2ddae29a8ddead33df49cfee827c2:

void logadd2 (logadd2_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_log_itf_1ga523681642db159b24b65b16c689c2358:

void logclose (logclose_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_log_itf_1ga6530e0ccd739cd0cd2656b8127218b7a:

void logcreate (logcreate_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_log_itf_1ga42b4dc58d925c0d39023715071db502b:

void logdelete (logdelete_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_log_itf_1ga678885e89c7959c889280ede86a9976d:

void logopen (logopen_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_log_itf_1gaddf553596536474e216ce11239ee82cb:

RTS_HANDLE LogCreate (LogOptions *pOptions, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EXTERN LIB SECTION END

Create a logger

**Parameters**

+---------+----------+---------------------------+
| [in]    | pOptions | Options for logger        |
+---------+----------+---------------------------+
| [out]   | pResult  | Pointer to get the result |
+---------+----------+---------------------------+

**Returns:**

Handle to the logger, or RTS_INVALID_HANDLE if failed

.. _group___cmp_log_itf_1gae23e3a9bcedee4de3397199e6ddf4d21:

RTS_HANDLE LogOpen (char *pszName, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Open a logger with the specified name. :ref:`Logger <struct_logger>` must exist!

**Parameters**

+---------+---------+------------------------------------+
| [in]    | pszName | :ref:`Logger <struct_logger>` name |
+---------+---------+------------------------------------+
| [out]   | pResult | Pointer to get the result          |
+---------+---------+------------------------------------+

**Returns:**

Handle to the logger, or RTS_INVALID_HANDLE if logger does not exist

.. _group___cmp_log_itf_1ga4688eb53fde913086da5815190a6fddc:

RTS_RESULT LogClose (RTS_HANDLE hLog)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Close the handle to a logger

**Parameters**

+---------+------+------------------+
| [in]    | hLog | Handle to logger |
+---------+------+------------------+

**Returns:**

error code

.. _group___cmp_log_itf_1ga7e80acd5a08d481c0b507f3908b73301:

RTS_RESULT LogDelete (RTS_HANDLE hLog)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Delete a logger

**Parameters**

+---------+------+------------------+
| [in]    | hLog | Handle to logger |
+---------+------+------------------+

**Returns:**

error code

.. _group___cmp_log_itf_1ga8250cab022701d3defcb0e558a3e53f0:

RTS_RESULT LogGetOptions (RTS_HANDLE hLog, LogOptions **ppOptions)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get options of logger

**Parameters**

+---------+-----------+-----------------------------------+
| [in]    | hLog      | Handle to logger                  |
+---------+-----------+-----------------------------------+
| [out]   | ppOptions | Pointer to pointer to log options |
+---------+-----------+-----------------------------------+

**Returns:**

error code

.. _group___cmp_log_itf_1ga75b83176de130c0c2dbe7cd5c60a8276:

RTS_RESULT LogEnable (RTS_HANDLE hLog)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Enable logging

**Parameters**

+---------+------+------------------+
| [in]    | hLog | Handle to logger |
+---------+------+------------------+

**Returns:**

error code

.. _group___cmp_log_itf_1gade9511572c43d83af0c21fdbad382d67:

RTS_RESULT LogDisable (RTS_HANDLE hLog)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Disable logging

**Parameters**

+---------+------+------------------+
| [in]    | hLog | Handle to logger |
+---------+------+------------------+

**Returns:**

error code

.. _group___cmp_log_itf_1gaef0a9bc49749aa614d2646e1505140d3:

RTS_RESULT LogSetFilter (RTS_HANDLE hLog, RTS_I32 iFilter)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Set filter of logger

**Parameters**

+---------+---------+--------------------------------------+
| [in]    | hLog    | Handle to logger                     |
+---------+---------+--------------------------------------+
| [in]    | iFilter | :ref:`Logger <struct_logger>` filter |
+---------+---------+--------------------------------------+

**Returns:**

error code

.. _group___cmp_log_itf_1ga387451d3508eb698a59f8d1952e64c2e:

RTS_I32 LogGetFilter (RTS_HANDLE hLog)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get filter of logger

**Parameters**

+---------+------+------------------+
| [in]    | hLog | Handle to logger |
+---------+------+------------------+

**Returns:**

Filter

.. _group___cmp_log_itf_1gab55f6b8920a58f0a186805072d77c308:

RTS_RESULT LogAdd (RTS_HANDLE hLog, CMPID CmpId, RTS_I32 iClassID, RTS_RESULT iErrorID, RTS_I32 iInfoID, char *pszInfo,...)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Add a new log entry to the log buffer.

If the buffer is full when this function is called, the oldest log entry in the buffer will be overwritten.

If the Class ID contains LOG_INFO_TIMESTAMP_RELATIVE, there is an additional tag, called "TimeRel" added to the text of the log entry. This will limit the message size of the entry by the size of this tag.

If the Class ID contains the flag LOG_USER_NOTIFY, the log message will be shown in form of a message box at the next log in of CoDeSys or instantly if CoDeSys is still loged in.

The interface supports a minimum of 8 variable arguments. Depending on the C-Library, this might be more.

LT_TIMESTAMP_RTC, LT_TIMESTAMP_RTC_HIGHRES is not supported in SIL2 Runtime.

**Parameters**

+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hLog             | Handle to logger RANGE=[RTS_INVALID_HANDLE,STD_LOGGER]                                                                                     |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | CmpId            | Component id RANGE=[VALID_CMPID]                                                                                                           |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | iClassID         | ClassID of entry (Info, Warning, Error, etc.) RANGE=[LOG_ALL,LOG_NONE,LOG_ALL_NOT_LOG_USER_NOTIFY,LOG_ALL_NOT_LOG_INFO_TIMESTAMP_RELATIVE] |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | iErrorID         | Error code if available RANGE=[VALID_IERRORID]                                                                                             |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | iInfoID          | ID of info text to enable multiple language error texts RANGE=[VALID_IINFOID]                                                              |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pszInfo          | String to info text (in english or informations coded in XML) RANGE=[NULL,VALID_PSZINFO]                                                   |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | _iFilterID       | ***PSEUDO*** Filter option RANGE=[LOG_ALL,LOG_ALL_NOT_LOG_USER_NOTIFY,LOG_ALL_NOT_LOG_INFO_TIMESTAMP_RELATIVE]                             |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | _iType_Timestamp | ***PSEUDO*** :ref:`Logger <struct_logger>` Type Timestamp RANGE=[LT_TIMESTAMP_MS,LT_TIMESTAMP_US,LT_TIMESTAMP_NS]                          |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | _bAddedEntry     | ***PSEUDO*** Entry Added to Log                                                                                                            |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+----------------------------------------------------------------------------------------+
| ERR_PARAMETER | Invalid logger handle                                                                  |
+---------------+----------------------------------------------------------------------------------------+
| ERR_FAILED    | iClassID was filtered for this logger or :ref:`Logger <struct_logger>` is not enabled, |
+---------------+----------------------------------------------------------------------------------------+
| ERR_NOMEMORY  | Configured memory for log buffer could not be allocated                                |
+---------------+----------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_log_itf_1ga23a372f83768f93916234383aeece9f4:

RTS_RESULT LogAddArg (RTS_HANDLE hLog, CMPID CmpId, RTS_I32 iClassID, RTS_RESULT iErrorID, RTS_I32 iInfoID, char *pszInfo, va_list *pargList)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Add a new log entry to the log buffer.

The behavior is the same as the behavior of "LogAdd()", except that the parameter is a pointer to a variable argument list instead of a direct variable argument list, passed to the function.

**Parameters**

+---------+--------------+--------------------------------------------------------------------------------------------------------------+
| [in]    | hLog         | Handle to logger RANGE=[RTS_INVALID_HANDLE,STD_LOGGER]                                                       |
+---------+--------------+--------------------------------------------------------------------------------------------------------------+
| [in]    | CmpId        | Component id RANGE=[VALID_CMPID]                                                                             |
+---------+--------------+--------------------------------------------------------------------------------------------------------------+
| [in]    | iClassID     | ClassID of entry (Info, Warning, Error, etc.) RANGE=[LOG_ALL,LOG_NONE]                                       |
+---------+--------------+--------------------------------------------------------------------------------------------------------------+
| [in]    | iErrorID     | Error code if available RANGE=[VALID_IERRORID]                                                               |
+---------+--------------+--------------------------------------------------------------------------------------------------------------+
| [in]    | iInfoID      | ID of info text to enable multiple language error texts RANGE=[VALID_IINFOID]                                |
+---------+--------------+--------------------------------------------------------------------------------------------------------------+
| [in]    | pszInfo      | String to info text (in english or informations coded in XML) RANGE=[NULL,VALID_PSZINFO_1,VALID_PSZINFO_MAX] |
+---------+--------------+--------------------------------------------------------------------------------------------------------------+
| [in]    | pargList     | Pointer to argument list, format is specified in pszInfo RANGE=[NULL,VALID_PARGLIST]                         |
+---------+--------------+--------------------------------------------------------------------------------------------------------------+
| [out]   | _bAddedEntry | ***PSEUDO*** Entry Added to Log                                                                              |
+---------+--------------+--------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+----------------------------------------------------------------------------------------+
| ERR_PARAMETER | Invalid logger handle                                                                  |
+---------------+----------------------------------------------------------------------------------------+
| ERR_FAILED    | iClassID was filtered for this logger or :ref:`Logger <struct_logger>` is not enabled, |
+---------------+----------------------------------------------------------------------------------------+
| ERR_NOMEMORY  | Configured memory for log buffer could not be allocated                                |
+---------------+----------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_log_itf_1ga5862fee1364447aa2feae07e375f0e94:

RTS_RESULT LogDumpAll (int iOptions)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Dump all entries from all log files

**Parameters**

+---------+----------+-------------------------------------------------------------------------+
| [in]    | iOptions | One or multiple of the following options:                               |
|         |          |                                                                         |
|         |          | - LT_DUMP_ASYNC: If dump is done from an asychronous event              |
|         |          |                                                                         |
|         |          | - LT_DUMP_ALWAYS: If dump should be forced (always)                     |
|         |          |                                                                         |
|         |          | - LT_DUMP_ON_CLOSE: If dump is called from closing the logger instance  |
|         |          |                                                                         |
|         |          | - LT_DUMP_ON_REQUEST: If dump is forced from a request                  |
+---------+----------+-------------------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_log_itf_1ga64a7c9bb8e41346d850e073f145174ad:

RTS_RESULT LogDumpEntries (RTS_HANDLE hLog)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Dump all entries from the last still dumped entry

**Parameters**

+---------+------+----------------------+
| [in]    | hLog | Handle to the logger |
+---------+------+----------------------+

**Returns:**

error code

.. _group___cmp_log_itf_1ga8167c1ce7661241ded0640984fbb4c18:

RTS_RESULT LogRegisterInterface (RTS_HANDLE hLog, CLASSID ClassId, ICmpLogBackend *pIBackend)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

OBSOLETE FUNCTION: Use LogRegisterBackend instead

.. _group___cmp_log_itf_1gab7d7284e19e30aec24cb7c905ab421cf:

RTS_RESULT LogUnregisterInterface (RTS_HANDLE hLog, ICmpLogBackend *pIBackend)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

OBSOLETE FUNCTION: Use LogUnregisterBackend instead

.. _group___cmp_log_itf_1gae10d012f267465935fef5e449155d562:

RTS_RESULT LogRegisterBackend (RTS_HANDLE hLog, CLASSID ClassId)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Register a backend at the specified logger

**Parameters**

+---------+---------+--------------------------------------------------------------------------------------------------------------+
| [in]    | hLog    | Handle to the logger. Can be RTS_INVALID_HANDLE an so the backend is unregistered from all logger instances! |
+---------+---------+--------------------------------------------------------------------------------------------------------------+
| [in]    | ClassId | ClassId of the backend. ClassId must be registered previously in the backend component with CMRegisterClass! |
+---------+---------+--------------------------------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_log_itf_1gab161d93550659d44e84301971e6474e4:

RTS_RESULT LogUnregisterBackend (RTS_HANDLE hLog, CLASSID ClassId)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Unregister a backend at the specified logger

**Parameters**

+---------+---------+--------------------------------------------------------------------------------------------------------------+
| [in]    | hLog    | Handle to the logger. Can be RTS_INVALID_HANDLE an so the backend is unregistered from all logger instances! |
+---------+---------+--------------------------------------------------------------------------------------------------------------+
| [in]    | ClassId | ClassId of the backend. ClassId must be registered previously in the backend component with CMRegisterClass! |
+---------+---------+--------------------------------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_log_itf_1ga6c02147201f60a045c1547f55771e511:

RTS_HANDLE LogGetEntryByIndex (RTS_HANDLE hLog, int iIndex, LogEntry *pLogEntry, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the first logentry of a logger

**Parameters**

+---------+-----------+----------------------------------------------+
| [in]    | hLog      | Handle to logger                             |
+---------+-----------+----------------------------------------------+
| [in]    | iIndex    | Index of entry to get. 0 is the first entry. |
+---------+-----------+----------------------------------------------+
| [in]    | pLogEntry | Pointer to log entry                         |
+---------+-----------+----------------------------------------------+
| [in]    | pResult   | Pointer to result                            |
+---------+-----------+----------------------------------------------+

**Returns:**

Handle to next log entry or RTS_INVALID_HANDLE, if end of logger is reached

.. _group___cmp_log_itf_1gaddd8773192bb7c1c0498117860035953:

RTS_HANDLE LogGetEntryByQueueIndex (RTS_HANDLE hLog, int iQueueIndex, LogEntry *pLogEntry, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the first logentry of a logger

**Parameters**

+---------+-------------+------------------------------------------------+
| [in]    | hLog        | Handle to logger                               |
+---------+-------------+------------------------------------------------+
| [in]    | iQueueIndex | Index of entry to get. -1 get the first entry. |
+---------+-------------+------------------------------------------------+
| [in]    | pLogEntry   | Pointer to log entry                           |
+---------+-------------+------------------------------------------------+
| [in]    | pResult     | Pointer to result                              |
+---------+-------------+------------------------------------------------+

**Returns:**

Handle to next log entry or RTS_INVALID_HANDLE, if end of logger is reached

.. _group___cmp_log_itf_1ga8e006a946f2f5382e19e8e48ae381021:

RTS_HANDLE LogGetFirstEntry (RTS_HANDLE hLog, LogEntry *pLogEntry, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the first logentry of a logger

**Parameters**

+---------+-----------+----------------------+
| [in]    | hLog      | Handle to logger     |
+---------+-----------+----------------------+
| [in]    | pLogEntry | Pointer to log entry |
+---------+-----------+----------------------+
| [in]    | pResult   | Pointer to result    |
+---------+-----------+----------------------+

**Returns:**

Handle to next log entry or RTS_INVALID_HANDLE, if end of logger is reached

.. _group___cmp_log_itf_1ga21c522a6b15b6c11a9acc8e841503ad3:

RTS_HANDLE LogGetNextEntry (RTS_HANDLE hLog, RTS_HANDLE hEntry, LogEntry *pLogEntry, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the next logentry of a logger

**Parameters**

+---------+-----------+--------------------------------------------------------------------------+
| [in]    | hLog      | Handle to logger                                                         |
+---------+-----------+--------------------------------------------------------------------------+
| [in]    | hEntry    | Handle to log entry (is returned by LogGetFirstEntry or LogGetNextEntry) |
+---------+-----------+--------------------------------------------------------------------------+
| [in]    | pLogEntry | Pointer to log entry                                                     |
+---------+-----------+--------------------------------------------------------------------------+
| [in]    | pResult   | Pointer to result                                                        |
+---------+-----------+--------------------------------------------------------------------------+

**Returns:**

Handle to next log entry or RTS_INVALID_HANDLE, if end of logger is reached

.. _group___cmp_log_itf_1ga7938f7e5a29bc8edab5cb3cf80b7fb29:

RTS_RESULT LogGetEntry (RTS_HANDLE hLog, RTS_HANDLE hEntry, LogEntry *pLogEntry)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get an entry specified by handle

**Parameters**

+---------+-----------+--------------------------------------------------------------------------+
| [in]    | hLog      | Handle to logger                                                         |
+---------+-----------+--------------------------------------------------------------------------+
| [in]    | hEntry    | Handle to log entry (is returned by LogGetFirstEntry or LogGetNextEntry) |
+---------+-----------+--------------------------------------------------------------------------+
| [in]    | pLogEntry | Pointer to log entry                                                     |
+---------+-----------+--------------------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_log_itf_1ga45c0b9e734c0f25143e09b79855902f2:

RTS_HANDLE LogGetFirstLogger (RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the first registered logger

**Parameters**

+---------+---------+-----------------------+
| [out]   | pResult | Pointer to error code |
+---------+---------+-----------------------+

**Returns:**

Handle to the first logger

.. _group___cmp_log_itf_1ga5802e8a77c0af4a63f01b84143b10e18:

RTS_HANDLE LogGetNextLogger (RTS_HANDLE hLogger, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the next registered logger

**Parameters**

+---------+---------+---------------------------+
| [in]    | hLogger | Handle to previous logger |
+---------+---------+---------------------------+
| [out]   | pResult | Pointer to error code     |
+---------+---------+---------------------------+

**Returns:**

Handle to the first logger

.. _group___cmp_log_itf_1ga6b72d5007defca9563b32de9b5ebd34e:

RTS_RESULT LogGetName (RTS_HANDLE hLog, char *pszLoggerName, int nMaxLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the logger name of the logger specified by handle

**Parameters**

+---------+-----------+-------------------------+
| [in]    | hLogger   | Handle to the logger    |
+---------+-----------+-------------------------+
| [inout] | pszLogger | Pointer to logger name  |
+---------+-----------+-------------------------+
| [in]    | nMaxLen   | Max length of pszLogger |
+---------+-----------+-------------------------+

**Returns:**

error code

.. _group___cmp_log_itf_1gad39c25bf124b3eb6e6819c9b297a27c2:

RTS_RESULT LogGetUserNotify (LogEntry **ppLogEntryUserNotify)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the last log entry of class LOG_USER_NOTIFY

**Parameters**

+---------+----------------------+----------------------------------------------+
| [out]   | ppLogEntryUserNotify | Returns the pointer to the user notify entry |
+---------+----------------------+----------------------------------------------+

**Returns:**

Error code:

- ERR_OK: There is still an unread log entry of the type LOG_USER_NOTIFY

- ERR_NO_OBJECT: No pending log entry of the type LOG_USER_NOTIFY

.. _group___cmp_log_itf_1ga8a3829f7bb504e0ed969cc67429e3b72:

RTS_UI32 LogConvertTimestamp (RTS_HANDLE hLog, LogTimestamp tTimestamp, RTS_SYSTIMEDATE *pDate, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Convert the timestamp of a log entry into the corresponding structured RTS_SYSTIMEDATE format

**Parameters**

+---------+------------+--------------------------------+
| [in]    | hLog       | Handle to the logger           |
+---------+------------+--------------------------------+
| [in]    | tTimestamp | Timestamp of the log entry     |
+---------+------------+--------------------------------+
| [out]   | pDate      | Return the converted timestamp |
+---------+------------+--------------------------------+
| [out]   | pResult    | Pointer to error code          |
+---------+------------+--------------------------------+

**Returns:**

Timestamp type of the logger. See "Log types" for details

.. last line of group.rst template
.. last line of composition.rst template


