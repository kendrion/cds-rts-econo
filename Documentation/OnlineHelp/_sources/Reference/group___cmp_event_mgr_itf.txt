.. first line of composition.rst template

.. first line of group.rst template

.. _group___cmp_event_mgr_itf:

==============
CmpEventMgrItf
==============

Interface of CmpEventMgr. :ref:`More... <group___cmp_event_mgr_itf-details>`

Modules
-------

- :ref:`Callback limit <group___cmp_event_mgr_itf___callbacklimit>`

- :ref:`Convert macro <group___cmp_event_mgr_itf___convertmacro>`

- :ref:`Event classes <group___cmp_event_mgr_itf___eventclasses>`

- :ref:`Event manager flags <group___cmp_event_mgr_itf___eventmanagerflags>`

- :ref:`Event options <group___cmp_event_mgr_itf___eventoptions>`

- :ref:`Event parameter <group___cmp_event_mgr_itf___eventparameter>`

- :ref:`Events <group___cmp_event_mgr_itf___events>`

- :ref:`Provider component ids <group___cmp_event_mgr_itf___providercomponentids>`

- :ref:`Special Events <group___cmp_event_mgr_itf___special_events>`

- :ref:`Static defines <group___cmp_event_mgr_itf___staticdefines>`

Data Structures
---------------

- struct :ref:`icmpeventcallback_struct <structicmpeventcallback__struct>`

- struct :ref:`tagicmpeventcallback_eventcallback_struct <structtagicmpeventcallback__eventcallback__struct>`

- struct :ref:`tageventclose_struct <structtageventclose__struct>`

- struct :ref:`tageventcreate_struct <structtageventcreate__struct>`

- struct :ref:`tageventcreate2_struct <structtageventcreate2__struct>`

- struct :ref:`tageventdelete_struct <structtageventdelete__struct>`

- struct :ref:`tageventgetclass_struct <structtageventgetclass__struct>`

- struct :ref:`tageventgetevent_struct <structtageventgetevent__struct>`

- struct :ref:`tageventopen_struct <structtageventopen__struct>`

- struct :ref:`tageventpost_struct <structtageventpost__struct>`

- struct :ref:`tageventpost2_struct <structtageventpost2__struct>`

- struct :ref:`tageventpostbyevent_struct <structtageventpostbyevent__struct>`

- struct :ref:`tageventpostbyevent2_struct <structtageventpostbyevent2__struct>`

- struct :ref:`tageventregistercallback_struct <structtageventregistercallback__struct>`

- struct :ref:`tageventregistercallback2_struct <structtageventregistercallback2__struct>`

- struct :ref:`tageventregistercallbackfunction_struct <structtageventregistercallbackfunction__struct>`

- struct :ref:`tageventregistercallbackfunction2_struct <structtageventregistercallbackfunction2__struct>`

- struct :ref:`tageventregisteredcallbacks_struct <structtageventregisteredcallbacks__struct>`

- struct :ref:`tageventunregistercallback_struct <structtageventunregistercallback__struct>`

- struct :ref:`tageventunregistercallbackfunction_struct <structtageventunregistercallbackfunction__struct>`

- struct :ref:`tageventunregistercallbackfunction2_struct <structtageventunregistercallbackfunction2__struct>`

- struct :ref:`ICmpEventMgr_C <struct_i_cmp_event_mgr___c>`

Macros
------

- #define :ref:`ITF_CmpEventMgr <group___cmp_event_mgr_itf_1ga0ef8932514d154a75f79ba0f2d7baf6f>`

- #define :ref:`EXTITF_CmpEventMgr <group___cmp_event_mgr_itf_1ga301d7483fcdeb4269530c1ce7e6a921d>`

Typedefs
--------

- typedef struct :ref:`tagicmpeventcallback_eventcallback_struct <structtagicmpeventcallback__eventcallback__struct>` :ref:`icmpeventcallback_eventcallback_struct <group___cmp_event_mgr_itf_1gacf0f656b76951176be0b20d7340a3631>`

- typedef struct :ref:`tageventclose_struct <structtageventclose__struct>` :ref:`eventclose_struct <group___cmp_event_mgr_itf_1ga341031e4691b1aa50c5f48ba143ce72c>`

- typedef struct :ref:`tageventcreate_struct <structtageventcreate__struct>` :ref:`eventcreate_struct <group___cmp_event_mgr_itf_1gaf0c45c35f9006573b66e811db7c48f56>`

- typedef struct :ref:`tageventcreate2_struct <structtageventcreate2__struct>` :ref:`eventcreate2_struct <group___cmp_event_mgr_itf_1gabe6b48f3ef82a7e36710f12f224b9d71>`

- typedef struct :ref:`tageventdelete_struct <structtageventdelete__struct>` :ref:`eventdelete_struct <group___cmp_event_mgr_itf_1gad733985b7d86c93496354d7730ed428e>`

- typedef struct :ref:`tageventgetclass_struct <structtageventgetclass__struct>` :ref:`eventgetclass_struct <group___cmp_event_mgr_itf_1gad582d8ac3d0253b45851a411975ad883>`

- typedef struct :ref:`tageventgetevent_struct <structtageventgetevent__struct>` :ref:`eventgetevent_struct <group___cmp_event_mgr_itf_1ga0c8a6c5d88391a140ae75ec63bce6f37>`

- typedef struct :ref:`tageventopen_struct <structtageventopen__struct>` :ref:`eventopen_struct <group___cmp_event_mgr_itf_1ga61e7b8d913af49f9c269dbfac11a5cd6>`

- typedef struct :ref:`tageventpost_struct <structtageventpost__struct>` :ref:`eventpost_struct <group___cmp_event_mgr_itf_1gac8d4add30968c474eddfde32b6ebdb09>`

- typedef struct :ref:`tageventpost2_struct <structtageventpost2__struct>` :ref:`eventpost2_struct <group___cmp_event_mgr_itf_1gab1e3ebcda3dc0dc649f15beab789ab86>`

- typedef struct :ref:`tageventpostbyevent_struct <structtageventpostbyevent__struct>` :ref:`eventpostbyevent_struct <group___cmp_event_mgr_itf_1ga382e2c01430c3f206aa38a909d680b3d>`

- typedef struct :ref:`tageventpostbyevent2_struct <structtageventpostbyevent2__struct>` :ref:`eventpostbyevent2_struct <group___cmp_event_mgr_itf_1ga90e27bf88f5e89b2fe6a26aa958e19d3>`

- typedef struct :ref:`tageventregistercallback_struct <structtageventregistercallback__struct>` :ref:`eventregistercallback_struct <group___cmp_event_mgr_itf_1ga90a9f952f52401eee780082475575845>`

- typedef struct :ref:`tageventregistercallback2_struct <structtageventregistercallback2__struct>` :ref:`eventregistercallback2_struct <group___cmp_event_mgr_itf_1ga96a3b925a827663312180e48a81f15cb>`

- typedef struct :ref:`tageventregistercallbackfunction_struct <structtageventregistercallbackfunction__struct>` :ref:`eventregistercallbackfunction_struct <group___cmp_event_mgr_itf_1ga092eb0d4cf974163db77a555551fe642>`

- typedef struct :ref:`tageventregistercallbackfunction2_struct <structtageventregistercallbackfunction2__struct>` :ref:`eventregistercallbackfunction2_struct <group___cmp_event_mgr_itf_1ga94a4d83857de7e620b4076ef13e13880>`

- typedef struct :ref:`tageventregisteredcallbacks_struct <structtageventregisteredcallbacks__struct>` :ref:`eventregisteredcallbacks_struct <group___cmp_event_mgr_itf_1gaace9757756a9598d3ad3a0166d4f9a4b>`

- typedef struct :ref:`tageventunregistercallback_struct <structtageventunregistercallback__struct>` :ref:`eventunregistercallback_struct <group___cmp_event_mgr_itf_1ga49f5cccea1584b39b67599126948707a>`

- typedef struct :ref:`tageventunregistercallbackfunction_struct <structtageventunregistercallbackfunction__struct>` :ref:`eventunregistercallbackfunction_struct <group___cmp_event_mgr_itf_1ga8ef30b67b3ee04001bd40094f91b25fa>`

- typedef struct :ref:`tageventunregistercallbackfunction2_struct <structtageventunregistercallbackfunction2__struct>` :ref:`eventunregistercallbackfunction2_struct <group___cmp_event_mgr_itf_1gac3020fae9ca103c60b6b985104a618fe>`

- typedef :ref:`ICmpEventMgr_C <struct_i_cmp_event_mgr___c>` :ref:`ICmpEventMgr <group___cmp_event_mgr_itf_1gaddb27114577b319b983678219172c543>`

Functions
---------

- void :ref:`eventclose <group___cmp_event_mgr_itf_1ga87853fdb04bed8c3230521b776e53389>` (:ref:`eventclose_struct <group___cmp_event_mgr_itf_1ga341031e4691b1aa50c5f48ba143ce72c>` * p)

- void :ref:`eventcreate <group___cmp_event_mgr_itf_1ga9a33af7e52b72a75aadc47bed5491506>` (:ref:`eventcreate_struct <group___cmp_event_mgr_itf_1gaf0c45c35f9006573b66e811db7c48f56>` * p)

- void :ref:`eventcreate2 <group___cmp_event_mgr_itf_1ga2a4812ff0849f13ec810a484c5c3d09b>` (:ref:`eventcreate2_struct <group___cmp_event_mgr_itf_1gabe6b48f3ef82a7e36710f12f224b9d71>` * p)

- void :ref:`eventdelete <group___cmp_event_mgr_itf_1gae35482ae69f53755afe94286121955a1>` (:ref:`eventdelete_struct <group___cmp_event_mgr_itf_1gad733985b7d86c93496354d7730ed428e>` * p)

- void :ref:`eventgetclass <group___cmp_event_mgr_itf_1gaab5281117d397276f825e8ebfa505810>` (:ref:`eventgetclass_struct <group___cmp_event_mgr_itf_1gad582d8ac3d0253b45851a411975ad883>` * p)

- void :ref:`eventgetevent <group___cmp_event_mgr_itf_1ga7b780da302c4d905756f8d4f32696152>` (:ref:`eventgetevent_struct <group___cmp_event_mgr_itf_1ga0c8a6c5d88391a140ae75ec63bce6f37>` * p)

- void :ref:`eventopen <group___cmp_event_mgr_itf_1gaa7ae1d5c7928f2a388c19dd140b972fd>` (:ref:`eventopen_struct <group___cmp_event_mgr_itf_1ga61e7b8d913af49f9c269dbfac11a5cd6>` * p)

- void :ref:`eventpost <group___cmp_event_mgr_itf_1ga74cf6ac8060179d0f67754a2299383b8>` (:ref:`eventpost_struct <group___cmp_event_mgr_itf_1gac8d4add30968c474eddfde32b6ebdb09>` * p)

- void :ref:`eventpost2 <group___cmp_event_mgr_itf_1ga4ba6c6e7489bba73b8f4f2553a4ecac7>` (:ref:`eventpost2_struct <group___cmp_event_mgr_itf_1gab1e3ebcda3dc0dc649f15beab789ab86>` * p)

- void :ref:`eventpostbyevent <group___cmp_event_mgr_itf_1ga1aac329f54703d1d9db4e23323d7f75f>` (:ref:`eventpostbyevent_struct <group___cmp_event_mgr_itf_1ga382e2c01430c3f206aa38a909d680b3d>` * p)

- void :ref:`eventpostbyevent2 <group___cmp_event_mgr_itf_1gaf601e0aaf90a8c94bf917aad24221124>` (:ref:`eventpostbyevent2_struct <group___cmp_event_mgr_itf_1ga90e27bf88f5e89b2fe6a26aa958e19d3>` * p)

- void :ref:`eventregistercallback <group___cmp_event_mgr_itf_1gaf2f5e69ee350357340737d3519a09666>` (:ref:`eventregistercallback_struct <group___cmp_event_mgr_itf_1ga90a9f952f52401eee780082475575845>` * p)

- void :ref:`eventregistercallback2 <group___cmp_event_mgr_itf_1gacf528d374845f87ab7b6c240a43d0bc5>` (:ref:`eventregistercallback2_struct <group___cmp_event_mgr_itf_1ga96a3b925a827663312180e48a81f15cb>` * p)

- void :ref:`eventregistercallbackfunction <group___cmp_event_mgr_itf_1gafffd32fc649a1434658f08aaf9cb045a>` (:ref:`eventregistercallbackfunction_struct <group___cmp_event_mgr_itf_1ga092eb0d4cf974163db77a555551fe642>` * p)

- void :ref:`eventregistercallbackfunction2 <group___cmp_event_mgr_itf_1ga2b0dabf13061fe2b5247db9ff30a13a9>` (:ref:`eventregistercallbackfunction2_struct <group___cmp_event_mgr_itf_1ga94a4d83857de7e620b4076ef13e13880>` * p)

- void :ref:`eventregisteredcallbacks <group___cmp_event_mgr_itf_1gac01f9fbb635c134b1dff8e3a1e114874>` (:ref:`eventregisteredcallbacks_struct <group___cmp_event_mgr_itf_1gaace9757756a9598d3ad3a0166d4f9a4b>` * p)

- void :ref:`eventunregistercallback <group___cmp_event_mgr_itf_1ga766c3d8b57f2a2229f3e523fef882ded>` (:ref:`eventunregistercallback_struct <group___cmp_event_mgr_itf_1ga49f5cccea1584b39b67599126948707a>` * p)

- void :ref:`eventunregistercallbackfunction <group___cmp_event_mgr_itf_1ga09a6c3101242f985bbdf34580d230435>` (:ref:`eventunregistercallbackfunction_struct <group___cmp_event_mgr_itf_1ga8ef30b67b3ee04001bd40094f91b25fa>` * p)

- void :ref:`eventunregistercallbackfunction2 <group___cmp_event_mgr_itf_1ga0de01ddf99042d3c71866d6155df02f1>` (:ref:`eventunregistercallbackfunction2_struct <group___cmp_event_mgr_itf_1gac3020fae9ca103c60b6b985104a618fe>` * p)

- RTS_HANDLE :ref:`EventCreate <group___cmp_event_mgr_itf_1ga6d63f00d5bce0b4125c266dd37bee048>` (:ref:`EVENTID <group___cmp_event_callback_itf_1ga01e77e79206096b36fae0f8b3bf05ed4>`  EventId, CMPID CmpIdProvider, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`EventCreate2 <group___cmp_event_mgr_itf_1ga5b5f843105b4c1b7997ffbe066fdc493>` (:ref:`EVENTID <group___cmp_event_callback_itf_1ga01e77e79206096b36fae0f8b3bf05ed4>`  EventId, CMPID CmpIdProvider, RTS_UI32 nCallbacksPossible, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`EventCreate3 <group___cmp_event_mgr_itf_1gad246cb6f243b196a3362cb265f3eadcb>` (:ref:`EVENTID <group___cmp_event_callback_itf_1ga01e77e79206096b36fae0f8b3bf05ed4>`  EventId, CMPID CmpIdProvider, :ref:`EventOptions <group___cmp_event_mgr_itf___eventoptions_1ga28e8a6e8821a62bc983dba997cea5bb7>` * pEventOptions, RTS_RESULT * pResult)

- RTS_RESULT :ref:`EventDelete <group___cmp_event_mgr_itf_1ga46db17c2283a873758be432ba1b3c705>` (RTS_HANDLE hEvent)

- RTS_RESULT :ref:`EventDeleteAll <group___cmp_event_mgr_itf_1ga4c2fa227fd0de00e44f8bc3f3f4dcfe0>` (void)

- RTS_HANDLE :ref:`EventOpen <group___cmp_event_mgr_itf_1ga03c581805da95e555049ae869ff346ef>` (:ref:`EVENTID <group___cmp_event_callback_itf_1ga01e77e79206096b36fae0f8b3bf05ed4>`  EventId, CMPID CmpIdProvider, RTS_RESULT * pResult)

- RTS_RESULT :ref:`EventClose <group___cmp_event_mgr_itf_1gab412d42bea35b57d05e6ec72c09b2248>` (RTS_HANDLE hEvent)

- unsigned short :ref:`EventGetEvent <group___cmp_event_mgr_itf_1gaea9900de3e709640171fe17fe957b354>` (:ref:`EVENTID <group___cmp_event_callback_itf_1ga01e77e79206096b36fae0f8b3bf05ed4>`  EventId)

- unsigned short :ref:`EventGetClass <group___cmp_event_mgr_itf_1gadec882025916a1b54392ec1412eff915>` (:ref:`EVENTID <group___cmp_event_callback_itf_1ga01e77e79206096b36fae0f8b3bf05ed4>`  EventId)

- RTS_RESULT :ref:`EventRegisterCallback <group___cmp_event_mgr_itf_1gacc1252cc24f4e6b1f57c0a9ad5316894>` (RTS_HANDLE hEvent, :ref:`ICmpEventCallback <group___cmp_event_callback_itf_1gab62e8941dbce768886870ffcb7b40910>` * pICallback)

- RTS_RESULT :ref:`EventRegisterCallback2 <group___cmp_event_mgr_itf_1gafe4769fad1c2c127880e186c33946dc6>` (RTS_HANDLE hEvent, :ref:`ICmpEventCallback <group___cmp_event_callback_itf_1gab62e8941dbce768886870ffcb7b40910>` * pICallback, void * pUserParameter)

- RTS_RESULT :ref:`EventRegisterCallback3 <group___cmp_event_mgr_itf_1ga1f20adecf09c15d4812c9d726228895e>` (RTS_HANDLE hEvent, :ref:`ICmpEventCallback <group___cmp_event_callback_itf_1gab62e8941dbce768886870ffcb7b40910>` * pICallback, int bIec, void * pUserParameter)

- RTS_RESULT :ref:`EventUnregisterCallback <group___cmp_event_mgr_itf_1ga0592f26b92632f763fb2ac344d80f0e2>` (RTS_HANDLE hEvent, :ref:`ICmpEventCallback <group___cmp_event_callback_itf_1gab62e8941dbce768886870ffcb7b40910>` * pICallback)

- RTS_RESULT :ref:`EventRegisterCallbackFunction <group___cmp_event_mgr_itf_1ga840f61977305de6ac7b102b1dea6e97a>` (RTS_HANDLE hEvent, :ref:`PFEVENTCALLBACKFUNCTION <group___cmp_event_callback_itf_1ga66fcdd6103915e80e60e526bd4ad4dcf>`  pfCallbackFunction, int bIec)

- RTS_RESULT :ref:`EventRegisterCallbackFunction2 <group___cmp_event_mgr_itf_1ga5aa610df15014fd7a4379e0a1c39b3cb>` (RTS_HANDLE hEvent, :ref:`PFEVENTCALLBACKFUNCTION <group___cmp_event_callback_itf_1ga66fcdd6103915e80e60e526bd4ad4dcf>`  pfCallbackFunction, int bIec, void * pUserParameter)

- RTS_RESULT :ref:`EventUnregisterCallbackFunction <group___cmp_event_mgr_itf_1ga4af436d4a7636f183f8aefd388ba00c6>` (RTS_HANDLE hEvent, :ref:`PFEVENTCALLBACKFUNCTION <group___cmp_event_callback_itf_1ga66fcdd6103915e80e60e526bd4ad4dcf>`  pfCallbackFunction)

- RTS_RESULT :ref:`EventUnregisterCallbackFunction2 <group___cmp_event_mgr_itf_1ga93b438a1806e0a7751df719d951724bf>` (RTS_HANDLE hEvent, :ref:`PFEVENTCALLBACKFUNCTION <group___cmp_event_callback_itf_1ga66fcdd6103915e80e60e526bd4ad4dcf>`  pfCallbackFunction, void * pUserParameter)

- RTS_UI32 :ref:`EventRegisteredCallbacks <group___cmp_event_mgr_itf_1gaefbe759edf99e7637b71c48ab5d54128>` (RTS_HANDLE hEvent, RTS_RESULT * pResult)

- RTS_RESULT :ref:`EventPost <group___cmp_event_mgr_itf_1gabf56cffdf81dfa63d7fc79b094b38be7>` (RTS_HANDLE hEvent, :ref:`EventParam <struct_event_param>` * pEventParam)

- RTS_RESULT :ref:`EventPost2 <group___cmp_event_mgr_itf_1ga7700a8b680a0c48ac03feaf34fc86c04>` (RTS_HANDLE hEvent, unsigned short usParamId, unsigned short usVersion, void * pParameter)

- RTS_RESULT :ref:`EventPostByEvent <group___cmp_event_mgr_itf_1ga8eaff9ef246ceabc1bbcf1e365bfecdd>` (:ref:`EVENTID <group___cmp_event_callback_itf_1ga01e77e79206096b36fae0f8b3bf05ed4>`  EventId, CMPID CmpIdProvider, :ref:`EventParam <struct_event_param>` * pEventParam)

.. _group___cmp_event_mgr_itf-details:

Detailed Description
--------------------

Interface of CmpEventMgr.

This is the interface of the event manager. The manager is responsible to handle all events in the runtime system and to call special registered functions (callbacks) if an event occurred. An event can be sent in any situation, when a state will be changed in the runtime system. An event can be e.g. stop of an Iec application, download of an Iec application, exception occurred in a component, etc.

Typically an event will be sent before a state changed (xxxPrepare) and if the state has changed (xxxDone)

The component that provides and sends an event is called the provider. The component that receives the event is called the consumer of an event.

Each component can define its own event ID. Such an event ID consists of two numbers:

- Event class: 16 bit number that specifies the class of the event

- Event: 16 bit number that specifies the event

The event class and the event is matched to one 32 bit number that is called the event ID. The event, event class and the component ID of the provider makes an event unique. So every provider has to specify at least these three things to sent an event.

Each provider can specify additional parameters for each event that is transferred to the consumer. This is event specific and can be specified by the consumer. Such an optional event parameter must be specified by a component specific parameter ID and with a parameter version number. With this information, a consumer can check, which parameter in which version the provider is sending.

To use an event, first of all the provider has to register the event. After that, the consumer can open this event and can attach its callback routine to this event. Such a callback routine can be:

- C-Function

- Iec-Function

- Iec-Method of a function block

- C++-Method of a C++ class

IMPLEMENTATION NOTE: A provider typically registers its event in the CH_INIT2 hook. The consumer typically registers its callback to special events in the CH_INIT3 hook.

If a provider only wants to register an event if it is really needed by a consumer, the CmpEventMgr sents a special event, if a consumer tries to open an event (see EVT_EventOpen). In this event, the provider can register the event and the consumer can open a valid event.

In opposite, if a consumer wants to register a callback on an event, an event is sent if a provider registers its event (see EVT_EventCreate).

If an event is unregistred by a provider, the event EVT_EventDelete is sent. If an event is closed by a consumer, the event EVT_EventClose is sent.

**Copyright:**

Copyright (c) 2017-2018 CODESYS GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved.

Macro Definition Documentation
------------------------------
.. _group___cmp_event_mgr_itf_1ga0ef8932514d154a75f79ba0f2d7baf6f:

#define ITF_CmpEventMgr
^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_event_mgr_itf_1ga301d7483fcdeb4269530c1ce7e6a921d:

#define EXTITF_CmpEventMgr
^^^^^^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___cmp_event_mgr_itf_1gacf0f656b76951176be0b20d7340a3631:

typedef struct tagicmpeventcallback_eventcallback_struct  icmpeventcallback_eventcallback_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The interface ICmpEventCallback must be registered for an event. If this event is posted, this callback method is called.

.. _group___cmp_event_mgr_itf_1ga341031e4691b1aa50c5f48ba143ce72c:

typedef struct tageventclose_struct  eventclose_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Close an event specified by handle

.. _group___cmp_event_mgr_itf_1gaf0c45c35f9006573b66e811db7c48f56:

typedef struct tageventcreate_struct  eventcreate_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Creates a new event object. If event still exists, a handle to this object will be returned. An IEC event is typically created by the provider in FB_Init of a function block

.. _group___cmp_event_mgr_itf_1gabe6b48f3ef82a7e36710f12f224b9d71:

typedef struct tageventcreate2_struct  eventcreate2_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Creates a new event object. If event still exists, a handle to this object will be returned. An IEC event is typically created by the provider in FB_Init of a function block

.. _group___cmp_event_mgr_itf_1gad733985b7d86c93496354d7730ed428e:

typedef struct tageventdelete_struct  eventdelete_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Deletes an event specified by handle.

.. _group___cmp_event_mgr_itf_1gad582d8ac3d0253b45851a411975ad883:

typedef struct tageventgetclass_struct  eventgetclass_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Extract the event class from eventid. Return value is the event class

.. _group___cmp_event_mgr_itf_1ga0c8a6c5d88391a140ae75ec63bce6f37:

typedef struct tageventgetevent_struct  eventgetevent_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Extract the event from eventid. Return value ist the event

.. _group___cmp_event_mgr_itf_1ga61e7b8d913af49f9c269dbfac11a5cd6:

typedef struct tageventopen_struct  eventopen_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Opens an existing event object. Can be used to check, if the event was created by the provider. If the event does not exist, an error code is returned.

.. _group___cmp_event_mgr_itf_1gac8d4add30968c474eddfde32b6ebdb09:

typedef struct tageventpost_struct  eventpost_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Post or sent an event

.. _group___cmp_event_mgr_itf_1gab1e3ebcda3dc0dc649f15beab789ab86:

typedef struct tageventpost2_struct  eventpost2_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Post or sent an event

.. _group___cmp_event_mgr_itf_1ga382e2c01430c3f206aa38a909d680b3d:

typedef struct tageventpostbyevent_struct  eventpostbyevent_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Post an event direct without the event handle

.. _group___cmp_event_mgr_itf_1ga90e27bf88f5e89b2fe6a26aa958e19d3:

typedef struct tageventpostbyevent2_struct  eventpostbyevent2_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Post an event direct without the event handle

.. _group___cmp_event_mgr_itf_1ga90a9f952f52401eee780082475575845:

typedef struct tageventregistercallback_struct  eventregistercallback_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Register an callback method to an event. The callback must be an interface from an Iec function block! Result will be set to ERR_DUPLICATE if pICallback is already registered.

.. _group___cmp_event_mgr_itf_1ga96a3b925a827663312180e48a81f15cb:

typedef struct tageventregistercallback2_struct  eventregistercallback2_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Register an callback method to an event. The callback must be an interface from an Iec function block! Result will be set to ERR_DUPLICATE if the combination of pICallback and pUserParameter is already registered.

.. _group___cmp_event_mgr_itf_1ga092eb0d4cf974163db77a555551fe642:

typedef struct tageventregistercallbackfunction_struct  eventregistercallbackfunction_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Register a callback function to an event. Callback is the address of an Iec function: ADR(function)

.. _group___cmp_event_mgr_itf_1ga94a4d83857de7e620b4076ef13e13880:

typedef struct tageventregistercallbackfunction2_struct  eventregistercallbackfunction2_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Register a callback function to an event. Callback is the address of an Iec function: ADR(function)

.. _group___cmp_event_mgr_itf_1gaace9757756a9598d3ad3a0166d4f9a4b:

typedef struct tageventregisteredcallbacks_struct  eventregisteredcallbacks_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns the number of registered callbacks on the event

.. _group___cmp_event_mgr_itf_1ga49f5cccea1584b39b67599126948707a:

typedef struct tageventunregistercallback_struct  eventunregistercallback_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Unregister a callback interface from an event specified by handle and callback interface

.. _group___cmp_event_mgr_itf_1ga8ef30b67b3ee04001bd40094f91b25fa:

typedef struct tageventunregistercallbackfunction_struct  eventunregistercallbackfunction_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Unregister a callback function from an event specified by handle and callback

.. _group___cmp_event_mgr_itf_1gac3020fae9ca103c60b6b985104a618fe:

typedef struct tageventunregistercallbackfunction2_struct  eventunregistercallbackfunction2_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Unregister a callback function with a specific user parameter from an event specified by handle and callback and parameter

.. _group___cmp_event_mgr_itf_1gaddb27114577b319b983678219172c543:

typedef ICmpEventMgr_C ICmpEventMgr
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function Documentation
----------------------

.. _group___cmp_event_mgr_itf_1ga87853fdb04bed8c3230521b776e53389:

void eventclose (eventclose_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_event_mgr_itf_1ga9a33af7e52b72a75aadc47bed5491506:

void eventcreate (eventcreate_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_event_mgr_itf_1ga2a4812ff0849f13ec810a484c5c3d09b:

void eventcreate2 (eventcreate2_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_event_mgr_itf_1gae35482ae69f53755afe94286121955a1:

void eventdelete (eventdelete_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_event_mgr_itf_1gaab5281117d397276f825e8ebfa505810:

void eventgetclass (eventgetclass_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_event_mgr_itf_1ga7b780da302c4d905756f8d4f32696152:

void eventgetevent (eventgetevent_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_event_mgr_itf_1gaa7ae1d5c7928f2a388c19dd140b972fd:

void eventopen (eventopen_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_event_mgr_itf_1ga74cf6ac8060179d0f67754a2299383b8:

void eventpost (eventpost_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_event_mgr_itf_1ga4ba6c6e7489bba73b8f4f2553a4ecac7:

void eventpost2 (eventpost2_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_event_mgr_itf_1ga1aac329f54703d1d9db4e23323d7f75f:

void eventpostbyevent (eventpostbyevent_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_event_mgr_itf_1gaf601e0aaf90a8c94bf917aad24221124:

void eventpostbyevent2 (eventpostbyevent2_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_event_mgr_itf_1gaf2f5e69ee350357340737d3519a09666:

void eventregistercallback (eventregistercallback_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_event_mgr_itf_1gacf528d374845f87ab7b6c240a43d0bc5:

void eventregistercallback2 (eventregistercallback2_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_event_mgr_itf_1gafffd32fc649a1434658f08aaf9cb045a:

void eventregistercallbackfunction (eventregistercallbackfunction_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_event_mgr_itf_1ga2b0dabf13061fe2b5247db9ff30a13a9:

void eventregistercallbackfunction2 (eventregistercallbackfunction2_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_event_mgr_itf_1gac01f9fbb635c134b1dff8e3a1e114874:

void eventregisteredcallbacks (eventregisteredcallbacks_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_event_mgr_itf_1ga766c3d8b57f2a2229f3e523fef882ded:

void eventunregistercallback (eventunregistercallback_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_event_mgr_itf_1ga09a6c3101242f985bbdf34580d230435:

void eventunregistercallbackfunction (eventunregistercallbackfunction_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_event_mgr_itf_1ga0de01ddf99042d3c71866d6155df02f1:

void eventunregistercallbackfunction2 (eventunregistercallbackfunction2_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_event_mgr_itf_1ga6d63f00d5bce0b4125c266dd37bee048:

RTS_HANDLE EventCreate (EVENTID EventId, CMPID CmpIdProvider, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EXTERN LIB SECTION END

Creates a new event object. If event still exists, a handle to this object will be returned. An event is typically created by the provider of an event in the CH_INIT_DONE hook.

**Parameters**

+---------+---------------+---------------------------------------------------------+
| [in]    | EventId       | Event ID of the event. Contains the class and the event |
+---------+---------------+---------------------------------------------------------+
| [in]    | CmpIdProvider | Component ID of the provider                            |
+---------+---------------+---------------------------------------------------------+
| [out]   | pResult       | Pointer to the error code                               |
+---------+---------------+---------------------------------------------------------+

**Returns:**

Handle to the event object

.. _group___cmp_event_mgr_itf_1ga5b5f843105b4c1b7997ffbe066fdc493:

RTS_HANDLE EventCreate2 (EVENTID EventId, CMPID CmpIdProvider, RTS_UI32 nCallbacksPossible, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Creates a new event object. If event still exists, a handle to this object will be returned. An event is typically created by the provider of an event in the CH_INIT_DONE hook.

**Parameters**

+---------+--------------------+---------------------------------------------------------------------------------------------+
| [in]    | EventId            | Event ID of the event. Contains the class and the event                                     |
+---------+--------------------+---------------------------------------------------------------------------------------------+
| [in]    | CmpIdProvider      | Component ID of the provider                                                                |
+---------+--------------------+---------------------------------------------------------------------------------------------+
| [in]    | nCallbacksPossible | Maximum number of callbacks possible on this event or EVENT_CALLBACKS_NO_LIMIT for no limit |
+---------+--------------------+---------------------------------------------------------------------------------------------+
| [out]   | pResult            | Pointer to the error code                                                                   |
+---------+--------------------+---------------------------------------------------------------------------------------------+

**Returns:**

Handle to the event object

.. _group___cmp_event_mgr_itf_1gad246cb6f243b196a3362cb265f3eadcb:

RTS_HANDLE EventCreate3 (EVENTID EventId, CMPID CmpIdProvider, EventOptions *pEventOptions, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Creates a new event object. If event still exists, a handle to this object will be returned. An event is typically created by the provider of an event in the CH_INIT_DONE hook.

**Parameters**

+---------+---------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | EventId       | Event ID of the event. Contains the class and the event                                                                                                                |
+---------+---------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | CmpIdProvider | Component ID of the provider                                                                                                                                           |
+---------+---------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pEventOptions | Pointer to the EventOptions. May be NULL, then :ref:`EventCreate() <group___cmp_app_b_p_dep_1gabd08fad40d0fcbbb8692e660985f462d>` will be called without EventOptions. |
+---------+---------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult       | Pointer to the error code                                                                                                                                              |
+---------+---------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Handle to the event object

.. _group___cmp_event_mgr_itf_1ga46db17c2283a873758be432ba1b3c705:

RTS_RESULT EventDelete (RTS_HANDLE hEvent)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Deletes an event specified by handle

**Parameters**

+---------+--------+-----------------+
| [in]    | hEvent | Handle to event |
+---------+--------+-----------------+

**Returns:**

error code

.. _group___cmp_event_mgr_itf_1ga4c2fa227fd0de00e44f8bc3f3f4dcfe0:

RTS_RESULT EventDeleteAll (void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Delete all registered events and the registered callbacks
**Returns:**

error code

.. _group___cmp_event_mgr_itf_1ga03c581805da95e555049ae869ff346ef:

RTS_HANDLE EventOpen (EVENTID EventId, CMPID CmpIdProvider, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Opens an existing event object. Can be used to check, if the event was created by the provider. If the event does not exist, an error code is returned.

Typically an event is opened by the consumer of an event in the CH_INIT_DONE2 hook.

**Parameters**

+---------+---------------+---------------------------------------------------------+
| [in]    | EventId       | Event ID of the event. Contains the class and the event |
+---------+---------------+---------------------------------------------------------+
| [in]    | CmpIdProvider | Component ID of the provider                            |
+---------+---------------+---------------------------------------------------------+
| [out]   | pResult       | Pointer to error code                                   |
+---------+---------------+---------------------------------------------------------+

**Returns:**

Handle to the event object

.. _group___cmp_event_mgr_itf_1gab412d42bea35b57d05e6ec72c09b2248:

RTS_RESULT EventClose (RTS_HANDLE hEvent)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Close an event specified by handle

**Parameters**

+---------+--------+---------------------+
| [in]    | hEvent | Handle to the event |
+---------+--------+---------------------+

**Returns:**

error code

.. _group___cmp_event_mgr_itf_1gaea9900de3e709640171fe17fe957b354:

unsigned short EventGetEvent (EVENTID EventId)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Extract the event from eventid

**Parameters**

+---------+---------+----------+
| [in]    | EventId | Event ID |
+---------+---------+----------+

**Returns:**

Event. Is specified in the interface of each component

.. _group___cmp_event_mgr_itf_1gadec882025916a1b54392ec1412eff915:

unsigned short EventGetClass (EVENTID EventId)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Extract the event class from eventid

**Parameters**

+---------+---------+----------+
| [in]    | EventId | Event ID |
+---------+---------+----------+

**Returns:**

Event class

.. _group___cmp_event_mgr_itf_1gacc1252cc24f4e6b1f57c0a9ad5316894:

RTS_RESULT EventRegisterCallback (RTS_HANDLE hEvent, ICmpEventCallback *pICallback)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Register an interface callback function to an event. The interface can be from a C object, a C++ class or a wrapper class for an Iec function block

**Parameters**

+---------+------------+-------------------------------+
| [in]    | hEvent     | Handle to event               |
+---------+------------+-------------------------------+
| [in]    | pICallback | Pointer to callback interface |
+---------+------------+-------------------------------+

**Returns:**

error code

.. _group___cmp_event_mgr_itf_1gafe4769fad1c2c127880e186c33946dc6:

RTS_RESULT EventRegisterCallback2 (RTS_HANDLE hEvent, ICmpEventCallback *pICallback, void *pUserParameter)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Register an interface callback function to an event. The interface can be from a C object, a C++ class or a wrapper class for an Iec function block

**Parameters**

+---------+----------------+--------------------------------------------------------------------------------------------------------------+
| [in]    | hEvent         | Handle to event                                                                                              |
+---------+----------------+--------------------------------------------------------------------------------------------------------------+
| [in]    | pICallback     | Pointer to callback interface                                                                                |
+---------+----------------+--------------------------------------------------------------------------------------------------------------+
| [in]    | pUserParameter | Pointer to user parameter, that is transmitted to the callback (see :ref:`EventParam <struct_event_param>` ) |
+---------+----------------+--------------------------------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_event_mgr_itf_1ga1f20adecf09c15d4812c9d726228895e:

RTS_RESULT EventRegisterCallback3 (RTS_HANDLE hEvent, ICmpEventCallback *pICallback, int bIec, void *pUserParameter)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Register an interface callback function to an event. The interface can be from a C object, a C++ class or a wrapper class for an Iec function block

**Parameters**

+---------+----------------+--------------------------------------------------------------------------------------------------------------+
| [in]    | hEvent         | Handle to event                                                                                              |
+---------+----------------+--------------------------------------------------------------------------------------------------------------+
| [in]    | pICallback     | Pointer to callback interface                                                                                |
+---------+----------------+--------------------------------------------------------------------------------------------------------------+
| [in]    | bIec           | 1=Iec interface behind the C interface, 0=C interface                                                        |
+---------+----------------+--------------------------------------------------------------------------------------------------------------+
| [in]    | pUserParameter | Pointer to user parameter, that is transmitted to the callback (see :ref:`EventParam <struct_event_param>` ) |
+---------+----------------+--------------------------------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_event_mgr_itf_1ga0592f26b92632f763fb2ac344d80f0e2:

RTS_RESULT EventUnregisterCallback (RTS_HANDLE hEvent, ICmpEventCallback *pICallback)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Unregister a callback interface from an event specified by handle and callback interface

**Parameters**

+---------+------------+-------------------------------+
| [in]    | hEvent     | Handle to event               |
+---------+------------+-------------------------------+
| [in]    | pICallback | Pointer to callback interface |
+---------+------------+-------------------------------+

**Returns:**

error code

.. _group___cmp_event_mgr_itf_1ga840f61977305de6ac7b102b1dea6e97a:

RTS_RESULT EventRegisterCallbackFunction (RTS_HANDLE hEvent, PFEVENTCALLBACKFUNCTION pfCallbackFunction, int bIec)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Register a callback function to an event. Callback function can be a C or Iec function

**Parameters**

+---------+--------------------+------------------------------+
| [in]    | hEvent             | Handle to event              |
+---------+--------------------+------------------------------+
| [in]    | pfCallbackFunction | Pointer to callback function |
+---------+--------------------+------------------------------+
| [in]    | bIec               | 1=Iec function, 0=C function |
+---------+--------------------+------------------------------+

**Returns:**

error code

.. _group___cmp_event_mgr_itf_1ga5aa610df15014fd7a4379e0a1c39b3cb:

RTS_RESULT EventRegisterCallbackFunction2 (RTS_HANDLE hEvent, PFEVENTCALLBACKFUNCTION pfCallbackFunction, int bIec, void *pUserParameter)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Register a callback function to an event. Callback function can be a C or Iec function

**Parameters**

+---------+--------------------+--------------------------------------------------------------------------------------------------------------+
| [in]    | hEvent             | Handle to event                                                                                              |
+---------+--------------------+--------------------------------------------------------------------------------------------------------------+
| [in]    | pfCallbackFunction | Pointer to callback function                                                                                 |
+---------+--------------------+--------------------------------------------------------------------------------------------------------------+
| [in]    | bIec               | 1=Iec function, 0=C function                                                                                 |
+---------+--------------------+--------------------------------------------------------------------------------------------------------------+
| [in]    | pUserParameter     | Pointer to user parameter, that is transmitted to the callback (see :ref:`EventParam <struct_event_param>` ) |
+---------+--------------------+--------------------------------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_event_mgr_itf_1ga4af436d4a7636f183f8aefd388ba00c6:

RTS_RESULT EventUnregisterCallbackFunction (RTS_HANDLE hEvent, PFEVENTCALLBACKFUNCTION pfCallbackFunction)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Unregister a callback function from an event specified by handle and callback

**Parameters**

+---------+--------------------+------------------------------+
| [in]    | hEvent             | Handle to event              |
+---------+--------------------+------------------------------+
| [in]    | pfCallbackFunction | Pointer to callback function |
+---------+--------------------+------------------------------+

**Returns:**

Error code

.. _group___cmp_event_mgr_itf_1ga93b438a1806e0a7751df719d951724bf:

RTS_RESULT EventUnregisterCallbackFunction2 (RTS_HANDLE hEvent, PFEVENTCALLBACKFUNCTION pfCallbackFunction, void *pUserParameter)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Unregister a callback function with a specific user parameter from an event specified by handle and callback and parameter

**Parameters**

+---------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hEvent             | Handle to event                                                                                                                                                 |
+---------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pfCallbackFunction | Pointer to callback function                                                                                                                                    |
+---------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | bIec               | 1=Iec function, 0=C function                                                                                                                                    |
+---------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pUserParameter     | Pointer to user parameter, that was specified as a parameter at :ref:`EventRegisterCallback2() <group___cmp_event_mgr_itf_1gafe4769fad1c2c127880e186c33946dc6>` |
+---------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

.. _group___cmp_event_mgr_itf_1gaefbe759edf99e7637b71c48ab5d54128:

RTS_UI32 EventRegisteredCallbacks (RTS_HANDLE hEvent, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to evaluate the number of registered callback handlers on a single event

**Parameters**

+---------+---------+-----------------------+
| [in]    | hEvent  | Handle to event       |
+---------+---------+-----------------------+
| [out]   | pResult | Pointer to error code |
+---------+---------+-----------------------+

**Returns:**

Number of registered callback handlers on this event

.. _group___cmp_event_mgr_itf_1gabf56cffdf81dfa63d7fc79b094b38be7:

RTS_RESULT EventPost (RTS_HANDLE hEvent, EventParam *pEventParam)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Post or sent an event

**Parameters**

+---------+-------------+---------------------------------+
| [in]    | hEvent      | Handle to event                 |
+---------+-------------+---------------------------------+
| [in]    | pEventParam | Pointer to the event parameters |
+---------+-------------+---------------------------------+

**Returns:**

error code

.. _group___cmp_event_mgr_itf_1ga7700a8b680a0c48ac03feaf34fc86c04:

RTS_RESULT EventPost2 (RTS_HANDLE hEvent, unsigned short usParamId, unsigned short usVersion, void *pParameter)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Sent an event and call synchronously all registered callback handler

**Parameters**

+---------+------------+------------------------------------------------------------------+
| [in]    | hEvent     | Handle to event                                                  |
+---------+------------+------------------------------------------------------------------+
| [in]    | usParamId  | Id of the parameter                                              |
+---------+------------+------------------------------------------------------------------+
| [in]    | usVersion  | Version of the parameter                                         |
+---------+------------+------------------------------------------------------------------+
| [in]    | pParameter | Pointer to the event specific parameter, that is specified by Id |
+---------+------------+------------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_event_mgr_itf_1ga8eaff9ef246ceabc1bbcf1e365bfecdd:

RTS_RESULT EventPostByEvent (EVENTID EventId, CMPID CmpIdProvider, EventParam *pEventParam)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Post an event direct without opening the event

**Parameters**

+---------+---------------+---------------------------------------------------------+
| [in]    | EventId       | Event ID of the event. Contains the class and the event |
+---------+---------------+---------------------------------------------------------+
| [in]    | CmpIdProvider | Component ID of the provider                            |
+---------+---------------+---------------------------------------------------------+
| [in]    | pEventParam   | Pointer to the event parameters                         |
+---------+---------------+---------------------------------------------------------+

**Returns:**

error code

.. last line of group.rst template
.. last line of composition.rst template


