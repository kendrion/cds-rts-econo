.. first line of composition.rst template

.. first line of group.rst template

.. _group___cmp_iec_task_itf:

=============
CmpIecTaskItf
=============

Interface of CmpIecTask. :ref:`More... <group___cmp_iec_task_itf-details>`

Modules
-------

- :ref:`Compiler switch <group___cmp_iec_task_itf___compilerswitch>`

- :ref:`Event parameter <group___cmp_iec_task_itf___eventparameter>`

- :ref:`Events <group___cmp_iec_task_itf___events>`

- :ref:`IEC task types <group___cmp_iec_task_itf___i_e_ctasktypes>`

- :ref:`Iec Task Bits <group___cmp_iec_task_itf___iec_task_bits>`

- :ref:`Iec Task Flags <group___cmp_iec_task_itf___iec_task_flags>`

- :ref:`OperationID <group___cmp_iec_task_itf___operation_i_d>`

- :ref:`Settings <group___cmp_iec_task_itf___settings>`

- :ref:`Stop reason option <group___cmp_iec_task_itf___stopreasonoption>`

- :ref:`Task status bits <group___cmp_iec_task_itf___taskstatusbits>`

- :ref:`Task status definitions <group___cmp_iec_task_itf___taskstatusdefinitions>`

Data Structures
---------------

- struct :ref:`sys_rts_cycle_struct <structsys__rts__cycle__struct>`

- struct :ref:`sys_rts_cycle_2_struct <structsys__rts__cycle__2__struct>`

- struct :ref:`tagTask_Desc <structtag_task___desc>`

- struct :ref:`tagTASK_LIST <structtag_t_a_s_k___l_i_s_t>`

- struct :ref:`sys_setup_tasks_struct <structsys__setup__tasks__struct>`

- struct :ref:`sys_register_slot_pou_struct <structsys__register__slot__pou__struct>`

- struct :ref:`TaskGroup_Info <struct_task_group___info>`

- struct :ref:`tagLDATAREF_TYPE <structtag_l_d_a_t_a_r_e_f___t_y_p_e>`

- struct :ref:`tagSYSIECTASKCONFENTRY <structtag_s_y_s_i_e_c_t_a_s_k_c_o_n_f_e_n_t_r_y>`

- struct :ref:`tagSYSIECTASKINFO <structtag_s_y_s_i_e_c_t_a_s_k_i_n_f_o>`

- struct :ref:`tagiectaskgetconfig_struct <structtagiectaskgetconfig__struct>`

- struct :ref:`tagiectaskgetinfo_struct <structtagiectaskgetinfo__struct>`

- struct :ref:`tagJitter_Distribution <structtag_jitter___distribution>`

- struct :ref:`tagiectaskcreate_struct <structtagiectaskcreate__struct>`

- struct :ref:`tagiectaskcreate2_struct <structtagiectaskcreate2__struct>`

- struct :ref:`tagiectaskdelete2_struct <structtagiectaskdelete2__struct>`

- struct :ref:`tagiectaskdisablescheduling_struct <structtagiectaskdisablescheduling__struct>`

- struct :ref:`tagiectaskdisablewatchdog_struct <structtagiectaskdisablewatchdog__struct>`

- struct :ref:`tagiectaskdisablewatchdog2_struct <structtagiectaskdisablewatchdog2__struct>`

- struct :ref:`tagiectaskenablescheduling_struct <structtagiectaskenablescheduling__struct>`

- struct :ref:`tagiectaskenablewatchdog_struct <structtagiectaskenablewatchdog__struct>`

- struct :ref:`tagiectaskenablewatchdog2_struct <structtagiectaskenablewatchdog2__struct>`

- struct :ref:`tagiectaskgetcurrent_struct <structtagiectaskgetcurrent__struct>`

- struct :ref:`tagiectaskgetdesc_struct <structtagiectaskgetdesc__struct>`

- struct :ref:`tagiectaskgetfirst_struct <structtagiectaskgetfirst__struct>`

- struct :ref:`tagiectaskgetinfo2_struct <structtagiectaskgetinfo2__struct>`

- struct :ref:`tagiectaskgetnext_struct <structtagiectaskgetnext__struct>`

- struct :ref:`tagiectaskgetprofiling_struct <structtagiectaskgetprofiling__struct>`

- struct :ref:`tagiectaskreload_struct <structtagiectaskreload__struct>`

- struct :ref:`tagiectaskresetstatistics_struct <structtagiectaskresetstatistics__struct>`

- struct :ref:`tagTask_Info <structtag_task___info>`

- struct :ref:`ICmpIecTask_C <struct_i_cmp_iec_task___c>`

Macros
------

- #define :ref:`RTS_IECTASK_ENABLE_TASK_TRACE <group___cmp_iec_task_itf_1gaa7357a39213c30478c394ec17b8843e3>`

- #define :ref:`IECTASK_USE_ATOMIC_BITACCESS <group___cmp_iec_task_itf_1ga6d97ec721af30a7bc52406696e076755>`

- #define :ref:`CMPIECTASK_STACK_SIZE <group___cmp_iec_task_itf_1ga56cd627a23d446e4adf43a1e73f9511e>` 0

- #define :ref:`CMPIECTASK_STACK_SIZE_ADDITIONAL <group___cmp_iec_task_itf_1ga2b58fa388ece90533e3d9ced40115eff>` 0

- #define :ref:`CMPIECTASK_SYNCHRONIZATION_USE_SYSSEM <group___cmp_iec_task_itf_1gab52e6822120f99ebd8d6f24980b43a18>`

- #define :ref:`NUM_OF_STATIC_IEC_TASKS <group___cmp_iec_task_itf_1ga657450891a8816e7bf4e1ff8179793f5>` 5

- #define :ref:`NUM_OF_STATIC_IEC_EVENTS <group___cmp_iec_task_itf_1ga6f83a02abbde3ffcd890ba558871d98a>` 1

- #define :ref:`MAX_IEC_TASKS <group___cmp_iec_task_itf_1gabebb2764feddff78ab0b5192802db7ad>` (-1)

- #define :ref:`NUM_OF_STATIC_IEC_SLOTS <group___cmp_iec_task_itf_1gaa8d79036de7592a8041beb5cd800189c>` 10

- #define :ref:`MAX_IEC_SLOTS <group___cmp_iec_task_itf_1ga3a29c1ccb3c5663c7f367377ba958e4e>` (-1)

- #define :ref:`IECTASK_TASK_INFO_VERSION <group___cmp_iec_task_itf_1ga39aedd38d5a72e92eb08ee450e28496d>` 5

- #define :ref:`IECTASK_TASK_INFO_GROUPS_VERSION <group___cmp_iec_task_itf_1ga3479963bc690ce02f57178914eddac2e>` 4

- #define :ref:`IECTASK_TASK_MAX_PRIO <group___cmp_iec_task_itf_1gafd184ac6058887baab5e504c0cf5700a>` 255

- #define :ref:`ITF_CmpIecTask <group___cmp_iec_task_itf_1ga3dd245ae28b4f1f43a41d77d6841f9d0>`

- #define :ref:`EXTITF_CmpIecTask <group___cmp_iec_task_itf_1ga6d53bedf899f50b142533136e59425ce>`

Typedefs
--------

- typedef struct :ref:`tagTask_Info <structtag_task___info>` :ref:`Task_Info <group___cmp_iec_task_itf_1ga56b1767676d541fc548c45a73424dd38>`

- typedef struct :ref:`tagTask_Desc <structtag_task___desc>` :ref:`Task_Desc <group___cmp_iec_task_itf_1ga3e7248e4ba098ac4bb720b4a1ac4f6dd>`

- typedef struct :ref:`tagTASK_LIST <structtag_t_a_s_k___l_i_s_t>` :ref:`Task_List <group___cmp_iec_task_itf_1ga919071da1ff63c240db8f9b5a1b0345a>`

- typedef struct :ref:`tagLDATAREF_TYPE <structtag_l_d_a_t_a_r_e_f___t_y_p_e>` :ref:`LDATAREF_TYPE <group___cmp_iec_task_itf_1ga5ee924368653ff97c92d4244f2c080d9>`

- typedef struct :ref:`tagSYSIECTASKCONFENTRY <structtag_s_y_s_i_e_c_t_a_s_k_c_o_n_f_e_n_t_r_y>` :ref:`SYSIECTASKCONFENTRY <group___cmp_iec_task_itf_1ga5696822261bb7665a1911538702b2308>`

- typedef struct :ref:`tagSYSIECTASKINFO <structtag_s_y_s_i_e_c_t_a_s_k_i_n_f_o>` :ref:`SYSIECTASKINFO <group___cmp_iec_task_itf_1ga621424be15cc3360667148b7b7136f1a>`

- typedef struct :ref:`tagiectaskgetconfig_struct <structtagiectaskgetconfig__struct>` :ref:`iectaskgetconfig_struct <group___cmp_iec_task_itf_1ga1aa2c7fdf1fbb3f4c3703267f9d129b4>`

- typedef struct :ref:`tagiectaskgetinfo_struct <structtagiectaskgetinfo__struct>` :ref:`iectaskgetinfo_struct <group___cmp_iec_task_itf_1ga3d7e18184e0d75d830bb301def53cc5d>`

- typedef struct :ref:`tagJitter_Distribution <structtag_jitter___distribution>` :ref:`Jitter_Distribution <group___cmp_iec_task_itf_1ga1fb3c00e50b75ae282034095f49685a2>`

- typedef struct :ref:`tagiectaskcreate_struct <structtagiectaskcreate__struct>` :ref:`iectaskcreate_struct <group___cmp_iec_task_itf_1ga800360dce949a03d470d1f0182c51315>`

- typedef struct :ref:`tagiectaskcreate2_struct <structtagiectaskcreate2__struct>` :ref:`iectaskcreate2_struct <group___cmp_iec_task_itf_1ga9448b6d257bd021526453cbc98bc8f4b>`

- typedef struct :ref:`tagiectaskdelete2_struct <structtagiectaskdelete2__struct>` :ref:`iectaskdelete2_struct <group___cmp_iec_task_itf_1gaa4945f2581ee1c8c6fafe7e726d4589e>`

- typedef struct :ref:`tagiectaskdisablescheduling_struct <structtagiectaskdisablescheduling__struct>` :ref:`iectaskdisablescheduling_struct <group___cmp_iec_task_itf_1ga87f721f8e37b9721e8b84c917d091b7c>`

- typedef struct :ref:`tagiectaskdisablewatchdog_struct <structtagiectaskdisablewatchdog__struct>` :ref:`iectaskdisablewatchdog_struct <group___cmp_iec_task_itf_1gaccc118596785f2cd823347b20193d683>`

- typedef struct :ref:`tagiectaskdisablewatchdog2_struct <structtagiectaskdisablewatchdog2__struct>` :ref:`iectaskdisablewatchdog2_struct <group___cmp_iec_task_itf_1ga2a0da2f50826d766a3aeed63d0febe64>`

- typedef struct :ref:`tagiectaskenablescheduling_struct <structtagiectaskenablescheduling__struct>` :ref:`iectaskenablescheduling_struct <group___cmp_iec_task_itf_1ga41afaf798c6dfad4cab6f9580a5dfe6f>`

- typedef struct :ref:`tagiectaskenablewatchdog_struct <structtagiectaskenablewatchdog__struct>` :ref:`iectaskenablewatchdog_struct <group___cmp_iec_task_itf_1ga27d75ccce3be490ecbe2f04ffd001260>`

- typedef struct :ref:`tagiectaskenablewatchdog2_struct <structtagiectaskenablewatchdog2__struct>` :ref:`iectaskenablewatchdog2_struct <group___cmp_iec_task_itf_1ga6fd2ec688600b878816a957e876f74dc>`

- typedef struct :ref:`tagiectaskgetcurrent_struct <structtagiectaskgetcurrent__struct>` :ref:`iectaskgetcurrent_struct <group___cmp_iec_task_itf_1gab5ffa43c0bbea15ac2cfc36886b55455>`

- typedef struct :ref:`tagiectaskgetdesc_struct <structtagiectaskgetdesc__struct>` :ref:`iectaskgetdesc_struct <group___cmp_iec_task_itf_1gad788a0725c38d20b15e9aac157704916>`

- typedef struct :ref:`tagiectaskgetfirst_struct <structtagiectaskgetfirst__struct>` :ref:`iectaskgetfirst_struct <group___cmp_iec_task_itf_1gab1a6f5cea7705881e2a5ffc739178702>`

- typedef struct :ref:`tagiectaskgetinfo2_struct <structtagiectaskgetinfo2__struct>` :ref:`iectaskgetinfo2_struct <group___cmp_iec_task_itf_1ga624479edf937d2524e9d848e80f552b1>`

- typedef struct :ref:`tagiectaskgetnext_struct <structtagiectaskgetnext__struct>` :ref:`iectaskgetnext_struct <group___cmp_iec_task_itf_1gaa433c86631b1a98861512786c122bb5f>`

- typedef struct :ref:`tagiectaskgetprofiling_struct <structtagiectaskgetprofiling__struct>` :ref:`iectaskgetprofiling_struct <group___cmp_iec_task_itf_1ga54f0d1d519cfe5ce7ed06e35530c3fc1>`

- typedef struct :ref:`tagiectaskreload_struct <structtagiectaskreload__struct>` :ref:`iectaskreload_struct <group___cmp_iec_task_itf_1ga12c59e5d11a89a3432d506a4d3217239>`

- typedef struct :ref:`tagiectaskresetstatistics_struct <structtagiectaskresetstatistics__struct>` :ref:`iectaskresetstatistics_struct <group___cmp_iec_task_itf_1ga88b246c91780d83085b431c25e456d82>`

- typedef :ref:`ICmpIecTask_C <struct_i_cmp_iec_task___c>` :ref:`ICmpIecTask <group___cmp_iec_task_itf_1ga00ac847c8e8858140443afe00e28c7b9>`

Functions
---------

- void :ref:`iectaskgetconfig <group___cmp_iec_task_itf_1gae16024109dd010c9b054f7c1c4894b82>` (:ref:`iectaskgetconfig_struct <group___cmp_iec_task_itf_1ga1aa2c7fdf1fbb3f4c3703267f9d129b4>` * p)

- void :ref:`iectaskgetinfo <group___cmp_iec_task_itf_1ga325a21545482af2a497dc9a9372db8f0>` (:ref:`iectaskgetinfo_struct <group___cmp_iec_task_itf_1ga3d7e18184e0d75d830bb301def53cc5d>` * p)

- void :ref:`iectaskcreate <group___cmp_iec_task_itf_1ga83d6daa008b9e8b7f38dfc66da322886>` (:ref:`iectaskcreate_struct <group___cmp_iec_task_itf_1ga800360dce949a03d470d1f0182c51315>` * p)

- void :ref:`iectaskcreate2 <group___cmp_iec_task_itf_1ga60569f0e92c669cd44e38f8082222877>` (:ref:`iectaskcreate2_struct <group___cmp_iec_task_itf_1ga9448b6d257bd021526453cbc98bc8f4b>` * p)

- void :ref:`iectaskdelete2 <group___cmp_iec_task_itf_1gaff66619f1daf3f5ecdf218b8e0e1b9f4>` (:ref:`iectaskdelete2_struct <group___cmp_iec_task_itf_1gaa4945f2581ee1c8c6fafe7e726d4589e>` * p)

- void :ref:`iectaskdisablescheduling <group___cmp_iec_task_itf_1gaef1b4d817f5293c43ab5a1c4cadffa62>` (:ref:`iectaskdisablescheduling_struct <group___cmp_iec_task_itf_1ga87f721f8e37b9721e8b84c917d091b7c>` * p)

- void :ref:`iectaskdisablewatchdog <group___cmp_iec_task_itf_1gaa32c99ade69581ff9639f81d0b0f3291>` (:ref:`iectaskdisablewatchdog_struct <group___cmp_iec_task_itf_1gaccc118596785f2cd823347b20193d683>` * p)

- void :ref:`iectaskdisablewatchdog2 <group___cmp_iec_task_itf_1ga0d2ccff747328b41c091dff303242c32>` (:ref:`iectaskdisablewatchdog2_struct <group___cmp_iec_task_itf_1ga2a0da2f50826d766a3aeed63d0febe64>` * p)

- void :ref:`iectaskenablescheduling <group___cmp_iec_task_itf_1ga85900ee657b04cb052401dcba5e38c85>` (:ref:`iectaskenablescheduling_struct <group___cmp_iec_task_itf_1ga41afaf798c6dfad4cab6f9580a5dfe6f>` * p)

- void :ref:`iectaskenablewatchdog <group___cmp_iec_task_itf_1ga825da65b28ca23fe550194579c78dae6>` (:ref:`iectaskenablewatchdog_struct <group___cmp_iec_task_itf_1ga27d75ccce3be490ecbe2f04ffd001260>` * p)

- void :ref:`iectaskenablewatchdog2 <group___cmp_iec_task_itf_1ga4fd2bab4a985ee26d1e873d07d76f2bc>` (:ref:`iectaskenablewatchdog2_struct <group___cmp_iec_task_itf_1ga6fd2ec688600b878816a957e876f74dc>` * p)

- void :ref:`iectaskgetcurrent <group___cmp_iec_task_itf_1ga8af7ea168b5a6a73cf03325bf8f9fec0>` (:ref:`iectaskgetcurrent_struct <group___cmp_iec_task_itf_1gab5ffa43c0bbea15ac2cfc36886b55455>` * p)

- void :ref:`iectaskgetdesc <group___cmp_iec_task_itf_1ga01434141623c3c4a1418c0345c3b52da>` (:ref:`iectaskgetdesc_struct <group___cmp_iec_task_itf_1gad788a0725c38d20b15e9aac157704916>` * p)

- void :ref:`iectaskgetfirst <group___cmp_iec_task_itf_1ga835ef14b601fae1f9518ce2e6fa9c042>` (:ref:`iectaskgetfirst_struct <group___cmp_iec_task_itf_1gab1a6f5cea7705881e2a5ffc739178702>` * p)

- void :ref:`iectaskgetinfo2 <group___cmp_iec_task_itf_1ga5005ade6486c3e511c7e09f57655be97>` (:ref:`iectaskgetinfo2_struct <group___cmp_iec_task_itf_1ga624479edf937d2524e9d848e80f552b1>` * p)

- void :ref:`iectaskgetnext <group___cmp_iec_task_itf_1gaf3adae14465e2c4a816294939fc50ca1>` (:ref:`iectaskgetnext_struct <group___cmp_iec_task_itf_1gaa433c86631b1a98861512786c122bb5f>` * p)

- void :ref:`iectaskgetprofiling <group___cmp_iec_task_itf_1ga371a769a09db13d6feb30c86e0f1f30e>` (:ref:`iectaskgetprofiling_struct <group___cmp_iec_task_itf_1ga54f0d1d519cfe5ce7ed06e35530c3fc1>` * p)

- void :ref:`iectaskreload <group___cmp_iec_task_itf_1gac94f4d1fcf1ab54df3ab4a2642ef991b>` (:ref:`iectaskreload_struct <group___cmp_iec_task_itf_1ga12c59e5d11a89a3432d506a4d3217239>` * p)

- void :ref:`iectaskresetstatistics <group___cmp_iec_task_itf_1ga214ffaa11435d6726cfd55cd75399e29>` (:ref:`iectaskresetstatistics_struct <group___cmp_iec_task_itf_1ga88b246c91780d83085b431c25e456d82>` * p)

- RTS_HANDLE :ref:`IecTaskCreate <group___cmp_iec_task_itf_1ga04cd5e02f05231c7e341a08f67bbeb34>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp, :ref:`Task_Info <group___cmp_iec_task_itf_1ga56b1767676d541fc548c45a73424dd38>` * pTaskInfo, RTS_RESULT * pResult)

- RTS_RESULT :ref:`IecTaskDelete <group___cmp_iec_task_itf_1ga77bb8fc663de256b0fc9e9dc65b7e1c1>` (RTS_HANDLE hIecTask)

- RTS_RESULT :ref:`IecTaskDelete2 <group___cmp_iec_task_itf_1gae4b4669437eb61427806aaae5da36cdc>` (RTS_HANDLE hIecTask, RTS_UI32 ulTimeoutMs)

- RTS_RESULT :ref:`IecFreeTasks <group___cmp_iec_task_itf_1ga9f3298eae595f2c87108367f95be3531>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp)

- RTS_RESULT :ref:`IecFreeTasks2 <group___cmp_iec_task_itf_1gaf13dde19807fba430042b4b07eb93e29>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp, RTS_UI32 ulTimeoutMs)

- RTS_RESULT :ref:`IecTaskCycle <group___cmp_iec_task_itf_1gaf72e8cabbe36a206301026c133fe088c>` (:ref:`Task_Desc <group___cmp_iec_task_itf_1ga3e7248e4ba098ac4bb720b4a1ac4f6dd>` * pTask)

- RTS_RESULT :ref:`IecTaskUpdateJitterTime <group___cmp_iec_task_itf_1gad90295c123bb12013728b7eec4d87157>` (:ref:`Task_Desc <group___cmp_iec_task_itf_1ga3e7248e4ba098ac4bb720b4a1ac4f6dd>` * pTask, :ref:`RTS_SYSTIME <group___sys_time_itf_1ga10c9d9a4c57129d83432fb02923858bf>` * ptNow)

- RTS_RESULT :ref:`IecTaskUpdateCycleTime <group___cmp_iec_task_itf_1ga7e6a0b987b3343498580d1cd0ed38d73>` (:ref:`Task_Desc <group___cmp_iec_task_itf_1ga3e7248e4ba098ac4bb720b4a1ac4f6dd>` * pTask, :ref:`RTS_SYSTIME <group___sys_time_itf_1ga10c9d9a4c57129d83432fb02923858bf>` * ptActUs)

- RTS_RESULT :ref:`IecTasksResetAllowed <group___cmp_iec_task_itf_1gad7d113d788b4300dadd834d94a159640>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp)

- RTS_RESULT :ref:`IecTasksPrepareReset <group___cmp_iec_task_itf_1gab1895495f50b357bcb2d722d4bfb4c6b>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp, int bResetOrigin)

- RTS_RESULT :ref:`IecTasksResetDone <group___cmp_iec_task_itf_1ga476f2757fcf65cc3cc9a308dda7b4c33>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp, int bResetOrigin)

- RTS_UI32 :ref:`IecTaskGetWaitForStopTimeout <group___cmp_iec_task_itf_1gac988b39607f94a84094ceb1793fc2efa>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp, RTS_RESULT * pResult)

- RTS_RESULT :ref:`IecTasksWaitForStop <group___cmp_iec_task_itf_1ga66ed6fe06051ed5833de2462b045662a>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp, RTS_UI32 ulTimeoutMs, unsigned long ulStopReason)

- RTS_RESULT :ref:`IecTaskInitOutputs <group___cmp_iec_task_itf_1ga531c9c02a1a2c7438c1c2eca5d4ee2e9>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp)

- RTS_RESULT :ref:`IecTaskEnterExclusiveSection <group___cmp_iec_task_itf_1ga9e1b95759b92b327759cef5d52ca6615>` (void)

- RTS_RESULT :ref:`IecTaskLeaveExclusiveSection <group___cmp_iec_task_itf_1ga1c6f2cf08c1fd4a4d7a95c9bfa2927e2>` (void)

- RTS_RESULT :ref:`IecTaskEnterExclusiveSection2 <group___cmp_iec_task_itf_1gabfe38b66d27f2469477968391326f510>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp)

- RTS_RESULT :ref:`IecTaskTryEnterExclusiveSection2 <group___cmp_iec_task_itf_1gadfaead5f45d92e72a8023a6f1cfc58ce>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp, RTS_UI32 timeoutMs, RTS_BOOL bForceEnter)

- RTS_RESULT :ref:`IecTaskLeaveExclusiveSection2 <group___cmp_iec_task_itf_1ga4099b8e2c977de54d113bca32ceaff83>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp)

- void :ref:`__sys__setup__tasks <group___cmp_iec_task_itf_1gaa2f2a827dc6a9a49885b4ebbed9ecb1b>` (:ref:`sys_setup_tasks_struct <structsys__setup__tasks__struct>` * p)

- void :ref:`__sys__register__slot__pou <group___cmp_iec_task_itf_1ga559d1624d789452e3bbe6f2591d58007>` (:ref:`sys_register_slot_pou_struct <structsys__register__slot__pou__struct>` * p)

- void :ref:`__sys__unregister__slot__pou <group___cmp_iec_task_itf_1ga5aa1ba2d40606b17289539f033b44dc5>` (:ref:`sys_register_slot_pou_struct <structsys__register__slot__pou__struct>` * p)

- RTS_RESULT :ref:`IecTaskRegisterSlotCallbacks <group___cmp_iec_task_itf_1gad21633ed91e49a75988cb2fbed0da5de>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp, RTS_I32 nSlotNr, :ref:`PF_SLOT_CALLBACK <group___cmp_iec_task_itf___taskstatusbits_1gaa25511b3021bffa45f1124b84ac100e1>`  pfSlotCallback, int bIecCallback)

- RTS_RESULT :ref:`IecTaskUnregisterSlotCallbacks <group___cmp_iec_task_itf_1ga27bb1301e1aa59bab7e9e0e597eca64c>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp, RTS_I32 nSlotNr, :ref:`PF_SLOT_CALLBACK <group___cmp_iec_task_itf___taskstatusbits_1gaa25511b3021bffa45f1124b84ac100e1>`  pfSlotCallback, int bIecCallback)

- RTS_RESULT :ref:`IecTaskRegisterSlotCallback <group___cmp_iec_task_itf_1ga9ab06471be2c12fbc4e5dc8fc327ac16>` (:ref:`Task_Desc <group___cmp_iec_task_itf_1ga3e7248e4ba098ac4bb720b4a1ac4f6dd>` * pTask, RTS_I32 nSlotNr, :ref:`PF_SLOT_CALLBACK <group___cmp_iec_task_itf___taskstatusbits_1gaa25511b3021bffa45f1124b84ac100e1>`  pfSlotCallback, int bIecCallback)

- RTS_RESULT :ref:`IecTaskUnregisterSlotCallback <group___cmp_iec_task_itf_1gaab5e715c1302adae24edb7677a493bf7>` (:ref:`Task_Desc <group___cmp_iec_task_itf_1ga3e7248e4ba098ac4bb720b4a1ac4f6dd>` * pTask, RTS_I32 nSlotNr, :ref:`PF_SLOT_CALLBACK <group___cmp_iec_task_itf___taskstatusbits_1gaa25511b3021bffa45f1124b84ac100e1>`  pfSlotCallback, int bIecCallback)

- void :ref:`__sys__rts__cycle <group___cmp_iec_task_itf_1ga0171cfff9c8dee7028f13cc499cb1245>` (:ref:`sys_rts_cycle_struct <structsys__rts__cycle__struct>` * p)

- void :ref:`__sys__rts__cycle__2 <group___cmp_iec_task_itf_1ga4c3a244890a6ac8f1143a4548fe2e056>` (:ref:`sys_rts_cycle_2_struct <structsys__rts__cycle__2__struct>` * p)

- :ref:`Task_Desc <group___cmp_iec_task_itf_1ga3e7248e4ba098ac4bb720b4a1ac4f6dd>` * :ref:`IecTaskGetDesc <group___cmp_iec_task_itf_1ga551d7fb6da86b95eda6fab0e296e7cf4>` (RTS_HANDLE hIecTask)

- RTS_HANDLE :ref:`IecTaskGetHandle <group___cmp_iec_task_itf_1ga4bee7ee09290853d9991614c824d1c20>` (char * pszAppName, char * pszTaskName, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`IecTaskGetCurrent <group___cmp_iec_task_itf_1gad4b00394f63dbff28486254a365fd80b>` (RTS_RESULT * pResult)

- RTS_RESULT :ref:`IecTaskDebugLoop <group___cmp_iec_task_itf_1ga6fed971250836ddc32bf3130926d9b6d>` (RTS_HANDLE hIecTask)

- RTS_RESULT :ref:`IecTaskDebugEnter <group___cmp_iec_task_itf_1gae9bbb3fce011c5e4bf2578d7fff0152d>` (RTS_HANDLE hIecTask)

- RTS_RESULT :ref:`IecTaskDebugLeave <group___cmp_iec_task_itf_1ga96333383d9bb2b1aca00fed71d719dac>` (RTS_HANDLE hIecTask)

- RTS_RESULT :ref:`IecTaskSetContext <group___cmp_iec_task_itf_1ga25da32ae307181f47fc3ec400df934d3>` (RTS_HANDLE hIecTask, :ref:`RegContext <group___sys_except_itf___exceptioncontext_1gab00884ef66266dc256618d479aade118>` * pContext)

- RTS_RESULT :ref:`IecTaskGetContext <group___cmp_iec_task_itf_1gadd7b45cfd8dd080a5c5fb4913b41d191>` (RTS_HANDLE hIecTask, :ref:`RegContext <group___sys_except_itf___exceptioncontext_1gab00884ef66266dc256618d479aade118>` * pContext)

- RTS_RESULT :ref:`IecTaskExceptionHandler <group___cmp_iec_task_itf_1gabca80e136626c3eac6950d9ddf0f8e04>` (RTS_HANDLE hIecTask, RTS_UI32 ulException, :ref:`RegContext <group___sys_except_itf___exceptioncontext_1gab00884ef66266dc256618d479aade118>`  Context)

- :ref:`Task_Desc <group___cmp_iec_task_itf_1ga3e7248e4ba098ac4bb720b4a1ac4f6dd>` * :ref:`IecTaskGetByIndex <group___cmp_iec_task_itf_1ga9dc414e98485d686021f8e16ce7b0c0c>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp, int iIndex, RTS_RESULT * pResult)

- :ref:`Task_Desc <group___cmp_iec_task_itf_1ga3e7248e4ba098ac4bb720b4a1ac4f6dd>` * :ref:`IecTaskGetById <group___cmp_iec_task_itf_1gaa2c71e5dd0a7a8dc2c33a525635de1e2>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pappl, int iId, RTS_RESULT * pResult)

- int :ref:`IecTaskGetNumOfTasks <group___cmp_iec_task_itf_1gaa28bf143273d1595dc6fc5a686fd0ac3>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pAppl, RTS_RESULT * pResult)

- RTS_RESULT :ref:`IecTaskEnableSchedulingAll <group___cmp_iec_task_itf_1ga41d5c6948839e3cd83af47d44741e75f>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp)

- RTS_RESULT :ref:`IecTaskDisableSchedulingAll <group___cmp_iec_task_itf_1gaa5ef374a92d70d45614ea9f56f7202a9>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp, RTS_HANDLE hIecTaskToExclude)

- RTS_RESULT :ref:`IecTaskEnableScheduling <group___cmp_iec_task_itf_1gad2096684fe4466b9743dd202d525d351>` (RTS_HANDLE hIecTask)

- RTS_RESULT :ref:`IecTaskDisableScheduling <group___cmp_iec_task_itf_1ga056e8eb5798dc87877e73bfb89ab806a>` (RTS_HANDLE hIecTask)

- RTS_RESULT :ref:`IecTaskEnableWatchdog <group___cmp_iec_task_itf_1ga3feeb8b00bab424a66ac27e217f4b372>` (RTS_HANDLE hIecTask)

- RTS_RESULT :ref:`IecTaskDisableWatchdog <group___cmp_iec_task_itf_1gad3141ba61650a5048a6a41ac746cefd4>` (RTS_HANDLE hIecTask)

- RTS_RESULT :ref:`IecTaskEnableWatchdog2 <group___cmp_iec_task_itf_1ga10ed63475267435205d24bf14d4173af>` (RTS_HANDLE hIecTask)

- RTS_RESULT :ref:`IecTaskDisableWatchdog2 <group___cmp_iec_task_itf_1gaac809dc849046ae41217e04059b1c396>` (RTS_HANDLE hIecTask)

- RTS_RESULT :ref:`IecTaskCheckWatchdog <group___cmp_iec_task_itf_1ga4f13e818f96a489c50df58e17696156e>` (RTS_HANDLE hIecTask, :ref:`RTS_SYSTIME <group___sys_time_itf_1ga10c9d9a4c57129d83432fb02923858bf>` * ptActUs)

- RTS_HANDLE :ref:`IecTaskGetFirst <group___cmp_iec_task_itf_1ga2504b4db0d027a0d141cc481c5cd8807>` (char * pszAppName, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`IecTaskGetNext <group___cmp_iec_task_itf_1gab1f75eadafc2edd33f4a4ccc57a7b798>` (char * pszAppName, RTS_HANDLE hPrevIecTask, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`IecTaskReload <group___cmp_iec_task_itf_1gaf300ff9b039e6f240ff1cfc39a59de9c>` (RTS_HANDLE hIecTask, RTS_UI32 ulTimeoutMs, RTS_RESULT * pResult)

- int :ref:`IecTaskCalculateId <group___cmp_iec_task_itf_1ga2defc0b0b2f479dea946e115b0f900a4>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp, int iIndex, RTS_RESULT * pResult)

- RTS_RESULT :ref:`IecTaskWaitTasksActive <group___cmp_iec_task_itf_1gae5235d65a6bc4ce1c7eba6e5c80972ff>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp, RTS_UI32 ulTimeoutMs)

- RTS_RESULT :ref:`IecTaskSingleCycle <group___cmp_iec_task_itf_1ga50a4ee0ec24c1dd72d62e3af132c2662>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp)

- RTS_RESULT :ref:`IecTaskResetStatistics <group___cmp_iec_task_itf_1ga622d8e5cc5e7571abbe87d08adc45f62>` (RTS_HANDLE hIecTask)

- RTS_RESULT :ref:`IecTaskDebugHandlerEnter <group___cmp_iec_task_itf_1gaaf7938b3efb461894767443dafebca50>` (RTS_HANDLE hIecTask)

- RTS_RESULT :ref:`IecTaskDebugHandlerLeave <group___cmp_iec_task_itf_1ga16b40497332d4db4155f1d3c7b4eff2f>` (RTS_HANDLE hIecTask)

- RTS_RESULT :ref:`IecTaskCallIecFuncWithParams <group___cmp_iec_task_itf_1ga9a95ae840366f4e31cdae58ca785dd7f>` (RTS_HANDLE hIecTask, :ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp, RTS_VOID_FCTPTR pfIECFunc, void * pParam, int iSize)

.. _group___cmp_iec_task_itf-details:

Detailed Description
--------------------

Interface of CmpIecTask.

The component CmpIecTask provides an interface to create an handle all task of one or more IEC applications.

The following drawing describes the dependencies between the structures of this and other components in this context:
::
    *				 +-----------+ 1   1 +-----------+ 1   n +---------+
    *				 | Task_Desc | ----- | Task_Info | ----- | SlotPOU |
    *				 +-----------+       +-----------+       +---------+
    *				      | n   | 1
    *				      |     '--------------.
    *				      | 1                  | 1
    *				 +-------------+     +-----------+
    *				 | Application |     | SchedTask |
    *				 +-------------+     +-----------+
    *

Depending on the Scheduler, the task might furthermore be mapped to a hardware ressource or another operating system object.

CmpSchedule (Multitasking):
::
    *				 +-----------+ 1   1 +---------------+ 1   1 +----------------+
    *				 | SchedTask | ----- | SYS_TASK_INFO | ----- | OS Task Handle |
    *				 +-----------+       +---------------+       +----------------+
    *

CmpScheduleTimer:
::
    *				 +-----------+ 1   1 +----------------+ 1   1 +-----------------+
    *				 | SchedTask | ----- | SYS_TIMER_INFO | ----- | HW Timer Handle |
    *				 +-----------+       +----------------+       +-----------------+
    *

CmpScheduleEmbedded:
::
    *				 +-----------+
    *				 | SchedTask |
    *				 +-----------+
    *

The Task_Info structure is created and allocated in the IEC data area of the application, while everything else is allocated in the runtime.

Beside the handling of tasks, this component manages also the slots for the tasks, that might be registered by C or IEC code. Those slots are stored within a memory pool, from which they are called at some specific points before and after the IEC task cycle code.

For SIL2 certified systems, those slots are denied, because they potentially cause a call to an unsafe context from the safe context of the IEC task. So we allow those calls only in debug mode.

**Copyright:**

Copyright (c) 2017-2018 CODESYS GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved.

Macro Definition Documentation
------------------------------
.. _group___cmp_iec_task_itf_1gaa7357a39213c30478c394ec17b8843e3:

#define RTS_IECTASK_ENABLE_TASK_TRACE
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga6d97ec721af30a7bc52406696e076755:

#define IECTASK_USE_ATOMIC_BITACCESS
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga56cd627a23d446e4adf43a1e73f9511e:

#define CMPIECTASK_STACK_SIZE 0
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga2b58fa388ece90533e3d9ced40115eff:

#define CMPIECTASK_STACK_SIZE_ADDITIONAL 0
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1gab52e6822120f99ebd8d6f24980b43a18:

#define CMPIECTASK_SYNCHRONIZATION_USE_SYSSEM
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga657450891a8816e7bf4e1ff8179793f5:

#define NUM_OF_STATIC_IEC_TASKS 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga6f83a02abbde3ffcd890ba558871d98a:

#define NUM_OF_STATIC_IEC_EVENTS 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1gabebb2764feddff78ab0b5192802db7ad:

#define MAX_IEC_TASKS (-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1gaa8d79036de7592a8041beb5cd800189c:

#define NUM_OF_STATIC_IEC_SLOTS 10
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga3a29c1ccb3c5663c7f367377ba958e4e:

#define MAX_IEC_SLOTS (-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga39aedd38d5a72e92eb08ee450e28496d:

#define IECTASK_TASK_INFO_VERSION 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga3479963bc690ce02f57178914eddac2e:

#define IECTASK_TASK_INFO_GROUPS_VERSION 4
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1gafd184ac6058887baab5e504c0cf5700a:

#define IECTASK_TASK_MAX_PRIO 255
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga3dd245ae28b4f1f43a41d77d6841f9d0:

#define ITF_CmpIecTask
^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga6d53bedf899f50b142533136e59425ce:

#define EXTITF_CmpIecTask
^^^^^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___cmp_iec_task_itf_1ga56b1767676d541fc548c45a73424dd38:

typedef struct tagTask_Info Task_Info
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga3e7248e4ba098ac4bb720b4a1ac4f6dd:

typedef struct tagTask_Desc  Task_Desc
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

<SIL2>

Local Task Description

.. _group___cmp_iec_task_itf_1ga919071da1ff63c240db8f9b5a1b0345a:

typedef struct tagTASK_LIST  Task_List
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga5ee924368653ff97c92d4244f2c080d9:

typedef struct tagLDATAREF_TYPE  LDATAREF_TYPE
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

LDATAREF_TYPE

.. _group___cmp_iec_task_itf_1ga5696822261bb7665a1911538702b2308:

typedef struct tagSYSIECTASKCONFENTRY  SYSIECTASKCONFENTRY
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

SYSIECTASKCONFENTRY

.. _group___cmp_iec_task_itf_1ga621424be15cc3360667148b7b7136f1a:

typedef struct tagSYSIECTASKINFO  SYSIECTASKINFO
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

SYSIECTASKINFO

.. _group___cmp_iec_task_itf_1ga1aa2c7fdf1fbb3f4c3703267f9d129b4:

typedef struct tagiectaskgetconfig_struct  iectaskgetconfig_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function return the iec task configuration

.. _group___cmp_iec_task_itf_1ga3d7e18184e0d75d830bb301def53cc5d:

typedef struct tagiectaskgetinfo_struct  iectaskgetinfo_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iectaskgetinfo

.. _group___cmp_iec_task_itf_1ga1fb3c00e50b75ae282034095f49685a2:

typedef struct tagJitter_Distribution  Jitter_Distribution
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EXTERN LIB SECTION BEGIN

Jitter distribution

.. _group___cmp_iec_task_itf_1ga800360dce949a03d470d1f0182c51315:

typedef struct tagiectaskcreate_struct  iectaskcreate_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create a new IEC Task

IEC Tasks itself are used by the scheduler of the runtime. They don't essentially need a corresponding OS task or timer. They might be handled by the scheduler in a completely different way.

.. note:: | Task_Info2.dwEventFunctionPointer: | Function pointer to the event check routine in case Task_Info2.KindOfTask = TaskEvent

.. code-block:: codesys

FUNCTION CheckEvent : BOOL VAR_INPUT END_VAR

(This function checks wether the event is triggered) (by returning TRUE: raising edge, status, etc.)

| Task_Info2.dwTaskEntryFunctionPointer: | Function pointer to the task code

.. code-block:: codesys

FUNCTION IecTaskCyclic : BOOL VAR_INPUT parameter : IEC_CYCLE_STRUCT; END_VAR VAR udiState : UDINT; hTask : RTS_IEC_HANDLE; END_VAR

( mandatory cyclic task frame code begin ) udiState := parameter.pApplication^.udiState; hTask := parameter.hTaskHandle; IF udiState = AS_STOP THEN RETURN; END_IF IF parameter.pTaskInfo^.bWatchdog THEN IecTaskEnableWatchdog(hTask); END_IF ( mandatory cyclic task frame code end )

Error code: + ERR_OK: The new task was successfully created. + ERR_FAILED: There was an error in a subsystem (e.g. the scheduler could not allocate his task handle). + ERR_PARAMETER: Invalid application- or task info pointer + ERR_OUT_OF_LIMITS: Maximum number of Tasks reached (target specific) + ERR_NOMEMORY: Unable to allocate the memory, that is necessary for the task description

:return: Handle to newly created task

.. _group___cmp_iec_task_itf_1ga9448b6d257bd021526453cbc98bc8f4b:

typedef struct tagiectaskcreate2_struct  iectaskcreate2_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create a new IEC Task with taskgroup If the taskgroup does not exist or is no IEC taskgroup, the function returns ERR_PARAMETER. See IecTaskCreate for more details. Error code: + ERR_OK: The new task was successfully created. + ERR_FAILED: There was an error in a subsystem (e.g. the scheduler could not allocate his task handle). + ERR_PARAMETER: Invalid application- or task info pointer, unknown IEC taskgroup + ERR_OUT_OF_LIMITS: Maximum number of Tasks reached (target specific) + ERR_NOMEMORY: Unable to allocate the memory, that is necessary for the task description

:return: Handle to newly created task

.. _group___cmp_iec_task_itf_1gaa4945f2581ee1c8c6fafe7e726d4589e:

typedef struct tagiectaskdelete2_struct  iectaskdelete2_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Delete an IEC task with timeout

This function creates an asynchronous job to delete the IEC task with the given handle and timeout value. When the asynchronous job is successfully created the function returns immediately with ERR_PENDING. There is no indication wether the following deletion of the IEC task itself is successful.

.. note:: Due to the asynchronous manner of the deletion a dynamically created IEC task may delete itself.

Error code: + ERR_PENDING: The asynchronous job to delete the IEC task was successfully created. + ERR_FAILED: The asynchronous job to delete the IEC task could not be created. + ERR_PARAMETER: Invalid task handle + ERR_NOT_SUPPORTED: asynchronous jobs are not supported

:return: Error code

.. _group___cmp_iec_task_itf_1ga87f721f8e37b9721e8b84c917d091b7c:

typedef struct tagiectaskdisablescheduling_struct  iectaskdisablescheduling_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Disable scheduling for the specified task :return: Returns the runtime system error code (see CmpErrors.library)

.. _group___cmp_iec_task_itf_1gaccc118596785f2cd823347b20193d683:

typedef struct tagiectaskdisablewatchdog_struct  iectaskdisablewatchdog_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Disable watchdog for the specified task

.. note::

- You have to enable the watchdog of the task with |IecTaskEnableWatchdog| and _not_ with |IecTaskEnableWatchdog2|, because they act on different task flags!

- The watchdog is disabled only for the current cycle! At the next cycle, the watchod is automatically enabled! :return: Returns the runtime system error code (see CmpErrors.library) + ERR_OK: The watchdog for the task was disabled + ERR_PARAMETER: The task handle was invalid

.. _group___cmp_iec_task_itf_1ga2a0da2f50826d766a3aeed63d0febe64:

typedef struct tagiectaskdisablewatchdog2_struct  iectaskdisablewatchdog2_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Disable watchdog for the specified task

.. note::

- You have to enable the watchdog of the task with |IecTaskEnableWatchdog2| and _not_ with |IecTaskEnableWatchdog|, because they act on different task flags!

- The watchdog is disabled until |IecTaskEnableWatchdog2| is called!!! So this is a security issue, if you never enable the watchdog!

- As a consequence, you always have to call |IecTaskDisableWatchdog2| and |IecTaskEnableWatchdog2| symmetrical

- Can be called nested. First call disables the watchdog. :return: Returns the runtime system error code (see CmpErrors.library) + ERR_OK: The watchdog for the task was disabled + ERR_PARAMETER: The task handle was invalid

.. _group___cmp_iec_task_itf_1ga41afaf798c6dfad4cab6f9580a5dfe6f:

typedef struct tagiectaskenablescheduling_struct  iectaskenablescheduling_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Enable scheduling for one specified task :return: Returns the runtime system error code (see CmpErrors.library)

.. _group___cmp_iec_task_itf_1ga27d75ccce3be490ecbe2f04ffd001260:

typedef struct tagiectaskenablewatchdog_struct  iectaskenablewatchdog_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Enable watchdog for the specified task

.. note::

- You have to disable the watchdog of the task before with |IecTaskDisableWatchdog| and _not_ with |IecTaskDisableWatchdog2|, because they act on different task flags!

- The watchdog is enabled only at the next IEC cycle and _not_ immediately after calling this function!

- If you disable with |IecTaskDisableWatchdog| and forgot to enable it, at least at the next cycle, the watchdog is automatically enabled! :return: Returns the runtime system error code (see CmpErrors.library) + ERR_OK: The watchdog for the task was enabled + ERR_PARAMETER: The task handle was invalid

.. _group___cmp_iec_task_itf_1ga6fd2ec688600b878816a957e876f74dc:

typedef struct tagiectaskenablewatchdog2_struct  iectaskenablewatchdog2_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Enable watchdog for the specified task

.. note::

- You have to disable the watchdog of the task before with |IecTaskDisableWatchdog2| and _not_ with |IecTaskDisableWatchdog|, because they act on different task flags!

- The watchdog is enabled only at the next IEC cycle and _not_ immediately after calling this function! But if you never enable the watchdog after calling |IecTaskDisableWatchdog2|, the watchdog is disabled forever!

- As a consequence, you always have to call |IecTaskDisableWatchdog2| and |IecTaskEnableWatchdog2| symmetrical

- Can be called nested. Last call enables the watchdog. :return: Returns the runtime system error code (see CmpErrors.library) + ERR_OK: The watchdog for the task was enabled + ERR_PARAMETER: The task handle was invalid

.. _group___cmp_iec_task_itf_1gab5ffa43c0bbea15ac2cfc36886b55455:

typedef struct tagiectaskgetcurrent_struct  iectaskgetcurrent_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Funktion to get own task handle :return: Returns the current IEC task handle

.. _group___cmp_iec_task_itf_1gad788a0725c38d20b15e9aac157704916:

typedef struct tagiectaskgetdesc_struct  iectaskgetdesc_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iectaskgetdesc

.. _group___cmp_iec_task_itf_1gab1a6f5cea7705881e2a5ffc739178702:

typedef struct tagiectaskgetfirst_struct  iectaskgetfirst_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the first IEC task in the specified application :return: Returns the handle to the first IEC task

.. _group___cmp_iec_task_itf_1ga624479edf937d2524e9d848e80f552b1:

typedef struct tagiectaskgetinfo2_struct  iectaskgetinfo2_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

OBSOLETE FUNCTION

.. _group___cmp_iec_task_itf_1gaa433c86631b1a98861512786c122bb5f:

typedef struct tagiectaskgetnext_struct  iectaskgetnext_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the first IEC task in the specified application :return: Returns the andle to the first IEC task

.. _group___cmp_iec_task_itf_1ga54f0d1d519cfe5ce7ed06e35530c3fc1:

typedef struct tagiectaskgetprofiling_struct  iectaskgetprofiling_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iectaskgetprofiling

.. _group___cmp_iec_task_itf_1ga12c59e5d11a89a3432d506a4d3217239:

typedef struct tagiectaskreload_struct  iectaskreload_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Reload a specified IEC task. Reload means here: Delete the task at the actual position and create it newly. :return: Handle to the new created task

.. _group___cmp_iec_task_itf_1ga88b246c91780d83085b431c25e456d82:

typedef struct tagiectaskresetstatistics_struct  iectaskresetstatistics_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Reset the task statistics of a task (see Task_Info member e.g. dwCycleTime, dwAverageCycleTime, etc.) :return: Returns the runtime system error code (see CmpErrors.library)

.. _group___cmp_iec_task_itf_1ga00ac847c8e8858140443afe00e28c7b9:

typedef ICmpIecTask_C ICmpIecTask
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function Documentation
----------------------

.. _group___cmp_iec_task_itf_1gae16024109dd010c9b054f7c1c4894b82:

void iectaskgetconfig (iectaskgetconfig_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga325a21545482af2a497dc9a9372db8f0:

void iectaskgetinfo (iectaskgetinfo_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga83d6daa008b9e8b7f38dfc66da322886:

void iectaskcreate (iectaskcreate_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga60569f0e92c669cd44e38f8082222877:

void iectaskcreate2 (iectaskcreate2_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1gaff66619f1daf3f5ecdf218b8e0e1b9f4:

void iectaskdelete2 (iectaskdelete2_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1gaef1b4d817f5293c43ab5a1c4cadffa62:

void iectaskdisablescheduling (iectaskdisablescheduling_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1gaa32c99ade69581ff9639f81d0b0f3291:

void iectaskdisablewatchdog (iectaskdisablewatchdog_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga0d2ccff747328b41c091dff303242c32:

void iectaskdisablewatchdog2 (iectaskdisablewatchdog2_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga85900ee657b04cb052401dcba5e38c85:

void iectaskenablescheduling (iectaskenablescheduling_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga825da65b28ca23fe550194579c78dae6:

void iectaskenablewatchdog (iectaskenablewatchdog_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga4fd2bab4a985ee26d1e873d07d76f2bc:

void iectaskenablewatchdog2 (iectaskenablewatchdog2_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga8af7ea168b5a6a73cf03325bf8f9fec0:

void iectaskgetcurrent (iectaskgetcurrent_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga01434141623c3c4a1418c0345c3b52da:

void iectaskgetdesc (iectaskgetdesc_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga835ef14b601fae1f9518ce2e6fa9c042:

void iectaskgetfirst (iectaskgetfirst_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga5005ade6486c3e511c7e09f57655be97:

void iectaskgetinfo2 (iectaskgetinfo2_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1gaf3adae14465e2c4a816294939fc50ca1:

void iectaskgetnext (iectaskgetnext_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga371a769a09db13d6feb30c86e0f1f30e:

void iectaskgetprofiling (iectaskgetprofiling_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1gac94f4d1fcf1ab54df3ab4a2642ef991b:

void iectaskreload (iectaskreload_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga214ffaa11435d6726cfd55cd75399e29:

void iectaskresetstatistics (iectaskresetstatistics_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_task_itf_1ga04cd5e02f05231c7e341a08f67bbeb34:

RTS_HANDLE IecTaskCreate (APPLICATION *pApp, Task_Info *pTaskInfo, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create a new IEC Task

IEC Tasks itself are used by the scheduler of the runtime. They don't essentially need a corresponding OS task or timer. They might be handled by the scheduler in a completely different way.

For example: The embedded scheduler calls the task code directly in the comm-cycle.

The Task registers itself at the scheduler, by calling the function :ref:`SchedAddTask() <group___cmp_iec_task_dep_1gaafa1c5103a1ff0681d29166073ffa4f7>` .

When the define RTS_COMPACT is set, no semaphores are used.

When the define RTS_SIL2 is set, no dynamic memory allocation and no core binding is used.

**Parameters**

+---------+----------------+-----------------------------------------------------------------------------------------------------+
| [in]    | pApp           | Pointer to application that contains the task RANGE=[NULL,VALID_APPLICATION]                        |
+---------+----------------+-----------------------------------------------------------------------------------------------------+
| [in]    | pApp.iId       | ***PSEUDO*** Application ID RANGE=[0..APPL_NUM_OF_STATIC_APPLS-1,APPL_NUM_OF_STATIC_APPLS..INT_MAX] |
+---------+----------------+-----------------------------------------------------------------------------------------------------+
| [in]    | s_hIecTaskPool | ***PSEUDO*** Number of already allocated tasks RANGE=[0,NUM_OF_STATIC_IEC_TASKS]                    |
+---------+----------------+-----------------------------------------------------------------------------------------------------+
| [in]    | pTaskInfo      | Pointer to task information RANGE=[NULL,INVALID_TASKINFO,VALID_TASKINFO]                            |
+---------+----------------+-----------------------------------------------------------------------------------------------------+
| [out]   | pResult        | Pointer to error code                                                                               |
+---------+----------------+-----------------------------------------------------------------------------------------------------+

**Returns:**

Handle to newly created task

**Return values**

+---------------------+--------------------------------------------------------------------------------------------+
| ERR_OK              | The new task was successfully created.                                                     |
+---------------------+--------------------------------------------------------------------------------------------+
| ERR_FAILED          | There was an error in a subsystem (e.g. the scheduler could not allocate his task handle). |
+---------------------+--------------------------------------------------------------------------------------------+
| ERR_PARAMETER       | Invalid application- or task info pointer                                                  |
+---------------------+--------------------------------------------------------------------------------------------+
| ERR_OUT_OF_LIMITS   | Maximum number of Tasks reached (target specific)                                          |
+---------------------+--------------------------------------------------------------------------------------------+
| ERR_NOMEMORY        | Unable to allocate the memory, that is necessary for the task description                  |
+---------------------+--------------------------------------------------------------------------------------------+
| ERR_LICENSE_MISSING | License for core binding is missing                                                        |
+---------------------+--------------------------------------------------------------------------------------------+

.. _group___cmp_iec_task_itf_1ga77bb8fc663de256b0fc9e9dc65b7e1c1:

RTS_RESULT IecTaskDelete (RTS_HANDLE hIecTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Delete an IEC task

**Parameters**

+---------+----------+----------------+
| [in]    | hIecTask | Handle to task |
+---------+----------+----------------+

**Returns:**

Error code

.. _group___cmp_iec_task_itf_1gae4b4669437eb61427806aaae5da36cdc:

RTS_RESULT IecTaskDelete2 (RTS_HANDLE hIecTask, RTS_UI32 ulTimeoutMs)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Delete an IEC task with timeout

**Parameters**

+---------+-------------+-----------------------------------------------------------------------------------------------------+
| [in]    | ulTimeoutMs | Timeout in milliseconds to wait for deleting the task Some timeouts are predefined (see CmpStd.h):  |
|         |             |                                                                                                     |
|         |             | - RTS_TIMEOUT_DEFAULT: Use default wait time                                                        |
|         |             |                                                                                                     |
|         |             | - RTS_TIMEOUT_NO_WAIT: No wait                                                                      |
+---------+-------------+-----------------------------------------------------------------------------------------------------+

**Returns:**

Error code

.. _group___cmp_iec_task_itf_1ga9f3298eae595f2c87108367f95be3531:

RTS_RESULT IecFreeTasks (APPLICATION *pApp)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Frees all IEC tasks

**Parameters**

+---------+------+----------------------------------+
| [in]    | pApp | Pointer to specified application |
+---------+------+----------------------------------+

**Returns:**

Error code

.. _group___cmp_iec_task_itf_1gaf13dde19807fba430042b4b07eb93e29:

RTS_RESULT IecFreeTasks2 (APPLICATION *pApp, RTS_UI32 ulTimeoutMs)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Frees all IEC tasks

**Parameters**

+---------+-------------+----------------------------------------------------------------------------------------------------+
| [in]    | pApp        | Pointer to specified application                                                                   |
+---------+-------------+----------------------------------------------------------------------------------------------------+
| [in]    | ulTimeoutMs | Timeout in milliseconds to release the tasks. RTS_TIMEOUT_DEFAULT can be used as the default value |
+---------+-------------+----------------------------------------------------------------------------------------------------+

**Returns:**

Error code

.. _group___cmp_iec_task_itf_1gaf72e8cabbe36a206301026c133fe088c:

RTS_RESULT IecTaskCycle (Task_Desc *pTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Main cycle of an Iec task

Adopts the "running state" of the task, based on the current state of it's application and starts the IEC task cycle:

- ITF_DONT_SCHEDULE: Return ERR_PENDING

- OS_PROGRAM_LOADED: If not set, ERR_FAILED is returned

- AS_SINGLE_CYCLE: if task has TS_SINGLE_CYCLE flag set, set also TS_STOP

- AS_RUN: reset TS_STOP

- Application status != AS_RUN, AS_SINGLE_CYCLE: set TS_STOP

Additionally this functions measures the time around the IEC task cycle and calls :ref:`IecTaskCheckWatchdog() <group___cmp_schedule_dep___taskplaceholder_1gabce7aa39bad671c390033ea47c9e6321>` to create a watchdog exception if the time exceeded.

Note: This function may throw an exception, when program for the task was not, yet, loaded, or when the task configuration contains no pointer for the cycle code.

**Parameters**

+---------+------------+------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pTask      | Pointer to task description RANGE=[NULL,INVALID_TASK,VALID_TASK,VALID_TASK_NO_ENTRY]                                                     |
+---------+------------+------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | AppState   | ***PSEUDO*** The state of the task depends on the state of the corresponding application. RANGE=[AS_NONE,AS_RUN,AS_STOP,AS_SINGLE_CYCLE] |
+---------+------------+------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | AppOpState | ***PSEUDO*** The state of the task depends on the state of the corresponding application. RANGE=[OS_NONE,OS_PROGRAM_LOADED]              |
+---------+------------+------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | TaskFlags  | ***PSEUDO*** Defines the task flags before the call. RANGE=[0,ITF_DONT_SCHEDULE]                                                         |
+---------+------------+------------------------------------------------------------------------------------------------------------------------------------------+
| [inout] | TaskStatus | ***PSEUDO*** Defines the task flags before the call. RANGE=[0,TS_SINGLE_CYCLE,TS_STOP,TS_SINGLE_CYCLE|TS_STOP]                           |
+---------+------------+------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | bException | ***PSEUDO*** Indicates if the function call generated an exception                                                                       |
+---------+------------+------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+----------------------------------------------------------------------------------------+
| ERR_OK        | Task was called                                                                        |
+---------------+----------------------------------------------------------------------------------------+
| ERR_PENDING   | Task was not called, but intentionally.                                                |
+---------------+----------------------------------------------------------------------------------------+
| ERR_PARAMETER | Task pointer was NULL or task was not valid.                                           |
+---------------+----------------------------------------------------------------------------------------+
| ERR_FAILED    | Program didn't finish load, or task-entry function pointer is not correctly relocated. |
+---------------+----------------------------------------------------------------------------------------+

.. _group___cmp_iec_task_itf_1gad90295c123bb12013728b7eec4d87157:

RTS_RESULT IecTaskUpdateJitterTime (Task_Desc *pTask, RTS_SYSTIME *ptNow)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Calculate jitter time of task

**Parameters**

+---------+-------+-----------------------------------------+
| [in]    | pTask | Pointer to task description             |
+---------+-------+-----------------------------------------+
| [in]    | ptNow | Pointer to actual microsecond time tick |
+---------+-------+-----------------------------------------+

**Returns:**

Error code

.. _group___cmp_iec_task_itf_1ga7e6a0b987b3343498580d1cd0ed38d73:

RTS_RESULT IecTaskUpdateCycleTime (Task_Desc *pTask, RTS_SYSTIME *ptActUs)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Calculate cycle time of task.

**Parameters**

+---------+------------------------+--------------------------------------------------------------+
| [in]    | pTask                  | Pointer to task description RANGE=[NULL,VALID_TASK]          |
+---------+------------------------+--------------------------------------------------------------+
| [in]    | ptActUs                | Pointer to actual time tick in microseconds RANGE=[ACT_TIME] |
+---------+------------------------+--------------------------------------------------------------+
| [in]    | bIgnoreWatchdogInCycle | ***PSEUDO*** Ignore watchdog in cycle RANGE=[TRUE,FALSE]     |
+---------+------------------------+--------------------------------------------------------------+

**Returns:**

Error code

.. _group___cmp_iec_task_itf_1gad7d113d788b4300dadd834d94a159640:

RTS_RESULT IecTasksResetAllowed (APPLICATION *pApp)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

FUnction to check, if reset is allowed in the actual state on this application

**Parameters**

+---------+------+----------------------------------+
| [in]    | pApp | Pointer to specified application |
+---------+------+----------------------------------+

**Returns:**

ERR_OK: Reset allowed, ERR_NOT_SUPPORTED: Not allowed (e.g. if one task is halted on a breakpoint)

.. _group___cmp_iec_task_itf_1gab1895495f50b357bcb2d722d4bfb4c6b:

RTS_RESULT IecTasksPrepareReset (APPLICATION *pApp, int bResetOrigin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Prepare reset for all IEC tasks specified by application

**Parameters**

+---------+------+----------------------------------+
| [in]    | pApp | Pointer to specified application |
+---------+------+----------------------------------+

**Returns:**

Error code

.. _group___cmp_iec_task_itf_1ga476f2757fcf65cc3cc9a308dda7b4c33:

RTS_RESULT IecTasksResetDone (APPLICATION *pApp, int bResetOrigin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Initialize all IEC tasks after reset specified by application

**Parameters**

+---------+------+----------------------------------+
| [in]    | pApp | Pointer to specified application |
+---------+------+----------------------------------+

**Returns:**

Error code

.. _group___cmp_iec_task_itf_1gac988b39607f94a84094ceb1793fc2efa:

RTS_UI32 IecTaskGetWaitForStopTimeout (APPLICATION *pApp, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the calculated timeout to wait for stop for specified application

**Parameters**

+---------+---------+----------------------------------+
| [in]    | pApp    | Pointer to specified application |
+---------+---------+----------------------------------+
| [out]   | pResult | Result of operation              |
+---------+---------+----------------------------------+

**Return values**

+---------------+------------------------------------------+
| ERR_OK        | Timeout has been calculated successfully |
+---------------+------------------------------------------+
| ERR_PARAMETER | Application is not valid                 |
+---------------+------------------------------------------+

**Returns:**

calculated timeout

.. _group___cmp_iec_task_itf_1ga66ed6fe06051ed5833de2462b045662a:

RTS_RESULT IecTasksWaitForStop (APPLICATION *pApp, RTS_UI32 ulTimeoutMs, unsigned long ulStopReason)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Wait, if all Iec-Tasks has recognized the stop status of the application

**Parameters**

+---------+--------------+--------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pApp         | Pointer to specified application                                                                                                     |
+---------+--------------+--------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ulTimeoutMs  | Timeout in milliseconds to wait for stop. Some timeouts are predefined (see CmpStd.h):                                               |
|         |              |                                                                                                                                      |
|         |              | - RTS_TIMEOUT_INFINITE: Endless wait                                                                                                 |
|         |              |                                                                                                                                      |
|         |              | - RTS_TIMEOUT_DEFAULT: Use default wait time                                                                                         |
|         |              |                                                                                                                                      |
|         |              | - RTS_TIMEOUT_NO_WAIT: No wait                                                                                                       |
+---------+--------------+--------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ulStopReason | See corresponding category "Stop reason" in :ref:`CmpAppItf.h <_cmp_app_itf_8h>` and additionally "Stop reason option" in this file. |
+---------+--------------+--------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

.. _group___cmp_iec_task_itf_1ga531c9c02a1a2c7438c1c2eca5d4ee2e9:

RTS_RESULT IecTaskInitOutputs (APPLICATION *pApp)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Init all outputs and write to the periphery. NOTE: Application must be in stop before calling this function!

**Parameters**

+---------+------+----------------------------------+
| [in]    | pApp | Pointer to specified application |
+---------+------+----------------------------------+

**Returns:**

Error code

.. _group___cmp_iec_task_itf_1ga9e1b95759b92b327759cef5d52ca6615:

RTS_RESULT IecTaskEnterExclusiveSection (void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

After this call no IEC task will be rescheduled, that is if it is not already running. May be used for executing onlinechange code. Each call must be matched with a call to TaskLeaveExclusiveSection.

**Returns:**

Error code

.. _group___cmp_iec_task_itf_1ga1c6f2cf08c1fd4a4d7a95c9bfa2927e2:

RTS_RESULT IecTaskLeaveExclusiveSection (void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Leave an exclusiv section, that has been started by TaskEnterExclusiveSection
**Returns:**

Error code

.. _group___cmp_iec_task_itf_1gabfe38b66d27f2469477968391326f510:

RTS_RESULT IecTaskEnterExclusiveSection2 (APPLICATION *pApp)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Enter an exclusive section. After this call, no IEC task will be rescheduled of the specified application, if it is not already running. Each call must be matched with a call to TaskLeaveExclusiveSection.

**Returns:**

Error code

.. _group___cmp_iec_task_itf_1gadfaead5f45d92e72a8023a6f1cfc58ce:

RTS_RESULT IecTaskTryEnterExclusiveSection2 (APPLICATION *pApp, RTS_UI32 timeoutMs, RTS_BOOL bForceEnter)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Try to enter an exclusive section. If the exclusive section can not be entered within the specified timeout, it depends on the bForceEnter flag what happens:

- FALSE: ERR_FAILED is returned.

- TRUE: Other tasks belonging to that application are successively suspended and their lock is released, while the try to enter the exclusive section is repeated. Each call must be matched with a call to TaskLeaveExclusiveSection.

**Return values**

+------------+-----------------------------------------------------+
| ERR_OK     | The exclusive section could be entered successfully |
+------------+-----------------------------------------------------+
| ERR_FAILED | The exclusive section could not be entered.         |
+------------+-----------------------------------------------------+

**Returns:**

Error code

.. _group___cmp_iec_task_itf_1ga4099b8e2c977de54d113bca32ceaff83:

RTS_RESULT IecTaskLeaveExclusiveSection2 (APPLICATION *pApp)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Leave an exclusive section of the specified application, that has been entered by TaskEnterExclusiveSection or IecTaskTryEnterExclusiveSection2
**Returns:**

Error code

.. _group___cmp_iec_task_itf_1gaa2f2a827dc6a9a49885b4ebbed9ecb1b:

void __sys__setup__tasks (sys_setup_tasks_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

External function is called by internal plc code to setup a plc task. If a task can not be created, an exception is thrown.

**Parameters**

+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | p                    | Pointer to task configuration entry. Is an implicit generated plc data structure. RANGE=[VALID_SETUP_TASKS_PARAM] |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | p.pszApplicationName | ***PSEUDO*** Application name RANGE=[NULL,VALID_APPNAME]                                                          |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | p.wNumOfTasks        | ***PSEUDO*** Nmber of configured tasks RANGE=[0..NUM_OF_STATIC_IEC_TASKS-1,NUM_OF_STATIC_IEC_TASKS..INT_MAX]      |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | p.pptaskinfo         | ***PSEUDO*** Only valid info structures are allowed. RANGE=[VALID_TASKINFO_LIST]                                  |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | OperationMode        | ***PSEUDO*** Operation mode RANGE=[RTS_SIL2_OPMODE_SAFE,RTS_SIL2_OPMODE_DEBUG]                                    |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [out]   | bException           | ***PSEUDO*** Indicates if the function call generated an exception                                                |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [out]   | bTaskCreated         | ***PSEUDO*** Indicates if the task could be created                                                               |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+

**Returns:**

no result

.. _group___cmp_iec_task_itf_1ga559d1624d789452e3bbe6f2591d58007:

void __sys__register__slot__pou (sys_register_slot_pou_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Register an IEC function function to a specific slot.

Slots are called in numbered order at specific positions in the task cycle

On SIL2 Runtimes, this call is only allowed in safety mode.

**Parameters**

+---------+---------------------+-----------------------------------------------------------------------+
| [in]    | p                   | IEC function call parameters. RANGE=[VALID_REGISTER_SLOT_POU_PARAM]   |
+---------+---------------------+-----------------------------------------------------------------------+
| [in]    | p.szApplicationName | ***PSEUDO*** Application name RANGE=[NULL,VALID_APPNAME]              |
+---------+---------------------+-----------------------------------------------------------------------+
| [in]    | p.szTaskName        | ***PSEUDO*** Task name RANGE=[NULL,VALID_TASKNAME]                    |
+---------+---------------------+-----------------------------------------------------------------------+
| [in]    | p.pFunctionPointer  | ***PSEUDO*** Pointer to slot function RANGE=[NULL,VALID_SLOTFUNCTION] |
+---------+---------------------+-----------------------------------------------------------------------+
| [in]    | p.nSlotNr           | ***PSEUDO*** Slot number RANGE=[RTS_RANGE_OF_INT]                     |
+---------+---------------------+-----------------------------------------------------------------------+
| [out]   | p.nReturnValue      | ***PSEUDO*** Error Code                                               |
+---------+---------------------+-----------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+-------------------------------------------------------------+
| ERR_OK        | Registration was successfull                                |
+---------------+-------------------------------------------------------------+
| ERR_FAILED    | Call was not allowed in this context or registration failed |
+---------------+-------------------------------------------------------------+
| ERR_PARAMETER | Application- or function pointer was NULL                   |
+---------------+-------------------------------------------------------------+

.. _group___cmp_iec_task_itf_1ga5aa1ba2d40606b17289539f033b44dc5:

void __sys__unregister__slot__pou (sys_register_slot_pou_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Unregister an IEC function function from a specific slot.

On SIL2 Runtimes, this call is only allowed in safety mode.

**Parameters**

+---------+---------------------+-----------------------------------------------------------------------+
| [in]    | p                   | IEC function call parameters. RANGE=[VALID_UNREGISTER_SLOT_POU_PARAM] |
+---------+---------------------+-----------------------------------------------------------------------+
| [in]    | p.szApplicationName | ***PSEUDO*** Application name RANGE=[NULL,VALID_APPNAME]              |
+---------+---------------------+-----------------------------------------------------------------------+
| [in]    | p.szTaskName        | ***PSEUDO*** Task name RANGE=[NULL,VALID_TASKNAME]                    |
+---------+---------------------+-----------------------------------------------------------------------+
| [in]    | p.pFunctionPointer  | ***PSEUDO*** Pointer to slot function RANGE=[NULL,VALID_SLOTFUNCTION] |
+---------+---------------------+-----------------------------------------------------------------------+
| [in]    | p.nSlotNr           | ***PSEUDO*** Slot number RANGE=[RTS_RANGE_OF_INT]                     |
+---------+---------------------+-----------------------------------------------------------------------+
| [out]   | p.nReturnValue      | ***PSEUDO*** Error Code                                               |
+---------+---------------------+-----------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+---------------------------------------------------------------+
| ERR_OK        | Deregistration was successfull                                |
+---------------+---------------------------------------------------------------+
| ERR_FAILED    | Call was not allowed in this context or deregistration failed |
+---------------+---------------------------------------------------------------+
| ERR_PARAMETER | Application- or function pointer was NULL                     |
+---------------+---------------------------------------------------------------+

.. _group___cmp_iec_task_itf_1gad21633ed91e49a75988cb2fbed0da5de:

RTS_RESULT IecTaskRegisterSlotCallbacks (APPLICATION *pApp, RTS_I32 nSlotNr, PF_SLOT_CALLBACK pfSlotCallback, int bIecCallback)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Register the given callback to all existing tasks of the application

On SIL2 Runtimes, this call is ignored in safety mode.

**Parameters**

+---------+----------------+-----------------------------------------------------------------------+
| [in]    | pApp           | Pointer to an application RANGE=[NULL,VALID_APPLICATION]              |
+---------+----------------+-----------------------------------------------------------------------+
| [in]    | nSlotNr        | Slotnumber RANGE=[RTS_RANGE_OF_INT]                                   |
+---------+----------------+-----------------------------------------------------------------------+
| [in]    | pfSlotCallback | Pointer to Slot Callback RANGE=[NULL,VALID_SLOTFUNCTION]              |
+---------+----------------+-----------------------------------------------------------------------+
| [in]    | bIecCallback   | Defines if the function pointer is an IEC or a C function RANGE=[0,1] |
+---------+----------------+-----------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+-------------------------------------------------------------+
| ERR_OK        | Registration was successfull                                |
+---------------+-------------------------------------------------------------+
| ERR_FAILED    | Call was not allowed in this context or registration failed |
+---------------+-------------------------------------------------------------+
| ERR_PARAMETER | Application- or function pointer was NULL                   |
+---------------+-------------------------------------------------------------+

.. _group___cmp_iec_task_itf_1ga27bb1301e1aa59bab7e9e0e597eca64c:

RTS_RESULT IecTaskUnregisterSlotCallbacks (APPLICATION *pApp, RTS_I32 nSlotNr, PF_SLOT_CALLBACK pfSlotCallback, int bIecCallback)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Unregister the given callback from all existing tasks of the application

On SIL2 Runtimes, this call is ignored in safety mode.

**Parameters**

+---------+----------------+-----------------------------------------------------------------------+
| [in]    | pApp           | Pointer to an application RANGE=[NULL,VALID_APPLICATION]              |
+---------+----------------+-----------------------------------------------------------------------+
| [in]    | nSlotNr        | Slotnumber RANGE=[RTS_RANGE_OF_INT]                                   |
+---------+----------------+-----------------------------------------------------------------------+
| [in]    | pfSlotCallback | Pointer to Slot Callback RANGE=[NULL,VALID_SLOTFUNCTION]              |
+---------+----------------+-----------------------------------------------------------------------+
| [in]    | bIecCallback   | Defines if the function pointer is an IEC or a C function RANGE=[0,1] |
+---------+----------------+-----------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+---------------------------------------------------------------+
| ERR_OK        | Deregistration was successfull                                |
+---------------+---------------------------------------------------------------+
| ERR_FAILED    | Call was not allowed in this context or deregistration failed |
+---------------+---------------------------------------------------------------+
| ERR_PARAMETER | Application- or function pointer was NULL                     |
+---------------+---------------------------------------------------------------+

.. _group___cmp_iec_task_itf_1ga9ab06471be2c12fbc4e5dc8fc327ac16:

RTS_RESULT IecTaskRegisterSlotCallback (Task_Desc *pTask, RTS_I32 nSlotNr, PF_SLOT_CALLBACK pfSlotCallback, int bIecCallback)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Register the given callback to one specific IEC task.

On SIL2 Runtimes, this call throws an exception in safety mode.

**Parameters**

+---------+----------------+--------------------------------------------------------------------------------+
| [in]    | OperationMode  | ***PSEUDO*** Operation mode RANGE=[RTS_SIL2_OPMODE_SAFE,RTS_SIL2_OPMODE_DEBUG] |
+---------+----------------+--------------------------------------------------------------------------------+
| [in]    | pTask          | Handle IEC Task RANGE=[NULL,VALID_TASK]                                        |
+---------+----------------+--------------------------------------------------------------------------------+
| [in]    | nSlotNr        | Slotnumber RANGE=[RTS_RANGE_OF_INT]                                            |
+---------+----------------+--------------------------------------------------------------------------------+
| [in]    | pfSlotCallback | Pointer to Slot Callback RANGE=[NULL,VALID_SLOTFUNCTION]                       |
+---------+----------------+--------------------------------------------------------------------------------+
| [in]    | bIecCallback   | Defines if the function pointer is an IEC or a C function RANGE=[0,1]          |
+---------+----------------+--------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+-------------------------------------------------------------+
| ERR_OK        | Registration was successfull                                |
+---------------+-------------------------------------------------------------+
| ERR_FAILED    | Call was not allowed in this context or registration failed |
+---------------+-------------------------------------------------------------+
| ERR_PARAMETER | Application- or function pointer was NULL                   |
+---------------+-------------------------------------------------------------+
| ERR_NOMEMORY  | New slot could not be registered                            |
+---------------+-------------------------------------------------------------+

.. _group___cmp_iec_task_itf_1gaab5e715c1302adae24edb7677a493bf7:

RTS_RESULT IecTaskUnregisterSlotCallback (Task_Desc *pTask, RTS_I32 nSlotNr, PF_SLOT_CALLBACK pfSlotCallback, int bIecCallback)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Unregister the given callback from the specific IEC task.

On SIL2 Runtimes, this call allows only IEC tasks in safety mode.

**Parameters**

+---------+----------------+--------------------------------------------------------------------------------+
| [in]    | OperationMode  | ***PSEUDO*** Operation mode RANGE=[RTS_SIL2_OPMODE_SAFE,RTS_SIL2_OPMODE_DEBUG] |
+---------+----------------+--------------------------------------------------------------------------------+
| [in]    | pTask          | Handle IEC Task RANGE=[NULL,VALID_TASK]                                        |
+---------+----------------+--------------------------------------------------------------------------------+
| [in]    | nSlotNr        | Slotnumber RANGE=[RTS_RANGE_OF_INT]                                            |
+---------+----------------+--------------------------------------------------------------------------------+
| [in]    | pfSlotCallback | Pointer to Slot Callback RANGE=[NULL,VALID_SLOTFUNCTION]                       |
+---------+----------------+--------------------------------------------------------------------------------+
| [in]    | bIecCallback   | Defines if the function pointer is an IEC or a C function RANGE=[0,1]          |
+---------+----------------+--------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+---------------------------------------------------------------+
| ERR_OK        | Registration was successfull                                  |
+---------------+---------------------------------------------------------------+
| ERR_FAILED    | Call was not allowed in this context or deregistration failed |
+---------------+---------------------------------------------------------------+
| ERR_PARAMETER | Application- or function pointer was NULL                     |
+---------------+---------------------------------------------------------------+

.. _group___cmp_iec_task_itf_1ga0171cfff9c8dee7028f13cc499cb1245:

void __sys__rts__cycle (sys_rts_cycle_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function is obsolete and may not be used in SIL2 Runtime! (SIL2 Note: An Exception is generated if function is called in SIL2 Runtime!)

If supported for backward compatibility, it executes the callbacks from a specific slot.

**Parameters**

+---------+------------+--------------------------------------------------------------------+
| [in]    | p          | IEC function call parameters. RANGE=[VALID_RTS_CYCLE_PARAM]        |
+---------+------------+--------------------------------------------------------------------+
| [out]   | bException | ***PSEUDO*** Indicates if the function call generated an exception |
+---------+------------+--------------------------------------------------------------------+

**Returns:**

Error code

.. _group___cmp_iec_task_itf_1ga4c3a244890a6ac8f1143a4548fe2e056:

void __sys__rts__cycle__2 (sys_rts_cycle_2_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function executes a specific range of registered slots.

**Parameters**

+---------+-------------+---------------------------------------------------------------------------+
| [in]    | p           | IEC function call parameters. RANGE=[VALID_RTS_CYCLE_2_PARAM]             |
+---------+-------------+---------------------------------------------------------------------------+
| [in]    | p.hTask     | ***PSEUDO*** Task Handle RANGE=[NULL,RTS_INVALID_HANDLE,VALID_TASKHANDLE] |
+---------+-------------+---------------------------------------------------------------------------+
| [in]    | p.slotLower | ***PSEUDO*** Lower slot limit RANGE=[RTS_RANGE_OF_INT]                    |
+---------+-------------+---------------------------------------------------------------------------+
| [in]    | p.slotUpper | ***PSEUDO*** Upper slot limit RANGE=[RTS_RANGE_OF_INT]                    |
+---------+-------------+---------------------------------------------------------------------------+
| [out]   | bException  | ***PSEUDO*** Indicates if the function call generated an exception        |
+---------+-------------+---------------------------------------------------------------------------+

**Returns:**

nothing

.. _group___cmp_iec_task_itf_1ga551d7fb6da86b95eda6fab0e296e7cf4:

Task_Desc* IecTaskGetDesc (RTS_HANDLE hIecTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Return task description for a task, specified by it's task handle.

**Parameters**

+---------+----------+-----------------------------------------------------------------+
| [in]    | hIecTask | Handle to task RANGE=[RTS_INVALID_HANDLE,NULL,VALID_TASKHANDLE] |
+---------+----------+-----------------------------------------------------------------+

**Returns:**

Task Description or NULL if task handle was NULL or invalid

.. _group___cmp_iec_task_itf_1ga4bee7ee09290853d9991614c824d1c20:

RTS_HANDLE IecTaskGetHandle (char *pszAppName, char *pszTaskName, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get task, based on the application- and the task name.

**Parameters**

+---------+-------------+------------------------------------------------------------------------+
| [in]    | pszAppName  | Pointer to application name RANGE=[NULL,VALID_APPNAME,INVALID_APPNAME] |
+---------+-------------+------------------------------------------------------------------------+
| [in]    | pszTaskName | Pointer to task name RANGE=[NULL,VALID_TASKNAME,INVALID_TASKNAME]      |
+---------+-------------+------------------------------------------------------------------------+
| [out]   | pResult     | Result of operation                                                    |
+---------+-------------+------------------------------------------------------------------------+

**Return values**

+---------------+-------------------------------------------+
| ERR_OK        | Task was found                            |
+---------------+-------------------------------------------+
| ERR_PARAMETER | Application- or task name where not valid |
+---------------+-------------------------------------------+
| ERR_FAILED    | Application or task was not found         |
+---------------+-------------------------------------------+

**Returns:**

Task handle

.. _group___cmp_iec_task_itf_1gad4b00394f63dbff28486254a365fd80b:

RTS_HANDLE IecTaskGetCurrent (RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Is called to get the task description of the current running task

**Parameters**

+---------+---------+-----------------------+
| [out]   | pResult | Pointer to error code |
+---------+---------+-----------------------+

**Returns:**

Task handle

.. _group___cmp_iec_task_itf_1ga6fed971250836ddc32bf3130926d9b6d:

RTS_RESULT IecTaskDebugLoop (RTS_HANDLE hIecTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Is called in debug loop, when IEC task is halted on breakpoint

**Parameters**

+---------+----------+--------------------+
| [in]    | hIecTask | Handle to IEC task |
+---------+----------+--------------------+

**Returns:**

ERR_OK

.. _group___cmp_iec_task_itf_1gae9bbb3fce011c5e4bf2578d7fff0152d:

RTS_RESULT IecTaskDebugEnter (RTS_HANDLE hIecTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Is called before entering debug loop, when IEC task is halted on breakpoint

**Parameters**

+---------+----------+--------------------+
| [in]    | hIecTask | Handle to IEC task |
+---------+----------+--------------------+

**Returns:**

ERR_OK

.. _group___cmp_iec_task_itf_1ga96333383d9bb2b1aca00fed71d719dac:

RTS_RESULT IecTaskDebugLeave (RTS_HANDLE hIecTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Is called after leaving debug loop, when IEC task was halted on breakpoint

**Parameters**

+---------+----------+--------------------+
| [in]    | hIecTask | Handle to IEC task |
+---------+----------+--------------------+

**Returns:**

ERR_OK

.. _group___cmp_iec_task_itf_1ga25da32ae307181f47fc3ec400df934d3:

RTS_RESULT IecTaskSetContext (RTS_HANDLE hIecTask, RegContext *pContext)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Set context of the actual task

**Parameters**

+---------+----------+-----------------------------+
| [in]    | hIecTask | Handle to IEC task          |
+---------+----------+-----------------------------+
| [in]    | pContext | Pointer to register context |
+---------+----------+-----------------------------+

**Returns:**

ERR_OK

.. _group___cmp_iec_task_itf_1gadd7b45cfd8dd080a5c5fb4913b41d191:

RTS_RESULT IecTaskGetContext (RTS_HANDLE hIecTask, RegContext *pContext)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get context of the actual task

**Parameters**

+---------+----------+-----------------------------+
| [in]    | hIecTask | Handle to IEC task          |
+---------+----------+-----------------------------+
| [in]    | pContext | Pointer to register context |
+---------+----------+-----------------------------+

**Returns:**

ERR_OK

.. _group___cmp_iec_task_itf_1gabca80e136626c3eac6950d9ddf0f8e04:

RTS_RESULT IecTaskExceptionHandler (RTS_HANDLE hIecTask, RTS_UI32 ulException, RegContext Context)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Exception handler for the specified Iec task

**Parameters**

+---------+-------------+-----------------------------+
| [in]    | hIecTask    | Handle to IEC task          |
+---------+-------------+-----------------------------+
| [in]    | ulException | Exception                   |
+---------+-------------+-----------------------------+
| [in]    | pContext    | Pointer to register context |
+---------+-------------+-----------------------------+

**Returns:**

ERR_OK

.. _group___cmp_iec_task_itf_1ga9dc414e98485d686021f8e16ce7b0c0c:

Task_Desc* IecTaskGetByIndex (APPLICATION *pApp, int iIndex, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get Task Description of a task by it's application ID and it's task index.

Searches in the pool of all created tasks for the task, with the given index in the specified application.

**Parameters**

+---------+-------------+------------------------------------------------------------------------+
| [in]    | pApp        | Application object RANGE=[NULL,VALID_APPLICATION]                      |
+---------+-------------+------------------------------------------------------------------------+
| [in]    | bTaskExists | ***PSEUDO*** Defines whether the task exists or not RANGE=[FALSE,TRUE] |
+---------+-------------+------------------------------------------------------------------------+
| [in]    | iIndex      | Index of task within the application RANGE=[VALID_INDEX,INVALID_INDEX] |
+---------+-------------+------------------------------------------------------------------------+
| [out]   | pResult     | Pointer to error code                                                  |
+---------+-------------+------------------------------------------------------------------------+

**Returns:**

Pointer to task description, NULL if failed

**Return values**

+---------------+-----------------------------------------+
| ERR_OK        | Task was found and description returned |
+---------------+-----------------------------------------+
| ERR_NO_MEMORY | No task pool was found                  |
+---------------+-----------------------------------------+
| ERR_PARAMETER | Application pointer was NULL            |
+---------------+-----------------------------------------+

.. _group___cmp_iec_task_itf_1gaa2c71e5dd0a7a8dc2c33a525635de1e2:

Task_Desc* IecTaskGetById (APPLICATION *pappl, int iId, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns task handle of the task specified by index in an application

**Parameters**

+---------+---------+---------------------------------------------------+
| [in]    | pApp    | APPLICATION object                                |
+---------+---------+---------------------------------------------------+
| [in]    | iIndex  | Index of task in the task list of the application |
+---------+---------+---------------------------------------------------+
| [out]   | pResult | Pointer to error code                             |
+---------+---------+---------------------------------------------------+

**Returns:**

Handle to the task or RTS_INVALID_HANDLE if failed
Returns task handle of the task specified by its unique Id

**Parameters**

+---------+---------+-----------------------+
| [in]    | pApp    | APPLICATION object    |
+---------+---------+-----------------------+
| [in]    | iId     | Unique Id of the task |
+---------+---------+-----------------------+
| [out]   | pResult | Pointer to error code |
+---------+---------+-----------------------+

**Returns:**

Handle to the task or RTS_INVALID_HANDLE if failed

.. _group___cmp_iec_task_itf_1gaa28bf143273d1595dc6fc5a686fd0ac3:

int IecTaskGetNumOfTasks (APPLICATION *pAppl, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns the number of tasks of the specified applciation

**Parameters**

+---------+---------+-----------------------+
| [in]    | pAppl   | APPLICATION object    |
+---------+---------+-----------------------+
| [out]   | pResult | Pointer to error code |
+---------+---------+-----------------------+

**Returns:**

Error code

.. _group___cmp_iec_task_itf_1ga41d5c6948839e3cd83af47d44741e75f:

RTS_RESULT IecTaskEnableSchedulingAll (APPLICATION *pApp)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Enable scheduling for all tasks of the specified application

**Parameters**

+---------+------+---------------------------------------------------+
| [in]    | pApp | APPLICATION object RANGE=[NULL,VALID_APPLICATION] |
+---------+------+---------------------------------------------------+

**Returns:**

Error code

**Return values**

+------------+----------------------------------------------------------------------+
| ERR_OK     | All tasks where enabled                                              |
+------------+----------------------------------------------------------------------+
| ERR_FAILED | The scheduler returned an error when trying to start the application |
+------------+----------------------------------------------------------------------+

.. _group___cmp_iec_task_itf_1gaa5ef374a92d70d45614ea9f56f7202a9:

RTS_RESULT IecTaskDisableSchedulingAll (APPLICATION *pApp, RTS_HANDLE hIecTaskToExclude)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Disable scheduling for all tasks of the specified application except the specified task. Typically this interface is used to disable all tasks except the debug task.

**Parameters**

+---------+-------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pApp              | APPLICATION object                                                                                                                           |
+---------+-------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hIecTaskToExclude | Handle of task to exclude from scheduling. RTS_INVALID_HANDLE means, that all tasks are disabled RANGE=[RTS_INVALID_HANDLE,VALID_TASKHANDLE] |
+---------+-------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | s_hIecTaskPool    | ***PSEUDO*** Number of already allocated tasks RANGE=[0,NUM_OF_STATIC_IEC_TASKS]                                                             |
+---------+-------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | DisabledTasks     | ***PSEUDO*** Defines, which tasks are disabled after this call RANGE=[WHICH_TAKS_ALL,WHICH_TASKS_ONE,WHICH_TASKS_NONE]                       |
+---------+-------------------+----------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

.. _group___cmp_iec_task_itf_1gad2096684fe4466b9743dd202d525d351:

RTS_RESULT IecTaskEnableScheduling (RTS_HANDLE hIecTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Enable scheduling for one specified task.

**Parameters**

+---------+----------+---------------------------------------------------------------------------------+
| [in]    | hIecTask | Handle of task to enable scheduling RANGE=[RTS_INVALID_HANDLE,VALID_TASKHANDLE] |
+---------+----------+---------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+-----------------------------+
| ERR_OK        | The task was enabled        |
+---------------+-----------------------------+
| ERR_PARAMETER | The task handle was invalid |
+---------------+-----------------------------+

.. _group___cmp_iec_task_itf_1ga056e8eb5798dc87877e73bfb89ab806a:

RTS_RESULT IecTaskDisableScheduling (RTS_HANDLE hIecTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Disable scheduling for the specified task

**Parameters**

+---------+----------+--------------------------------------+
| [in]    | hIecTask | Handle of task to disable scheduling |
+---------+----------+--------------------------------------+

**Returns:**

Error code

.. _group___cmp_iec_task_itf_1ga3feeb8b00bab424a66ac27e217f4b372:

RTS_RESULT IecTaskEnableWatchdog (RTS_HANDLE hIecTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Enable watchdog for the specified task

NOTES:

- You have to disable the watchdog of the task before with :ref:`IecTaskDisableWatchdog() <group___cmp_iec_task_itf_1gad3141ba61650a5048a6a41ac746cefd4>` and _not_ with :ref:`IecTaskDisableWatchdog2() <group___cmp_iec_task_itf_1gaac809dc849046ae41217e04059b1c396>` , because they act on different task flags!

- The watchdog is enabled immediately after calling this function!

- If you disable with :ref:`IecTaskDisableWatchdog() <group___cmp_iec_task_itf_1gad3141ba61650a5048a6a41ac746cefd4>` and forgot to enable it, at least at the next cycle, the watchdog is automatically enabled!

**Parameters**

+---------+----------+----------------------------------------------------------------+
| [in]    | hIecTask | Handle of the task RANGE=[RTS_INVALID_HANDLE,VALID_TASKHANDLE] |
+---------+----------+----------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+---------------------------------------+
| ERR_OK        | The watchdog for the task was enabled |
+---------------+---------------------------------------+
| ERR_PARAMETER | The task handle was invalid           |
+---------------+---------------------------------------+

.. _group___cmp_iec_task_itf_1gad3141ba61650a5048a6a41ac746cefd4:

RTS_RESULT IecTaskDisableWatchdog (RTS_HANDLE hIecTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Disable watchdog for the specified task

NOTE:

- You have to enable the watchdog of the task with :ref:`IecTaskEnableWatchdog() <group___cmp_iec_task_itf_1ga3feeb8b00bab424a66ac27e217f4b372>` and _not_ with :ref:`IecTaskEnableWatchdog2() <group___cmp_iec_task_itf_1ga10ed63475267435205d24bf14d4173af>` , because they act on different task flags!

- The watchdog is disabled only for the current cycle! At the next cycle, the watchod is automatically enabled!

**Parameters**

+---------+----------+----------------------------------------------------------------+
| [in]    | hIecTask | Handle of the task RANGE=[RTS_INVALID_HANDLE,VALID_TASKHANDLE] |
+---------+----------+----------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+----------------------------------------+
| ERR_OK        | The watchdog for the task was disabled |
+---------------+----------------------------------------+
| ERR_PARAMETER | The task handle was invalid            |
+---------------+----------------------------------------+

.. _group___cmp_iec_task_itf_1ga10ed63475267435205d24bf14d4173af:

RTS_RESULT IecTaskEnableWatchdog2 (RTS_HANDLE hIecTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Enable watchdog for the specified task

NOTES:

- You have to disable the watchdog of the task before with :ref:`IecTaskDisableWatchdog2() <group___cmp_iec_task_itf_1gaac809dc849046ae41217e04059b1c396>` and _not_ with :ref:`IecTaskDisableWatchdog() <group___cmp_iec_task_itf_1gad3141ba61650a5048a6a41ac746cefd4>` , because they act on different task flags!

- The watchdog is enabled only at the next IEC cycle and _not_ immediately after calling this function! But if you never enable the watchdog after calling :ref:`IecTaskDisableWatchdog2() <group___cmp_iec_task_itf_1gaac809dc849046ae41217e04059b1c396>` , the watchdog is disabled forever!

- As a consequence, you always have to call IecTaskDisableWatchdog2 and IecTaskEnableWatchdog2 symmetrical

- Can be called nested. Last call enables the watchdog.

**Parameters**

+---------+----------+----------------------------------------------------------------+
| [in]    | hIecTask | Handle of the task RANGE=[RTS_INVALID_HANDLE,VALID_TASKHANDLE] |
+---------+----------+----------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+---------------------------------------+
| ERR_OK        | The watchdog for the task was enabled |
+---------------+---------------------------------------+
| ERR_PARAMETER | The task handle was invalid           |
+---------------+---------------------------------------+

.. _group___cmp_iec_task_itf_1gaac809dc849046ae41217e04059b1c396:

RTS_RESULT IecTaskDisableWatchdog2 (RTS_HANDLE hIecTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Disable watchdog for the specified task. Can be used to disable the watchdog over several cycles (instead of IecTaskDisableWatchdog)

NOTES:

- You have to enable the watchdog of the task with :ref:`IecTaskEnableWatchdog2() <group___cmp_iec_task_itf_1ga10ed63475267435205d24bf14d4173af>` and _not_ with :ref:`IecTaskEnableWatchdog() <group___cmp_iec_task_itf_1ga3feeb8b00bab424a66ac27e217f4b372>` , because they act on different task flags!

- The watchdog is disabled until :ref:`IecTaskEnableWatchdog2() <group___cmp_iec_task_itf_1ga10ed63475267435205d24bf14d4173af>` is called!!! So this is a security issue, if you never enable the watchdog!

- As a consequence, you always have to call IecTaskDisableWatchdog2 and IecTaskEnableWatchdog2 symmetrical

- Can be called nested. First call disables the watchdog.

**Parameters**

+---------+----------+----------------------------------------------------------------+
| [in]    | hIecTask | Handle of the task RANGE=[RTS_INVALID_HANDLE,VALID_TASKHANDLE] |
+---------+----------+----------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+----------------------------------------+
| ERR_OK        | The watchdog for the task was disabled |
+---------------+----------------------------------------+
| ERR_PARAMETER | The task handle was invalid            |
+---------------+----------------------------------------+

.. _group___cmp_iec_task_itf_1ga4f13e818f96a489c50df58e17696156e:

RTS_RESULT IecTaskCheckWatchdog (RTS_HANDLE hIecTask, RTS_SYSTIME *ptActUs)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Check if the watchdog of a task expired.

This function is called by the scheduler, as well as from the task context.

If the watchdog expired, an exception is generated and (depending on the scheduler) the function will return ERR_FAILED. Note, that this function does not essentially return, because some schedulers are not able to recover from this error in a way that the function can return.

Handling of the Sensitivity:

- 0,1,2: Exception in first cycle if it exceeds WD timesensitivity

- 3-MAX_INT: Exception in (sensitivity-1)'th cycle if time exceeded, or in first if time exceeded by WD timesensitivity

**Parameters**

+---------+----------------------------+----------------------------------------------------------------------------------------------+
| [in]    | hIecTask                   | Handle of the task RANGE=[RTS_INVALID_HANDLE,VALID_TASKHANDLE]                               |
+---------+----------------------------+----------------------------------------------------------------------------------------------+
| [in]    | ptActUs                    | Optional pointer to actual time tick in microseconds. Can be NULL. RANGE=[0,PT1,PT2,PT3,PT4] |
+---------+----------------------------+----------------------------------------------------------------------------------------------+
| [in]    | hIecTask.watchdogtime      | ***PSEUDO*** Configured WD time RANGE=[0..400000000,400000001..INT_MAX]                      |
+---------+----------------------------+----------------------------------------------------------------------------------------------+
| [in]    | hIecTask.sensitivity       | ***PSEUDO*** Configured WD sensitivity RANGE=[0,1,2,3..10,11..INT_MAX]                       |
+---------+----------------------------+----------------------------------------------------------------------------------------------+
| [in]    | hIecTask.iWatchdogHitCount | ***PSEUDO*** Specifies how often the watchdog exceeded already RANGE=[0,1,2,3]               |
+---------+----------------------------+----------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+------------+-----------------------------------------------------------------------+
| ERR_OK     | The watchdog did not expire or it is currently disabled for this task |
+------------+-----------------------------------------------------------------------+
| ERR_FAILED | The watchdog expired and the scheduler returned from the exception    |
+------------+-----------------------------------------------------------------------+

.. _group___cmp_iec_task_itf_1ga2504b4db0d027a0d141cc481c5cd8807:

RTS_HANDLE IecTaskGetFirst (char *pszAppName, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the first IEC task in the specified application

**Parameters**

+---------+------------+----------------------------------------------+
| [in]    | pszAppName | Application name, to which the task is bound |
+---------+------------+----------------------------------------------+
| [out]   | pResult    | Pointer to error code                        |
+---------+------------+----------------------------------------------+

**Return values**

+---------------+---------------------------+
| ERR_OK        | Task found                |
+---------------+---------------------------+
| ERR_NO_OBJECT | No task found             |
+---------------+---------------------------+
| ERR_PARAMETER | Application name was NULL |
+---------------+---------------------------+

**Returns:**

Handle to the task or RTS_INVALID_HANDLE if failed

.. _group___cmp_iec_task_itf_1gab1f75eadafc2edd33f4a4ccc57a7b798:

RTS_HANDLE IecTaskGetNext (char *pszAppName, RTS_HANDLE hPrevIecTask, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the successor of an IEC task.

Return the successor of an IEC task, based on an application and a predecessor.

**Parameters**

+---------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pszAppName   | Application name, to which the task is bound RANGE=[VALID_APPNAME,INVALID_APPNAME]                                                                                       |
+---------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hPrevIecTask | Handle to previous task provided by :ref:`IecTaskGetFirst() <group___cmp_trace_mgr_dep_1ga9620335e7ff96bdcab178ef62126e434>` RANGE=[RTS_INVALID_HANDLE,VALID_TASKHANDLE] |
+---------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult      | Pointer to error code                                                                                                                                                    |
+---------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+--------------------+---------------------------------------------------------------+
| ERR_OK             | Task found                                                    |
+--------------------+---------------------------------------------------------------+
| ERR_NO_OBJECT      | No task found                                                 |
+--------------------+---------------------------------------------------------------+
| ERR_PARAMETER      | Application name was NULL, or handle to prev task was invalid |
+--------------------+---------------------------------------------------------------+
| ERR_NOTINITIALIZED | The component was not correctly initialized                   |
+--------------------+---------------------------------------------------------------+

**Returns:**

Handle to the task or RTS_INVALID_HANDLE if failed

.. _group___cmp_iec_task_itf_1gaf300ff9b039e6f240ff1cfc39a59de9c:

RTS_HANDLE IecTaskReload (RTS_HANDLE hIecTask, RTS_UI32 ulTimeoutMs, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the first IEC task of the specified application

**Parameters**

+---------+-------------+---------------------------------------------------------------------------------+
| [in]    | pApp        | Handle of the application that contains the task RANGE=[NULL,VALID_APPLICATION] |
+---------+-------------+---------------------------------------------------------------------------------+
| [in]    | bTaskExists | ***PSEUDO*** Defines whether the task exists or not RANGE=[FALSE,TRUE]          |
+---------+-------------+---------------------------------------------------------------------------------+
| [out]   | pResult     | Pointer to error code                                                           |
+---------+-------------+---------------------------------------------------------------------------------+

**Return values**

+--------------------+-------------------------------+
| ERR_OK             | Task found                    |
+--------------------+-------------------------------+
| ERR_NO_OBJECT      | No task found                 |
+--------------------+-------------------------------+
| ERR_PARAMETER      | Application pointer was NULL  |
+--------------------+-------------------------------+
| ERR_NOTINITIALIZED | Component was not initialized |
+--------------------+-------------------------------+

**Returns:**

Handle to the task or RTS_INVALID_HANDLE if failed
Get the successor of an IEC task.

Return the successor of an IEC task, based on an application and a predecessor.

**Parameters**

+---------+------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pApp             | Handle of the application that contains the task RANGE=[NULL,VALID_APPLICATION]                                                                                         |
+---------+------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hPrevIecTask     | Handle to previous task provided by :ref:`IecTaskGetFirst2() <group___cmp_app_b_p_dep_1ga047a2bb98c92d505c428ee6ae31bf806>` RANGE=[RTS_INVALID_HANDLE,VALID_TASKHANDLE] |
+---------+------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | bSuccessorExists | ***PSEUDO*** Defines if a successor to hPrevIecTask exists or not. RANGE=[FALSE,TRUE]                                                                                   |
+---------+------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult          | Pointer to error code                                                                                                                                                   |
+---------+------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+--------------------+---------------------------------------------------------------+
| ERR_OK             | Task found                                                    |
+--------------------+---------------------------------------------------------------+
| ERR_NO_OBJECT      | No task found                                                 |
+--------------------+---------------------------------------------------------------+
| ERR_PARAMETER      | Application name was NULL, or handle to prev task was invalid |
+--------------------+---------------------------------------------------------------+
| ERR_NOTINITIALIZED | The component was not correctly initialized                   |
+--------------------+---------------------------------------------------------------+

**Returns:**

Handle to the task or RTS_INVALID_HANDLE if failed
Reload a specified IEC task. Reload means here: Delete the task at the actual position and create it newly.

**Parameters**

+---------+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hIecTask    | Handle to the task to reload                                                                                                                                                                                                       |
+---------+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ulTimeoutMs | Timeout in milliseconds to wait, until the task deleted itself. Timeout can be one of the following predefined values: RTS_TIMEOUT_DEFAULT: Default timeout to delete the task RTS_TIMEOUT_NO_WAIT: Immediate deletion of the task |
+---------+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult     | Pointer to error code                                                                                                                                                                                                              |
+---------+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Handle to the new created task

.. _group___cmp_iec_task_itf_1ga2defc0b0b2f479dea946e115b0f900a4:

int IecTaskCalculateId (APPLICATION *pApp, int iIndex, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Calculate a task ID based on an application index and a task index.

This ID corresponds directly to the IDs that are used in the CoDeSys programming system to identify a task.

The valid range of iIndex depends on the cpu. The limit is always the square route of UINT_MAX, because the upper half of the datatype is used for the application ID, and the lower half for the task index.

**Parameters**

+---------+----------+------------------------------------------------------------------------------------------------+
| [in]    | pApp     | Pointer to the application of the task. RANGE=[NULL,VALID_APPLICATION]                         |
+---------+----------+------------------------------------------------------------------------------------------------+
| [in]    | pApp.iId | ***PSEUDO*** Application ID. RANGE=[-1,0..MAX_APPINDEX,MAX_APPINDEX+1..INT_MAX]                |
+---------+----------+------------------------------------------------------------------------------------------------+
| [in]    | iIndex   | Index of the task within it's application RANGE=[-1,0..MAX_TASKINDEX,MAX_TASKINDEX+1..INT_MAX] |
+---------+----------+------------------------------------------------------------------------------------------------+
| [out]   | pResult  | Pointer to error code                                                                          |
+---------+----------+------------------------------------------------------------------------------------------------+

**Returns:**

Unique Id of the task

**Return values**

+---------------+--------------------------------------------------------+
| ERR_OK        | The ID was successfully calculated                     |
+---------------+--------------------------------------------------------+
| ERR_PARAMETER | Application pointer was null or IDs where out of range |
+---------------+--------------------------------------------------------+

.. _group___cmp_iec_task_itf_1gae5235d65a6bc4ce1c7eba6e5c80972ff:

RTS_RESULT IecTaskWaitTasksActive (APPLICATION *pApp, RTS_UI32 ulTimeoutMs)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to make a busy wait, while at least one task of the specified application is active

**Parameters**

+---------+-------------+---------------------------------------------------------------------------------------------------------+
| [in]    | pApp        | Handle of the application that contains the tasks to check. If pApp == NULL, all IEC tasks are checked. |
+---------+-------------+---------------------------------------------------------------------------------------------------------+
| [in]    | ulTimeoutMs | Timeout in milliseconds to wait for deleting the task                                                   |
+---------+-------------+---------------------------------------------------------------------------------------------------------+

**Returns:**

Error code:

**Return values**

+---------------+-------------------------------------------+
| ERR_OK        | No task is active                         |
+---------------+-------------------------------------------+
| ERR_FAILED    | At least one task is active after timeout |
+---------------+-------------------------------------------+
| ERR_PARAMETER | Application name was NULL                 |
+---------------+-------------------------------------------+

.. _group___cmp_iec_task_itf_1ga50a4ee0ec24c1dd72d62e3af132c2662:

RTS_RESULT IecTaskSingleCycle (APPLICATION *pApp)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Activates a single cycle on every cyclic and freewheeling task of the specified application

**Parameters**

+---------+------+------------------------------------------------+
| [in]    | pApp | Handle of the application to do a single cycle |
+---------+------+------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+---------------------------+
| ERR_OK        | No task is active         |
+---------------+---------------------------+
| ERR_PARAMETER | Application name was NULL |
+---------------+---------------------------+

.. _group___cmp_iec_task_itf_1ga622d8e5cc5e7571abbe87d08adc45f62:

RTS_RESULT IecTaskResetStatistics (RTS_HANDLE hIecTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Reset the task statistics of a task (see Task_Info member e.g. dwCycleTime, dwAverageCycleTime, etc.)

**Parameters**

+---------+----------+--------------------+
| [in]    | hIecTask | Handle to the task |
+---------+----------+--------------------+

**Returns:**

Error code

**Return values**

+---------------+---------------------------+
| ERR_OK        | No task is active         |
+---------------+---------------------------+
| ERR_PARAMETER | Application name was NULL |
+---------------+---------------------------+

.. _group___cmp_iec_task_itf_1gaaf7938b3efb461894767443dafebca50:

RTS_RESULT IecTaskDebugHandlerEnter (RTS_HANDLE hIecTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Is called entering the debug handler, if an IEC task is halted on a breakpoint

**Parameters**

+---------+----------+----------------------------------------------------+
| [in]    | hIecTask | Handle to the task, which enters the debug handler |
+---------+----------+----------------------------------------------------+

**Returns:**

Error code

.. _group___cmp_iec_task_itf_1ga16b40497332d4db4155f1d3c7b4eff2f:

RTS_RESULT IecTaskDebugHandlerLeave (RTS_HANDLE hIecTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Is called leaving the debug handler, if an IEC task is leaving a breakpoint

**Parameters**

+---------+----------+----------------------------------------------------+
| [in]    | hIecTask | Handle to the task, which leaves the debug handler |
+---------+----------+----------------------------------------------------+

**Returns:**

Error code

.. _group___cmp_iec_task_itf_1ga9a95ae840366f4e31cdae58ca785dd7f:

RTS_RESULT IecTaskCallIecFuncWithParams (RTS_HANDLE hIecTask, APPLICATION *pApp, RTS_VOID_FCTPTR pfIECFunc, void *pParam, int iSize)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Call an IEC function from plain C code. Since different CPU's/systems use different calling conventions, this function should be used as a wrapper.

ATTENTION: Instead of :ref:`SysCpuCallIecFuncWithParams() <group___cmp_app_dep___task_1gaf076e5dcece30707310c6bb13230e8d4>` this function is synchronized against an OnlineChange of the corresponding IEC application!!

IEC functions or methods of function block use all the same calling convention: They have no return value and exactly one parameter, which is a pointer to a struct that contains all required IN and OUT parameters.

IMPLEMENTATION NOTE: The content of the parameter structure must be copied completely on the stack as an input parameter! Don't copy only the pointer! Because of this, the size of the structure is provided as a separate parameter to this function. Additionally, the structure of the IEC function must be copied back into the give parameter to return result values of the IEC function! For all this operations you have to ensure the stack alignment, but avoid copying more bytes than iSize

IMPLEMENTATION NOTE: Unused parameter pParam can be NULL, if function has no argument and no result (e.g. CodeInit)!

**Parameters**

+---------+-----------+-----------------------------------------------------------------------------------------------------------------------------+
| [in]    | hIecTask  | IecTask handle from the calling IEC task or RTS_INVALID_HANDLE, if it is a non IEC task!                                    |
+---------+-----------+-----------------------------------------------------------------------------------------------------------------------------+
| [in]    | pApp      | Pointer to the application, in which the pfIECFunc is residing!                                                             |
+---------+-----------+-----------------------------------------------------------------------------------------------------------------------------+
| [in]    | pfIECFunc | Pointer to the IEC function that should be called RANGE=[NULL,VALID_IEC_FUNC,INVALID_IEC_FUNC]                              |
+---------+-----------+-----------------------------------------------------------------------------------------------------------------------------+
| [inout] | pParam    | Pointer to the parameter struct that contains the function parameters. ATTENTION: Can be NULL! RANGE=[NULL,VALID_PARAMETER] |
+---------+-----------+-----------------------------------------------------------------------------------------------------------------------------+
| [in]    | iSize     | Size of the parameter structure to copy the content on stack. ATTENTION: Can be 0! RANGE=[0,VALID_SIZE]                     |
+---------+-----------+-----------------------------------------------------------------------------------------------------------------------------+

**Return values**

+--------------------+-------------------------------------------------------------+
| ERR_OK             | Parameter check was successfull and pfIECFunc was called    |
+--------------------+-------------------------------------------------------------+
| ERR_PARAMETER      | pfIECFunc is NULL or for a paramter size > 0 pParam is NULL |
+--------------------+-------------------------------------------------------------+
| ERR_NOTIMPLEMENTED | Function is not implemented                                 |
+--------------------+-------------------------------------------------------------+

**Returns:**

error code

.. last line of group.rst template
.. last line of composition.rst template


