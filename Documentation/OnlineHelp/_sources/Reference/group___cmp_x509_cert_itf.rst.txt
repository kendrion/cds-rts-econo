.. first line of composition.rst template

:orphan:

.. first line of group.rst template

.. _group___cmp_x509_cert_itf:

==============
CmpX509CertItf
==============

.. contents::
    :local:
    :depth: 1

Interface of CmpX509Cert.

Detailed Description
--------------------

This interface provides functionality to handle and verify X.509 Certificates

**Copyright:**

Copyright (c) 2017-2020 CODESYS Development GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved.

Modules
-------

- :ref:`Event parameter <group___cmp_x509_cert_itf___eventparameter>`

- :ref:`Events <group___cmp_x509_cert_itf___events>`

- :ref:`Key Usage <group___cmp_x509_cert_itf___key_usage>`

- :ref:`Object Identifiers <group___cmp_x509_cert_itf___object_identifiers>`

- :ref:`Online service tags <group___cmp_x509_cert_itf___onlineservicetags>`

- :ref:`Online services <group___cmp_x509_cert_itf___onlineservices>`

- :ref:`SecurityIDs <group___cmp_x509_cert_itf___security_i_ds>`

- :ref:`SecuritySettings <group___cmp_x509_cert_itf___security_settings>`

- :ref:`Settings <group___cmp_x509_cert_itf___settings>`

- :ref:`Static defines <group___cmp_x509_cert_itf___staticdefines>`

Data Structures
---------------

- struct :ref:`RtsOIDStore <union_rts_o_i_d_store>`

- struct :ref:`tagRtsOID <structtag_rts_o_i_d>`

- struct :ref:`RtsX509AltNameStore <union_rts_x509_alt_name_store>`

- struct :ref:`tagRtsX509AltName <structtag_rts_x509_alt_name>`

- struct :ref:`tagRtsX509NameEntry <structtag_rts_x509_name_entry>`

- struct :ref:`tagRtsX509CertName <structtag_rts_x509_cert_name>`

- struct :ref:`tagRtsX509ExKeyUsage <structtag_rts_x509_ex_key_usage>`

- struct :ref:`RtsX509CertFilterContent <union_rts_x509_cert_filter_content>`

- struct :ref:`tagRtsX509CertFilter <structtag_rts_x509_cert_filter>`

- struct :ref:`tagRtsX509CertInfo <structtag_rts_x509_cert_info>`

- struct :ref:`X509CertCreateSelfSignedAsyncResult <struct_x509_cert_create_self_signed_async_result>`

- struct :ref:`X509CertCreateCSRAsyncResult <struct_x509_cert_create_c_s_r_async_result>`

- struct :ref:`X509AsyncOperationResult <union_x509_async_operation_result>`

- struct :ref:`X509AsyncResult <struct_x509_async_result>`

- struct :ref:`ICmpX509Cert_C <struct_i_cmp_x509_cert___c>`

Macros
------

- #define :ref:`RTSCERTENCODING_ASN1 <group___cmp_x509_cert_itf_1ga991b92ffd3bcb0a4b72b2ceece3002cb>` RTS_IEC_INT_C(0x0)

- #define :ref:`RTSCERTENCODING_BASE64 <group___cmp_x509_cert_itf_1ga553dcf0bf1d0879d38eb9bb3de39dec2>` RTS_IEC_INT_C(0x1)

- #define :ref:`RTSCERTENCODING <group___cmp_x509_cert_itf_1ga2b92ffb2a28f5b1fd9fe9d73bdc1197a>` RTS_IEC_INT

- #define :ref:`RTSCERTTRUSTLEVEL_UNTRUSTED <group___cmp_x509_cert_itf_1ga89f6364a9b9db3f25ab394c220442c8c>` RTS_IEC_INT_C(0x1)	/* This is the location for untrusted certificates. */

- #define :ref:`RTSCERTTRUSTLEVEL_TRUSTED <group___cmp_x509_cert_itf_1ga49ca7ac8bd6ad56c971887af60dadacb>` RTS_IEC_INT_C(0x2)	/* This is the location for trusted CA or self signed certificates. */

- #define :ref:`RTSCERTTRUSTLEVEL_OWN <group___cmp_x509_cert_itf_1ga589f1a935b7f6a1050cbc02059580684>` RTS_IEC_INT_C(0x3)	/* This is the location for certificates used by the PLC. The private key of these certificates is available. */

- #define :ref:`RTSCERTTRUSTLEVEL_QUARANTINE <group___cmp_x509_cert_itf_1ga5a83ed93c6295deb2b74d3a953277ae3>` RTS_IEC_INT_C(0x4)	/* This location contains certificates which could not be verified because of missing chains. */

- #define :ref:`RTSCERTTRUSTLEVEL_UNKNOWN <group___cmp_x509_cert_itf_1gaaef007b2a5f75365176886ffe671e40d>` RTS_IEC_INT_C(0x5)	/* This is the default for certificates which are not in one of the other stores. Usually this is set when parsing a certificate. */

- #define :ref:`RTSCERTTRUSTLEVEL_CHAIN <group___cmp_x509_cert_itf_1gaccec630f0164074b49f0fe95acd8ec6d>` RTS_IEC_INT_C(0x6)	/* This location contains chain certificates. These certificates are not
trusted but used to build up a chain up to one of the certificates placed
in trusted. This is the only store which is local to each opened certificate
store. Also adding certificates to this trust level is not persistent. The
typical use case is to add chain-certificates received from the communication
peer in case of an own protocol implementation. For TLS connection this is done
automatically. Due this use-case, the capabilities of this store are somewhat
limited. It is not possible to iterate or filter certificates on this store.
Explicit removal of certificates is supported with X509CertStoreRemoveCert.
The store is automatically clean up on X509CertStoreClose. */

- #define :ref:`RTSCERTTRUSTLEVEL <group___cmp_x509_cert_itf_1ga86a9f95f0345dc8f100a23d51069e796>` RTS_IEC_INT

- #define :ref:`RTSX509ALTNAMETYPE_OTHERNAME <group___cmp_x509_cert_itf_1ga6710183e103419296c76821bdba6e057>` RTS_IEC_INT_C(0x0)	/* Not supported */

- #define :ref:`RTSX509ALTNAMETYPE_EMAIL <group___cmp_x509_cert_itf_1ga8d82b6e2e1d9ff35eeca6f2bbe32eff2>` RTS_IEC_INT_C(0x1)	/* Supported */

- #define :ref:`RTSX509ALTNAMETYPE_DNSNAME <group___cmp_x509_cert_itf_1gad2a7d7867735308420266add0adc330d>` RTS_IEC_INT_C(0x2)	/* Supported */

- #define :ref:`RTSX509ALTNAMETYPE_X400ADDRESS <group___cmp_x509_cert_itf_1ga0d19b0b3f51f5d3406ee862a78e6d7a6>` RTS_IEC_INT_C(0x3)	/* Not supported */

- #define :ref:`RTSX509ALTNAMETYPE_DIRECTORYNAME <group___cmp_x509_cert_itf_1gaf0c10f43ec7b43c8d77c4af6cea0bf71>` RTS_IEC_INT_C(0x4)	/* Not supported */

- #define :ref:`RTSX509ALTNAMETYPE_EDIPARTYNAME <group___cmp_x509_cert_itf_1ga9f1ece282dfa84aba881472a05374fe8>` RTS_IEC_INT_C(0x5)	/* Not supported */

- #define :ref:`RTSX509ALTNAMETYPE_URI <group___cmp_x509_cert_itf_1ga27786f665fb8286bd1716a5853d876c1>` RTS_IEC_INT_C(0x6)	/* Supported */

- #define :ref:`RTSX509ALTNAMETYPE_IPADDRESS <group___cmp_x509_cert_itf_1gac4e6423a321b539e67c538edd20acaca>` RTS_IEC_INT_C(0x7)	/* Supported */

- #define :ref:`RTSX509ALTNAMETYPE_REGISTERDID <group___cmp_x509_cert_itf_1gaa47105523bad40018be74493c62d9bae>` RTS_IEC_INT_C(0x8)	/* Supported */

- #define :ref:`RTSX509ALTNAMETYPE <group___cmp_x509_cert_itf_1ga34dedaed91e5459fe8b88ae07e5665f0>` RTS_IEC_INT

- #define :ref:`RTSX509CERTCHECKFLAGS_FORCE_SUBJECT <group___cmp_x509_cert_itf_1gaadf345445ec9b8881fe25d852bc99e43>` RTS_IEC_DWORD_C(0x1)	/* Forces that the host-name / IP address is part of certificate subject. Otherwise part of subject alternative name is accepted. */

- #define :ref:`RTSX509CERTCHECKFLAGS_DISABLE_WILDCARDS <group___cmp_x509_cert_itf_1ga11c11f10c3c8ede9f8856dd40e41b886>` RTS_IEC_DWORD_C(0x2)	/* Disable support for wild-card checking. *.example.com in a certificate is NOT accepted. Only FOR X509CertCheckHost. */

- #define :ref:`RTSX509CERTCHECKFLAGS_DISABLE_PARTIAL_WILDCARDS <group___cmp_x509_cert_itf_1gacad268499a6c974a098a1b100823d0b1>` RTS_IEC_DWORD_C(0x4)	/* Disable support FOR partial wild card checking. ww*.example.com OR *ww.example.com. Only FOR X509CertCheckHost. */

- #define :ref:`RTSX509CERTCHECKFLAGS_ALLOW_MULTILABLE_WILDCARDS <group___cmp_x509_cert_itf_1gad78149e5ba73800019c231093121ed9f>` RTS_IEC_DWORD_C(0x8)	/* Allow that wild-cards replace multiple sub domains. *.example.com will accept www.SUB.example.com. Only FOR X509CertCheckHost. */

- #define :ref:`RTSX509CERTCHECKFLAGS_FORCE_SINGLE_SUBDOMAIN <group___cmp_x509_cert_itf_1ga4490ab5fef6bc4dded4753e8bfcdcdb5>` RTS_IEC_DWORD_C(0x10)	/* Forces that .example.com will only accept a single sub domain e.f. SUB.example.com, but NOT www.SUB.example.com. Only FOR X509CertCheckHost. */

- #define :ref:`RTSX509CERTCHECKFLAGS <group___cmp_x509_cert_itf_1ga095e163a941a55797191ce147edfb7ef>` RTS_IEC_DWORD

- #define :ref:`RTSX509CERTFILTERTYPE_TRUST_LEVEL <group___cmp_x509_cert_itf_1ga97ace9c8212fa405162abd5015b2edd1>` RTS_IEC_INT_C(0x0)

- #define :ref:`RTSX509CERTFILTERTYPE_SUBJECT <group___cmp_x509_cert_itf_1ga9a675b3166bd6166596202361bf86649>` RTS_IEC_INT_C(0x1)

- #define :ref:`RTSX509CERTFILTERTYPE_SUBJECT_MATCHALL <group___cmp_x509_cert_itf_1gaa3ff13c9a299e6ccd9f7cbe1afb3e188>` RTS_IEC_INT_C(0x2)

- #define :ref:`RTSX509CERTFILTERTYPE_CERT_DATEVALID <group___cmp_x509_cert_itf_1gac7b31ce4ddfac3ac0e6cc7f5a65666fd>` RTS_IEC_INT_C(0x3)

- #define :ref:`RTSX509CERTFILTERTYPE_CERT_KEYUSAGE <group___cmp_x509_cert_itf_1ga2ea9b2e7c3ad29968a8d0d0a9615d7ee>` RTS_IEC_INT_C(0x4)

- #define :ref:`RTSX509CERTFILTERTYPE_CERT_EXKEYUSAGE <group___cmp_x509_cert_itf_1gaab202d9e5acaac9ef6f1afe50e6cfa3f>` RTS_IEC_INT_C(0x5)

- #define :ref:`RTSX509CERTFILTERTYPE_CERT_THUMBPRINT <group___cmp_x509_cert_itf_1ga397b6bf8f86f99d29b1a3e94b92e66f2>` RTS_IEC_INT_C(0x6)

- #define :ref:`RTSX509CERTFILTERTYPE <group___cmp_x509_cert_itf_1gac0a940a207e99d841b157b5abdacd067>` RTS_IEC_INT

- #define :ref:`CMPX509CERT_ASYNC_FUNCTION_CREATESELFSIGNED <group___cmp_x509_cert_itf_1gab0c3674136331ef3d08683692ebdf477>` 1

- #define :ref:`CMPX509CERT_ASYNC_FUNCTION_CREATECSR <group___cmp_x509_cert_itf_1gae389919c688154c0cbb5452d1507550c>` 2

- #define :ref:`USE_X509CertStoreOpen <group___cmp_x509_cert_itf_1ga080129979894397904324fc2332a0d02>` :ref:`PFX509CERTSTOREOPEN <group___cmp_x509_cert_itf_1gab7a81b00f2c785b8f47ee2025ce01b82>` pfX509CertStoreOpen;

- #define :ref:`EXT_X509CertStoreOpen <group___cmp_x509_cert_itf_1ga941fdf0aab9e45b9c350c9e8d7743dff>` extern :ref:`PFX509CERTSTOREOPEN <group___cmp_x509_cert_itf_1gab7a81b00f2c785b8f47ee2025ce01b82>` pfX509CertStoreOpen;

- #define :ref:`GET_X509CertStoreOpen <group___cmp_x509_cert_itf_1gac80aa887fc1c4cc55b597ec601883913>` s_pfCMGetAPI2( "X509CertStoreOpen", (RTS_VOID_FCTPTR *)&pfX509CertStoreOpen, (fl), 0, 0)

- #define :ref:`CAL_X509CertStoreOpen <group___cmp_x509_cert_itf_1ga140590d98726ddc9caf3fa6f50305fd7>` pfX509CertStoreOpen

- #define :ref:`CHK_X509CertStoreOpen <group___cmp_x509_cert_itf_1ga6e130b08d895dbde862031d991fe6150>` (pfX509CertStoreOpen != NULL)

- #define :ref:`EXP_X509CertStoreOpen <group___cmp_x509_cert_itf_1gadf2f3e1b34a71a6f62954ff7562da7f1>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreOpen", (RTS_UINTPTR) :ref:`X509CertStoreOpen <group___cmp_x509_cert_itf_1ga75d8838de2919b5b7db4c88141ace8c0>` , 0, 0)

- #define :ref:`USE_X509CertStoreClose <group___cmp_x509_cert_itf_1ga97cc30b0f8900262ece63eeed7df9c5d>` :ref:`PFX509CERTSTORECLOSE <group___cmp_x509_cert_itf_1ga40eb369107aa2c60704402e239bf5a40>` pfX509CertStoreClose;

- #define :ref:`EXT_X509CertStoreClose <group___cmp_x509_cert_itf_1ga0a3559b323e280baf7b5298bd968da71>` extern :ref:`PFX509CERTSTORECLOSE <group___cmp_x509_cert_itf_1ga40eb369107aa2c60704402e239bf5a40>` pfX509CertStoreClose;

- #define :ref:`GET_X509CertStoreClose <group___cmp_x509_cert_itf_1gae541444d3608daf57981614eab7a3b9d>` s_pfCMGetAPI2( "X509CertStoreClose", (RTS_VOID_FCTPTR *)&pfX509CertStoreClose, (fl), 0, 0)

- #define :ref:`CAL_X509CertStoreClose <group___cmp_x509_cert_itf_1gad33cdc9ac0b7490192a3d65a9ec3dfc1>` pfX509CertStoreClose

- #define :ref:`CHK_X509CertStoreClose <group___cmp_x509_cert_itf_1gaa0bc18c1158eea54666744b8cc8c4e9a>` (pfX509CertStoreClose != NULL)

- #define :ref:`EXP_X509CertStoreClose <group___cmp_x509_cert_itf_1gae3588f45562ab543d8431015a618eb4b>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreClose", (RTS_UINTPTR) :ref:`X509CertStoreClose <group___cmp_x509_cert_itf_1ga670dba71e49a37089b53439b45a23064>` , 0, 0)

- #define :ref:`USE_X509CertVerify <group___cmp_x509_cert_itf_1gaf0c3b5124c2b1b04c2c42e9eeb00ee4e>` :ref:`PFX509CERTVERIFY <group___cmp_x509_cert_itf_1ga8afbaadaf51b70475fe986de0a34700b>` pfX509CertVerify;

- #define :ref:`EXT_X509CertVerify <group___cmp_x509_cert_itf_1ga506de8fa13459a00aeb7f40bc57aadb3>` extern :ref:`PFX509CERTVERIFY <group___cmp_x509_cert_itf_1ga8afbaadaf51b70475fe986de0a34700b>` pfX509CertVerify;

- #define :ref:`GET_X509CertVerify <group___cmp_x509_cert_itf_1gaadcb3e3a88f6612710b25fbaa13c992b>` s_pfCMGetAPI2( "X509CertVerify", (RTS_VOID_FCTPTR *)&pfX509CertVerify, (fl), 0, 0)

- #define :ref:`CAL_X509CertVerify <group___cmp_x509_cert_itf_1gad5c499ec6d367558639c3f59b934b8f5>` pfX509CertVerify

- #define :ref:`CHK_X509CertVerify <group___cmp_x509_cert_itf_1ga1294b43ec6d6b446b388f7e00f7f5fe7>` (pfX509CertVerify != NULL)

- #define :ref:`EXP_X509CertVerify <group___cmp_x509_cert_itf_1gac8d19bd01d2daa456e7cbad1597dc777>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertVerify", (RTS_UINTPTR) :ref:`X509CertVerify <group___cmp_x509_cert_itf_1gad3e090ee6285c58ce8ea984b25dd333c>` , 0, 0)

- #define :ref:`USE_X509CertStoreSearchGetFirst <group___cmp_x509_cert_itf_1gacbade46029ac9b4c20e86ab89298fc15>` :ref:`PFX509CERTSTORESEARCHGETFIRST <group___cmp_x509_cert_itf_1gad25c649a2db4521f2ffac17f1cc9c4e4>` pfX509CertStoreSearchGetFirst;

- #define :ref:`EXT_X509CertStoreSearchGetFirst <group___cmp_x509_cert_itf_1gac6fb563f71fb2eac1f28f47184749b20>` extern :ref:`PFX509CERTSTORESEARCHGETFIRST <group___cmp_x509_cert_itf_1gad25c649a2db4521f2ffac17f1cc9c4e4>` pfX509CertStoreSearchGetFirst;

- #define :ref:`GET_X509CertStoreSearchGetFirst <group___cmp_x509_cert_itf_1ga48ad144f0816f9e32729af66f90c9125>` s_pfCMGetAPI2( "X509CertStoreSearchGetFirst", (RTS_VOID_FCTPTR *)&pfX509CertStoreSearchGetFirst, (fl), 0, 0)

- #define :ref:`CAL_X509CertStoreSearchGetFirst <group___cmp_x509_cert_itf_1gaee687115787a10af18088a539e0076e0>` pfX509CertStoreSearchGetFirst

- #define :ref:`CHK_X509CertStoreSearchGetFirst <group___cmp_x509_cert_itf_1ga3534b1b75b344bdbca338c935d6a4116>` (pfX509CertStoreSearchGetFirst != NULL)

- #define :ref:`EXP_X509CertStoreSearchGetFirst <group___cmp_x509_cert_itf_1gac03aef67e63a01a7fb28340fbae144c6>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreSearchGetFirst", (RTS_UINTPTR) :ref:`X509CertStoreSearchGetFirst <group___cmp_x509_cert_itf_1ga14cf964ec8c011bca148bf6a399a5f26>` , 0, 0)

- #define :ref:`USE_X509CertStoreSearchGetNext <group___cmp_x509_cert_itf_1gad0837b56ce3f5f5e535c66df8459012b>` :ref:`PFX509CERTSTORESEARCHGETNEXT <group___cmp_x509_cert_itf_1ga5c0c4ccac758c678a5e444ff273d8827>` pfX509CertStoreSearchGetNext;

- #define :ref:`EXT_X509CertStoreSearchGetNext <group___cmp_x509_cert_itf_1ga3a73548547d1ff0d9d494f4dcb90eec8>` extern :ref:`PFX509CERTSTORESEARCHGETNEXT <group___cmp_x509_cert_itf_1ga5c0c4ccac758c678a5e444ff273d8827>` pfX509CertStoreSearchGetNext;

- #define :ref:`GET_X509CertStoreSearchGetNext <group___cmp_x509_cert_itf_1ga9fb7d9b447bd7b2c74c97fd46e3a358d>` s_pfCMGetAPI2( "X509CertStoreSearchGetNext", (RTS_VOID_FCTPTR *)&pfX509CertStoreSearchGetNext, (fl), 0, 0)

- #define :ref:`CAL_X509CertStoreSearchGetNext <group___cmp_x509_cert_itf_1ga28075dbac3f64155d74224f88c42254d>` pfX509CertStoreSearchGetNext

- #define :ref:`CHK_X509CertStoreSearchGetNext <group___cmp_x509_cert_itf_1ga237b0c3f5e40849484cac410193acd57>` (pfX509CertStoreSearchGetNext != NULL)

- #define :ref:`EXP_X509CertStoreSearchGetNext <group___cmp_x509_cert_itf_1ga48be09d12403ba5ff2a23cfdc64a2ca8>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreSearchGetNext", (RTS_UINTPTR) :ref:`X509CertStoreSearchGetNext <group___cmp_x509_cert_itf_1ga66abcdf7c88f2139ce6388e8572230e4>` , 0, 0)

- #define :ref:`USE_X509ParseCertificate <group___cmp_x509_cert_itf_1ga796d27f15af1bb268299e808d946aa23>` :ref:`PFX509PARSECERTIFICATE <group___cmp_x509_cert_itf_1gae65e79041b081349b3251fc513f50cca>` pfX509ParseCertificate;

- #define :ref:`EXT_X509ParseCertificate <group___cmp_x509_cert_itf_1ga9890df51319811a914601c50e09829c2>` extern :ref:`PFX509PARSECERTIFICATE <group___cmp_x509_cert_itf_1gae65e79041b081349b3251fc513f50cca>` pfX509ParseCertificate;

- #define :ref:`GET_X509ParseCertificate <group___cmp_x509_cert_itf_1ga3f7378433896609a167fa60e6b11256e>` s_pfCMGetAPI2( "X509ParseCertificate", (RTS_VOID_FCTPTR *)&pfX509ParseCertificate, (fl), 0, 0)

- #define :ref:`CAL_X509ParseCertificate <group___cmp_x509_cert_itf_1gadf2983e4ba673428fe847e2911ae63a9>` pfX509ParseCertificate

- #define :ref:`CHK_X509ParseCertificate <group___cmp_x509_cert_itf_1gafb19efbc9bfde4eb245b8ddf0842be38>` (pfX509ParseCertificate != NULL)

- #define :ref:`EXP_X509ParseCertificate <group___cmp_x509_cert_itf_1ga4a59ca689b32c2e00fa5d10ddb831b0d>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509ParseCertificate", (RTS_UINTPTR) :ref:`X509ParseCertificate <group___cmp_x509_cert_itf_1gadeafc6baa4fecf1fb07343263e76b28d>` , 0, 0)

- #define :ref:`USE_X509CertGetContent <group___cmp_x509_cert_itf_1ga9390e132fbcd470f7844781908179330>` :ref:`PFX509CERTGETCONTENT <group___cmp_x509_cert_itf_1gae45067b6d58118157978b40e9f8c4e6c>` pfX509CertGetContent;

- #define :ref:`EXT_X509CertGetContent <group___cmp_x509_cert_itf_1ga640eb55f1b80bd578a21c67d5be1026c>` extern :ref:`PFX509CERTGETCONTENT <group___cmp_x509_cert_itf_1gae45067b6d58118157978b40e9f8c4e6c>` pfX509CertGetContent;

- #define :ref:`GET_X509CertGetContent <group___cmp_x509_cert_itf_1gac6b3c50b4bccf1fd3c21d445470d8860>` s_pfCMGetAPI2( "X509CertGetContent", (RTS_VOID_FCTPTR *)&pfX509CertGetContent, (fl), 0, 0)

- #define :ref:`CAL_X509CertGetContent <group___cmp_x509_cert_itf_1gadf82398b3371da7dbe40abccbbc0c76f>` pfX509CertGetContent

- #define :ref:`CHK_X509CertGetContent <group___cmp_x509_cert_itf_1gad9f6836e37131f756f77a4758eecb6e3>` (pfX509CertGetContent != NULL)

- #define :ref:`EXP_X509CertGetContent <group___cmp_x509_cert_itf_1ga83e53bfb51c46465c8fdd6253481a0ed>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertGetContent", (RTS_UINTPTR) :ref:`X509CertGetContent <group___cmp_x509_cert_itf_1ga172a5866f360d2e20a34e96f7983528a>` , 0, 0)

- #define :ref:`USE_X509CertGetBinary <group___cmp_x509_cert_itf_1gaafe73287cd901dec9dd8b6522ddddb8c>` :ref:`PFX509CERTGETBINARY <group___cmp_x509_cert_itf_1ga8338a76d7665c2c3b5964adda69c42bb>` pfX509CertGetBinary;

- #define :ref:`EXT_X509CertGetBinary <group___cmp_x509_cert_itf_1ga4f32ce0e1c8b2ca36fc7863e74701114>` extern :ref:`PFX509CERTGETBINARY <group___cmp_x509_cert_itf_1ga8338a76d7665c2c3b5964adda69c42bb>` pfX509CertGetBinary;

- #define :ref:`GET_X509CertGetBinary <group___cmp_x509_cert_itf_1gadfeeecab345855a0ceb27ac5f6f1af27>` s_pfCMGetAPI2( "X509CertGetBinary", (RTS_VOID_FCTPTR *)&pfX509CertGetBinary, (fl), 0, 0)

- #define :ref:`CAL_X509CertGetBinary <group___cmp_x509_cert_itf_1ga3128c88ecc5f78335ca234ece0be0b0b>` pfX509CertGetBinary

- #define :ref:`CHK_X509CertGetBinary <group___cmp_x509_cert_itf_1ga460339e708ce4638533f4294666e007c>` (pfX509CertGetBinary != NULL)

- #define :ref:`EXP_X509CertGetBinary <group___cmp_x509_cert_itf_1gabb702489754aa45e14c4ef1be3d954c6>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertGetBinary", (RTS_UINTPTR) :ref:`X509CertGetBinary <group___cmp_x509_cert_itf_1gaf053757a0a41a49ece6bd519057e2aaa>` , 0, 0)

- #define :ref:`USE_X509CertGetPublicKey <group___cmp_x509_cert_itf_1ga05fb831d1825f69ce25356592e64983f>` :ref:`PFX509CERTGETPUBLICKEY <group___cmp_x509_cert_itf_1ga2e4dd6d15110702f75e80c00b9fada61>` pfX509CertGetPublicKey;

- #define :ref:`EXT_X509CertGetPublicKey <group___cmp_x509_cert_itf_1ga7278935cfee5c3141b6181ce3afaf1aa>` extern :ref:`PFX509CERTGETPUBLICKEY <group___cmp_x509_cert_itf_1ga2e4dd6d15110702f75e80c00b9fada61>` pfX509CertGetPublicKey;

- #define :ref:`GET_X509CertGetPublicKey <group___cmp_x509_cert_itf_1ga6e986caada63fd250a836efd32b06bf9>` s_pfCMGetAPI2( "X509CertGetPublicKey", (RTS_VOID_FCTPTR *)&pfX509CertGetPublicKey, (fl), 0, 0)

- #define :ref:`CAL_X509CertGetPublicKey <group___cmp_x509_cert_itf_1ga01368e818044ae2e541dd1661a7a2d3d>` pfX509CertGetPublicKey

- #define :ref:`CHK_X509CertGetPublicKey <group___cmp_x509_cert_itf_1gacdd70297e37f27b60d329b2005e8286a>` (pfX509CertGetPublicKey != NULL)

- #define :ref:`EXP_X509CertGetPublicKey <group___cmp_x509_cert_itf_1ga06d7c95d7b343aae735be76884c1fdc9>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertGetPublicKey", (RTS_UINTPTR) :ref:`X509CertGetPublicKey <group___cmp_x509_cert_itf_1ga5452515ba0aea6615442a218ea5ecd4a>` , 0, 0)

- #define :ref:`USE_X509CertGetPrivateKey <group___cmp_x509_cert_itf_1gadd187b58a5796f490b9f154c698557e3>` :ref:`PFX509CERTGETPRIVATEKEY <group___cmp_x509_cert_itf_1ga7e06c0bceea9fe176ce73abfbd4dcbe1>` pfX509CertGetPrivateKey;

- #define :ref:`EXT_X509CertGetPrivateKey <group___cmp_x509_cert_itf_1ga379e44791651d4b42ce38e6a7d7b4966>` extern :ref:`PFX509CERTGETPRIVATEKEY <group___cmp_x509_cert_itf_1ga7e06c0bceea9fe176ce73abfbd4dcbe1>` pfX509CertGetPrivateKey;

- #define :ref:`GET_X509CertGetPrivateKey <group___cmp_x509_cert_itf_1gab56b00a1929c1034a2055e3f1fd6a5b8>` s_pfCMGetAPI2( "X509CertGetPrivateKey", (RTS_VOID_FCTPTR *)&pfX509CertGetPrivateKey, (fl), 0, 0)

- #define :ref:`CAL_X509CertGetPrivateKey <group___cmp_x509_cert_itf_1gae2a8e9e1e93c7442ec4b7f307b539a4a>` pfX509CertGetPrivateKey

- #define :ref:`CHK_X509CertGetPrivateKey <group___cmp_x509_cert_itf_1ga020217e994ebc514b5d990327feab5f0>` (pfX509CertGetPrivateKey != NULL)

- #define :ref:`EXP_X509CertGetPrivateKey <group___cmp_x509_cert_itf_1ga38c093bfdc6c2160e9c917c28984b9d6>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertGetPrivateKey", (RTS_UINTPTR) :ref:`X509CertGetPrivateKey <group___cmp_x509_cert_itf_1gabe3af57c59a534fb6da79f9c82c107c9>` , 0, 0)

- #define :ref:`USE_X509CertGetThumbprint <group___cmp_x509_cert_itf_1ga03f792f607000c39dde1cfcf087f431b>` :ref:`PFX509CERTGETTHUMBPRINT <group___cmp_x509_cert_itf_1gac76817489a4a746c21d222041cba2a22>` pfX509CertGetThumbprint;

- #define :ref:`EXT_X509CertGetThumbprint <group___cmp_x509_cert_itf_1gaa667605d4585fdefa29b2606d078ff7f>` extern :ref:`PFX509CERTGETTHUMBPRINT <group___cmp_x509_cert_itf_1gac76817489a4a746c21d222041cba2a22>` pfX509CertGetThumbprint;

- #define :ref:`GET_X509CertGetThumbprint <group___cmp_x509_cert_itf_1gab7f865484009dfa1e5e2bbb153d5d03d>` s_pfCMGetAPI2( "X509CertGetThumbprint", (RTS_VOID_FCTPTR *)&pfX509CertGetThumbprint, (fl), 0, 0)

- #define :ref:`CAL_X509CertGetThumbprint <group___cmp_x509_cert_itf_1gac0c453e12759a3c457abb5cdd78dfac2>` pfX509CertGetThumbprint

- #define :ref:`CHK_X509CertGetThumbprint <group___cmp_x509_cert_itf_1gabf200e287889cea4c319ede36cf3877c>` (pfX509CertGetThumbprint != NULL)

- #define :ref:`EXP_X509CertGetThumbprint <group___cmp_x509_cert_itf_1gae324779442aaa330ce0e07815940311d>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertGetThumbprint", (RTS_UINTPTR) :ref:`X509CertGetThumbprint <group___cmp_x509_cert_itf_1ga25a47310606b897e9b3e0ddae44711aa>` , 0, 0)

- #define :ref:`USE_X509CertIsDateValid <group___cmp_x509_cert_itf_1ga24918157aaa5b1f9cb6021d8b139e072>` :ref:`PFX509CERTISDATEVALID <group___cmp_x509_cert_itf_1ga140fed553059cfc2684fddc7eb7e914e>` pfX509CertIsDateValid;

- #define :ref:`EXT_X509CertIsDateValid <group___cmp_x509_cert_itf_1ga8b88757ef19cf86198b61e5bb747ebaf>` extern :ref:`PFX509CERTISDATEVALID <group___cmp_x509_cert_itf_1ga140fed553059cfc2684fddc7eb7e914e>` pfX509CertIsDateValid;

- #define :ref:`GET_X509CertIsDateValid <group___cmp_x509_cert_itf_1gaac822529c4bd8aa82edd8ab74060cdcc>` s_pfCMGetAPI2( "X509CertIsDateValid", (RTS_VOID_FCTPTR *)&pfX509CertIsDateValid, (fl), 0, 0)

- #define :ref:`CAL_X509CertIsDateValid <group___cmp_x509_cert_itf_1ga4e075232b3cdd40b43f290cfa36e7e91>` pfX509CertIsDateValid

- #define :ref:`CHK_X509CertIsDateValid <group___cmp_x509_cert_itf_1ga76314f91f2551d71124dbd865e9a7753>` (pfX509CertIsDateValid != NULL)

- #define :ref:`EXP_X509CertIsDateValid <group___cmp_x509_cert_itf_1gacf70d62119faa86dc33c228f51907b7c>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertIsDateValid", (RTS_UINTPTR) :ref:`X509CertIsDateValid <group___cmp_x509_cert_itf_1ga57995c547a18717e3961ddd81ed68fb0>` , 0, 0)

- #define :ref:`USE_X509CertIsSelfSigned <group___cmp_x509_cert_itf_1gaf77eb771258a9b0c7e346b87aebbcffd>` :ref:`PFX509CERTISSELFSIGNED <group___cmp_x509_cert_itf_1gaff2d2fbac251ac21c28c29bb44389e6b>` pfX509CertIsSelfSigned;

- #define :ref:`EXT_X509CertIsSelfSigned <group___cmp_x509_cert_itf_1gac28335a8b69740845a9bdba100596829>` extern :ref:`PFX509CERTISSELFSIGNED <group___cmp_x509_cert_itf_1gaff2d2fbac251ac21c28c29bb44389e6b>` pfX509CertIsSelfSigned;

- #define :ref:`GET_X509CertIsSelfSigned <group___cmp_x509_cert_itf_1ga63c715e81a18b81cd6e4d3d619d95504>` s_pfCMGetAPI2( "X509CertIsSelfSigned", (RTS_VOID_FCTPTR *)&pfX509CertIsSelfSigned, (fl), 0, 0)

- #define :ref:`CAL_X509CertIsSelfSigned <group___cmp_x509_cert_itf_1ga751b5123aa88e059ceeff8f9da10a548>` pfX509CertIsSelfSigned

- #define :ref:`CHK_X509CertIsSelfSigned <group___cmp_x509_cert_itf_1ga1e3c242a2e837ff271be21a528a3c277>` (pfX509CertIsSelfSigned != NULL)

- #define :ref:`EXP_X509CertIsSelfSigned <group___cmp_x509_cert_itf_1gad3219a2f3c87355af2c054fdeffbfdd6>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertIsSelfSigned", (RTS_UINTPTR) :ref:`X509CertIsSelfSigned <group___cmp_x509_cert_itf_1gafa046a2b2f200b74e5d7a663e8708b94>` , 0, 0)

- #define :ref:`USE_X509CertHasExtendedKeyUsage <group___cmp_x509_cert_itf_1ga321bf4fad25bece1b41711ac9e75cd98>` :ref:`PFX509CERTHASEXTENDEDKEYUSAGE <group___cmp_x509_cert_itf_1ga2de080fd9fc25a734e2565dab7227fad>` pfX509CertHasExtendedKeyUsage;

- #define :ref:`EXT_X509CertHasExtendedKeyUsage <group___cmp_x509_cert_itf_1ga0970aa5b75ac39b3b0eefa5b69cc03cc>` extern :ref:`PFX509CERTHASEXTENDEDKEYUSAGE <group___cmp_x509_cert_itf_1ga2de080fd9fc25a734e2565dab7227fad>` pfX509CertHasExtendedKeyUsage;

- #define :ref:`GET_X509CertHasExtendedKeyUsage <group___cmp_x509_cert_itf_1ga6d38f70d8e785caa8a9b415fea01b96e>` s_pfCMGetAPI2( "X509CertHasExtendedKeyUsage", (RTS_VOID_FCTPTR *)&pfX509CertHasExtendedKeyUsage, (fl), 0, 0)

- #define :ref:`CAL_X509CertHasExtendedKeyUsage <group___cmp_x509_cert_itf_1ga8199d5c458539038f2602587705cb8b5>` pfX509CertHasExtendedKeyUsage

- #define :ref:`CHK_X509CertHasExtendedKeyUsage <group___cmp_x509_cert_itf_1ga171885e65f2561ba2084d3bfd005d5bc>` (pfX509CertHasExtendedKeyUsage != NULL)

- #define :ref:`EXP_X509CertHasExtendedKeyUsage <group___cmp_x509_cert_itf_1ga512b0fe5372e47b19a9a969b93c2c004>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertHasExtendedKeyUsage", (RTS_UINTPTR) :ref:`X509CertHasExtendedKeyUsage <group___cmp_x509_cert_itf_1ga1487ed9be97f1b084fc827c0ff465da5>` , 0, 0)

- #define :ref:`USE_X509CertCheckHost <group___cmp_x509_cert_itf_1ga963b7aaa275f4147bf79f1f05f1e8730>` :ref:`PFX509CERTCHECKHOST <group___cmp_x509_cert_itf_1ga16b595365946bf594d4459b69f1e9dde>` pfX509CertCheckHost;

- #define :ref:`EXT_X509CertCheckHost <group___cmp_x509_cert_itf_1gaedc9e0dd4101bef47f76b6519bf18da0>` extern :ref:`PFX509CERTCHECKHOST <group___cmp_x509_cert_itf_1ga16b595365946bf594d4459b69f1e9dde>` pfX509CertCheckHost;

- #define :ref:`GET_X509CertCheckHost <group___cmp_x509_cert_itf_1gabbcb0a262a5ba3fd69e2bdbed9879cbd>` s_pfCMGetAPI2( "X509CertCheckHost", (RTS_VOID_FCTPTR *)&pfX509CertCheckHost, (fl), 0, 0)

- #define :ref:`CAL_X509CertCheckHost <group___cmp_x509_cert_itf_1ga141101f4a041e6a1fd98ddd63a5c5084>` pfX509CertCheckHost

- #define :ref:`CHK_X509CertCheckHost <group___cmp_x509_cert_itf_1gae23b2c535b6171c2abcb999ef6439f94>` (pfX509CertCheckHost != NULL)

- #define :ref:`EXP_X509CertCheckHost <group___cmp_x509_cert_itf_1gaabb77013c1a2fc189159a8106e2e0c97>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertCheckHost", (RTS_UINTPTR) :ref:`X509CertCheckHost <group___cmp_x509_cert_itf_1gaa6bbabab8cf710d40ba86cac31027d5b>` , 0, 0)

- #define :ref:`USE_X509CertCheckIP <group___cmp_x509_cert_itf_1ga598425414fa737ec75a32e7beb8f38df>` :ref:`PFX509CERTCHECKIP <group___cmp_x509_cert_itf_1gae5596905ef58927522832a82d3273c75>` pfX509CertCheckIP;

- #define :ref:`EXT_X509CertCheckIP <group___cmp_x509_cert_itf_1gafeee806ee364a1d62a3ef2f3dcc8756f>` extern :ref:`PFX509CERTCHECKIP <group___cmp_x509_cert_itf_1gae5596905ef58927522832a82d3273c75>` pfX509CertCheckIP;

- #define :ref:`GET_X509CertCheckIP <group___cmp_x509_cert_itf_1gae1b72c1d4131e78f5905012bc8859bb0>` s_pfCMGetAPI2( "X509CertCheckIP", (RTS_VOID_FCTPTR *)&pfX509CertCheckIP, (fl), 0, 0)

- #define :ref:`CAL_X509CertCheckIP <group___cmp_x509_cert_itf_1ga02b0b6a37f7dca3b3dca9fda3a057b97>` pfX509CertCheckIP

- #define :ref:`CHK_X509CertCheckIP <group___cmp_x509_cert_itf_1ga449c6b6acdf128495a744e71db2048f7>` (pfX509CertCheckIP != NULL)

- #define :ref:`EXP_X509CertCheckIP <group___cmp_x509_cert_itf_1gae06be3558862cb99c51c96e5dfc60076>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertCheckIP", (RTS_UINTPTR) :ref:`X509CertCheckIP <group___cmp_x509_cert_itf_1ga4bb6ea9259e818f14826c0a7bd8fce3a>` , 0, 0)

- #define :ref:`USE_X509CertCompare <group___cmp_x509_cert_itf_1gaf982a11c26211041e80248c4d9bd9ddd>` :ref:`PFX509CERTCOMPARE <group___cmp_x509_cert_itf_1ga7b66691a59b6ded68753442c3ac2bb80>` pfX509CertCompare;

- #define :ref:`EXT_X509CertCompare <group___cmp_x509_cert_itf_1ga2e320aea91379dc68672310228690598>` extern :ref:`PFX509CERTCOMPARE <group___cmp_x509_cert_itf_1ga7b66691a59b6ded68753442c3ac2bb80>` pfX509CertCompare;

- #define :ref:`GET_X509CertCompare <group___cmp_x509_cert_itf_1ga820ae32ddebc909f6c0cc947ddecade6>` s_pfCMGetAPI2( "X509CertCompare", (RTS_VOID_FCTPTR *)&pfX509CertCompare, (fl), 0, 0)

- #define :ref:`CAL_X509CertCompare <group___cmp_x509_cert_itf_1ga5cfc0658f4636852cfa57cbb43251cb9>` pfX509CertCompare

- #define :ref:`CHK_X509CertCompare <group___cmp_x509_cert_itf_1ga3b57f33a152cf40c959961708b9e9cd4>` (pfX509CertCompare != NULL)

- #define :ref:`EXP_X509CertCompare <group___cmp_x509_cert_itf_1ga09d2dd5dcc7cb7ca10555b6ecee987a3>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertCompare", (RTS_UINTPTR) :ref:`X509CertCompare <group___cmp_x509_cert_itf_1gab62fd9ded8c386c918f4ae84c1d0bf07>` , 0, 0)

- #define :ref:`USE_X509CertKeyClose <group___cmp_x509_cert_itf_1ga627265ae353bc58aaaf27d7833a2d71b>` :ref:`PFX509CERTKEYCLOSE <group___cmp_x509_cert_itf_1ga9a05413f7a73063cb27f7feb2a971e62>` pfX509CertKeyClose;

- #define :ref:`EXT_X509CertKeyClose <group___cmp_x509_cert_itf_1ga24d7150ce88fa5e8cccf7034cd97426f>` extern :ref:`PFX509CERTKEYCLOSE <group___cmp_x509_cert_itf_1ga9a05413f7a73063cb27f7feb2a971e62>` pfX509CertKeyClose;

- #define :ref:`GET_X509CertKeyClose <group___cmp_x509_cert_itf_1gab664a581b20d89d4579942902487c399>` s_pfCMGetAPI2( "X509CertKeyClose", (RTS_VOID_FCTPTR *)&pfX509CertKeyClose, (fl), 0, 0)

- #define :ref:`CAL_X509CertKeyClose <group___cmp_x509_cert_itf_1ga3ce59cfed49de6f007a05c32b644f1ba>` pfX509CertKeyClose

- #define :ref:`CHK_X509CertKeyClose <group___cmp_x509_cert_itf_1gad6734e08943bc09eef3c12d64ceea51e>` (pfX509CertKeyClose != NULL)

- #define :ref:`EXP_X509CertKeyClose <group___cmp_x509_cert_itf_1gabd43090111d430d45d4aa04368645c73>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertKeyClose", (RTS_UINTPTR) :ref:`X509CertKeyClose <group___cmp_x509_cert_itf_1ga9c29c73230e4f790ea6563c6df6b925a>` , 0, 0)

- #define :ref:`USE_X509CertClose <group___cmp_x509_cert_itf_1gaa1119b7ed3cc4a1156c2bdc684fb1a9f>` :ref:`PFX509CERTCLOSE <group___cmp_x509_cert_itf_1ga8d049a389301ab17c65af5569b455898>` pfX509CertClose;

- #define :ref:`EXT_X509CertClose <group___cmp_x509_cert_itf_1ga163ddca0e3aea37fc4e420be80f3e62c>` extern :ref:`PFX509CERTCLOSE <group___cmp_x509_cert_itf_1ga8d049a389301ab17c65af5569b455898>` pfX509CertClose;

- #define :ref:`GET_X509CertClose <group___cmp_x509_cert_itf_1ga7923c601ce7a0147420e59c6732bae7e>` s_pfCMGetAPI2( "X509CertClose", (RTS_VOID_FCTPTR *)&pfX509CertClose, (fl), 0, 0)

- #define :ref:`CAL_X509CertClose <group___cmp_x509_cert_itf_1ga3015915d187f11719eb1c073dbfc636a>` pfX509CertClose

- #define :ref:`CHK_X509CertClose <group___cmp_x509_cert_itf_1gaca5c7549b6b41ce0df6517e4502030d0>` (pfX509CertClose != NULL)

- #define :ref:`EXP_X509CertClose <group___cmp_x509_cert_itf_1ga3024c544109a6d70d64f1e78a2f5c77f>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertClose", (RTS_UINTPTR) :ref:`X509CertClose <group___cmp_x509_cert_itf_1ga073da3edef2ddc44f45739da81f78394>` , 0, 0)

- #define :ref:`USE_X509CertCmsVerify <group___cmp_x509_cert_itf_1ga1b4d59f8a3d0099b8630359f87022b30>` :ref:`PFX509CERTCMSVERIFY <group___cmp_x509_cert_itf_1ga707397f107a100c3b7ed7612950cde87>` pfX509CertCmsVerify;

- #define :ref:`EXT_X509CertCmsVerify <group___cmp_x509_cert_itf_1ga025947e22630890b65bd540c31c3d295>` extern :ref:`PFX509CERTCMSVERIFY <group___cmp_x509_cert_itf_1ga707397f107a100c3b7ed7612950cde87>` pfX509CertCmsVerify;

- #define :ref:`GET_X509CertCmsVerify <group___cmp_x509_cert_itf_1gaef6e8c2aefd31c2805cb095bd718f0ee>` s_pfCMGetAPI2( "X509CertCmsVerify", (RTS_VOID_FCTPTR *)&pfX509CertCmsVerify, (fl), 0, 0)

- #define :ref:`CAL_X509CertCmsVerify <group___cmp_x509_cert_itf_1gaa44f1ec2351519c19d91f89842bf98cf>` pfX509CertCmsVerify

- #define :ref:`CHK_X509CertCmsVerify <group___cmp_x509_cert_itf_1ga0f2f1ef85a59c89a7f0d2c116d0cab16>` (pfX509CertCmsVerify != NULL)

- #define :ref:`EXP_X509CertCmsVerify <group___cmp_x509_cert_itf_1gaee8583f5cd596b875846ce1e4be76fbf>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertCmsVerify", (RTS_UINTPTR) :ref:`X509CertCmsVerify <group___cmp_x509_cert_itf_1ga6b51c3dc63aea1ca5cb8c2d203cbb396>` , 0, 0)

- #define :ref:`USE_X509CertCmsVerify2 <group___cmp_x509_cert_itf_1ga1f2c94df4491e5f4595075710880ab6c>` :ref:`PFX509CERTCMSVERIFY2 <group___cmp_x509_cert_itf_1ga9acb20a8951234ef297e07bb3401cc84>` pfX509CertCmsVerify2;

- #define :ref:`EXT_X509CertCmsVerify2 <group___cmp_x509_cert_itf_1gafcd2c7a9a118dd1b88f547396ae1b0e5>` extern :ref:`PFX509CERTCMSVERIFY2 <group___cmp_x509_cert_itf_1ga9acb20a8951234ef297e07bb3401cc84>` pfX509CertCmsVerify2;

- #define :ref:`GET_X509CertCmsVerify2 <group___cmp_x509_cert_itf_1ga1b3e6a17a1a19d5b789bcfdb6ea52809>` s_pfCMGetAPI2( "X509CertCmsVerify2", (RTS_VOID_FCTPTR *)&pfX509CertCmsVerify2, (fl), 0, 0)

- #define :ref:`CAL_X509CertCmsVerify2 <group___cmp_x509_cert_itf_1ga960d53c21d1d92c9efcfd83171740bb9>` pfX509CertCmsVerify2

- #define :ref:`CHK_X509CertCmsVerify2 <group___cmp_x509_cert_itf_1gac98820aa81115b743f96802acadc5016>` (pfX509CertCmsVerify2 != NULL)

- #define :ref:`EXP_X509CertCmsVerify2 <group___cmp_x509_cert_itf_1ga3e621bad9379e4d1b50222078282b119>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertCmsVerify2", (RTS_UINTPTR) :ref:`X509CertCmsVerify2 <group___cmp_x509_cert_itf_1gab509b5e8a4e99afa871f6ff22d29b342>` , 0, 0)

- #define :ref:`USE_X509CertCmsDecrypt <group___cmp_x509_cert_itf_1ga984860787de9c086b5e83a7d33c7e40d>` :ref:`PFX509CERTCMSDECRYPT <group___cmp_x509_cert_itf_1ga4d133108f9033cb0cede3d402e8ddf3b>` pfX509CertCmsDecrypt;

- #define :ref:`EXT_X509CertCmsDecrypt <group___cmp_x509_cert_itf_1gaac650d13037a8fd343de1777672f2088>` extern :ref:`PFX509CERTCMSDECRYPT <group___cmp_x509_cert_itf_1ga4d133108f9033cb0cede3d402e8ddf3b>` pfX509CertCmsDecrypt;

- #define :ref:`GET_X509CertCmsDecrypt <group___cmp_x509_cert_itf_1ga3a5a7282a6158fcc7c83e817e1640ac8>` s_pfCMGetAPI2( "X509CertCmsDecrypt", (RTS_VOID_FCTPTR *)&pfX509CertCmsDecrypt, (fl), 0, 0)

- #define :ref:`CAL_X509CertCmsDecrypt <group___cmp_x509_cert_itf_1gadb9564b9b74289743a6531e5a07a312f>` pfX509CertCmsDecrypt

- #define :ref:`CHK_X509CertCmsDecrypt <group___cmp_x509_cert_itf_1ga6b66ada0a8fb3239f62de1dc56b6a90f>` (pfX509CertCmsDecrypt != NULL)

- #define :ref:`EXP_X509CertCmsDecrypt <group___cmp_x509_cert_itf_1gaa63b0816616f2bf11155d00c8cede102>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertCmsDecrypt", (RTS_UINTPTR) :ref:`X509CertCmsDecrypt <group___cmp_x509_cert_itf_1gaebc8225f7eb1f386c6e24732d53494ec>` , 0, 0)

- #define :ref:`USE_RtsOIDCreate <group___cmp_x509_cert_itf_1ga0f7737ccac39de8821993f4f11825454>` :ref:`PFRTSOIDCREATE <group___cmp_x509_cert_itf_1ga27d1a1cb963d55ae906a31ad7ffa97d8>` pfRtsOIDCreate;

- #define :ref:`EXT_RtsOIDCreate <group___cmp_x509_cert_itf_1ga3154e8ea04da5b33e8dff6c6af73fc16>` extern :ref:`PFRTSOIDCREATE <group___cmp_x509_cert_itf_1ga27d1a1cb963d55ae906a31ad7ffa97d8>` pfRtsOIDCreate;

- #define :ref:`GET_RtsOIDCreate <group___cmp_x509_cert_itf_1ga8efd5e0a330ac8c494923ea6294a9bf2>` s_pfCMGetAPI2( "RtsOIDCreate", (RTS_VOID_FCTPTR *)&pfRtsOIDCreate, (fl), 0, 0)

- #define :ref:`CAL_RtsOIDCreate <group___cmp_x509_cert_itf_1ga0eadd63c9f943df824f5a0c3aed7e287>` pfRtsOIDCreate

- #define :ref:`CHK_RtsOIDCreate <group___cmp_x509_cert_itf_1gadbb645d1b32913f15fa1d1dff3602778>` (pfRtsOIDCreate != NULL)

- #define :ref:`EXP_RtsOIDCreate <group___cmp_x509_cert_itf_1gaebdf766b43738eeafb056d10f446130a>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"RtsOIDCreate", (RTS_UINTPTR) :ref:`RtsOIDCreate <group___cmp_x509_cert_itf_1gac62d802c208e5937b00033c2288b0c63>` , 0, 0)

- #define :ref:`USE_RtsOIDGetID <group___cmp_x509_cert_itf_1gae373db2150ae53a2b5d3b50aa6301fb0>` :ref:`PFRTSOIDGETID <group___cmp_x509_cert_itf_1ga00502aab48f5e8615dee6f89d6f22c0b>` pfRtsOIDGetID;

- #define :ref:`EXT_RtsOIDGetID <group___cmp_x509_cert_itf_1gacbc992e5e61609324ac87988597548a0>` extern :ref:`PFRTSOIDGETID <group___cmp_x509_cert_itf_1ga00502aab48f5e8615dee6f89d6f22c0b>` pfRtsOIDGetID;

- #define :ref:`GET_RtsOIDGetID <group___cmp_x509_cert_itf_1gaae7560cc01693ba6128e0c14ede93e9c>` s_pfCMGetAPI2( "RtsOIDGetID", (RTS_VOID_FCTPTR *)&pfRtsOIDGetID, (fl), 0, 0)

- #define :ref:`CAL_RtsOIDGetID <group___cmp_x509_cert_itf_1gaf1e61183b23651b3bb1f50d7fb2e933c>` pfRtsOIDGetID

- #define :ref:`CHK_RtsOIDGetID <group___cmp_x509_cert_itf_1ga1ff3c6f5d1d7eaa5791c6b4739a85d19>` (pfRtsOIDGetID != NULL)

- #define :ref:`EXP_RtsOIDGetID <group___cmp_x509_cert_itf_1gae4b98efaa7b85a8df4d2bc7ec229c601>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"RtsOIDGetID", (RTS_UINTPTR) :ref:`RtsOIDGetID <group___cmp_x509_cert_itf_1gaff3a425033e2d1a475c6623f99829d1b>` , 0, 0)

- #define :ref:`USE_RtsOIDGetName <group___cmp_x509_cert_itf_1ga17a5ffde55001742e2eb33c090c308dd>` :ref:`PFRTSOIDGETNAME <group___cmp_x509_cert_itf_1ga429f925c0556a712d25f4f40c509f635>` pfRtsOIDGetName;

- #define :ref:`EXT_RtsOIDGetName <group___cmp_x509_cert_itf_1ga42ea1db1afaa55f6c80ead00cdf27edc>` extern :ref:`PFRTSOIDGETNAME <group___cmp_x509_cert_itf_1ga429f925c0556a712d25f4f40c509f635>` pfRtsOIDGetName;

- #define :ref:`GET_RtsOIDGetName <group___cmp_x509_cert_itf_1gacb3d2db946f4fbd51caa726fc4dc9b4e>` s_pfCMGetAPI2( "RtsOIDGetName", (RTS_VOID_FCTPTR *)&pfRtsOIDGetName, (fl), 0, 0)

- #define :ref:`CAL_RtsOIDGetName <group___cmp_x509_cert_itf_1ga962ed8f85721da3cf968dce178f6fa86>` pfRtsOIDGetName

- #define :ref:`CHK_RtsOIDGetName <group___cmp_x509_cert_itf_1ga49130960e85a5e13d41e34c0f225109c>` (pfRtsOIDGetName != NULL)

- #define :ref:`EXP_RtsOIDGetName <group___cmp_x509_cert_itf_1ga0e66f564c4f81620a6920fb1d2cc966a>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"RtsOIDGetName", (RTS_UINTPTR) :ref:`RtsOIDGetName <group___cmp_x509_cert_itf_1ga9ba84f61b9c3fe5b6ae35f1c11b1e74a>` , 0, 0)

- #define :ref:`USE_RtsOIDClear <group___cmp_x509_cert_itf_1gaff14c1eb65f5d9fdfd92fdb2d8a47b11>` :ref:`PFRTSOIDCLEAR <group___cmp_x509_cert_itf_1gaab49590157ad26f28011d019b2c270cc>` pfRtsOIDClear;

- #define :ref:`EXT_RtsOIDClear <group___cmp_x509_cert_itf_1ga533372b565c15af6689ef36054132135>` extern :ref:`PFRTSOIDCLEAR <group___cmp_x509_cert_itf_1gaab49590157ad26f28011d019b2c270cc>` pfRtsOIDClear;

- #define :ref:`GET_RtsOIDClear <group___cmp_x509_cert_itf_1ga61daee0d12e8a6ccf64f1faaace93180>` s_pfCMGetAPI2( "RtsOIDClear", (RTS_VOID_FCTPTR *)&pfRtsOIDClear, (fl), 0, 0)

- #define :ref:`CAL_RtsOIDClear <group___cmp_x509_cert_itf_1gaaab8cd8793c06683859b078ca822d1fd>` pfRtsOIDClear

- #define :ref:`CHK_RtsOIDClear <group___cmp_x509_cert_itf_1ga4ca822f8b115f8e63ee10d9e3b72315b>` (pfRtsOIDClear != NULL)

- #define :ref:`EXP_RtsOIDClear <group___cmp_x509_cert_itf_1gaa0e1de1ad3c4b469e76cc65d64313461>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"RtsOIDClear", (RTS_UINTPTR) :ref:`RtsOIDClear <group___cmp_x509_cert_itf_1ga370f2a84924e0202d6f3024d054569f0>` , 0, 0)

- #define :ref:`USE_X509CertInfoInit <group___cmp_x509_cert_itf_1ga03f1c7a3d369d4155ebfa01dce7e4f11>` :ref:`PFX509CERTINFOINIT <group___cmp_x509_cert_itf_1ga4ef74ec02f9e0d1bd2e35d1ac46dee6a>` pfX509CertInfoInit;

- #define :ref:`EXT_X509CertInfoInit <group___cmp_x509_cert_itf_1ga6aec428b4dabaf07c3e9f06564e9cfe7>` extern :ref:`PFX509CERTINFOINIT <group___cmp_x509_cert_itf_1ga4ef74ec02f9e0d1bd2e35d1ac46dee6a>` pfX509CertInfoInit;

- #define :ref:`GET_X509CertInfoInit <group___cmp_x509_cert_itf_1gaf0821faa81ffd5d6abff7ea0c9d113ff>` s_pfCMGetAPI2( "X509CertInfoInit", (RTS_VOID_FCTPTR *)&pfX509CertInfoInit, (fl), 0, 0)

- #define :ref:`CAL_X509CertInfoInit <group___cmp_x509_cert_itf_1gae654bce60ee1a97d073cb5b93793fd42>` pfX509CertInfoInit

- #define :ref:`CHK_X509CertInfoInit <group___cmp_x509_cert_itf_1gada599f4303b4c5f292466a5cb2216e68>` (pfX509CertInfoInit != NULL)

- #define :ref:`EXP_X509CertInfoInit <group___cmp_x509_cert_itf_1ga6204ab8c49803cebe7cd7104389b1221>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertInfoInit", (RTS_UINTPTR) :ref:`X509CertInfoInit <group___cmp_x509_cert_itf_1gaf9347f6b295ddc43ae39c26b15c0299a>` , 0, 0)

- #define :ref:`USE_X509CertInfoExit <group___cmp_x509_cert_itf_1ga4df9e4ce4ec367d289ffba1161b418c8>` :ref:`PFX509CERTINFOEXIT <group___cmp_x509_cert_itf_1ga89cd7545e0bbe8f7bae84acfa4b492f7>` pfX509CertInfoExit;

- #define :ref:`EXT_X509CertInfoExit <group___cmp_x509_cert_itf_1ga789a438b9fcf80b8cbe754ae6c30558c>` extern :ref:`PFX509CERTINFOEXIT <group___cmp_x509_cert_itf_1ga89cd7545e0bbe8f7bae84acfa4b492f7>` pfX509CertInfoExit;

- #define :ref:`GET_X509CertInfoExit <group___cmp_x509_cert_itf_1gaa37e94ae0c1ae8b7e6ef51ee4ab4d586>` s_pfCMGetAPI2( "X509CertInfoExit", (RTS_VOID_FCTPTR *)&pfX509CertInfoExit, (fl), 0, 0)

- #define :ref:`CAL_X509CertInfoExit <group___cmp_x509_cert_itf_1ga342b683463cfdbba6c73df2e13fb9365>` pfX509CertInfoExit

- #define :ref:`CHK_X509CertInfoExit <group___cmp_x509_cert_itf_1ga8ecac0d4875d41ec03c4d44aed691603>` (pfX509CertInfoExit != NULL)

- #define :ref:`EXP_X509CertInfoExit <group___cmp_x509_cert_itf_1ga1c603c4dfb5cd4b7bfecc66bcda41c30>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertInfoExit", (RTS_UINTPTR) :ref:`X509CertInfoExit <group___cmp_x509_cert_itf_1gaa11dd819381e15b7a5e0b414c728b32f>` , 0, 0)

- #define :ref:`USE_X509CertStoreGetFirstBackend <group___cmp_x509_cert_itf_1gaea8f9731a1c584e717833b01c21ef242>` :ref:`PFX509CERTSTOREGETFIRSTBACKEND <group___cmp_x509_cert_itf_1ga6c85652e227ad4b48aa674e5a350260a>` pfX509CertStoreGetFirstBackend;

- #define :ref:`EXT_X509CertStoreGetFirstBackend <group___cmp_x509_cert_itf_1ga98e9d7a5ea0731172bd343e0d0320852>` extern :ref:`PFX509CERTSTOREGETFIRSTBACKEND <group___cmp_x509_cert_itf_1ga6c85652e227ad4b48aa674e5a350260a>` pfX509CertStoreGetFirstBackend;

- #define :ref:`GET_X509CertStoreGetFirstBackend <group___cmp_x509_cert_itf_1ga996fde4f33e2dddeac4766d881898352>` s_pfCMGetAPI2( "X509CertStoreGetFirstBackend", (RTS_VOID_FCTPTR *)&pfX509CertStoreGetFirstBackend, (fl), 0, 0)

- #define :ref:`CAL_X509CertStoreGetFirstBackend <group___cmp_x509_cert_itf_1ga09fd33d14602379894ee1148460c0178>` pfX509CertStoreGetFirstBackend

- #define :ref:`CHK_X509CertStoreGetFirstBackend <group___cmp_x509_cert_itf_1gaa5e27e83f5c618141b7a72e90c48f137>` (pfX509CertStoreGetFirstBackend != NULL)

- #define :ref:`EXP_X509CertStoreGetFirstBackend <group___cmp_x509_cert_itf_1ga81ea0540cdfbbceef5f49e23fac5937b>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreGetFirstBackend", (RTS_UINTPTR) :ref:`X509CertStoreGetFirstBackend <group___cmp_x509_cert_itf_1gad0be785fbf9846773eabd0db2b8bc493>` , 0, 0)

- #define :ref:`USE_X509CertStoreGetNextBackend <group___cmp_x509_cert_itf_1ga4edf54c3d7f44edbbf9e6dd677f24e98>` :ref:`PFX509CERTSTOREGETNEXTBACKEND <group___cmp_x509_cert_itf_1gabeb02c311eaedfe2b565c7606ab9a58d>` pfX509CertStoreGetNextBackend;

- #define :ref:`EXT_X509CertStoreGetNextBackend <group___cmp_x509_cert_itf_1ga226533b057c2f599ced6d6bd86cd5401>` extern :ref:`PFX509CERTSTOREGETNEXTBACKEND <group___cmp_x509_cert_itf_1gabeb02c311eaedfe2b565c7606ab9a58d>` pfX509CertStoreGetNextBackend;

- #define :ref:`GET_X509CertStoreGetNextBackend <group___cmp_x509_cert_itf_1ga8f612c07647cb6108206d1dde1d5682f>` s_pfCMGetAPI2( "X509CertStoreGetNextBackend", (RTS_VOID_FCTPTR *)&pfX509CertStoreGetNextBackend, (fl), 0, 0)

- #define :ref:`CAL_X509CertStoreGetNextBackend <group___cmp_x509_cert_itf_1gae0d15f18aa7327b010aec668b2e8a959>` pfX509CertStoreGetNextBackend

- #define :ref:`CHK_X509CertStoreGetNextBackend <group___cmp_x509_cert_itf_1ga12528aeb568d59dfbf68af6a260887a5>` (pfX509CertStoreGetNextBackend != NULL)

- #define :ref:`EXP_X509CertStoreGetNextBackend <group___cmp_x509_cert_itf_1ga6c2fd8ef59a5907c6cf95d220abc8ba7>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreGetNextBackend", (RTS_UINTPTR) :ref:`X509CertStoreGetNextBackend <group___cmp_x509_cert_itf_1gacb16b89ed74609c7fe1afe511e0ea733>` , 0, 0)

- #define :ref:`USE_X509CertStorGetBackendInfo <group___cmp_x509_cert_itf_1ga5a0ad8614a44d1542ff207fef3eb8b2b>` :ref:`PFX509CERTSTORGETBACKENDINFO <group___cmp_x509_cert_itf_1ga3c68d02fe0dd4e6e6e9ccd17af441981>` pfX509CertStorGetBackendInfo;

- #define :ref:`EXT_X509CertStorGetBackendInfo <group___cmp_x509_cert_itf_1gadb7fc3094e947b40dee00e1d9799414a>` extern :ref:`PFX509CERTSTORGETBACKENDINFO <group___cmp_x509_cert_itf_1ga3c68d02fe0dd4e6e6e9ccd17af441981>` pfX509CertStorGetBackendInfo;

- #define :ref:`GET_X509CertStorGetBackendInfo <group___cmp_x509_cert_itf_1ga630ef92fac1bf990a64d17e4d3df7f05>` s_pfCMGetAPI2( "X509CertStorGetBackendInfo", (RTS_VOID_FCTPTR *)&pfX509CertStorGetBackendInfo, (fl), 0, 0)

- #define :ref:`CAL_X509CertStorGetBackendInfo <group___cmp_x509_cert_itf_1gadba88300db6a2c51fc641a0e36fe6c75>` pfX509CertStorGetBackendInfo

- #define :ref:`CHK_X509CertStorGetBackendInfo <group___cmp_x509_cert_itf_1ga3289f6a266a882110db0960be8b49385>` (pfX509CertStorGetBackendInfo != NULL)

- #define :ref:`EXP_X509CertStorGetBackendInfo <group___cmp_x509_cert_itf_1ga7876b9ea425c0f02449b7a1e5d45ce31>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStorGetBackendInfo", (RTS_UINTPTR) :ref:`X509CertStorGetBackendInfo <group___cmp_x509_cert_itf_1ga8360bf264ada12702cb58854953733c0>` , 0, 0)

- #define :ref:`USE_X509CertCreateSelfSigned <group___cmp_x509_cert_itf_1ga9ad34811ffda46e96ca360766688495e>` :ref:`PFX509CERTCREATESELFSIGNED <group___cmp_x509_cert_itf_1gac535a9348b4d03d2563675d19d669eba>` pfX509CertCreateSelfSigned;

- #define :ref:`EXT_X509CertCreateSelfSigned <group___cmp_x509_cert_itf_1ga4f2a94b9a6794264000b72b250761de0>` extern :ref:`PFX509CERTCREATESELFSIGNED <group___cmp_x509_cert_itf_1gac535a9348b4d03d2563675d19d669eba>` pfX509CertCreateSelfSigned;

- #define :ref:`GET_X509CertCreateSelfSigned <group___cmp_x509_cert_itf_1ga93d5f55fc19f173864a2ce3a8484c777>` s_pfCMGetAPI2( "X509CertCreateSelfSigned", (RTS_VOID_FCTPTR *)&pfX509CertCreateSelfSigned, (fl), 0, 0)

- #define :ref:`CAL_X509CertCreateSelfSigned <group___cmp_x509_cert_itf_1ga70dfa564f92721e2e1a4e8474c889bdc>` pfX509CertCreateSelfSigned

- #define :ref:`CHK_X509CertCreateSelfSigned <group___cmp_x509_cert_itf_1ga87dda0b73453c0db6dfc2fb73e0e7748>` (pfX509CertCreateSelfSigned != NULL)

- #define :ref:`EXP_X509CertCreateSelfSigned <group___cmp_x509_cert_itf_1ga9f1afb44039247c1de88cc808ae94482>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertCreateSelfSigned", (RTS_UINTPTR) :ref:`X509CertCreateSelfSigned <group___cmp_x509_cert_itf_1gaf0d551e9529268467ac55cd5f244166e>` , 0, 0)

- #define :ref:`USE_X509CertCreateSelfSignedAsync <group___cmp_x509_cert_itf_1ga136eaab692349a6c48737b13dd3ac8dc>` :ref:`PFX509CERTCREATESELFSIGNEDASYNC <group___cmp_x509_cert_itf_1gad7b8da1fb8a9125f8fb694738627a47c>` pfX509CertCreateSelfSignedAsync;

- #define :ref:`EXT_X509CertCreateSelfSignedAsync <group___cmp_x509_cert_itf_1gab89477bc6db9ca13c533cca6bea2d14b>` extern :ref:`PFX509CERTCREATESELFSIGNEDASYNC <group___cmp_x509_cert_itf_1gad7b8da1fb8a9125f8fb694738627a47c>` pfX509CertCreateSelfSignedAsync;

- #define :ref:`GET_X509CertCreateSelfSignedAsync <group___cmp_x509_cert_itf_1ga928461f93f142f083acd7ec66747bf44>` s_pfCMGetAPI2( "X509CertCreateSelfSignedAsync", (RTS_VOID_FCTPTR *)&pfX509CertCreateSelfSignedAsync, (fl), 0, 0)

- #define :ref:`CAL_X509CertCreateSelfSignedAsync <group___cmp_x509_cert_itf_1gab4302d917ada69c547affa0b09fe9729>` pfX509CertCreateSelfSignedAsync

- #define :ref:`CHK_X509CertCreateSelfSignedAsync <group___cmp_x509_cert_itf_1ga82f35e2b4894cf789d61da529f8e81f7>` (pfX509CertCreateSelfSignedAsync != NULL)

- #define :ref:`EXP_X509CertCreateSelfSignedAsync <group___cmp_x509_cert_itf_1gac96fb47b00774c43c456382bcfb2350f>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertCreateSelfSignedAsync", (RTS_UINTPTR) :ref:`X509CertCreateSelfSignedAsync <group___cmp_x509_cert_itf_1gafa3352932820f31bffb651567d200f5c>` , 0, 0)

- #define :ref:`USE_X509CertCreateCSR <group___cmp_x509_cert_itf_1ga909832cbaa248fcda28213cdf1a249d0>` :ref:`PFX509CERTCREATECSR <group___cmp_x509_cert_itf_1gad03860c9b5176a645cef05aed51516a5>` pfX509CertCreateCSR;

- #define :ref:`EXT_X509CertCreateCSR <group___cmp_x509_cert_itf_1ga458f70cdf679322337e92066bf33541c>` extern :ref:`PFX509CERTCREATECSR <group___cmp_x509_cert_itf_1gad03860c9b5176a645cef05aed51516a5>` pfX509CertCreateCSR;

- #define :ref:`GET_X509CertCreateCSR <group___cmp_x509_cert_itf_1gaa4cf875cd47786f8795a86a2d6770d78>` s_pfCMGetAPI2( "X509CertCreateCSR", (RTS_VOID_FCTPTR *)&pfX509CertCreateCSR, (fl), 0, 0)

- #define :ref:`CAL_X509CertCreateCSR <group___cmp_x509_cert_itf_1ga969d0c60344b9c6d2afd499580fc24e8>` pfX509CertCreateCSR

- #define :ref:`CHK_X509CertCreateCSR <group___cmp_x509_cert_itf_1ga940fd95afa1b4b1df01acd20a5c2b89d>` (pfX509CertCreateCSR != NULL)

- #define :ref:`EXP_X509CertCreateCSR <group___cmp_x509_cert_itf_1ga93df9fa023612466a6710258eeba2ddb>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertCreateCSR", (RTS_UINTPTR) :ref:`X509CertCreateCSR <group___cmp_x509_cert_itf_1gae352d99fc4f1b840c570aab5d2991caf>` , 0, 0)

- #define :ref:`USE_X509CertCreateCSRAsync <group___cmp_x509_cert_itf_1ga973f16d422d8da0178337e5c1cffd0fb>` :ref:`PFX509CERTCREATECSRASYNC <group___cmp_x509_cert_itf_1ga41e61642d5ed1450216022a368a231e9>` pfX509CertCreateCSRAsync;

- #define :ref:`EXT_X509CertCreateCSRAsync <group___cmp_x509_cert_itf_1ga4b745e533ff57d046323bb56c4617329>` extern :ref:`PFX509CERTCREATECSRASYNC <group___cmp_x509_cert_itf_1ga41e61642d5ed1450216022a368a231e9>` pfX509CertCreateCSRAsync;

- #define :ref:`GET_X509CertCreateCSRAsync <group___cmp_x509_cert_itf_1ga3a8610fb4c0325aafb77e88ab39c25d9>` s_pfCMGetAPI2( "X509CertCreateCSRAsync", (RTS_VOID_FCTPTR *)&pfX509CertCreateCSRAsync, (fl), 0, 0)

- #define :ref:`CAL_X509CertCreateCSRAsync <group___cmp_x509_cert_itf_1gaffa7c395ec010f59f7da6a76c057583c>` pfX509CertCreateCSRAsync

- #define :ref:`CHK_X509CertCreateCSRAsync <group___cmp_x509_cert_itf_1gaa541e676ec99443a3d9c405f7f57729e>` (pfX509CertCreateCSRAsync != NULL)

- #define :ref:`EXP_X509CertCreateCSRAsync <group___cmp_x509_cert_itf_1ga475cbe1f1dd80da4a071d58495ae1379>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertCreateCSRAsync", (RTS_UINTPTR) :ref:`X509CertCreateCSRAsync <group___cmp_x509_cert_itf_1ga11c9602a184532a470c199fe50be7c13>` , 0, 0)

- #define :ref:`USE_X509CertStoreAddCert <group___cmp_x509_cert_itf_1gab35d7efd37fcd96b70717f5e226aa1ed>` :ref:`PFX509CERTSTOREADDCERT <group___cmp_x509_cert_itf_1ga26972c1045b11e622b432beb83e6747d>` pfX509CertStoreAddCert;

- #define :ref:`EXT_X509CertStoreAddCert <group___cmp_x509_cert_itf_1ga0a7b0658c7fd1b8354787adf85ddf86e>` extern :ref:`PFX509CERTSTOREADDCERT <group___cmp_x509_cert_itf_1ga26972c1045b11e622b432beb83e6747d>` pfX509CertStoreAddCert;

- #define :ref:`GET_X509CertStoreAddCert <group___cmp_x509_cert_itf_1gaebb95ece2582007791fba58e9a03f252>` s_pfCMGetAPI2( "X509CertStoreAddCert", (RTS_VOID_FCTPTR *)&pfX509CertStoreAddCert, (fl), 0, 0)

- #define :ref:`CAL_X509CertStoreAddCert <group___cmp_x509_cert_itf_1gad102c287c59c85b689a7ccd4ecdbcbb3>` pfX509CertStoreAddCert

- #define :ref:`CHK_X509CertStoreAddCert <group___cmp_x509_cert_itf_1gaa22d1f850132523caae17043cadc6063>` (pfX509CertStoreAddCert != NULL)

- #define :ref:`EXP_X509CertStoreAddCert <group___cmp_x509_cert_itf_1gab735409916c4241466a8b3a6acad5bf0>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreAddCert", (RTS_UINTPTR) :ref:`X509CertStoreAddCert <group___cmp_x509_cert_itf_1ga01ee2bd1985de5a20ab80cc616d9b6a6>` , 0, 0)

- #define :ref:`USE_X509CertStoreRemoveCert <group___cmp_x509_cert_itf_1gae1a8b21456bd94b5073601c56da5926a>` :ref:`PFX509CERTSTOREREMOVECERT <group___cmp_x509_cert_itf_1gaeb7d60c94f630f089d406ee8954b1597>` pfX509CertStoreRemoveCert;

- #define :ref:`EXT_X509CertStoreRemoveCert <group___cmp_x509_cert_itf_1gae7a858b29b34ec4706293b9b5b0a665e>` extern :ref:`PFX509CERTSTOREREMOVECERT <group___cmp_x509_cert_itf_1gaeb7d60c94f630f089d406ee8954b1597>` pfX509CertStoreRemoveCert;

- #define :ref:`GET_X509CertStoreRemoveCert <group___cmp_x509_cert_itf_1gac8a08a4397c44b9ba2554bea0dd115e6>` s_pfCMGetAPI2( "X509CertStoreRemoveCert", (RTS_VOID_FCTPTR *)&pfX509CertStoreRemoveCert, (fl), 0, 0)

- #define :ref:`CAL_X509CertStoreRemoveCert <group___cmp_x509_cert_itf_1gad9445d169de82daa1461e9b247a6e7ba>` pfX509CertStoreRemoveCert

- #define :ref:`CHK_X509CertStoreRemoveCert <group___cmp_x509_cert_itf_1ga5de00767fba157599c6892b0b7c49c27>` (pfX509CertStoreRemoveCert != NULL)

- #define :ref:`EXP_X509CertStoreRemoveCert <group___cmp_x509_cert_itf_1ga7471ca2e1cadebdcfb0bcd67a9fb82ae>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreRemoveCert", (RTS_UINTPTR) :ref:`X509CertStoreRemoveCert <group___cmp_x509_cert_itf_1ga410f59ca7b7871c9723cc5a82f495382>` , 0, 0)

- #define :ref:`USE_X509CertStoreGetFirstCert <group___cmp_x509_cert_itf_1ga2099ceca29bf10217dd832a9ae846f08>` :ref:`PFX509CERTSTOREGETFIRSTCERT <group___cmp_x509_cert_itf_1gac64fd151130a2c04890c9799e12e3d31>` pfX509CertStoreGetFirstCert;

- #define :ref:`EXT_X509CertStoreGetFirstCert <group___cmp_x509_cert_itf_1ga580e10ee89666f1a0a7b97fc13ba2d0f>` extern :ref:`PFX509CERTSTOREGETFIRSTCERT <group___cmp_x509_cert_itf_1gac64fd151130a2c04890c9799e12e3d31>` pfX509CertStoreGetFirstCert;

- #define :ref:`GET_X509CertStoreGetFirstCert <group___cmp_x509_cert_itf_1gaff8f206af30e268b5d6c89786d825a2e>` s_pfCMGetAPI2( "X509CertStoreGetFirstCert", (RTS_VOID_FCTPTR *)&pfX509CertStoreGetFirstCert, (fl), 0, 0)

- #define :ref:`CAL_X509CertStoreGetFirstCert <group___cmp_x509_cert_itf_1gac5d7135790fce8993aa5c235112f65bf>` pfX509CertStoreGetFirstCert

- #define :ref:`CHK_X509CertStoreGetFirstCert <group___cmp_x509_cert_itf_1ga9c93c07bed766e2bbdcf23d7b4f6c328>` (pfX509CertStoreGetFirstCert != NULL)

- #define :ref:`EXP_X509CertStoreGetFirstCert <group___cmp_x509_cert_itf_1ga89920069c111c7bb318f11ca0bddd80e>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreGetFirstCert", (RTS_UINTPTR) :ref:`X509CertStoreGetFirstCert <group___cmp_x509_cert_itf_1gab3f65d84a84e8839f61eefa0763785de>` , 0, 0)

- #define :ref:`USE_X509CertStoreGetNextCert <group___cmp_x509_cert_itf_1gae20eadca969ba40237180225b5893c1c>` :ref:`PFX509CERTSTOREGETNEXTCERT <group___cmp_x509_cert_itf_1ga42905386cede7dd55bdfd011d639c43e>` pfX509CertStoreGetNextCert;

- #define :ref:`EXT_X509CertStoreGetNextCert <group___cmp_x509_cert_itf_1ga54fdd1dcf64deb8936f7b1695b7f8a45>` extern :ref:`PFX509CERTSTOREGETNEXTCERT <group___cmp_x509_cert_itf_1ga42905386cede7dd55bdfd011d639c43e>` pfX509CertStoreGetNextCert;

- #define :ref:`GET_X509CertStoreGetNextCert <group___cmp_x509_cert_itf_1ga2d16395d64c08c2f406c7d296f0e3fc9>` s_pfCMGetAPI2( "X509CertStoreGetNextCert", (RTS_VOID_FCTPTR *)&pfX509CertStoreGetNextCert, (fl), 0, 0)

- #define :ref:`CAL_X509CertStoreGetNextCert <group___cmp_x509_cert_itf_1gae00be75d563fd581476dd1b9b6454009>` pfX509CertStoreGetNextCert

- #define :ref:`CHK_X509CertStoreGetNextCert <group___cmp_x509_cert_itf_1ga8c782d4e6e6c7cdf52639da63b3fd011>` (pfX509CertStoreGetNextCert != NULL)

- #define :ref:`EXP_X509CertStoreGetNextCert <group___cmp_x509_cert_itf_1ga502f48b4581823dd61b7e1eab21979a5>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreGetNextCert", (RTS_UINTPTR) :ref:`X509CertStoreGetNextCert <group___cmp_x509_cert_itf_1gaa3f612bd6436163892df6ccbf4c3eaf1>` , 0, 0)

- #define :ref:`USE_X509CertStoreRegister <group___cmp_x509_cert_itf_1gaef257db815e421bdf0494899ffac681a>` :ref:`PFX509CERTSTOREREGISTER <group___cmp_x509_cert_itf_1ga6e96b2dd635b88b399ef12c2c1c7d032>` pfX509CertStoreRegister;

- #define :ref:`EXT_X509CertStoreRegister <group___cmp_x509_cert_itf_1gaf30a0920b48f0dad7e1b211630d8dbfe>` extern :ref:`PFX509CERTSTOREREGISTER <group___cmp_x509_cert_itf_1ga6e96b2dd635b88b399ef12c2c1c7d032>` pfX509CertStoreRegister;

- #define :ref:`GET_X509CertStoreRegister <group___cmp_x509_cert_itf_1ga20a3fca6dfcec8088a33ffc9e7e4da48>` s_pfCMGetAPI2( "X509CertStoreRegister", (RTS_VOID_FCTPTR *)&pfX509CertStoreRegister, (fl), 0, 0)

- #define :ref:`CAL_X509CertStoreRegister <group___cmp_x509_cert_itf_1ga22e2af5cae74daad89e0ad7480c60c50>` pfX509CertStoreRegister

- #define :ref:`CHK_X509CertStoreRegister <group___cmp_x509_cert_itf_1ga52c0ea277c42dc5a835d45bd62328599>` (pfX509CertStoreRegister != NULL)

- #define :ref:`EXP_X509CertStoreRegister <group___cmp_x509_cert_itf_1gaf35ed9a6282761fc0ce520d1afb323e1>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreRegister", (RTS_UINTPTR) :ref:`X509CertStoreRegister <group___cmp_x509_cert_itf_1ga10a10dfcd08794eb0825b6812eb2bfda>` , 0, 0)

- #define :ref:`USE_X509CertStoreUnregister <group___cmp_x509_cert_itf_1ga104e250acfbd4bb468983d23ca5a6b18>` :ref:`PFX509CERTSTOREUNREGISTER <group___cmp_x509_cert_itf_1ga149f78936395dc34dc20ffe63bb24341>` pfX509CertStoreUnregister;

- #define :ref:`EXT_X509CertStoreUnregister <group___cmp_x509_cert_itf_1gabba3807e52444d575f408239cc7055e2>` extern :ref:`PFX509CERTSTOREUNREGISTER <group___cmp_x509_cert_itf_1ga149f78936395dc34dc20ffe63bb24341>` pfX509CertStoreUnregister;

- #define :ref:`GET_X509CertStoreUnregister <group___cmp_x509_cert_itf_1gaa075c5141874e6bd2199bbbae9c7e466>` s_pfCMGetAPI2( "X509CertStoreUnregister", (RTS_VOID_FCTPTR *)&pfX509CertStoreUnregister, (fl), 0, 0)

- #define :ref:`CAL_X509CertStoreUnregister <group___cmp_x509_cert_itf_1gaf8164b7eb3fa4c933ee29f23f3da6d60>` pfX509CertStoreUnregister

- #define :ref:`CHK_X509CertStoreUnregister <group___cmp_x509_cert_itf_1ga98958608ca20071e3418475ea6eb3727>` (pfX509CertStoreUnregister != NULL)

- #define :ref:`EXP_X509CertStoreUnregister <group___cmp_x509_cert_itf_1ga00733145afe3c5aef0d807457c1b692c>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreUnregister", (RTS_UINTPTR) :ref:`X509CertStoreUnregister <group___cmp_x509_cert_itf_1ga8545f584011c653ac8baa957d1020bc0>` , 0, 0)

- #define :ref:`USE_X509CertStoreGetRegisteredCert <group___cmp_x509_cert_itf_1gaf1ddecafb7ef1b45def39c673fd396e0>` :ref:`PFX509CERTSTOREGETREGISTEREDCERT <group___cmp_x509_cert_itf_1ga128f64d4cb20d8dbc48392cb266cdc52>` pfX509CertStoreGetRegisteredCert;

- #define :ref:`EXT_X509CertStoreGetRegisteredCert <group___cmp_x509_cert_itf_1ga73fece2076f7e1cf21e56317ca081870>` extern :ref:`PFX509CERTSTOREGETREGISTEREDCERT <group___cmp_x509_cert_itf_1ga128f64d4cb20d8dbc48392cb266cdc52>` pfX509CertStoreGetRegisteredCert;

- #define :ref:`GET_X509CertStoreGetRegisteredCert <group___cmp_x509_cert_itf_1ga9c024650d462a60463cef77a9feb73f2>` s_pfCMGetAPI2( "X509CertStoreGetRegisteredCert", (RTS_VOID_FCTPTR *)&pfX509CertStoreGetRegisteredCert, (fl), 0, 0)

- #define :ref:`CAL_X509CertStoreGetRegisteredCert <group___cmp_x509_cert_itf_1gacd5aef57e33a248392a8b656d6a6941b>` pfX509CertStoreGetRegisteredCert

- #define :ref:`CHK_X509CertStoreGetRegisteredCert <group___cmp_x509_cert_itf_1ga0d65c1d24ed547f872529cc636d1307a>` (pfX509CertStoreGetRegisteredCert != NULL)

- #define :ref:`EXP_X509CertStoreGetRegisteredCert <group___cmp_x509_cert_itf_1ga7cc76bbdcc2cc8dfec1109fd22e8a123>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreGetRegisteredCert", (RTS_UINTPTR) :ref:`X509CertStoreGetRegisteredCert <group___cmp_x509_cert_itf_1ga1d36aa91065172a577af54736687fb4e>` , 0, 0)

- #define :ref:`ITF_CmpX509Cert <group___cmp_x509_cert_itf_1gad93ddb1893238f0723892dc36b8f625b>`

- #define :ref:`EXTITF_CmpX509Cert <group___cmp_x509_cert_itf_1ga5269f11379ab294fbbeb0f02c35726cd>`

Typedefs
--------

- typedef struct :ref:`tagRtsOID <structtag_rts_o_i_d>` :ref:`RtsOID <group___cmp_x509_cert_itf_1gafb230e6dc978609d7aed4d3f75777dd4>`

- typedef struct :ref:`tagRtsX509AltName <structtag_rts_x509_alt_name>` :ref:`RtsX509AltName <group___cmp_x509_cert_itf_1ga6757110f5ba82365ade354bef57d2f0e>`

- typedef struct :ref:`tagRtsX509NameEntry <structtag_rts_x509_name_entry>` :ref:`RtsX509NameEntry <group___cmp_x509_cert_itf_1ga949c43a2f0a07ec7103b293f375cfed3>`

- typedef struct :ref:`tagRtsX509CertName <structtag_rts_x509_cert_name>` :ref:`RtsX509CertName <group___cmp_x509_cert_itf_1ga7471487b9fc63f37d2049e302cefeb2e>`

- typedef struct :ref:`tagRtsX509ExKeyUsage <structtag_rts_x509_ex_key_usage>` :ref:`RtsX509ExKeyUsage <group___cmp_x509_cert_itf_1ga31519dff2498615bbe9dc17755351f33>`

- typedef struct :ref:`tagRtsX509CertFilter <structtag_rts_x509_cert_filter>` :ref:`RtsX509CertFilter <group___cmp_x509_cert_itf_1ga72a12c7d19ffabbf04660a3566a8bda2>`

- typedef struct :ref:`tagRtsX509CertInfo <structtag_rts_x509_cert_info>` :ref:`RtsX509CertInfo <group___cmp_x509_cert_itf_1ga96114d4c034d1905d83ce6d9a53c9a16>`

- typedef void HUGEPTR(* :ref:`PFX509ASYNCCALLBACK <group___cmp_x509_cert_itf_1gad569ed9753952aa901b5c63fc9042d18>`)(X509AsyncResult *pAsyncStruct)

- typedef RTS_HANDLE(* :ref:`PFX509CERTSTOREOPEN <group___cmp_x509_cert_itf_1gab7a81b00f2c785b8f47ee2025ce01b82>`)(CMPID componentID, RTS_RESULT *pResult)

- typedef RTS_RESULT(* :ref:`PFX509CERTSTORECLOSE <group___cmp_x509_cert_itf_1ga40eb369107aa2c60704402e239bf5a40>`)(RTS_HANDLE hCertStore)

- typedef RTS_RESULT(* :ref:`PFX509CERTVERIFY <group___cmp_x509_cert_itf_1ga8afbaadaf51b70475fe986de0a34700b>`)(RTS_HANDLE hCertStore, RTS_HANDLE hCert)

- typedef RTS_HANDLE(* :ref:`PFX509CERTSTORESEARCHGETFIRST <group___cmp_x509_cert_itf_1gad25c649a2db4521f2ffac17f1cc9c4e4>`)(RTS_HANDLE hCertStore, RtsX509CertFilter *pFilters, RTS_UI32 ui32NumOfFilters, RTS_RESULT *pResult)

- typedef RTS_HANDLE(* :ref:`PFX509CERTSTORESEARCHGETNEXT <group___cmp_x509_cert_itf_1ga5c0c4ccac758c678a5e444ff273d8827>`)(RTS_HANDLE hCertStore, RTS_HANDLE hCert, RtsX509CertFilter *pFilters, RTS_UI32 ui32NumOfFilters, RTS_RESULT *pResult)

- typedef RTS_HANDLE(* :ref:`PFX509PARSECERTIFICATE <group___cmp_x509_cert_itf_1gae65e79041b081349b3251fc513f50cca>`)(RtsByteString *pCert, RTS_IEC_INT encoding, RTS_RESULT *pResult)

- typedef RTS_RESULT(* :ref:`PFX509CERTGETCONTENT <group___cmp_x509_cert_itf_1gae45067b6d58118157978b40e9f8c4e6c>`)(RTS_HANDLE hCert, RtsX509CertInfo *pCertContent)

- typedef RTS_RESULT(* :ref:`PFX509CERTGETBINARY <group___cmp_x509_cert_itf_1ga8338a76d7665c2c3b5964adda69c42bb>`)(RTS_HANDLE hCert, RTS_IEC_INT encoding, RtsByteString *pCert)

- typedef RTS_RESULT(* :ref:`PFX509CERTGETPUBLICKEY <group___cmp_x509_cert_itf_1ga2e4dd6d15110702f75e80c00b9fada61>`)(RTS_HANDLE hCert, RtsCryptoKey *pPublicKey)

- typedef RTS_RESULT(* :ref:`PFX509CERTGETPRIVATEKEY <group___cmp_x509_cert_itf_1ga7e06c0bceea9fe176ce73abfbd4dcbe1>`)(RTS_HANDLE hCertStore, RTS_HANDLE hCert, RtsCryptoKey *pPrivateKey)

- typedef RTS_RESULT(* :ref:`PFX509CERTGETTHUMBPRINT <group___cmp_x509_cert_itf_1gac76817489a4a746c21d222041cba2a22>`)(RTS_HANDLE hCert, RTS_IEC_UDINT *hashAlgorithm, RtsByteString *pThumbprint)

- typedef RTS_BOOL(* :ref:`PFX509CERTISDATEVALID <group___cmp_x509_cert_itf_1ga140fed553059cfc2684fddc7eb7e914e>`)(RTS_HANDLE hCert, RTS_RESULT *pResult)

- typedef RTS_BOOL(* :ref:`PFX509CERTISSELFSIGNED <group___cmp_x509_cert_itf_1gaff2d2fbac251ac21c28c29bb44389e6b>`)(RTS_HANDLE hCert, RTS_RESULT *pResult)

- typedef RTS_BOOL(* :ref:`PFX509CERTHASEXTENDEDKEYUSAGE <group___cmp_x509_cert_itf_1ga2de080fd9fc25a734e2565dab7227fad>`)(RTS_HANDLE hCert, RTS_UI32 numOfExKeyUsages, RtsOID *pExKeyUsages, RTS_RESULT *pResult)

- typedef RTS_BOOL(* :ref:`PFX509CERTCHECKHOST <group___cmp_x509_cert_itf_1ga16b595365946bf594d4459b69f1e9dde>`)(RTS_HANDLE hCert, char *pszHostName, RTS_IEC_DWORD flags, RTS_RESULT *pResult)

- typedef RTS_BOOL(* :ref:`PFX509CERTCHECKIP <group___cmp_x509_cert_itf_1gae5596905ef58927522832a82d3273c75>`)(RTS_HANDLE hCert, INADDR *pIP, RTS_IEC_DWORD flags, RTS_RESULT *pResult)

- typedef RTS_BOOL(* :ref:`PFX509CERTCOMPARE <group___cmp_x509_cert_itf_1ga7b66691a59b6ded68753442c3ac2bb80>`)(RTS_HANDLE hCert1, RTS_HANDLE hCert2)

- typedef RTS_RESULT(* :ref:`PFX509CERTKEYCLOSE <group___cmp_x509_cert_itf_1ga9a05413f7a73063cb27f7feb2a971e62>`)(RtsCryptoKey *pKey)

- typedef RTS_RESULT(* :ref:`PFX509CERTCLOSE <group___cmp_x509_cert_itf_1ga8d049a389301ab17c65af5569b455898>`)(RTS_HANDLE hCert)

- typedef RTS_RESULT(* :ref:`PFX509CERTCMSVERIFY <group___cmp_x509_cert_itf_1ga707397f107a100c3b7ed7612950cde87>`)(RTS_HANDLE hCertStore, RtsByteString *pCms, RTS_IEC_INT encoding, RtsByteString *pInData, RtsByteString *pOutData)

- typedef RTS_RESULT(* :ref:`PFX509CERTCMSVERIFY2 <group___cmp_x509_cert_itf_1ga9acb20a8951234ef297e07bb3401cc84>`)(RTS_HANDLE hCertStore, RtsByteString *pCms, RTS_IEC_INT encoding, RtsByteString *pInData, RtsByteString *pOutData, RTS_HANDLE *phSignerCert)

- typedef RTS_RESULT(* :ref:`PFX509CERTCMSDECRYPT <group___cmp_x509_cert_itf_1ga4d133108f9033cb0cede3d402e8ddf3b>`)(RTS_HANDLE hCertStore, RTS_HANDLE hRecipientCert, RtsByteString *pCms, RTS_IEC_INT encoding, RtsByteString *pOutData)

- typedef RTS_RESULT(* :ref:`PFRTSOIDCREATE <group___cmp_x509_cert_itf_1ga27d1a1cb963d55ae906a31ad7ffa97d8>`)(char *id, RtsOID *oid)

- typedef RTS_RESULT(* :ref:`PFRTSOIDGETID <group___cmp_x509_cert_itf_1ga00502aab48f5e8615dee6f89d6f22c0b>`)(RtsOID *oid, RtsByteString *pBuffer)

- typedef RTS_RESULT(* :ref:`PFRTSOIDGETNAME <group___cmp_x509_cert_itf_1ga429f925c0556a712d25f4f40c509f635>`)(RtsOID *oid, RtsByteString *pBuffer)

- typedef RTS_RESULT(* :ref:`PFRTSOIDCLEAR <group___cmp_x509_cert_itf_1gaab49590157ad26f28011d019b2c270cc>`)(RtsOID *oid)

- typedef RTS_RESULT(* :ref:`PFX509CERTINFOINIT <group___cmp_x509_cert_itf_1ga4ef74ec02f9e0d1bd2e35d1ac46dee6a>`)(RtsX509CertInfo *pCertInfo, RTS_UI32 structSize)

- typedef RTS_RESULT(* :ref:`PFX509CERTINFOEXIT <group___cmp_x509_cert_itf_1ga89cd7545e0bbe8f7bae84acfa4b492f7>`)(RtsX509CertInfo *pCertInfo)

- typedef RTS_HANDLE(* :ref:`PFX509CERTSTOREGETFIRSTBACKEND <group___cmp_x509_cert_itf_1ga6c85652e227ad4b48aa674e5a350260a>`)(RTS_HANDLE hCertStore, RtsCertBackendInfo *pInfo, RTS_RESULT *pResult)

- typedef RTS_HANDLE(* :ref:`PFX509CERTSTOREGETNEXTBACKEND <group___cmp_x509_cert_itf_1gabeb02c311eaedfe2b565c7606ab9a58d>`)(RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RtsCertBackendInfo *pInfo, RTS_RESULT *pResult)

- typedef RTS_RESULT(* :ref:`PFX509CERTSTORGETBACKENDINFO <group___cmp_x509_cert_itf_1ga3c68d02fe0dd4e6e6e9ccd17af441981>`)(RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RtsCertBackendInfo *pInfo)

- typedef RTS_HANDLE(* :ref:`PFX509CERTCREATESELFSIGNED <group___cmp_x509_cert_itf_1gac535a9348b4d03d2563675d19d669eba>`)(RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RtsX509CertInfo *pCertInfo, RTS_UI32 ui32KeySize, RTS_RESULT *pResult)

- typedef RTS_RESULT(* :ref:`PFX509CERTCREATESELFSIGNEDASYNC <group___cmp_x509_cert_itf_1gad7b8da1fb8a9125f8fb694738627a47c>`)(RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RtsX509CertInfo *pCertInfo, RTS_UI32 ui32KeySize, void *pCallbackParam, PFX509ASYNCCALLBACK pfCallback)

- typedef RTS_RESULT(* :ref:`PFX509CERTCREATECSR <group___cmp_x509_cert_itf_1gad03860c9b5176a645cef05aed51516a5>`)(RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RtsX509CertInfo *pCertInfo, RTS_UI32 ui32KeySize, RTS_IEC_INT encoding, RtsByteString *pCSR)

- typedef RTS_RESULT(* :ref:`PFX509CERTCREATECSRASYNC <group___cmp_x509_cert_itf_1ga41e61642d5ed1450216022a368a231e9>`)(RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RtsX509CertInfo *pCertInfo, CMPID cmpID, RTS_UI32 ui32KeySize, RTS_IEC_INT encoding, RtsByteString *pCSR, void *pCallbackParam, PFX509ASYNCCALLBACK pfCallback)

- typedef RTS_RESULT(* :ref:`PFX509CERTSTOREADDCERT <group___cmp_x509_cert_itf_1ga26972c1045b11e622b432beb83e6747d>`)(RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RTS_HANDLE hCert, RTS_IEC_INT trustLevel)

- typedef RTS_RESULT(* :ref:`PFX509CERTSTOREREMOVECERT <group___cmp_x509_cert_itf_1gaeb7d60c94f630f089d406ee8954b1597>`)(RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RTS_HANDLE hCert, RTS_BOOL bRemovePrivateKey)

- typedef RTS_HANDLE(* :ref:`PFX509CERTSTOREGETFIRSTCERT <group___cmp_x509_cert_itf_1gac64fd151130a2c04890c9799e12e3d31>`)(RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RTS_IEC_INT trustLevel, RTS_RESULT *pResult)

- typedef RTS_HANDLE(* :ref:`PFX509CERTSTOREGETNEXTCERT <group___cmp_x509_cert_itf_1ga42905386cede7dd55bdfd011d639c43e>`)(RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RTS_HANDLE hCert, RTS_RESULT *pResult)

- typedef RTS_HANDLE(* :ref:`PFX509CERTSTOREREGISTER <group___cmp_x509_cert_itf_1ga6e96b2dd635b88b399ef12c2c1c7d032>`)(RTS_HANDLE hCertStore, CMPID cmpID, RtsX509CertInfo *pCertInfo, RTS_RESULT *pResult)

- typedef RTS_RESULT(* :ref:`PFX509CERTSTOREUNREGISTER <group___cmp_x509_cert_itf_1ga149f78936395dc34dc20ffe63bb24341>`)(RTS_HANDLE hCertStore, RTS_HANDLE hRegisteredComponent)

- typedef RTS_HANDLE(* :ref:`PFX509CERTSTOREGETREGISTEREDCERT <group___cmp_x509_cert_itf_1ga128f64d4cb20d8dbc48392cb266cdc52>`)(RTS_HANDLE hCertStore, RTS_HANDLE hUseCase, RTS_RESULT *pResult)

- typedef :ref:`ICmpX509Cert_C <struct_i_cmp_x509_cert___c>` :ref:`ICmpX509Cert <group___cmp_x509_cert_itf_1gaf47ff42ad940ed3f43064a69215725a3>`

Functions
---------

- RTS_HANDLE :ref:`X509CertStoreOpen <group___cmp_x509_cert_itf_1ga75d8838de2919b5b7db4c88141ace8c0>` (CMPID componentID, RTS_RESULT * pResult)

- RTS_RESULT :ref:`X509CertStoreClose <group___cmp_x509_cert_itf_1ga670dba71e49a37089b53439b45a23064>` (RTS_HANDLE hCertStore)

- RTS_RESULT :ref:`X509CertVerify <group___cmp_x509_cert_itf_1gad3e090ee6285c58ce8ea984b25dd333c>` (RTS_HANDLE hCertStore, RTS_HANDLE hCert)

- RTS_HANDLE :ref:`X509CertStoreSearchGetFirst <group___cmp_x509_cert_itf_1ga14cf964ec8c011bca148bf6a399a5f26>` (RTS_HANDLE hCertStore, :ref:`RtsX509CertFilter <group___cmp_x509_cert_itf_1ga72a12c7d19ffabbf04660a3566a8bda2>` * pFilters, RTS_UI32 ui32NumOfFilters, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`X509CertStoreSearchGetNext <group___cmp_x509_cert_itf_1ga66abcdf7c88f2139ce6388e8572230e4>` (RTS_HANDLE hCertStore, RTS_HANDLE hCert, :ref:`RtsX509CertFilter <group___cmp_x509_cert_itf_1ga72a12c7d19ffabbf04660a3566a8bda2>` * pFilters, RTS_UI32 ui32NumOfFilters, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`X509ParseCertificate <group___cmp_x509_cert_itf_1gadeafc6baa4fecf1fb07343263e76b28d>` (:ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pCert, RTS_IEC_INT encoding, RTS_RESULT * pResult)

- RTS_RESULT :ref:`X509CertGetContent <group___cmp_x509_cert_itf_1ga172a5866f360d2e20a34e96f7983528a>` (RTS_HANDLE hCert, :ref:`RtsX509CertInfo <group___cmp_x509_cert_itf_1ga96114d4c034d1905d83ce6d9a53c9a16>` * pCertContent)

- RTS_RESULT :ref:`X509CertGetBinary <group___cmp_x509_cert_itf_1gaf053757a0a41a49ece6bd519057e2aaa>` (RTS_HANDLE hCert, RTS_IEC_INT encoding, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pCert)

- RTS_RESULT :ref:`X509CertGetPublicKey <group___cmp_x509_cert_itf_1ga5452515ba0aea6615442a218ea5ecd4a>` (RTS_HANDLE hCert, :ref:`RtsCryptoKey <group___cmp_crypto_itf_1ga9eda126f6497b16d886d8c2fae345687>` * pPublicKey)

- RTS_RESULT :ref:`X509CertGetPrivateKey <group___cmp_x509_cert_itf_1gabe3af57c59a534fb6da79f9c82c107c9>` (RTS_HANDLE hCertStore, RTS_HANDLE hCert, :ref:`RtsCryptoKey <group___cmp_crypto_itf_1ga9eda126f6497b16d886d8c2fae345687>` * pPrivateKey)

- RTS_RESULT :ref:`X509CertGetThumbprint <group___cmp_x509_cert_itf_1ga25a47310606b897e9b3e0ddae44711aa>` (RTS_HANDLE hCert, RTS_IEC_UDINT * hashAlgorithm, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pThumbprint)

- RTS_BOOL :ref:`X509CertIsDateValid <group___cmp_x509_cert_itf_1ga57995c547a18717e3961ddd81ed68fb0>` (RTS_HANDLE hCert, RTS_RESULT * pResult)

- RTS_BOOL :ref:`X509CertIsSelfSigned <group___cmp_x509_cert_itf_1gafa046a2b2f200b74e5d7a663e8708b94>` (RTS_HANDLE hCert, RTS_RESULT * pResult)

- RTS_BOOL :ref:`X509CertHasExtendedKeyUsage <group___cmp_x509_cert_itf_1ga1487ed9be97f1b084fc827c0ff465da5>` (RTS_HANDLE hCert, RTS_UI32 numOfExKeyUsages, :ref:`RtsOID <group___cmp_x509_cert_itf_1gafb230e6dc978609d7aed4d3f75777dd4>` * pExKeyUsages, RTS_RESULT * pResult)

- RTS_BOOL :ref:`X509CertCheckHost <group___cmp_x509_cert_itf_1gaa6bbabab8cf710d40ba86cac31027d5b>` (RTS_HANDLE hCert, char * pszHostName, RTS_IEC_DWORD flags, RTS_RESULT * pResult)

- RTS_BOOL :ref:`X509CertCheckIP <group___cmp_x509_cert_itf_1ga4bb6ea9259e818f14826c0a7bd8fce3a>` (RTS_HANDLE hCert, :ref:`INADDR <struct_i_n_a_d_d_r>` * pIP, RTS_IEC_DWORD flags, RTS_RESULT * pResult)

- RTS_BOOL :ref:`X509CertCompare <group___cmp_x509_cert_itf_1gab62fd9ded8c386c918f4ae84c1d0bf07>` (RTS_HANDLE hCert1, RTS_HANDLE hCert2)

- RTS_RESULT :ref:`X509CertKeyClose <group___cmp_x509_cert_itf_1ga9c29c73230e4f790ea6563c6df6b925a>` (:ref:`RtsCryptoKey <group___cmp_crypto_itf_1ga9eda126f6497b16d886d8c2fae345687>` * pKey)

- RTS_RESULT :ref:`X509CertClose <group___cmp_x509_cert_itf_1ga073da3edef2ddc44f45739da81f78394>` (RTS_HANDLE hCert)

- RTS_RESULT :ref:`X509CertCmsVerify <group___cmp_x509_cert_itf_1ga6b51c3dc63aea1ca5cb8c2d203cbb396>` (RTS_HANDLE hCertStore, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pCms, RTS_IEC_INT encoding, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pInData, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pOutData)

- RTS_RESULT :ref:`X509CertCmsVerify2 <group___cmp_x509_cert_itf_1gab509b5e8a4e99afa871f6ff22d29b342>` (RTS_HANDLE hCertStore, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pCms, RTS_IEC_INT encoding, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pInData, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pOutData, RTS_HANDLE * phSignerCert)

- RTS_RESULT :ref:`X509CertCmsDecrypt <group___cmp_x509_cert_itf_1gaebc8225f7eb1f386c6e24732d53494ec>` (RTS_HANDLE hCertStore, RTS_HANDLE hRecipientCert, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pCms, RTS_IEC_INT encoding, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pOutData)

- RTS_RESULT :ref:`RtsOIDCreate <group___cmp_x509_cert_itf_1gac62d802c208e5937b00033c2288b0c63>` (char * id, :ref:`RtsOID <group___cmp_x509_cert_itf_1gafb230e6dc978609d7aed4d3f75777dd4>` * oid)

- RTS_RESULT :ref:`RtsOIDGetID <group___cmp_x509_cert_itf_1gaff3a425033e2d1a475c6623f99829d1b>` (:ref:`RtsOID <group___cmp_x509_cert_itf_1gafb230e6dc978609d7aed4d3f75777dd4>` * oid, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pBuffer)

- RTS_RESULT :ref:`RtsOIDGetName <group___cmp_x509_cert_itf_1ga9ba84f61b9c3fe5b6ae35f1c11b1e74a>` (:ref:`RtsOID <group___cmp_x509_cert_itf_1gafb230e6dc978609d7aed4d3f75777dd4>` * oid, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pBuffer)

- RTS_RESULT :ref:`RtsOIDClear <group___cmp_x509_cert_itf_1ga370f2a84924e0202d6f3024d054569f0>` (:ref:`RtsOID <group___cmp_x509_cert_itf_1gafb230e6dc978609d7aed4d3f75777dd4>` * oid)

- RTS_RESULT :ref:`X509CertInfoInit <group___cmp_x509_cert_itf_1gaf9347f6b295ddc43ae39c26b15c0299a>` (:ref:`RtsX509CertInfo <group___cmp_x509_cert_itf_1ga96114d4c034d1905d83ce6d9a53c9a16>` * pCertInfo, RTS_UI32 structSize)

- RTS_RESULT :ref:`X509CertInfoExit <group___cmp_x509_cert_itf_1gaa11dd819381e15b7a5e0b414c728b32f>` (:ref:`RtsX509CertInfo <group___cmp_x509_cert_itf_1ga96114d4c034d1905d83ce6d9a53c9a16>` * pCertInfo)

- RTS_HANDLE :ref:`X509CertStoreGetFirstBackend <group___cmp_x509_cert_itf_1gad0be785fbf9846773eabd0db2b8bc493>` (RTS_HANDLE hCertStore, :ref:`RtsCertBackendInfo <group___cmp_x509_cert_itf___object_identifiers_1ga11dd55c6d85ce9e9bcbf5c54f7eae7be>` * pInfo, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`X509CertStoreGetNextBackend <group___cmp_x509_cert_itf_1gacb16b89ed74609c7fe1afe511e0ea733>` (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, :ref:`RtsCertBackendInfo <group___cmp_x509_cert_itf___object_identifiers_1ga11dd55c6d85ce9e9bcbf5c54f7eae7be>` * pInfo, RTS_RESULT * pResult)

- RTS_RESULT :ref:`X509CertStorGetBackendInfo <group___cmp_x509_cert_itf_1ga8360bf264ada12702cb58854953733c0>` (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, :ref:`RtsCertBackendInfo <group___cmp_x509_cert_itf___object_identifiers_1ga11dd55c6d85ce9e9bcbf5c54f7eae7be>` * pInfo)

- RTS_HANDLE :ref:`X509CertCreateSelfSigned <group___cmp_x509_cert_itf_1gaf0d551e9529268467ac55cd5f244166e>` (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, :ref:`RtsX509CertInfo <group___cmp_x509_cert_itf_1ga96114d4c034d1905d83ce6d9a53c9a16>` * pCertInfo, RTS_UI32 ui32KeySize, RTS_RESULT * pResult)

- RTS_RESULT :ref:`X509CertCreateSelfSignedAsync <group___cmp_x509_cert_itf_1gafa3352932820f31bffb651567d200f5c>` (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, :ref:`RtsX509CertInfo <group___cmp_x509_cert_itf_1ga96114d4c034d1905d83ce6d9a53c9a16>` * pCertInfo, RTS_UI32 ui32KeySize, void * pCallbackParam, :ref:`PFX509ASYNCCALLBACK <group___cmp_x509_cert_itf_1gad569ed9753952aa901b5c63fc9042d18>`  pfCallback)

- RTS_RESULT :ref:`X509CertCreateCSR <group___cmp_x509_cert_itf_1gae352d99fc4f1b840c570aab5d2991caf>` (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, :ref:`RtsX509CertInfo <group___cmp_x509_cert_itf_1ga96114d4c034d1905d83ce6d9a53c9a16>` * pCertInfo, RTS_UI32 ui32KeySize, RTS_IEC_INT encoding, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pCSR)

- RTS_RESULT :ref:`X509CertCreateCSRAsync <group___cmp_x509_cert_itf_1ga11c9602a184532a470c199fe50be7c13>` (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, :ref:`RtsX509CertInfo <group___cmp_x509_cert_itf_1ga96114d4c034d1905d83ce6d9a53c9a16>` * pCertInfo, CMPID cmpID, RTS_UI32 ui32KeySize, RTS_IEC_INT encoding, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pCSR, void * pCallbackParam, :ref:`PFX509ASYNCCALLBACK <group___cmp_x509_cert_itf_1gad569ed9753952aa901b5c63fc9042d18>`  pfCallback)

- RTS_RESULT :ref:`X509CertStoreAddCert <group___cmp_x509_cert_itf_1ga01ee2bd1985de5a20ab80cc616d9b6a6>` (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RTS_HANDLE hCert, RTS_IEC_INT trustLevel)

- RTS_RESULT :ref:`X509CertStoreRemoveCert <group___cmp_x509_cert_itf_1ga410f59ca7b7871c9723cc5a82f495382>` (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RTS_HANDLE hCert, RTS_BOOL bRemovePrivateKey)

- RTS_HANDLE :ref:`X509CertStoreGetFirstCert <group___cmp_x509_cert_itf_1gab3f65d84a84e8839f61eefa0763785de>` (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RTS_IEC_INT trustLevel, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`X509CertStoreGetNextCert <group___cmp_x509_cert_itf_1gaa3f612bd6436163892df6ccbf4c3eaf1>` (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RTS_HANDLE hCert, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`X509CertStoreRegister <group___cmp_x509_cert_itf_1ga10a10dfcd08794eb0825b6812eb2bfda>` (RTS_HANDLE hCertStore, CMPID cmpID, :ref:`RtsX509CertInfo <group___cmp_x509_cert_itf_1ga96114d4c034d1905d83ce6d9a53c9a16>` * pCertInfo, RTS_RESULT * pResult)

- RTS_RESULT :ref:`X509CertStoreUnregister <group___cmp_x509_cert_itf_1ga8545f584011c653ac8baa957d1020bc0>` (RTS_HANDLE hCertStore, RTS_HANDLE hRegisteredComponent)

- RTS_HANDLE :ref:`X509CertStoreGetRegisteredCert <group___cmp_x509_cert_itf_1ga1d36aa91065172a577af54736687fb4e>` (RTS_HANDLE hCertStore, RTS_HANDLE hUseCase, RTS_RESULT * pResult)

Macro Definition Documentation
------------------------------
.. _group___cmp_x509_cert_itf_1ga991b92ffd3bcb0a4b72b2ceece3002cb:

#define RTSCERTENCODING_ASN1 RTS_IEC_INT_C(0x0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EXTERN LIB SECTION BEGIN

Enum: RtsCertEncoding

.. _group___cmp_x509_cert_itf_1ga553dcf0bf1d0879d38eb9bb3de39dec2:

#define RTSCERTENCODING_BASE64 RTS_IEC_INT_C(0x1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga2b92ffb2a28f5b1fd9fe9d73bdc1197a:

#define RTSCERTENCODING RTS_IEC_INT
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga89f6364a9b9db3f25ab394c220442c8c:

#define RTSCERTTRUSTLEVEL_UNTRUSTED RTS_IEC_INT_C(0x1)	/* This is the location for untrusted certificates. */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The trusted level has two main meanings: 1. In opened certificates it indicates if the certificate is trusted or not 2. If adding or searching certificates in the store it indicates where to add / search the certificate.

.. _group___cmp_x509_cert_itf_1ga49ca7ac8bd6ad56c971887af60dadacb:

#define RTSCERTTRUSTLEVEL_TRUSTED RTS_IEC_INT_C(0x2)	/* This is the location for trusted CA or self signed certificates. */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga589f1a935b7f6a1050cbc02059580684:

#define RTSCERTTRUSTLEVEL_OWN RTS_IEC_INT_C(0x3)	/* This is the location for certificates used by the PLC. The private key of these certificates is available. */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga5a83ed93c6295deb2b74d3a953277ae3:

#define RTSCERTTRUSTLEVEL_QUARANTINE RTS_IEC_INT_C(0x4)	/* This location contains certificates which could not be verified because of missing chains. */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaaef007b2a5f75365176886ffe671e40d:

#define RTSCERTTRUSTLEVEL_UNKNOWN RTS_IEC_INT_C(0x5)	/* This is the default for certificates which are not in one of the other stores. Usually this is set when parsing a certificate. */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaccec630f0164074b49f0fe95acd8ec6d:

#define RTSCERTTRUSTLEVEL_CHAIN
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Value:**

.. parsed-literal::

    RTS_IEC_INT_C(0x6)	/* This location contains chain certificates. These certificates are not
trusted but used to build up a chain up to one of the certificates placed
in trusted. This is the only store which is local to each opened certificate
store. Also adding certificates to this trust level is not persistent. The
typical use case is to add chain-certificates received from the communication
peer in case of an own protocol implementation. For TLS connection this is done
automatically. Due this use-case, the capabilities of this store are somewhat
limited. It is not possible to iterate or filter certificates on this store.
Explicit removal of certificates is supported with X509CertStoreRemoveCert.
The store is automatically clean up on X509CertStoreClose. */

.. _group___cmp_x509_cert_itf_1ga86a9f95f0345dc8f100a23d51069e796:

#define RTSCERTTRUSTLEVEL RTS_IEC_INT
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga6710183e103419296c76821bdba6e057:

#define RTSX509ALTNAMETYPE_OTHERNAME RTS_IEC_INT_C(0x0)	/* Not supported */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Enum: RtsX509AltNameType

.. _group___cmp_x509_cert_itf_1ga8d82b6e2e1d9ff35eeca6f2bbe32eff2:

#define RTSX509ALTNAMETYPE_EMAIL RTS_IEC_INT_C(0x1)	/* Supported */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gad2a7d7867735308420266add0adc330d:

#define RTSX509ALTNAMETYPE_DNSNAME RTS_IEC_INT_C(0x2)	/* Supported */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga0d19b0b3f51f5d3406ee862a78e6d7a6:

#define RTSX509ALTNAMETYPE_X400ADDRESS RTS_IEC_INT_C(0x3)	/* Not supported */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaf0c10f43ec7b43c8d77c4af6cea0bf71:

#define RTSX509ALTNAMETYPE_DIRECTORYNAME RTS_IEC_INT_C(0x4)	/* Not supported */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga9f1ece282dfa84aba881472a05374fe8:

#define RTSX509ALTNAMETYPE_EDIPARTYNAME RTS_IEC_INT_C(0x5)	/* Not supported */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga27786f665fb8286bd1716a5853d876c1:

#define RTSX509ALTNAMETYPE_URI RTS_IEC_INT_C(0x6)	/* Supported */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gac4e6423a321b539e67c538edd20acaca:

#define RTSX509ALTNAMETYPE_IPADDRESS RTS_IEC_INT_C(0x7)	/* Supported */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaa47105523bad40018be74493c62d9bae:

#define RTSX509ALTNAMETYPE_REGISTERDID RTS_IEC_INT_C(0x8)	/* Supported */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga34dedaed91e5459fe8b88ae07e5665f0:

#define RTSX509ALTNAMETYPE RTS_IEC_INT
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaadf345445ec9b8881fe25d852bc99e43:

#define RTSX509CERTCHECKFLAGS_FORCE_SUBJECT RTS_IEC_DWORD_C(0x1)	/* Forces that the host-name / IP address is part of certificate subject. Otherwise part of subject alternative name is accepted. */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Enumeration: RtsX509CertCheckFlags

.. _group___cmp_x509_cert_itf_1ga11c11f10c3c8ede9f8856dd40e41b886:

#define RTSX509CERTCHECKFLAGS_DISABLE_WILDCARDS RTS_IEC_DWORD_C(0x2)	/* Disable support for wild-card checking. *.example.com in a certificate is NOT accepted. Only FOR X509CertCheckHost. */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gacad268499a6c974a098a1b100823d0b1:

#define RTSX509CERTCHECKFLAGS_DISABLE_PARTIAL_WILDCARDS RTS_IEC_DWORD_C(0x4)	/* Disable support FOR partial wild card checking. ww*.example.com OR *ww.example.com. Only FOR X509CertCheckHost. */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gad78149e5ba73800019c231093121ed9f:

#define RTSX509CERTCHECKFLAGS_ALLOW_MULTILABLE_WILDCARDS RTS_IEC_DWORD_C(0x8)	/* Allow that wild-cards replace multiple sub domains. *.example.com will accept www.SUB.example.com. Only FOR X509CertCheckHost. */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga4490ab5fef6bc4dded4753e8bfcdcdb5:

#define RTSX509CERTCHECKFLAGS_FORCE_SINGLE_SUBDOMAIN RTS_IEC_DWORD_C(0x10)	/* Forces that .example.com will only accept a single sub domain e.f. SUB.example.com, but NOT www.SUB.example.com. Only FOR X509CertCheckHost. */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga095e163a941a55797191ce147edfb7ef:

#define RTSX509CERTCHECKFLAGS RTS_IEC_DWORD
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga97ace9c8212fa405162abd5015b2edd1:

#define RTSX509CERTFILTERTYPE_TRUST_LEVEL RTS_IEC_INT_C(0x0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Enumeration: RtsX509CertFilterType

.. _group___cmp_x509_cert_itf_1ga9a675b3166bd6166596202361bf86649:

#define RTSX509CERTFILTERTYPE_SUBJECT RTS_IEC_INT_C(0x1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaa3ff13c9a299e6ccd9f7cbe1afb3e188:

#define RTSX509CERTFILTERTYPE_SUBJECT_MATCHALL RTS_IEC_INT_C(0x2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gac7b31ce4ddfac3ac0e6cc7f5a65666fd:

#define RTSX509CERTFILTERTYPE_CERT_DATEVALID RTS_IEC_INT_C(0x3)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga2ea9b2e7c3ad29968a8d0d0a9615d7ee:

#define RTSX509CERTFILTERTYPE_CERT_KEYUSAGE RTS_IEC_INT_C(0x4)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaab202d9e5acaac9ef6f1afe50e6cfa3f:

#define RTSX509CERTFILTERTYPE_CERT_EXKEYUSAGE RTS_IEC_INT_C(0x5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga397b6bf8f86f99d29b1a3e94b92e66f2:

#define RTSX509CERTFILTERTYPE_CERT_THUMBPRINT RTS_IEC_INT_C(0x6)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gac0a940a207e99d841b157b5abdacd067:

#define RTSX509CERTFILTERTYPE RTS_IEC_INT
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gab0c3674136331ef3d08683692ebdf477:

#define CMPX509CERT_ASYNC_FUNCTION_CREATESELFSIGNED 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gae389919c688154c0cbb5452d1507550c:

#define CMPX509CERT_ASYNC_FUNCTION_CREATECSR 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga080129979894397904324fc2332a0d02:

#define USE_X509CertStoreOpen :ref:`PFX509CERTSTOREOPEN <group___cmp_x509_cert_itf_1gab7a81b00f2c785b8f47ee2025ce01b82>` pfX509CertStoreOpen;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga941fdf0aab9e45b9c350c9e8d7743dff:

#define EXT_X509CertStoreOpen extern :ref:`PFX509CERTSTOREOPEN <group___cmp_x509_cert_itf_1gab7a81b00f2c785b8f47ee2025ce01b82>` pfX509CertStoreOpen;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gac80aa887fc1c4cc55b597ec601883913:

#define GET_X509CertStoreOpen s_pfCMGetAPI2( "X509CertStoreOpen", (RTS_VOID_FCTPTR *)&pfX509CertStoreOpen, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga140590d98726ddc9caf3fa6f50305fd7:

#define CAL_X509CertStoreOpen pfX509CertStoreOpen
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga6e130b08d895dbde862031d991fe6150:

#define CHK_X509CertStoreOpen (pfX509CertStoreOpen != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gadf2f3e1b34a71a6f62954ff7562da7f1:

#define EXP_X509CertStoreOpen s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreOpen", (RTS_UINTPTR) :ref:`X509CertStoreOpen <group___cmp_x509_cert_itf_1ga75d8838de2919b5b7db4c88141ace8c0>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga97cc30b0f8900262ece63eeed7df9c5d:

#define USE_X509CertStoreClose :ref:`PFX509CERTSTORECLOSE <group___cmp_x509_cert_itf_1ga40eb369107aa2c60704402e239bf5a40>` pfX509CertStoreClose;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga0a3559b323e280baf7b5298bd968da71:

#define EXT_X509CertStoreClose extern :ref:`PFX509CERTSTORECLOSE <group___cmp_x509_cert_itf_1ga40eb369107aa2c60704402e239bf5a40>` pfX509CertStoreClose;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gae541444d3608daf57981614eab7a3b9d:

#define GET_X509CertStoreClose s_pfCMGetAPI2( "X509CertStoreClose", (RTS_VOID_FCTPTR *)&pfX509CertStoreClose, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gad33cdc9ac0b7490192a3d65a9ec3dfc1:

#define CAL_X509CertStoreClose pfX509CertStoreClose
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaa0bc18c1158eea54666744b8cc8c4e9a:

#define CHK_X509CertStoreClose (pfX509CertStoreClose != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gae3588f45562ab543d8431015a618eb4b:

#define EXP_X509CertStoreClose s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreClose", (RTS_UINTPTR) :ref:`X509CertStoreClose <group___cmp_x509_cert_itf_1ga670dba71e49a37089b53439b45a23064>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaf0c3b5124c2b1b04c2c42e9eeb00ee4e:

#define USE_X509CertVerify :ref:`PFX509CERTVERIFY <group___cmp_x509_cert_itf_1ga8afbaadaf51b70475fe986de0a34700b>` pfX509CertVerify;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga506de8fa13459a00aeb7f40bc57aadb3:

#define EXT_X509CertVerify extern :ref:`PFX509CERTVERIFY <group___cmp_x509_cert_itf_1ga8afbaadaf51b70475fe986de0a34700b>` pfX509CertVerify;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaadcb3e3a88f6612710b25fbaa13c992b:

#define GET_X509CertVerify s_pfCMGetAPI2( "X509CertVerify", (RTS_VOID_FCTPTR *)&pfX509CertVerify, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gad5c499ec6d367558639c3f59b934b8f5:

#define CAL_X509CertVerify pfX509CertVerify
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga1294b43ec6d6b446b388f7e00f7f5fe7:

#define CHK_X509CertVerify (pfX509CertVerify != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gac8d19bd01d2daa456e7cbad1597dc777:

#define EXP_X509CertVerify s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertVerify", (RTS_UINTPTR) :ref:`X509CertVerify <group___cmp_x509_cert_itf_1gad3e090ee6285c58ce8ea984b25dd333c>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gacbade46029ac9b4c20e86ab89298fc15:

#define USE_X509CertStoreSearchGetFirst :ref:`PFX509CERTSTORESEARCHGETFIRST <group___cmp_x509_cert_itf_1gad25c649a2db4521f2ffac17f1cc9c4e4>` pfX509CertStoreSearchGetFirst;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gac6fb563f71fb2eac1f28f47184749b20:

#define EXT_X509CertStoreSearchGetFirst extern :ref:`PFX509CERTSTORESEARCHGETFIRST <group___cmp_x509_cert_itf_1gad25c649a2db4521f2ffac17f1cc9c4e4>` pfX509CertStoreSearchGetFirst;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga48ad144f0816f9e32729af66f90c9125:

#define GET_X509CertStoreSearchGetFirst s_pfCMGetAPI2( "X509CertStoreSearchGetFirst", (RTS_VOID_FCTPTR *)&pfX509CertStoreSearchGetFirst, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaee687115787a10af18088a539e0076e0:

#define CAL_X509CertStoreSearchGetFirst pfX509CertStoreSearchGetFirst
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga3534b1b75b344bdbca338c935d6a4116:

#define CHK_X509CertStoreSearchGetFirst (pfX509CertStoreSearchGetFirst != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gac03aef67e63a01a7fb28340fbae144c6:

#define EXP_X509CertStoreSearchGetFirst s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreSearchGetFirst", (RTS_UINTPTR) :ref:`X509CertStoreSearchGetFirst <group___cmp_x509_cert_itf_1ga14cf964ec8c011bca148bf6a399a5f26>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gad0837b56ce3f5f5e535c66df8459012b:

#define USE_X509CertStoreSearchGetNext :ref:`PFX509CERTSTORESEARCHGETNEXT <group___cmp_x509_cert_itf_1ga5c0c4ccac758c678a5e444ff273d8827>` pfX509CertStoreSearchGetNext;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga3a73548547d1ff0d9d494f4dcb90eec8:

#define EXT_X509CertStoreSearchGetNext extern :ref:`PFX509CERTSTORESEARCHGETNEXT <group___cmp_x509_cert_itf_1ga5c0c4ccac758c678a5e444ff273d8827>` pfX509CertStoreSearchGetNext;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga9fb7d9b447bd7b2c74c97fd46e3a358d:

#define GET_X509CertStoreSearchGetNext s_pfCMGetAPI2( "X509CertStoreSearchGetNext", (RTS_VOID_FCTPTR *)&pfX509CertStoreSearchGetNext, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga28075dbac3f64155d74224f88c42254d:

#define CAL_X509CertStoreSearchGetNext pfX509CertStoreSearchGetNext
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga237b0c3f5e40849484cac410193acd57:

#define CHK_X509CertStoreSearchGetNext (pfX509CertStoreSearchGetNext != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga48be09d12403ba5ff2a23cfdc64a2ca8:

#define EXP_X509CertStoreSearchGetNext s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreSearchGetNext", (RTS_UINTPTR) :ref:`X509CertStoreSearchGetNext <group___cmp_x509_cert_itf_1ga66abcdf7c88f2139ce6388e8572230e4>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga796d27f15af1bb268299e808d946aa23:

#define USE_X509ParseCertificate :ref:`PFX509PARSECERTIFICATE <group___cmp_x509_cert_itf_1gae65e79041b081349b3251fc513f50cca>` pfX509ParseCertificate;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga9890df51319811a914601c50e09829c2:

#define EXT_X509ParseCertificate extern :ref:`PFX509PARSECERTIFICATE <group___cmp_x509_cert_itf_1gae65e79041b081349b3251fc513f50cca>` pfX509ParseCertificate;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga3f7378433896609a167fa60e6b11256e:

#define GET_X509ParseCertificate s_pfCMGetAPI2( "X509ParseCertificate", (RTS_VOID_FCTPTR *)&pfX509ParseCertificate, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gadf2983e4ba673428fe847e2911ae63a9:

#define CAL_X509ParseCertificate pfX509ParseCertificate
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gafb19efbc9bfde4eb245b8ddf0842be38:

#define CHK_X509ParseCertificate (pfX509ParseCertificate != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga4a59ca689b32c2e00fa5d10ddb831b0d:

#define EXP_X509ParseCertificate s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509ParseCertificate", (RTS_UINTPTR) :ref:`X509ParseCertificate <group___cmp_x509_cert_itf_1gadeafc6baa4fecf1fb07343263e76b28d>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga9390e132fbcd470f7844781908179330:

#define USE_X509CertGetContent :ref:`PFX509CERTGETCONTENT <group___cmp_x509_cert_itf_1gae45067b6d58118157978b40e9f8c4e6c>` pfX509CertGetContent;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga640eb55f1b80bd578a21c67d5be1026c:

#define EXT_X509CertGetContent extern :ref:`PFX509CERTGETCONTENT <group___cmp_x509_cert_itf_1gae45067b6d58118157978b40e9f8c4e6c>` pfX509CertGetContent;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gac6b3c50b4bccf1fd3c21d445470d8860:

#define GET_X509CertGetContent s_pfCMGetAPI2( "X509CertGetContent", (RTS_VOID_FCTPTR *)&pfX509CertGetContent, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gadf82398b3371da7dbe40abccbbc0c76f:

#define CAL_X509CertGetContent pfX509CertGetContent
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gad9f6836e37131f756f77a4758eecb6e3:

#define CHK_X509CertGetContent (pfX509CertGetContent != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga83e53bfb51c46465c8fdd6253481a0ed:

#define EXP_X509CertGetContent s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertGetContent", (RTS_UINTPTR) :ref:`X509CertGetContent <group___cmp_x509_cert_itf_1ga172a5866f360d2e20a34e96f7983528a>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaafe73287cd901dec9dd8b6522ddddb8c:

#define USE_X509CertGetBinary :ref:`PFX509CERTGETBINARY <group___cmp_x509_cert_itf_1ga8338a76d7665c2c3b5964adda69c42bb>` pfX509CertGetBinary;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga4f32ce0e1c8b2ca36fc7863e74701114:

#define EXT_X509CertGetBinary extern :ref:`PFX509CERTGETBINARY <group___cmp_x509_cert_itf_1ga8338a76d7665c2c3b5964adda69c42bb>` pfX509CertGetBinary;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gadfeeecab345855a0ceb27ac5f6f1af27:

#define GET_X509CertGetBinary s_pfCMGetAPI2( "X509CertGetBinary", (RTS_VOID_FCTPTR *)&pfX509CertGetBinary, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga3128c88ecc5f78335ca234ece0be0b0b:

#define CAL_X509CertGetBinary pfX509CertGetBinary
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga460339e708ce4638533f4294666e007c:

#define CHK_X509CertGetBinary (pfX509CertGetBinary != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gabb702489754aa45e14c4ef1be3d954c6:

#define EXP_X509CertGetBinary s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertGetBinary", (RTS_UINTPTR) :ref:`X509CertGetBinary <group___cmp_x509_cert_itf_1gaf053757a0a41a49ece6bd519057e2aaa>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga05fb831d1825f69ce25356592e64983f:

#define USE_X509CertGetPublicKey :ref:`PFX509CERTGETPUBLICKEY <group___cmp_x509_cert_itf_1ga2e4dd6d15110702f75e80c00b9fada61>` pfX509CertGetPublicKey;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga7278935cfee5c3141b6181ce3afaf1aa:

#define EXT_X509CertGetPublicKey extern :ref:`PFX509CERTGETPUBLICKEY <group___cmp_x509_cert_itf_1ga2e4dd6d15110702f75e80c00b9fada61>` pfX509CertGetPublicKey;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga6e986caada63fd250a836efd32b06bf9:

#define GET_X509CertGetPublicKey s_pfCMGetAPI2( "X509CertGetPublicKey", (RTS_VOID_FCTPTR *)&pfX509CertGetPublicKey, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga01368e818044ae2e541dd1661a7a2d3d:

#define CAL_X509CertGetPublicKey pfX509CertGetPublicKey
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gacdd70297e37f27b60d329b2005e8286a:

#define CHK_X509CertGetPublicKey (pfX509CertGetPublicKey != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga06d7c95d7b343aae735be76884c1fdc9:

#define EXP_X509CertGetPublicKey s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertGetPublicKey", (RTS_UINTPTR) :ref:`X509CertGetPublicKey <group___cmp_x509_cert_itf_1ga5452515ba0aea6615442a218ea5ecd4a>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gadd187b58a5796f490b9f154c698557e3:

#define USE_X509CertGetPrivateKey :ref:`PFX509CERTGETPRIVATEKEY <group___cmp_x509_cert_itf_1ga7e06c0bceea9fe176ce73abfbd4dcbe1>` pfX509CertGetPrivateKey;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga379e44791651d4b42ce38e6a7d7b4966:

#define EXT_X509CertGetPrivateKey extern :ref:`PFX509CERTGETPRIVATEKEY <group___cmp_x509_cert_itf_1ga7e06c0bceea9fe176ce73abfbd4dcbe1>` pfX509CertGetPrivateKey;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gab56b00a1929c1034a2055e3f1fd6a5b8:

#define GET_X509CertGetPrivateKey s_pfCMGetAPI2( "X509CertGetPrivateKey", (RTS_VOID_FCTPTR *)&pfX509CertGetPrivateKey, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gae2a8e9e1e93c7442ec4b7f307b539a4a:

#define CAL_X509CertGetPrivateKey pfX509CertGetPrivateKey
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga020217e994ebc514b5d990327feab5f0:

#define CHK_X509CertGetPrivateKey (pfX509CertGetPrivateKey != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga38c093bfdc6c2160e9c917c28984b9d6:

#define EXP_X509CertGetPrivateKey s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertGetPrivateKey", (RTS_UINTPTR) :ref:`X509CertGetPrivateKey <group___cmp_x509_cert_itf_1gabe3af57c59a534fb6da79f9c82c107c9>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga03f792f607000c39dde1cfcf087f431b:

#define USE_X509CertGetThumbprint :ref:`PFX509CERTGETTHUMBPRINT <group___cmp_x509_cert_itf_1gac76817489a4a746c21d222041cba2a22>` pfX509CertGetThumbprint;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaa667605d4585fdefa29b2606d078ff7f:

#define EXT_X509CertGetThumbprint extern :ref:`PFX509CERTGETTHUMBPRINT <group___cmp_x509_cert_itf_1gac76817489a4a746c21d222041cba2a22>` pfX509CertGetThumbprint;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gab7f865484009dfa1e5e2bbb153d5d03d:

#define GET_X509CertGetThumbprint s_pfCMGetAPI2( "X509CertGetThumbprint", (RTS_VOID_FCTPTR *)&pfX509CertGetThumbprint, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gac0c453e12759a3c457abb5cdd78dfac2:

#define CAL_X509CertGetThumbprint pfX509CertGetThumbprint
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gabf200e287889cea4c319ede36cf3877c:

#define CHK_X509CertGetThumbprint (pfX509CertGetThumbprint != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gae324779442aaa330ce0e07815940311d:

#define EXP_X509CertGetThumbprint s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertGetThumbprint", (RTS_UINTPTR) :ref:`X509CertGetThumbprint <group___cmp_x509_cert_itf_1ga25a47310606b897e9b3e0ddae44711aa>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga24918157aaa5b1f9cb6021d8b139e072:

#define USE_X509CertIsDateValid :ref:`PFX509CERTISDATEVALID <group___cmp_x509_cert_itf_1ga140fed553059cfc2684fddc7eb7e914e>` pfX509CertIsDateValid;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga8b88757ef19cf86198b61e5bb747ebaf:

#define EXT_X509CertIsDateValid extern :ref:`PFX509CERTISDATEVALID <group___cmp_x509_cert_itf_1ga140fed553059cfc2684fddc7eb7e914e>` pfX509CertIsDateValid;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaac822529c4bd8aa82edd8ab74060cdcc:

#define GET_X509CertIsDateValid s_pfCMGetAPI2( "X509CertIsDateValid", (RTS_VOID_FCTPTR *)&pfX509CertIsDateValid, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga4e075232b3cdd40b43f290cfa36e7e91:

#define CAL_X509CertIsDateValid pfX509CertIsDateValid
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga76314f91f2551d71124dbd865e9a7753:

#define CHK_X509CertIsDateValid (pfX509CertIsDateValid != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gacf70d62119faa86dc33c228f51907b7c:

#define EXP_X509CertIsDateValid s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertIsDateValid", (RTS_UINTPTR) :ref:`X509CertIsDateValid <group___cmp_x509_cert_itf_1ga57995c547a18717e3961ddd81ed68fb0>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaf77eb771258a9b0c7e346b87aebbcffd:

#define USE_X509CertIsSelfSigned :ref:`PFX509CERTISSELFSIGNED <group___cmp_x509_cert_itf_1gaff2d2fbac251ac21c28c29bb44389e6b>` pfX509CertIsSelfSigned;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gac28335a8b69740845a9bdba100596829:

#define EXT_X509CertIsSelfSigned extern :ref:`PFX509CERTISSELFSIGNED <group___cmp_x509_cert_itf_1gaff2d2fbac251ac21c28c29bb44389e6b>` pfX509CertIsSelfSigned;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga63c715e81a18b81cd6e4d3d619d95504:

#define GET_X509CertIsSelfSigned s_pfCMGetAPI2( "X509CertIsSelfSigned", (RTS_VOID_FCTPTR *)&pfX509CertIsSelfSigned, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga751b5123aa88e059ceeff8f9da10a548:

#define CAL_X509CertIsSelfSigned pfX509CertIsSelfSigned
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga1e3c242a2e837ff271be21a528a3c277:

#define CHK_X509CertIsSelfSigned (pfX509CertIsSelfSigned != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gad3219a2f3c87355af2c054fdeffbfdd6:

#define EXP_X509CertIsSelfSigned s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertIsSelfSigned", (RTS_UINTPTR) :ref:`X509CertIsSelfSigned <group___cmp_x509_cert_itf_1gafa046a2b2f200b74e5d7a663e8708b94>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga321bf4fad25bece1b41711ac9e75cd98:

#define USE_X509CertHasExtendedKeyUsage :ref:`PFX509CERTHASEXTENDEDKEYUSAGE <group___cmp_x509_cert_itf_1ga2de080fd9fc25a734e2565dab7227fad>` pfX509CertHasExtendedKeyUsage;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga0970aa5b75ac39b3b0eefa5b69cc03cc:

#define EXT_X509CertHasExtendedKeyUsage extern :ref:`PFX509CERTHASEXTENDEDKEYUSAGE <group___cmp_x509_cert_itf_1ga2de080fd9fc25a734e2565dab7227fad>` pfX509CertHasExtendedKeyUsage;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga6d38f70d8e785caa8a9b415fea01b96e:

#define GET_X509CertHasExtendedKeyUsage s_pfCMGetAPI2( "X509CertHasExtendedKeyUsage", (RTS_VOID_FCTPTR *)&pfX509CertHasExtendedKeyUsage, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga8199d5c458539038f2602587705cb8b5:

#define CAL_X509CertHasExtendedKeyUsage pfX509CertHasExtendedKeyUsage
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga171885e65f2561ba2084d3bfd005d5bc:

#define CHK_X509CertHasExtendedKeyUsage (pfX509CertHasExtendedKeyUsage != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga512b0fe5372e47b19a9a969b93c2c004:

#define EXP_X509CertHasExtendedKeyUsage s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertHasExtendedKeyUsage", (RTS_UINTPTR) :ref:`X509CertHasExtendedKeyUsage <group___cmp_x509_cert_itf_1ga1487ed9be97f1b084fc827c0ff465da5>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga963b7aaa275f4147bf79f1f05f1e8730:

#define USE_X509CertCheckHost :ref:`PFX509CERTCHECKHOST <group___cmp_x509_cert_itf_1ga16b595365946bf594d4459b69f1e9dde>` pfX509CertCheckHost;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaedc9e0dd4101bef47f76b6519bf18da0:

#define EXT_X509CertCheckHost extern :ref:`PFX509CERTCHECKHOST <group___cmp_x509_cert_itf_1ga16b595365946bf594d4459b69f1e9dde>` pfX509CertCheckHost;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gabbcb0a262a5ba3fd69e2bdbed9879cbd:

#define GET_X509CertCheckHost s_pfCMGetAPI2( "X509CertCheckHost", (RTS_VOID_FCTPTR *)&pfX509CertCheckHost, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga141101f4a041e6a1fd98ddd63a5c5084:

#define CAL_X509CertCheckHost pfX509CertCheckHost
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gae23b2c535b6171c2abcb999ef6439f94:

#define CHK_X509CertCheckHost (pfX509CertCheckHost != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaabb77013c1a2fc189159a8106e2e0c97:

#define EXP_X509CertCheckHost s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertCheckHost", (RTS_UINTPTR) :ref:`X509CertCheckHost <group___cmp_x509_cert_itf_1gaa6bbabab8cf710d40ba86cac31027d5b>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga598425414fa737ec75a32e7beb8f38df:

#define USE_X509CertCheckIP :ref:`PFX509CERTCHECKIP <group___cmp_x509_cert_itf_1gae5596905ef58927522832a82d3273c75>` pfX509CertCheckIP;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gafeee806ee364a1d62a3ef2f3dcc8756f:

#define EXT_X509CertCheckIP extern :ref:`PFX509CERTCHECKIP <group___cmp_x509_cert_itf_1gae5596905ef58927522832a82d3273c75>` pfX509CertCheckIP;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gae1b72c1d4131e78f5905012bc8859bb0:

#define GET_X509CertCheckIP s_pfCMGetAPI2( "X509CertCheckIP", (RTS_VOID_FCTPTR *)&pfX509CertCheckIP, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga02b0b6a37f7dca3b3dca9fda3a057b97:

#define CAL_X509CertCheckIP pfX509CertCheckIP
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga449c6b6acdf128495a744e71db2048f7:

#define CHK_X509CertCheckIP (pfX509CertCheckIP != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gae06be3558862cb99c51c96e5dfc60076:

#define EXP_X509CertCheckIP s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertCheckIP", (RTS_UINTPTR) :ref:`X509CertCheckIP <group___cmp_x509_cert_itf_1ga4bb6ea9259e818f14826c0a7bd8fce3a>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaf982a11c26211041e80248c4d9bd9ddd:

#define USE_X509CertCompare :ref:`PFX509CERTCOMPARE <group___cmp_x509_cert_itf_1ga7b66691a59b6ded68753442c3ac2bb80>` pfX509CertCompare;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga2e320aea91379dc68672310228690598:

#define EXT_X509CertCompare extern :ref:`PFX509CERTCOMPARE <group___cmp_x509_cert_itf_1ga7b66691a59b6ded68753442c3ac2bb80>` pfX509CertCompare;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga820ae32ddebc909f6c0cc947ddecade6:

#define GET_X509CertCompare s_pfCMGetAPI2( "X509CertCompare", (RTS_VOID_FCTPTR *)&pfX509CertCompare, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga5cfc0658f4636852cfa57cbb43251cb9:

#define CAL_X509CertCompare pfX509CertCompare
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga3b57f33a152cf40c959961708b9e9cd4:

#define CHK_X509CertCompare (pfX509CertCompare != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga09d2dd5dcc7cb7ca10555b6ecee987a3:

#define EXP_X509CertCompare s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertCompare", (RTS_UINTPTR) :ref:`X509CertCompare <group___cmp_x509_cert_itf_1gab62fd9ded8c386c918f4ae84c1d0bf07>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga627265ae353bc58aaaf27d7833a2d71b:

#define USE_X509CertKeyClose :ref:`PFX509CERTKEYCLOSE <group___cmp_x509_cert_itf_1ga9a05413f7a73063cb27f7feb2a971e62>` pfX509CertKeyClose;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga24d7150ce88fa5e8cccf7034cd97426f:

#define EXT_X509CertKeyClose extern :ref:`PFX509CERTKEYCLOSE <group___cmp_x509_cert_itf_1ga9a05413f7a73063cb27f7feb2a971e62>` pfX509CertKeyClose;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gab664a581b20d89d4579942902487c399:

#define GET_X509CertKeyClose s_pfCMGetAPI2( "X509CertKeyClose", (RTS_VOID_FCTPTR *)&pfX509CertKeyClose, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga3ce59cfed49de6f007a05c32b644f1ba:

#define CAL_X509CertKeyClose pfX509CertKeyClose
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gad6734e08943bc09eef3c12d64ceea51e:

#define CHK_X509CertKeyClose (pfX509CertKeyClose != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gabd43090111d430d45d4aa04368645c73:

#define EXP_X509CertKeyClose s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertKeyClose", (RTS_UINTPTR) :ref:`X509CertKeyClose <group___cmp_x509_cert_itf_1ga9c29c73230e4f790ea6563c6df6b925a>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaa1119b7ed3cc4a1156c2bdc684fb1a9f:

#define USE_X509CertClose :ref:`PFX509CERTCLOSE <group___cmp_x509_cert_itf_1ga8d049a389301ab17c65af5569b455898>` pfX509CertClose;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga163ddca0e3aea37fc4e420be80f3e62c:

#define EXT_X509CertClose extern :ref:`PFX509CERTCLOSE <group___cmp_x509_cert_itf_1ga8d049a389301ab17c65af5569b455898>` pfX509CertClose;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga7923c601ce7a0147420e59c6732bae7e:

#define GET_X509CertClose s_pfCMGetAPI2( "X509CertClose", (RTS_VOID_FCTPTR *)&pfX509CertClose, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga3015915d187f11719eb1c073dbfc636a:

#define CAL_X509CertClose pfX509CertClose
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaca5c7549b6b41ce0df6517e4502030d0:

#define CHK_X509CertClose (pfX509CertClose != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga3024c544109a6d70d64f1e78a2f5c77f:

#define EXP_X509CertClose s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertClose", (RTS_UINTPTR) :ref:`X509CertClose <group___cmp_x509_cert_itf_1ga073da3edef2ddc44f45739da81f78394>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga1b4d59f8a3d0099b8630359f87022b30:

#define USE_X509CertCmsVerify :ref:`PFX509CERTCMSVERIFY <group___cmp_x509_cert_itf_1ga707397f107a100c3b7ed7612950cde87>` pfX509CertCmsVerify;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga025947e22630890b65bd540c31c3d295:

#define EXT_X509CertCmsVerify extern :ref:`PFX509CERTCMSVERIFY <group___cmp_x509_cert_itf_1ga707397f107a100c3b7ed7612950cde87>` pfX509CertCmsVerify;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaef6e8c2aefd31c2805cb095bd718f0ee:

#define GET_X509CertCmsVerify s_pfCMGetAPI2( "X509CertCmsVerify", (RTS_VOID_FCTPTR *)&pfX509CertCmsVerify, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaa44f1ec2351519c19d91f89842bf98cf:

#define CAL_X509CertCmsVerify pfX509CertCmsVerify
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga0f2f1ef85a59c89a7f0d2c116d0cab16:

#define CHK_X509CertCmsVerify (pfX509CertCmsVerify != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaee8583f5cd596b875846ce1e4be76fbf:

#define EXP_X509CertCmsVerify s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertCmsVerify", (RTS_UINTPTR) :ref:`X509CertCmsVerify <group___cmp_x509_cert_itf_1ga6b51c3dc63aea1ca5cb8c2d203cbb396>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga1f2c94df4491e5f4595075710880ab6c:

#define USE_X509CertCmsVerify2 :ref:`PFX509CERTCMSVERIFY2 <group___cmp_x509_cert_itf_1ga9acb20a8951234ef297e07bb3401cc84>` pfX509CertCmsVerify2;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gafcd2c7a9a118dd1b88f547396ae1b0e5:

#define EXT_X509CertCmsVerify2 extern :ref:`PFX509CERTCMSVERIFY2 <group___cmp_x509_cert_itf_1ga9acb20a8951234ef297e07bb3401cc84>` pfX509CertCmsVerify2;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga1b3e6a17a1a19d5b789bcfdb6ea52809:

#define GET_X509CertCmsVerify2 s_pfCMGetAPI2( "X509CertCmsVerify2", (RTS_VOID_FCTPTR *)&pfX509CertCmsVerify2, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga960d53c21d1d92c9efcfd83171740bb9:

#define CAL_X509CertCmsVerify2 pfX509CertCmsVerify2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gac98820aa81115b743f96802acadc5016:

#define CHK_X509CertCmsVerify2 (pfX509CertCmsVerify2 != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga3e621bad9379e4d1b50222078282b119:

#define EXP_X509CertCmsVerify2 s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertCmsVerify2", (RTS_UINTPTR) :ref:`X509CertCmsVerify2 <group___cmp_x509_cert_itf_1gab509b5e8a4e99afa871f6ff22d29b342>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga984860787de9c086b5e83a7d33c7e40d:

#define USE_X509CertCmsDecrypt :ref:`PFX509CERTCMSDECRYPT <group___cmp_x509_cert_itf_1ga4d133108f9033cb0cede3d402e8ddf3b>` pfX509CertCmsDecrypt;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaac650d13037a8fd343de1777672f2088:

#define EXT_X509CertCmsDecrypt extern :ref:`PFX509CERTCMSDECRYPT <group___cmp_x509_cert_itf_1ga4d133108f9033cb0cede3d402e8ddf3b>` pfX509CertCmsDecrypt;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga3a5a7282a6158fcc7c83e817e1640ac8:

#define GET_X509CertCmsDecrypt s_pfCMGetAPI2( "X509CertCmsDecrypt", (RTS_VOID_FCTPTR *)&pfX509CertCmsDecrypt, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gadb9564b9b74289743a6531e5a07a312f:

#define CAL_X509CertCmsDecrypt pfX509CertCmsDecrypt
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga6b66ada0a8fb3239f62de1dc56b6a90f:

#define CHK_X509CertCmsDecrypt (pfX509CertCmsDecrypt != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaa63b0816616f2bf11155d00c8cede102:

#define EXP_X509CertCmsDecrypt s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertCmsDecrypt", (RTS_UINTPTR) :ref:`X509CertCmsDecrypt <group___cmp_x509_cert_itf_1gaebc8225f7eb1f386c6e24732d53494ec>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga0f7737ccac39de8821993f4f11825454:

#define USE_RtsOIDCreate :ref:`PFRTSOIDCREATE <group___cmp_x509_cert_itf_1ga27d1a1cb963d55ae906a31ad7ffa97d8>` pfRtsOIDCreate;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga3154e8ea04da5b33e8dff6c6af73fc16:

#define EXT_RtsOIDCreate extern :ref:`PFRTSOIDCREATE <group___cmp_x509_cert_itf_1ga27d1a1cb963d55ae906a31ad7ffa97d8>` pfRtsOIDCreate;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga8efd5e0a330ac8c494923ea6294a9bf2:

#define GET_RtsOIDCreate s_pfCMGetAPI2( "RtsOIDCreate", (RTS_VOID_FCTPTR *)&pfRtsOIDCreate, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga0eadd63c9f943df824f5a0c3aed7e287:

#define CAL_RtsOIDCreate pfRtsOIDCreate
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gadbb645d1b32913f15fa1d1dff3602778:

#define CHK_RtsOIDCreate (pfRtsOIDCreate != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaebdf766b43738eeafb056d10f446130a:

#define EXP_RtsOIDCreate s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"RtsOIDCreate", (RTS_UINTPTR) :ref:`RtsOIDCreate <group___cmp_x509_cert_itf_1gac62d802c208e5937b00033c2288b0c63>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gae373db2150ae53a2b5d3b50aa6301fb0:

#define USE_RtsOIDGetID :ref:`PFRTSOIDGETID <group___cmp_x509_cert_itf_1ga00502aab48f5e8615dee6f89d6f22c0b>` pfRtsOIDGetID;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gacbc992e5e61609324ac87988597548a0:

#define EXT_RtsOIDGetID extern :ref:`PFRTSOIDGETID <group___cmp_x509_cert_itf_1ga00502aab48f5e8615dee6f89d6f22c0b>` pfRtsOIDGetID;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaae7560cc01693ba6128e0c14ede93e9c:

#define GET_RtsOIDGetID s_pfCMGetAPI2( "RtsOIDGetID", (RTS_VOID_FCTPTR *)&pfRtsOIDGetID, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaf1e61183b23651b3bb1f50d7fb2e933c:

#define CAL_RtsOIDGetID pfRtsOIDGetID
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga1ff3c6f5d1d7eaa5791c6b4739a85d19:

#define CHK_RtsOIDGetID (pfRtsOIDGetID != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gae4b98efaa7b85a8df4d2bc7ec229c601:

#define EXP_RtsOIDGetID s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"RtsOIDGetID", (RTS_UINTPTR) :ref:`RtsOIDGetID <group___cmp_x509_cert_itf_1gaff3a425033e2d1a475c6623f99829d1b>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga17a5ffde55001742e2eb33c090c308dd:

#define USE_RtsOIDGetName :ref:`PFRTSOIDGETNAME <group___cmp_x509_cert_itf_1ga429f925c0556a712d25f4f40c509f635>` pfRtsOIDGetName;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga42ea1db1afaa55f6c80ead00cdf27edc:

#define EXT_RtsOIDGetName extern :ref:`PFRTSOIDGETNAME <group___cmp_x509_cert_itf_1ga429f925c0556a712d25f4f40c509f635>` pfRtsOIDGetName;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gacb3d2db946f4fbd51caa726fc4dc9b4e:

#define GET_RtsOIDGetName s_pfCMGetAPI2( "RtsOIDGetName", (RTS_VOID_FCTPTR *)&pfRtsOIDGetName, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga962ed8f85721da3cf968dce178f6fa86:

#define CAL_RtsOIDGetName pfRtsOIDGetName
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga49130960e85a5e13d41e34c0f225109c:

#define CHK_RtsOIDGetName (pfRtsOIDGetName != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga0e66f564c4f81620a6920fb1d2cc966a:

#define EXP_RtsOIDGetName s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"RtsOIDGetName", (RTS_UINTPTR) :ref:`RtsOIDGetName <group___cmp_x509_cert_itf_1ga9ba84f61b9c3fe5b6ae35f1c11b1e74a>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaff14c1eb65f5d9fdfd92fdb2d8a47b11:

#define USE_RtsOIDClear :ref:`PFRTSOIDCLEAR <group___cmp_x509_cert_itf_1gaab49590157ad26f28011d019b2c270cc>` pfRtsOIDClear;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga533372b565c15af6689ef36054132135:

#define EXT_RtsOIDClear extern :ref:`PFRTSOIDCLEAR <group___cmp_x509_cert_itf_1gaab49590157ad26f28011d019b2c270cc>` pfRtsOIDClear;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga61daee0d12e8a6ccf64f1faaace93180:

#define GET_RtsOIDClear s_pfCMGetAPI2( "RtsOIDClear", (RTS_VOID_FCTPTR *)&pfRtsOIDClear, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaaab8cd8793c06683859b078ca822d1fd:

#define CAL_RtsOIDClear pfRtsOIDClear
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga4ca822f8b115f8e63ee10d9e3b72315b:

#define CHK_RtsOIDClear (pfRtsOIDClear != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaa0e1de1ad3c4b469e76cc65d64313461:

#define EXP_RtsOIDClear s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"RtsOIDClear", (RTS_UINTPTR) :ref:`RtsOIDClear <group___cmp_x509_cert_itf_1ga370f2a84924e0202d6f3024d054569f0>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga03f1c7a3d369d4155ebfa01dce7e4f11:

#define USE_X509CertInfoInit :ref:`PFX509CERTINFOINIT <group___cmp_x509_cert_itf_1ga4ef74ec02f9e0d1bd2e35d1ac46dee6a>` pfX509CertInfoInit;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga6aec428b4dabaf07c3e9f06564e9cfe7:

#define EXT_X509CertInfoInit extern :ref:`PFX509CERTINFOINIT <group___cmp_x509_cert_itf_1ga4ef74ec02f9e0d1bd2e35d1ac46dee6a>` pfX509CertInfoInit;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaf0821faa81ffd5d6abff7ea0c9d113ff:

#define GET_X509CertInfoInit s_pfCMGetAPI2( "X509CertInfoInit", (RTS_VOID_FCTPTR *)&pfX509CertInfoInit, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gae654bce60ee1a97d073cb5b93793fd42:

#define CAL_X509CertInfoInit pfX509CertInfoInit
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gada599f4303b4c5f292466a5cb2216e68:

#define CHK_X509CertInfoInit (pfX509CertInfoInit != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga6204ab8c49803cebe7cd7104389b1221:

#define EXP_X509CertInfoInit s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertInfoInit", (RTS_UINTPTR) :ref:`X509CertInfoInit <group___cmp_x509_cert_itf_1gaf9347f6b295ddc43ae39c26b15c0299a>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga4df9e4ce4ec367d289ffba1161b418c8:

#define USE_X509CertInfoExit :ref:`PFX509CERTINFOEXIT <group___cmp_x509_cert_itf_1ga89cd7545e0bbe8f7bae84acfa4b492f7>` pfX509CertInfoExit;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga789a438b9fcf80b8cbe754ae6c30558c:

#define EXT_X509CertInfoExit extern :ref:`PFX509CERTINFOEXIT <group___cmp_x509_cert_itf_1ga89cd7545e0bbe8f7bae84acfa4b492f7>` pfX509CertInfoExit;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaa37e94ae0c1ae8b7e6ef51ee4ab4d586:

#define GET_X509CertInfoExit s_pfCMGetAPI2( "X509CertInfoExit", (RTS_VOID_FCTPTR *)&pfX509CertInfoExit, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga342b683463cfdbba6c73df2e13fb9365:

#define CAL_X509CertInfoExit pfX509CertInfoExit
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga8ecac0d4875d41ec03c4d44aed691603:

#define CHK_X509CertInfoExit (pfX509CertInfoExit != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga1c603c4dfb5cd4b7bfecc66bcda41c30:

#define EXP_X509CertInfoExit s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertInfoExit", (RTS_UINTPTR) :ref:`X509CertInfoExit <group___cmp_x509_cert_itf_1gaa11dd819381e15b7a5e0b414c728b32f>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaea8f9731a1c584e717833b01c21ef242:

#define USE_X509CertStoreGetFirstBackend :ref:`PFX509CERTSTOREGETFIRSTBACKEND <group___cmp_x509_cert_itf_1ga6c85652e227ad4b48aa674e5a350260a>` pfX509CertStoreGetFirstBackend;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga98e9d7a5ea0731172bd343e0d0320852:

#define EXT_X509CertStoreGetFirstBackend extern :ref:`PFX509CERTSTOREGETFIRSTBACKEND <group___cmp_x509_cert_itf_1ga6c85652e227ad4b48aa674e5a350260a>` pfX509CertStoreGetFirstBackend;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga996fde4f33e2dddeac4766d881898352:

#define GET_X509CertStoreGetFirstBackend s_pfCMGetAPI2( "X509CertStoreGetFirstBackend", (RTS_VOID_FCTPTR *)&pfX509CertStoreGetFirstBackend, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga09fd33d14602379894ee1148460c0178:

#define CAL_X509CertStoreGetFirstBackend pfX509CertStoreGetFirstBackend
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaa5e27e83f5c618141b7a72e90c48f137:

#define CHK_X509CertStoreGetFirstBackend (pfX509CertStoreGetFirstBackend != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga81ea0540cdfbbceef5f49e23fac5937b:

#define EXP_X509CertStoreGetFirstBackend s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreGetFirstBackend", (RTS_UINTPTR) :ref:`X509CertStoreGetFirstBackend <group___cmp_x509_cert_itf_1gad0be785fbf9846773eabd0db2b8bc493>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga4edf54c3d7f44edbbf9e6dd677f24e98:

#define USE_X509CertStoreGetNextBackend :ref:`PFX509CERTSTOREGETNEXTBACKEND <group___cmp_x509_cert_itf_1gabeb02c311eaedfe2b565c7606ab9a58d>` pfX509CertStoreGetNextBackend;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga226533b057c2f599ced6d6bd86cd5401:

#define EXT_X509CertStoreGetNextBackend extern :ref:`PFX509CERTSTOREGETNEXTBACKEND <group___cmp_x509_cert_itf_1gabeb02c311eaedfe2b565c7606ab9a58d>` pfX509CertStoreGetNextBackend;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga8f612c07647cb6108206d1dde1d5682f:

#define GET_X509CertStoreGetNextBackend s_pfCMGetAPI2( "X509CertStoreGetNextBackend", (RTS_VOID_FCTPTR *)&pfX509CertStoreGetNextBackend, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gae0d15f18aa7327b010aec668b2e8a959:

#define CAL_X509CertStoreGetNextBackend pfX509CertStoreGetNextBackend
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga12528aeb568d59dfbf68af6a260887a5:

#define CHK_X509CertStoreGetNextBackend (pfX509CertStoreGetNextBackend != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga6c2fd8ef59a5907c6cf95d220abc8ba7:

#define EXP_X509CertStoreGetNextBackend s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreGetNextBackend", (RTS_UINTPTR) :ref:`X509CertStoreGetNextBackend <group___cmp_x509_cert_itf_1gacb16b89ed74609c7fe1afe511e0ea733>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga5a0ad8614a44d1542ff207fef3eb8b2b:

#define USE_X509CertStorGetBackendInfo :ref:`PFX509CERTSTORGETBACKENDINFO <group___cmp_x509_cert_itf_1ga3c68d02fe0dd4e6e6e9ccd17af441981>` pfX509CertStorGetBackendInfo;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gadb7fc3094e947b40dee00e1d9799414a:

#define EXT_X509CertStorGetBackendInfo extern :ref:`PFX509CERTSTORGETBACKENDINFO <group___cmp_x509_cert_itf_1ga3c68d02fe0dd4e6e6e9ccd17af441981>` pfX509CertStorGetBackendInfo;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga630ef92fac1bf990a64d17e4d3df7f05:

#define GET_X509CertStorGetBackendInfo s_pfCMGetAPI2( "X509CertStorGetBackendInfo", (RTS_VOID_FCTPTR *)&pfX509CertStorGetBackendInfo, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gadba88300db6a2c51fc641a0e36fe6c75:

#define CAL_X509CertStorGetBackendInfo pfX509CertStorGetBackendInfo
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga3289f6a266a882110db0960be8b49385:

#define CHK_X509CertStorGetBackendInfo (pfX509CertStorGetBackendInfo != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga7876b9ea425c0f02449b7a1e5d45ce31:

#define EXP_X509CertStorGetBackendInfo s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStorGetBackendInfo", (RTS_UINTPTR) :ref:`X509CertStorGetBackendInfo <group___cmp_x509_cert_itf_1ga8360bf264ada12702cb58854953733c0>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga9ad34811ffda46e96ca360766688495e:

#define USE_X509CertCreateSelfSigned :ref:`PFX509CERTCREATESELFSIGNED <group___cmp_x509_cert_itf_1gac535a9348b4d03d2563675d19d669eba>` pfX509CertCreateSelfSigned;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga4f2a94b9a6794264000b72b250761de0:

#define EXT_X509CertCreateSelfSigned extern :ref:`PFX509CERTCREATESELFSIGNED <group___cmp_x509_cert_itf_1gac535a9348b4d03d2563675d19d669eba>` pfX509CertCreateSelfSigned;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga93d5f55fc19f173864a2ce3a8484c777:

#define GET_X509CertCreateSelfSigned s_pfCMGetAPI2( "X509CertCreateSelfSigned", (RTS_VOID_FCTPTR *)&pfX509CertCreateSelfSigned, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga70dfa564f92721e2e1a4e8474c889bdc:

#define CAL_X509CertCreateSelfSigned pfX509CertCreateSelfSigned
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga87dda0b73453c0db6dfc2fb73e0e7748:

#define CHK_X509CertCreateSelfSigned (pfX509CertCreateSelfSigned != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga9f1afb44039247c1de88cc808ae94482:

#define EXP_X509CertCreateSelfSigned s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertCreateSelfSigned", (RTS_UINTPTR) :ref:`X509CertCreateSelfSigned <group___cmp_x509_cert_itf_1gaf0d551e9529268467ac55cd5f244166e>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga136eaab692349a6c48737b13dd3ac8dc:

#define USE_X509CertCreateSelfSignedAsync :ref:`PFX509CERTCREATESELFSIGNEDASYNC <group___cmp_x509_cert_itf_1gad7b8da1fb8a9125f8fb694738627a47c>` pfX509CertCreateSelfSignedAsync;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gab89477bc6db9ca13c533cca6bea2d14b:

#define EXT_X509CertCreateSelfSignedAsync extern :ref:`PFX509CERTCREATESELFSIGNEDASYNC <group___cmp_x509_cert_itf_1gad7b8da1fb8a9125f8fb694738627a47c>` pfX509CertCreateSelfSignedAsync;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga928461f93f142f083acd7ec66747bf44:

#define GET_X509CertCreateSelfSignedAsync s_pfCMGetAPI2( "X509CertCreateSelfSignedAsync", (RTS_VOID_FCTPTR *)&pfX509CertCreateSelfSignedAsync, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gab4302d917ada69c547affa0b09fe9729:

#define CAL_X509CertCreateSelfSignedAsync pfX509CertCreateSelfSignedAsync
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga82f35e2b4894cf789d61da529f8e81f7:

#define CHK_X509CertCreateSelfSignedAsync (pfX509CertCreateSelfSignedAsync != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gac96fb47b00774c43c456382bcfb2350f:

#define EXP_X509CertCreateSelfSignedAsync s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertCreateSelfSignedAsync", (RTS_UINTPTR) :ref:`X509CertCreateSelfSignedAsync <group___cmp_x509_cert_itf_1gafa3352932820f31bffb651567d200f5c>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga909832cbaa248fcda28213cdf1a249d0:

#define USE_X509CertCreateCSR :ref:`PFX509CERTCREATECSR <group___cmp_x509_cert_itf_1gad03860c9b5176a645cef05aed51516a5>` pfX509CertCreateCSR;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga458f70cdf679322337e92066bf33541c:

#define EXT_X509CertCreateCSR extern :ref:`PFX509CERTCREATECSR <group___cmp_x509_cert_itf_1gad03860c9b5176a645cef05aed51516a5>` pfX509CertCreateCSR;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaa4cf875cd47786f8795a86a2d6770d78:

#define GET_X509CertCreateCSR s_pfCMGetAPI2( "X509CertCreateCSR", (RTS_VOID_FCTPTR *)&pfX509CertCreateCSR, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga969d0c60344b9c6d2afd499580fc24e8:

#define CAL_X509CertCreateCSR pfX509CertCreateCSR
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga940fd95afa1b4b1df01acd20a5c2b89d:

#define CHK_X509CertCreateCSR (pfX509CertCreateCSR != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga93df9fa023612466a6710258eeba2ddb:

#define EXP_X509CertCreateCSR s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertCreateCSR", (RTS_UINTPTR) :ref:`X509CertCreateCSR <group___cmp_x509_cert_itf_1gae352d99fc4f1b840c570aab5d2991caf>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga973f16d422d8da0178337e5c1cffd0fb:

#define USE_X509CertCreateCSRAsync :ref:`PFX509CERTCREATECSRASYNC <group___cmp_x509_cert_itf_1ga41e61642d5ed1450216022a368a231e9>` pfX509CertCreateCSRAsync;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga4b745e533ff57d046323bb56c4617329:

#define EXT_X509CertCreateCSRAsync extern :ref:`PFX509CERTCREATECSRASYNC <group___cmp_x509_cert_itf_1ga41e61642d5ed1450216022a368a231e9>` pfX509CertCreateCSRAsync;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga3a8610fb4c0325aafb77e88ab39c25d9:

#define GET_X509CertCreateCSRAsync s_pfCMGetAPI2( "X509CertCreateCSRAsync", (RTS_VOID_FCTPTR *)&pfX509CertCreateCSRAsync, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaffa7c395ec010f59f7da6a76c057583c:

#define CAL_X509CertCreateCSRAsync pfX509CertCreateCSRAsync
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaa541e676ec99443a3d9c405f7f57729e:

#define CHK_X509CertCreateCSRAsync (pfX509CertCreateCSRAsync != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga475cbe1f1dd80da4a071d58495ae1379:

#define EXP_X509CertCreateCSRAsync s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertCreateCSRAsync", (RTS_UINTPTR) :ref:`X509CertCreateCSRAsync <group___cmp_x509_cert_itf_1ga11c9602a184532a470c199fe50be7c13>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gab35d7efd37fcd96b70717f5e226aa1ed:

#define USE_X509CertStoreAddCert :ref:`PFX509CERTSTOREADDCERT <group___cmp_x509_cert_itf_1ga26972c1045b11e622b432beb83e6747d>` pfX509CertStoreAddCert;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga0a7b0658c7fd1b8354787adf85ddf86e:

#define EXT_X509CertStoreAddCert extern :ref:`PFX509CERTSTOREADDCERT <group___cmp_x509_cert_itf_1ga26972c1045b11e622b432beb83e6747d>` pfX509CertStoreAddCert;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaebb95ece2582007791fba58e9a03f252:

#define GET_X509CertStoreAddCert s_pfCMGetAPI2( "X509CertStoreAddCert", (RTS_VOID_FCTPTR *)&pfX509CertStoreAddCert, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gad102c287c59c85b689a7ccd4ecdbcbb3:

#define CAL_X509CertStoreAddCert pfX509CertStoreAddCert
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaa22d1f850132523caae17043cadc6063:

#define CHK_X509CertStoreAddCert (pfX509CertStoreAddCert != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gab735409916c4241466a8b3a6acad5bf0:

#define EXP_X509CertStoreAddCert s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreAddCert", (RTS_UINTPTR) :ref:`X509CertStoreAddCert <group___cmp_x509_cert_itf_1ga01ee2bd1985de5a20ab80cc616d9b6a6>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gae1a8b21456bd94b5073601c56da5926a:

#define USE_X509CertStoreRemoveCert :ref:`PFX509CERTSTOREREMOVECERT <group___cmp_x509_cert_itf_1gaeb7d60c94f630f089d406ee8954b1597>` pfX509CertStoreRemoveCert;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gae7a858b29b34ec4706293b9b5b0a665e:

#define EXT_X509CertStoreRemoveCert extern :ref:`PFX509CERTSTOREREMOVECERT <group___cmp_x509_cert_itf_1gaeb7d60c94f630f089d406ee8954b1597>` pfX509CertStoreRemoveCert;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gac8a08a4397c44b9ba2554bea0dd115e6:

#define GET_X509CertStoreRemoveCert s_pfCMGetAPI2( "X509CertStoreRemoveCert", (RTS_VOID_FCTPTR *)&pfX509CertStoreRemoveCert, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gad9445d169de82daa1461e9b247a6e7ba:

#define CAL_X509CertStoreRemoveCert pfX509CertStoreRemoveCert
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga5de00767fba157599c6892b0b7c49c27:

#define CHK_X509CertStoreRemoveCert (pfX509CertStoreRemoveCert != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga7471ca2e1cadebdcfb0bcd67a9fb82ae:

#define EXP_X509CertStoreRemoveCert s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreRemoveCert", (RTS_UINTPTR) :ref:`X509CertStoreRemoveCert <group___cmp_x509_cert_itf_1ga410f59ca7b7871c9723cc5a82f495382>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga2099ceca29bf10217dd832a9ae846f08:

#define USE_X509CertStoreGetFirstCert :ref:`PFX509CERTSTOREGETFIRSTCERT <group___cmp_x509_cert_itf_1gac64fd151130a2c04890c9799e12e3d31>` pfX509CertStoreGetFirstCert;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga580e10ee89666f1a0a7b97fc13ba2d0f:

#define EXT_X509CertStoreGetFirstCert extern :ref:`PFX509CERTSTOREGETFIRSTCERT <group___cmp_x509_cert_itf_1gac64fd151130a2c04890c9799e12e3d31>` pfX509CertStoreGetFirstCert;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaff8f206af30e268b5d6c89786d825a2e:

#define GET_X509CertStoreGetFirstCert s_pfCMGetAPI2( "X509CertStoreGetFirstCert", (RTS_VOID_FCTPTR *)&pfX509CertStoreGetFirstCert, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gac5d7135790fce8993aa5c235112f65bf:

#define CAL_X509CertStoreGetFirstCert pfX509CertStoreGetFirstCert
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga9c93c07bed766e2bbdcf23d7b4f6c328:

#define CHK_X509CertStoreGetFirstCert (pfX509CertStoreGetFirstCert != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga89920069c111c7bb318f11ca0bddd80e:

#define EXP_X509CertStoreGetFirstCert s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreGetFirstCert", (RTS_UINTPTR) :ref:`X509CertStoreGetFirstCert <group___cmp_x509_cert_itf_1gab3f65d84a84e8839f61eefa0763785de>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gae20eadca969ba40237180225b5893c1c:

#define USE_X509CertStoreGetNextCert :ref:`PFX509CERTSTOREGETNEXTCERT <group___cmp_x509_cert_itf_1ga42905386cede7dd55bdfd011d639c43e>` pfX509CertStoreGetNextCert;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga54fdd1dcf64deb8936f7b1695b7f8a45:

#define EXT_X509CertStoreGetNextCert extern :ref:`PFX509CERTSTOREGETNEXTCERT <group___cmp_x509_cert_itf_1ga42905386cede7dd55bdfd011d639c43e>` pfX509CertStoreGetNextCert;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga2d16395d64c08c2f406c7d296f0e3fc9:

#define GET_X509CertStoreGetNextCert s_pfCMGetAPI2( "X509CertStoreGetNextCert", (RTS_VOID_FCTPTR *)&pfX509CertStoreGetNextCert, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gae00be75d563fd581476dd1b9b6454009:

#define CAL_X509CertStoreGetNextCert pfX509CertStoreGetNextCert
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga8c782d4e6e6c7cdf52639da63b3fd011:

#define CHK_X509CertStoreGetNextCert (pfX509CertStoreGetNextCert != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga502f48b4581823dd61b7e1eab21979a5:

#define EXP_X509CertStoreGetNextCert s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreGetNextCert", (RTS_UINTPTR) :ref:`X509CertStoreGetNextCert <group___cmp_x509_cert_itf_1gaa3f612bd6436163892df6ccbf4c3eaf1>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaef257db815e421bdf0494899ffac681a:

#define USE_X509CertStoreRegister :ref:`PFX509CERTSTOREREGISTER <group___cmp_x509_cert_itf_1ga6e96b2dd635b88b399ef12c2c1c7d032>` pfX509CertStoreRegister;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaf30a0920b48f0dad7e1b211630d8dbfe:

#define EXT_X509CertStoreRegister extern :ref:`PFX509CERTSTOREREGISTER <group___cmp_x509_cert_itf_1ga6e96b2dd635b88b399ef12c2c1c7d032>` pfX509CertStoreRegister;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga20a3fca6dfcec8088a33ffc9e7e4da48:

#define GET_X509CertStoreRegister s_pfCMGetAPI2( "X509CertStoreRegister", (RTS_VOID_FCTPTR *)&pfX509CertStoreRegister, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga22e2af5cae74daad89e0ad7480c60c50:

#define CAL_X509CertStoreRegister pfX509CertStoreRegister
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga52c0ea277c42dc5a835d45bd62328599:

#define CHK_X509CertStoreRegister (pfX509CertStoreRegister != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaf35ed9a6282761fc0ce520d1afb323e1:

#define EXP_X509CertStoreRegister s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreRegister", (RTS_UINTPTR) :ref:`X509CertStoreRegister <group___cmp_x509_cert_itf_1ga10a10dfcd08794eb0825b6812eb2bfda>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga104e250acfbd4bb468983d23ca5a6b18:

#define USE_X509CertStoreUnregister :ref:`PFX509CERTSTOREUNREGISTER <group___cmp_x509_cert_itf_1ga149f78936395dc34dc20ffe63bb24341>` pfX509CertStoreUnregister;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gabba3807e52444d575f408239cc7055e2:

#define EXT_X509CertStoreUnregister extern :ref:`PFX509CERTSTOREUNREGISTER <group___cmp_x509_cert_itf_1ga149f78936395dc34dc20ffe63bb24341>` pfX509CertStoreUnregister;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaa075c5141874e6bd2199bbbae9c7e466:

#define GET_X509CertStoreUnregister s_pfCMGetAPI2( "X509CertStoreUnregister", (RTS_VOID_FCTPTR *)&pfX509CertStoreUnregister, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaf8164b7eb3fa4c933ee29f23f3da6d60:

#define CAL_X509CertStoreUnregister pfX509CertStoreUnregister
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga98958608ca20071e3418475ea6eb3727:

#define CHK_X509CertStoreUnregister (pfX509CertStoreUnregister != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga00733145afe3c5aef0d807457c1b692c:

#define EXP_X509CertStoreUnregister s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreUnregister", (RTS_UINTPTR) :ref:`X509CertStoreUnregister <group___cmp_x509_cert_itf_1ga8545f584011c653ac8baa957d1020bc0>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaf1ddecafb7ef1b45def39c673fd396e0:

#define USE_X509CertStoreGetRegisteredCert :ref:`PFX509CERTSTOREGETREGISTEREDCERT <group___cmp_x509_cert_itf_1ga128f64d4cb20d8dbc48392cb266cdc52>` pfX509CertStoreGetRegisteredCert;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga73fece2076f7e1cf21e56317ca081870:

#define EXT_X509CertStoreGetRegisteredCert extern :ref:`PFX509CERTSTOREGETREGISTEREDCERT <group___cmp_x509_cert_itf_1ga128f64d4cb20d8dbc48392cb266cdc52>` pfX509CertStoreGetRegisteredCert;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga9c024650d462a60463cef77a9feb73f2:

#define GET_X509CertStoreGetRegisteredCert s_pfCMGetAPI2( "X509CertStoreGetRegisteredCert", (RTS_VOID_FCTPTR *)&pfX509CertStoreGetRegisteredCert, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gacd5aef57e33a248392a8b656d6a6941b:

#define CAL_X509CertStoreGetRegisteredCert pfX509CertStoreGetRegisteredCert
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga0d65c1d24ed547f872529cc636d1307a:

#define CHK_X509CertStoreGetRegisteredCert (pfX509CertStoreGetRegisteredCert != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga7cc76bbdcc2cc8dfec1109fd22e8a123:

#define EXP_X509CertStoreGetRegisteredCert s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"X509CertStoreGetRegisteredCert", (RTS_UINTPTR) :ref:`X509CertStoreGetRegisteredCert <group___cmp_x509_cert_itf_1ga1d36aa91065172a577af54736687fb4e>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gad93ddb1893238f0723892dc36b8f625b:

#define ITF_CmpX509Cert
^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga5269f11379ab294fbbeb0f02c35726cd:

#define EXTITF_CmpX509Cert
^^^^^^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___cmp_x509_cert_itf_1gafb230e6dc978609d7aed4d3f75777dd4:

typedef struct tagRtsOID  RtsOID
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

RtsOID

.. _group___cmp_x509_cert_itf_1ga6757110f5ba82365ade354bef57d2f0e:

typedef struct tagRtsX509AltName  RtsX509AltName
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Represents an alternative name of a certificate. The alternative name can be selected out of different meanings. E.g. E-Mail address, IP-Address, URI or a DNS name. Use the corresponding fields of the union to get the values. The meaning is declared in the valueType field.

.. _group___cmp_x509_cert_itf_1ga949c43a2f0a07ec7103b293f375cfed3:

typedef struct tagRtsX509NameEntry  RtsX509NameEntry
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Represents an entry of the X509 Names used in the subject or issuer fields in the certificate. This structure contains the OID to identify the field and the corresponding string as value. Use the RtsOIDGetName function to get the string representations of the field.

.. _group___cmp_x509_cert_itf_1ga7471487b9fc63f37d2049e302cefeb2e:

typedef struct tagRtsX509CertName  RtsX509CertName
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

RtsX509CertName

.. _group___cmp_x509_cert_itf_1ga31519dff2498615bbe9dc17755351f33:

typedef struct tagRtsX509ExKeyUsage  RtsX509ExKeyUsage
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

RtsX509ExKeyUsage

.. _group___cmp_x509_cert_itf_1ga72a12c7d19ffabbf04660a3566a8bda2:

typedef struct tagRtsX509CertFilter  RtsX509CertFilter
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

RtsX509CertFilter

.. _group___cmp_x509_cert_itf_1ga96114d4c034d1905d83ce6d9a53c9a16:

typedef struct tagRtsX509CertInfo  RtsX509CertInfo
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This structure contains common fields of an certificate. Most values are stored in textual form if available. The alternative key usages and the signature algorithm are stored as RtsOID. Use the RtsOIDGetName function to get human readable names of this fields. The notBefor and notAfter fields are in UTC format and high resolution timestamp.

.. _group___cmp_x509_cert_itf_1gad569ed9753952aa901b5c63fc9042d18:

typedef void HUGEPTR( * PFX509ASYNCCALLBACK) (X509AsyncResult *pAsyncStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gab7a81b00f2c785b8f47ee2025ce01b82:

typedef RTS_HANDLE( *  PFX509CERTSTOREOPEN) (CMPID componentID, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga40eb369107aa2c60704402e239bf5a40:

typedef RTS_RESULT( *  PFX509CERTSTORECLOSE) (RTS_HANDLE hCertStore)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga8afbaadaf51b70475fe986de0a34700b:

typedef RTS_RESULT( *  PFX509CERTVERIFY) (RTS_HANDLE hCertStore, RTS_HANDLE hCert)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gad25c649a2db4521f2ffac17f1cc9c4e4:

typedef RTS_HANDLE( *  PFX509CERTSTORESEARCHGETFIRST) (RTS_HANDLE hCertStore, RtsX509CertFilter *pFilters, RTS_UI32 ui32NumOfFilters, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga5c0c4ccac758c678a5e444ff273d8827:

typedef RTS_HANDLE( *  PFX509CERTSTORESEARCHGETNEXT) (RTS_HANDLE hCertStore, RTS_HANDLE hCert, RtsX509CertFilter *pFilters, RTS_UI32 ui32NumOfFilters, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gae65e79041b081349b3251fc513f50cca:

typedef RTS_HANDLE( *  PFX509PARSECERTIFICATE) (RtsByteString *pCert, RTS_IEC_INT encoding, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gae45067b6d58118157978b40e9f8c4e6c:

typedef RTS_RESULT( *  PFX509CERTGETCONTENT) (RTS_HANDLE hCert, RtsX509CertInfo *pCertContent)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga8338a76d7665c2c3b5964adda69c42bb:

typedef RTS_RESULT( *  PFX509CERTGETBINARY) (RTS_HANDLE hCert, RTS_IEC_INT encoding, RtsByteString *pCert)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga2e4dd6d15110702f75e80c00b9fada61:

typedef RTS_RESULT( *  PFX509CERTGETPUBLICKEY) (RTS_HANDLE hCert, RtsCryptoKey *pPublicKey)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga7e06c0bceea9fe176ce73abfbd4dcbe1:

typedef RTS_RESULT( *  PFX509CERTGETPRIVATEKEY) (RTS_HANDLE hCertStore, RTS_HANDLE hCert, RtsCryptoKey *pPrivateKey)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gac76817489a4a746c21d222041cba2a22:

typedef RTS_RESULT( *  PFX509CERTGETTHUMBPRINT) (RTS_HANDLE hCert, RTS_IEC_UDINT *hashAlgorithm, RtsByteString *pThumbprint)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga140fed553059cfc2684fddc7eb7e914e:

typedef RTS_BOOL( *  PFX509CERTISDATEVALID) (RTS_HANDLE hCert, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaff2d2fbac251ac21c28c29bb44389e6b:

typedef RTS_BOOL( *  PFX509CERTISSELFSIGNED) (RTS_HANDLE hCert, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga2de080fd9fc25a734e2565dab7227fad:

typedef RTS_BOOL( *  PFX509CERTHASEXTENDEDKEYUSAGE) (RTS_HANDLE hCert, RTS_UI32 numOfExKeyUsages, RtsOID *pExKeyUsages, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga16b595365946bf594d4459b69f1e9dde:

typedef RTS_BOOL( *  PFX509CERTCHECKHOST) (RTS_HANDLE hCert, char *pszHostName, RTS_IEC_DWORD flags, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gae5596905ef58927522832a82d3273c75:

typedef RTS_BOOL( *  PFX509CERTCHECKIP) (RTS_HANDLE hCert, INADDR *pIP, RTS_IEC_DWORD flags, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga7b66691a59b6ded68753442c3ac2bb80:

typedef RTS_BOOL( *  PFX509CERTCOMPARE) (RTS_HANDLE hCert1, RTS_HANDLE hCert2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga9a05413f7a73063cb27f7feb2a971e62:

typedef RTS_RESULT( *  PFX509CERTKEYCLOSE) (RtsCryptoKey *pKey)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga8d049a389301ab17c65af5569b455898:

typedef RTS_RESULT( *  PFX509CERTCLOSE) (RTS_HANDLE hCert)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga707397f107a100c3b7ed7612950cde87:

typedef RTS_RESULT( *  PFX509CERTCMSVERIFY) (RTS_HANDLE hCertStore, RtsByteString *pCms, RTS_IEC_INT encoding, RtsByteString *pInData, RtsByteString *pOutData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga9acb20a8951234ef297e07bb3401cc84:

typedef RTS_RESULT( *  PFX509CERTCMSVERIFY2) (RTS_HANDLE hCertStore, RtsByteString *pCms, RTS_IEC_INT encoding, RtsByteString *pInData, RtsByteString *pOutData, RTS_HANDLE *phSignerCert)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga4d133108f9033cb0cede3d402e8ddf3b:

typedef RTS_RESULT( *  PFX509CERTCMSDECRYPT) (RTS_HANDLE hCertStore, RTS_HANDLE hRecipientCert, RtsByteString *pCms, RTS_IEC_INT encoding, RtsByteString *pOutData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga27d1a1cb963d55ae906a31ad7ffa97d8:

typedef RTS_RESULT( *  PFRTSOIDCREATE) (char *id, RtsOID *oid)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga00502aab48f5e8615dee6f89d6f22c0b:

typedef RTS_RESULT( *  PFRTSOIDGETID) (RtsOID *oid, RtsByteString *pBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga429f925c0556a712d25f4f40c509f635:

typedef RTS_RESULT( *  PFRTSOIDGETNAME) (RtsOID *oid, RtsByteString *pBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaab49590157ad26f28011d019b2c270cc:

typedef RTS_RESULT( *  PFRTSOIDCLEAR) (RtsOID *oid)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga4ef74ec02f9e0d1bd2e35d1ac46dee6a:

typedef RTS_RESULT( *  PFX509CERTINFOINIT) (RtsX509CertInfo *pCertInfo, RTS_UI32 structSize)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga89cd7545e0bbe8f7bae84acfa4b492f7:

typedef RTS_RESULT( *  PFX509CERTINFOEXIT) (RtsX509CertInfo *pCertInfo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga6c85652e227ad4b48aa674e5a350260a:

typedef RTS_HANDLE( *  PFX509CERTSTOREGETFIRSTBACKEND) (RTS_HANDLE hCertStore, RtsCertBackendInfo *pInfo, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gabeb02c311eaedfe2b565c7606ab9a58d:

typedef RTS_HANDLE( *  PFX509CERTSTOREGETNEXTBACKEND) (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RtsCertBackendInfo *pInfo, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga3c68d02fe0dd4e6e6e9ccd17af441981:

typedef RTS_RESULT( *  PFX509CERTSTORGETBACKENDINFO) (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RtsCertBackendInfo *pInfo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gac535a9348b4d03d2563675d19d669eba:

typedef RTS_HANDLE( *  PFX509CERTCREATESELFSIGNED) (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RtsX509CertInfo *pCertInfo, RTS_UI32 ui32KeySize, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gad7b8da1fb8a9125f8fb694738627a47c:

typedef RTS_RESULT( *  PFX509CERTCREATESELFSIGNEDASYNC) (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RtsX509CertInfo *pCertInfo, RTS_UI32 ui32KeySize, void *pCallbackParam, PFX509ASYNCCALLBACK pfCallback)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gad03860c9b5176a645cef05aed51516a5:

typedef RTS_RESULT( *  PFX509CERTCREATECSR) (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RtsX509CertInfo *pCertInfo, RTS_UI32 ui32KeySize, RTS_IEC_INT encoding, RtsByteString *pCSR)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga41e61642d5ed1450216022a368a231e9:

typedef RTS_RESULT( *  PFX509CERTCREATECSRASYNC) (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RtsX509CertInfo *pCertInfo, CMPID cmpID, RTS_UI32 ui32KeySize, RTS_IEC_INT encoding, RtsByteString *pCSR, void *pCallbackParam, PFX509ASYNCCALLBACK pfCallback)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga26972c1045b11e622b432beb83e6747d:

typedef RTS_RESULT( *  PFX509CERTSTOREADDCERT) (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RTS_HANDLE hCert, RTS_IEC_INT trustLevel)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaeb7d60c94f630f089d406ee8954b1597:

typedef RTS_RESULT( *  PFX509CERTSTOREREMOVECERT) (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RTS_HANDLE hCert, RTS_BOOL bRemovePrivateKey)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gac64fd151130a2c04890c9799e12e3d31:

typedef RTS_HANDLE( *  PFX509CERTSTOREGETFIRSTCERT) (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RTS_IEC_INT trustLevel, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga42905386cede7dd55bdfd011d639c43e:

typedef RTS_HANDLE( *  PFX509CERTSTOREGETNEXTCERT) (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RTS_HANDLE hCert, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga6e96b2dd635b88b399ef12c2c1c7d032:

typedef RTS_HANDLE( *  PFX509CERTSTOREREGISTER) (RTS_HANDLE hCertStore, CMPID cmpID, RtsX509CertInfo *pCertInfo, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga149f78936395dc34dc20ffe63bb24341:

typedef RTS_RESULT( *  PFX509CERTSTOREUNREGISTER) (RTS_HANDLE hCertStore, RTS_HANDLE hRegisteredComponent)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga128f64d4cb20d8dbc48392cb266cdc52:

typedef RTS_HANDLE( *  PFX509CERTSTOREGETREGISTEREDCERT) (RTS_HANDLE hCertStore, RTS_HANDLE hUseCase, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaf47ff42ad940ed3f43064a69215725a3:

typedef ICmpX509Cert_C ICmpX509Cert
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function Documentation
----------------------

.. _group___cmp_x509_cert_itf_1ga75d8838de2919b5b7db4c88141ace8c0:

RTS_HANDLE X509CertStoreOpen (CMPID componentID, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Open the certificate store.

**Parameters**

+---------+-------------+----------------------------------------------------+
| [in]    | componentID | ID of the component opening the certificate store. |
+---------+-------------+----------------------------------------------------+
| [out]   | pResult     | Result of the operation.                           |
+---------+-------------+----------------------------------------------------+

**Returns:**

Handle to the certificate store

.. _group___cmp_x509_cert_itf_1ga670dba71e49a37089b53439b45a23064:

RTS_RESULT X509CertStoreClose (RTS_HANDLE hCertStore)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Close the certificate store.

**Parameters**

+---------+------------+---------------------------------+
| [in]    | hCertStore | Handle of to certificate store. |
+---------+------------+---------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1gad3e090ee6285c58ce8ea984b25dd333c:

RTS_RESULT X509CertVerify (RTS_HANDLE hCertStore, RTS_HANDLE hCert)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Verify the given certificate. This verify checks only if the certificate itself is trusted using the certificates in the store. The verify checks if the certificate was added to the untrusted certs list. No subjects, key usages or other fields are verified. This has to be done by the application using this function. If the verify should use CRL to verify the certificates set the setting VerifyUseCRL to 1. This is disabled by default.

**Parameters**

+---------+------------+---------------------------------+
| [in]    | hCertStore | Handle of to certificate store. |
+---------+------------+---------------------------------+
| [in]    | hCert      | Certificate to verify.          |
+---------+------------+---------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1ga14cf964ec8c011bca148bf6a399a5f26:

RTS_HANDLE X509CertStoreSearchGetFirst (RTS_HANDLE hCertStore, RtsX509CertFilter *pFilters, RTS_UI32 ui32NumOfFilters, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Search for the given certificate in the cert store.

**Parameters**

+---------+------------------+--------------------------------------------+
| [in]    | hCertStore       | Handle of to certificate store.            |
+---------+------------------+--------------------------------------------+
| [in]    | pFilters         | Pointer to array of filters to be applied. |
+---------+------------------+--------------------------------------------+
| [in]    | ui32NumOfFilters | Number of applied filters.                 |
+---------+------------------+--------------------------------------------+

**Returns:**

Handle to the first certificate matching the filter criteria.

.. _group___cmp_x509_cert_itf_1ga66abcdf7c88f2139ce6388e8572230e4:

RTS_HANDLE X509CertStoreSearchGetNext (RTS_HANDLE hCertStore, RTS_HANDLE hCert, RtsX509CertFilter *pFilters, RTS_UI32 ui32NumOfFilters, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Search for the given certificate in the cert store.

**Parameters**

+---------+------------------+--------------------------------------------+
| [in]    | hCertStore       | Handle of to certificate store.            |
+---------+------------------+--------------------------------------------+
| [in]    | hCert            | Handle of the last found certificate.      |
+---------+------------------+--------------------------------------------+
| [in]    | pFilters         | Pointer to array of filters to be applied. |
+---------+------------------+--------------------------------------------+
| [in]    | ui32NumOfFilters | Number of applied filters.                 |
+---------+------------------+--------------------------------------------+

**Returns:**

Handle to the first certificate matching the filter criteria.

.. _group___cmp_x509_cert_itf_1gadeafc6baa4fecf1fb07343263e76b28d:

RTS_HANDLE X509ParseCertificate (RtsByteString *pCert, RTS_IEC_INT encoding, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Parse a certificate which is located in the memory (e.g received from a communication partner). Once parsed the certificate is stored in a temporary store. Use the function X509CertClose to close the certificate.

**Parameters**

+---------+----------+------------------------------+
| [in]    | pCert    | Binary encoded certificate.  |
+---------+----------+------------------------------+
| [in]    | encoding | Encoding of the certificate. |
+---------+----------+------------------------------+
| [out]   | pResult  | Result of the operation      |
+---------+----------+------------------------------+

**Returns:**

Handle to the parsed certificate.

.. _group___cmp_x509_cert_itf_1ga172a5866f360d2e20a34e96f7983528a:

RTS_RESULT X509CertGetContent (RTS_HANDLE hCert, RtsX509CertInfo *pCertContent)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get some common content from the certificate.

**Parameters**

+---------+--------------+-----------------------------------------+
| [in]    | hCert        | Handle of the certificate of interest.  |
+---------+--------------+-----------------------------------------+
| [out]   | pCertContent | Pointer where to store the information. |
+---------+--------------+-----------------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1gaf053757a0a41a49ece6bd519057e2aaa:

RTS_RESULT X509CertGetBinary (RTS_HANDLE hCert, RTS_IEC_INT encoding, RtsByteString *pCert)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the certificate in a binary encoded format. Use the encoding parameter to set the needed format.

**Parameters**

+---------+----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hCert    | Handle of the certificate of interest.                                                                                                                                     |
+---------+----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | encoding | How to encode the certificate.                                                                                                                                             |
+---------+----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pCert    | Buffer where to store the certificate. If the byte string contains a NULL memory pointer the function will write the needed buffer length to the pCert->ui32Length member. |
+---------+----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1ga5452515ba0aea6615442a218ea5ecd4a:

RTS_RESULT X509CertGetPublicKey (RTS_HANDLE hCert, RtsCryptoKey *pPublicKey)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the public key from the certificate.

The format of this key is an implementation detail and has to match the expected format of the asymmetric functions of the CmpCrpyotItf. The key data is opaque for the user of the keys. If the keys are needed in a defined exchange format use the CryptoKeyExport function of the CmpCryptoItf.

**Parameters**

+---------+------------+----------------------------------------------------------+
| [in]    | hCert      | Handle of the certificate of interest.                   |
+---------+------------+----------------------------------------------------------+
| [out]   | pPublicKey | Pointer to the cryptographic key storing the public key. |
+---------+------------+----------------------------------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1gabe3af57c59a534fb6da79f9c82c107c9:

RTS_RESULT X509CertGetPrivateKey (RTS_HANDLE hCertStore, RTS_HANDLE hCert, RtsCryptoKey *pPrivateKey)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the private key of the certificate. This is only possible if the private key stored in the certificate store.

The format of this key is an implementation detail and has to match the expected format of the asymmetric functions of the CmpCrpyotItf. The key data is opaque for the user of the keys.

**Parameters**

+---------+------------+-----------------------------------------------------------+
| [in]    | hCert      | Handle of the certificate of interest.                    |
+---------+------------+-----------------------------------------------------------+
| [out]   | pPublicKey | Pointer to the cryptographic key storing the private key. |
+---------+------------+-----------------------------------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1ga25a47310606b897e9b3e0ddae44711aa:

RTS_RESULT X509CertGetThumbprint (RTS_HANDLE hCert, RTS_IEC_UDINT *hashAlgorithm, RtsByteString *pThumbprint)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Generate the certificate thumb-print. The thumb-print will be just the plain bytes of the hash. Set the hash algorithm to your needs.

**Parameters**

+---------+---------------+------------------------------------------------------------------------------+
| [in]    | hCert         | Handle of the certificate of interest.                                       |
+---------+---------------+------------------------------------------------------------------------------+
| [in]    | hashAlgorithm | The hashing algorithm used to generate the thumb-print.                      |
+---------+---------------+------------------------------------------------------------------------------+
| [out]   | pThumbprint   | Buffer to store the thumb-print. If byte string is NULL memory ia allocated. |
+---------+---------------+------------------------------------------------------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1ga57995c547a18717e3961ddd81ed68fb0:

RTS_BOOL X509CertIsDateValid (RTS_HANDLE hCert, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Check if a certificate has a valid date (not-before and not-after is in the current time period)

**Parameters**

+---------+---------+---------------------------+
| [in]    | hCert   | Handle of the certificate |
+---------+---------+---------------------------+
| [out]   | pResult | Pointer to error code     |
+---------+---------+---------------------------+

**Return values**

+---------------+------------------+
| ERR_OK        | hCert is valid   |
+---------------+------------------+
| ERR_PARAMETER | hCert is invalid |
+---------------+------------------+

**Returns:**

Result of the operation

**Return values**

+-------+----------------------------------------------+
| TRUE  | Date of certificate is valid                 |
+-------+----------------------------------------------+
| FALSE | Date of certificate is out of current period |
+-------+----------------------------------------------+

.. _group___cmp_x509_cert_itf_1gafa046a2b2f200b74e5d7a663e8708b94:

RTS_BOOL X509CertIsSelfSigned (RTS_HANDLE hCert, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Check if a certificate is self-signed of is signed by a CA authority

**Parameters**

+---------+---------+---------------------------+
| [in]    | hCert   | Handle of the certificate |
+---------+---------+---------------------------+
| [out]   | pResult | Pointer to error code     |
+---------+---------+---------------------------+

**Return values**

+---------------+------------------+
| ERR_OK        | hCert is valid   |
+---------------+------------------+
| ERR_PARAMETER | hCert is invalid |
+---------------+------------------+

**Returns:**

Result of the operation

**Return values**

+-------+-----------------------------------------+
| TRUE  | Certificate is self-signed              |
+-------+-----------------------------------------+
| FALSE | Certificate is signed ba a CA authority |
+-------+-----------------------------------------+

.. _group___cmp_x509_cert_itf_1ga1487ed9be97f1b084fc827c0ff465da5:

RTS_BOOL X509CertHasExtendedKeyUsage (RTS_HANDLE hCert, RTS_UI32 numOfExKeyUsages, RtsOID *pExKeyUsages, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Check if the extended key-usages of the specified certificate has the specified extended key-usages

**Parameters**

+---------+------------------+----------------------------------------+
| [in]    | hCert            | Handle of the certificate              |
+---------+------------------+----------------------------------------+
| [in]    | numOfExKeyUsages | Number of extended key-usages          |
+---------+------------------+----------------------------------------+
| [in]    | pExKeyUsages     | Pointer to list of extended key-usages |
+---------+------------------+----------------------------------------+
| [out]   | pResult          | Pointer to error code                  |
+---------+------------------+----------------------------------------+

**Return values**

+---------------+------------------+
| ERR_OK        | hCert is valid   |
+---------------+------------------+
| ERR_PARAMETER | hCert is invalid |
+---------------+------------------+

**Returns:**

Result of the operation

**Return values**

+-------+-----------------------------------+
| TRUE  | Extended key-usages identical     |
+-------+-----------------------------------+
| FALSE | Extended key-usages not identical |
+-------+-----------------------------------+

.. _group___cmp_x509_cert_itf_1gaa6bbabab8cf710d40ba86cac31027d5b:

RTS_BOOL X509CertCheckHost (RTS_HANDLE hCert, char *pszHostName, RTS_IEC_DWORD flags, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Check if a certificate is bound to a specific host name. Both subject and subject alternative names are checked.

**Parameters**

+---------+-------------+----------------------------------------------------------+
| [in]    | hCert       | Handle of the certificate                                |
+---------+-------------+----------------------------------------------------------+
| [in]    | pszHostName | Host-name to check.                                      |
+---------+-------------+----------------------------------------------------------+
| [in]    | flags       | Flags how to check host-name: See: Cert check host flags |
+---------+-------------+----------------------------------------------------------+
| [out]   | pResult     | Pointer to error code                                    |
+---------+-------------+----------------------------------------------------------+

**Return values**

+---------------+------------------+
| ERR_OK        | hCert is valid   |
+---------------+------------------+
| ERR_PARAMETER | hCert is invalid |
+---------------+------------------+

**Returns:**

Result of the operation

**Return values**

+-------+----------------------------------------+
| TRUE  | Certificate is bound to host-name.     |
+-------+----------------------------------------+
| FALSE | Certificate is not bound to host-name. |
+-------+----------------------------------------+

.. _group___cmp_x509_cert_itf_1ga4bb6ea9259e818f14826c0a7bd8fce3a:

RTS_BOOL X509CertCheckIP (RTS_HANDLE hCert, INADDR *pIP, RTS_IEC_DWORD flags, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Check if a certificate is bound to a specific IP Address.

**Parameters**

+---------+---------+-----------------------------------------------------------+
| [in]    | hCert   | Handle of the certificate                                 |
+---------+---------+-----------------------------------------------------------+
| [in]    | pIP     | IP address in network byte oder.                          |
+---------+---------+-----------------------------------------------------------+
| [in]    | flags   | Flags how to check IP address. See: Cert check host flags |
+---------+---------+-----------------------------------------------------------+
| [out]   | pResult | Pointer to error code                                     |
+---------+---------+-----------------------------------------------------------+

**Return values**

+---------------+------------------+
| ERR_OK        | hCert is valid   |
+---------------+------------------+
| ERR_PARAMETER | hCert is invalid |
+---------------+------------------+

**Returns:**

Result of the operation

**Return values**

+-------+-----------------------------------------+
| TRUE  | Certificate is bound to IP address.     |
+-------+-----------------------------------------+
| FALSE | Certificate is not bound to IP address. |
+-------+-----------------------------------------+

.. _group___cmp_x509_cert_itf_1gab62fd9ded8c386c918f4ae84c1d0bf07:

RTS_BOOL X509CertCompare (RTS_HANDLE hCert1, RTS_HANDLE hCert2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Compare two certificates if they are identical.

**Parameters**

+---------+--------+------------------------------+
| [in]    | hCert1 | Handle to first certificate  |
+---------+--------+------------------------------+
| [in]    | hCert1 | Handle to second certificate |
+---------+--------+------------------------------+

**Returns:**

TRUE if they are identical, FALSE if not.

.. _group___cmp_x509_cert_itf_1ga9c29c73230e4f790ea6563c6df6b925a:

RTS_RESULT X509CertKeyClose (RtsCryptoKey *pKey)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga073da3edef2ddc44f45739da81f78394:

RTS_RESULT X509CertClose (RTS_HANDLE hCert)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Close the certificate.

**Parameters**

+---------+-------+---------------------------+
| [in]    | hCert | Handle of to certificate. |
+---------+-------+---------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1ga6b51c3dc63aea1ca5cb8c2d203cbb396:

RTS_RESULT X509CertCmsVerify (RTS_HANDLE hCertStore, RtsByteString *pCms, RTS_IEC_INT encoding, RtsByteString *pInData, RtsByteString *pOutData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Verifies a CMS signature. This function can handle both (detached and attached) signatures. The signers certificate has to be located in the CMS container. Otherwise the verify will fail. The signers certificate is always verified against the trusted certificate store on the PLC.

**Parameters**

+---------+------------+------------------------------------------------------------------------------------------------------------+
| [in]    | hCertStore | Handle to the certificate store.                                                                           |
+---------+------------+------------------------------------------------------------------------------------------------------------+
| [in]    | pCms       | Pointer to a byte string storing the CMS container.                                                        |
+---------+------------+------------------------------------------------------------------------------------------------------------+
| [in]    | encoding   | Encoding of the CMS container.                                                                             |
+---------+------------+------------------------------------------------------------------------------------------------------------+
| [in]    | pInData    | Used only if the signature is detached. In this case this byte string has to store the data to be verified |
+---------+------------+------------------------------------------------------------------------------------------------------------+
| [in]    | pOutData   | Pointer to a byte string where to store the extracted data.                                                |
+---------+------------+------------------------------------------------------------------------------------------------------------+

**Returns:**

ERR_OK if the signature is valid and the signer was trustworthy. ERR_SIGNATURE_MISMATCH if the signature is invalid and / or the signer was not trustworthy. ERR_PARAMETER if the given parameters are not consistent.

.. _group___cmp_x509_cert_itf_1gab509b5e8a4e99afa871f6ff22d29b342:

RTS_RESULT X509CertCmsVerify2 (RTS_HANDLE hCertStore, RtsByteString *pCms, RTS_IEC_INT encoding, RtsByteString *pInData, RtsByteString *pOutData, RTS_HANDLE *phSignerCert)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The description of X509CertCmsVerify applies here too. Additional this interface returns a handle to the signers certificate.

**Parameters**

+---------+--------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hCertStore   | Handle to the certificate store.                                                                                                                                                                                                       |
+---------+--------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pCms         | Pointer to a byte string storing the CMS container.                                                                                                                                                                                    |
+---------+--------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | encoding     | Encoding of the CMS container.                                                                                                                                                                                                         |
+---------+--------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pInData      | Used only if the signature is detached. In this case this bytes tring has to store the data to be verified                                                                                                                             |
+---------+--------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pOutData     | Pointer to a byte string where to store the extracted data.                                                                                                                                                                            |
+---------+--------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | phSignerCert | Pointer to a handle where to store the signers certificate. This handle is only returned if the verification was successful. If the container was signed multiple times this handle contains the first valid certificate. Can be NULL. |
+---------+--------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

ERR_OK if the signature is valid and the signer was trustworthy. ERR_SIGNATURE_MISMATCH if the signature is invalid and / or the signer was not trustworthy. ERR_PARAMETER if the given parameters are not consistent.

.. _group___cmp_x509_cert_itf_1gaebc8225f7eb1f386c6e24732d53494ec:

RTS_RESULT X509CertCmsDecrypt (RTS_HANDLE hCertStore, RTS_HANDLE hRecipientCert, RtsByteString *pCms, RTS_IEC_INT encoding, RtsByteString *pOutData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Decrypt a CMS container.

**Parameters**

+---------+----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hCertStore     | Handle to the certificate store.                                                                                                                         |
+---------+----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hRecipientCert | Handle to the recipients certificate. A private key of the certificate has to be available. Though the certificate has to be located in the "own" store. |
+---------+----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pCms           | Pointer to a byte string storing the CMS container.                                                                                                      |
+---------+----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | encoding       | Encoding of the CMS container.                                                                                                                           |
+---------+----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pOutData       | Pointer to a byte string where to store the extracted data.                                                                                              |
+---------+----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

ERR_OK if the container was successfully decrypted. ERR_PARAMETER if the given parameters are not consistent.

.. _group___cmp_x509_cert_itf_1gac62d802c208e5937b00033c2288b0c63:

RTS_RESULT RtsOIDCreate (char *id, RtsOID *oid)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create an RtsOID based on a given ID.

**Parameters**

+---------+-----+------------------------------------------------------------+
| [in]    | id  | OID as string in dotted format. E.g. (1.2.3.4.5.6.7.8.9.0) |
+---------+-----+------------------------------------------------------------+
| [out]   | oid | Pointer to an OID to fill up.                              |
+---------+-----+------------------------------------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1gaff3a425033e2d1a475c6623f99829d1b:

RTS_RESULT RtsOIDGetID (RtsOID *oid, RtsByteString *pBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the ID of an OID in dotted notation.

**Parameters**

+---------+---------+---------------------------------+
| [in]    | oid     | OID to print.                   |
+---------+---------+---------------------------------+
| [out]   | pBuffer | Buffer where to store the name. |
+---------+---------+---------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1ga9ba84f61b9c3fe5b6ae35f1c11b1e74a:

RTS_RESULT RtsOIDGetName (RtsOID *oid, RtsByteString *pBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the given name of an OID. If the OID is unknown to the system the number.number.number... notation will be returned.

**Parameters**

+---------+---------+---------------------------------+
| [in]    | oid     | OID to print.                   |
+---------+---------+---------------------------------+
| [out]   | pBuffer | Buffer where to store the name. |
+---------+---------+---------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1ga370f2a84924e0202d6f3024d054569f0:

RTS_RESULT RtsOIDClear (RtsOID *oid)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Clear an OID
**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1gaf9347f6b295ddc43ae39c26b15c0299a:

RTS_RESULT X509CertInfoInit (RtsX509CertInfo *pCertInfo, RTS_UI32 structSize)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Initialize the RtsX509CertInfo structure.

**Parameters**

+---------+------------+---------------------------+
| [in]    | pCertInfo  | Pointer to the structure. |
+---------+------------+---------------------------+
| [in]    | structSize | Size of the structure.    |
+---------+------------+---------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1gaa11dd819381e15b7a5e0b414c728b32f:

RTS_RESULT X509CertInfoExit (RtsX509CertInfo *pCertInfo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Cleanup an RtsX509CertInfo structure. All allocated memory used by this structure will be release.

**Parameters**

+---------+-------+------------------------------------+
| [in]    | hCert | Pointer to the object to clean up. |
+---------+-------+------------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1gad0be785fbf9846773eabd0db2b8bc493:

RTS_HANDLE X509CertStoreGetFirstBackend (RTS_HANDLE hCertStore, RtsCertBackendInfo *pInfo, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the first registered back-end of the certificate store.

**Parameters**

+---------+------------+------------------------------------------------------+
| [in]    | hCertStore | Handle to the certificate store                      |
+---------+------------+------------------------------------------------------+
| [out]   | pInfo      | Pointer to back-end info. Filled up by the function. |
+---------+------------+------------------------------------------------------+
| [out]   | pResult    | Result of the operation.                             |
+---------+------------+------------------------------------------------------+

**Returns:**

Handle of the first back-end.

.. _group___cmp_x509_cert_itf_1gacb16b89ed74609c7fe1afe511e0ea733:

RTS_HANDLE X509CertStoreGetNextBackend (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RtsCertBackendInfo *pInfo, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the next registered back-end of the certificate store.

**Parameters**

+---------+------------+------------------------------------------------------+
| [in]    | hCertStore | Handle to the certificate store                      |
+---------+------------+------------------------------------------------------+
| [in]    | hBackend   | Handle to the previous back-end.                     |
+---------+------------+------------------------------------------------------+
| [out]   | pInfo      | Pointer to back-end info. Filled up by the function. |
+---------+------------+------------------------------------------------------+
| [out]   | pResult    | Result of the operation.                             |
+---------+------------+------------------------------------------------------+

**Returns:**

Handle of the next back-end. RTS_INVALID_HANDLE if no more back-end is available.

.. _group___cmp_x509_cert_itf_1ga8360bf264ada12702cb58854953733c0:

RTS_RESULT X509CertStorGetBackendInfo (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RtsCertBackendInfo *pInfo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The information of a specific certificate back-end.

**Parameters**

+---------+------------+------------------------------------------------------+
| [in]    | hCertStore | Handle to the certificate store                      |
+---------+------------+------------------------------------------------------+
| [in]    | hBackend   | Handle to the previous back-end.                     |
+---------+------------+------------------------------------------------------+
| [out]   | pInfo      | Pointer to back-end info. Filled up by the function. |
+---------+------------+------------------------------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1gaf0d551e9529268467ac55cd5f244166e:

RTS_HANDLE X509CertCreateSelfSigned (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RtsX509CertInfo *pCertInfo, RTS_UI32 ui32KeySize, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create a new self signed certificate. A private key is generated and automatically stored.

**Parameters**

+---------+-------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hCertStore  | Handle to the certificate store                                                                                                 |
+---------+-------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hBackend    | Handle to the back-end where to store the generated certificate. RTS_INVALID_HANDLE should be used if no back-end is specified. |
+---------+-------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pCertInfo   | Information of the certificate to be generated.                                                                                 |
+---------+-------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ui32KeySize | Size in bits of the private key.                                                                                                |
+---------+-------------+---------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult     | Result of the operation.                                                                                                        |
|         |             |                                                                                                                                 |
|         |             |   - ERR_OK: Everything went fine.                                                                                               |
|         |             |                                                                                                                                 |
|         |             |   - ERR_INVALID_HANDLE: Some input handle is invalid.                                                                           |
|         |             |                                                                                                                                 |
|         |             |   - ERR_PARAMETER: Some input parameter is invalid.                                                                             |
|         |             |                                                                                                                                 |
|         |             |   - ERR_OVERFLOW: The timestamps of the certificate would overflow.                                                             |
|         |             |                                                                                                                                 |
|         |             |   - ERR_NOMEMORY: Not enough memory to perform this operation.                                                                  |
|         |             |                                                                                                                                 |
|         |             |   - ERR_FAILED: Creation of self signed certificate failed. failed                                                              |
+---------+-------------+---------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Handle to the created self-signed certificate

.. _group___cmp_x509_cert_itf_1gafa3352932820f31bffb651567d200f5c:

RTS_RESULT X509CertCreateSelfSignedAsync (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RtsX509CertInfo *pCertInfo, RTS_UI32 ui32KeySize, void *pCallbackParam, PFX509ASYNCCALLBACK pfCallback)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create a new self signed certificate, asynchronously. A private key is generated and automatically stored.

**Parameters**

+---------+----------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hCertStore     | Handle to the certificate store                                                                                                 |
+---------+----------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hBackend       | Handle to the back-end where to store the generated certificate. RTS_INVALID_HANDLE should be used if no back-end is specified. |
+---------+----------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pCertInfo      | Information of the certificate to be generated.                                                                                 |
+---------+----------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ui32KeySize    | Size in bits of the private key.                                                                                                |
+---------+----------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ui32KeySize    | Size in bits of the private key.                                                                                                |
+---------+----------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pCallbackParam | Parameter used when the callback is called when the operation has finished.                                                     |
+---------+----------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pfCallback     | Callback function that is called at the end of the operation                                                                    |
+---------+----------------+---------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Result of the operation

.. _group___cmp_x509_cert_itf_1gae352d99fc4f1b840c570aab5d2991caf:

RTS_RESULT X509CertCreateCSR (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RtsX509CertInfo *pCertInfo, RTS_UI32 ui32KeySize, RTS_IEC_INT encoding, RtsByteString *pCSR)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create a new certificate request. A new private key will be generated and automatically stored in the key store. The certificate request can be sent to an official CA to get a signed certificate.

**Parameters**

+---------+-------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hCertStore  | Handle to the certificate store                                                                                                 |
+---------+-------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hBackend    | Handle to the back-end where to store the generated certificate. RTS_INVALID_HANDLE should be used if no back-end is specified. |
+---------+-------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pCertInfo   | Information of the certificate to be generated.                                                                                 |
+---------+-------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ui32KeySize | Size in bits of the private key.                                                                                                |
+---------+-------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | encoding    | Encoding of the generated CSR.                                                                                                  |
+---------+-------------+---------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pCSR        | The signing request in binary form.                                                                                             |
+---------+-------------+---------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Result of the operation

.. _group___cmp_x509_cert_itf_1ga11c9602a184532a470c199fe50be7c13:

RTS_RESULT X509CertCreateCSRAsync (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RtsX509CertInfo *pCertInfo, CMPID cmpID, RTS_UI32 ui32KeySize, RTS_IEC_INT encoding, RtsByteString *pCSR, void *pCallbackParam, PFX509ASYNCCALLBACK pfCallback)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create a new certificate request. A new private key will be generated and automatically stored in the key store. The certificate request can be sent to an official CA to get a signed certificate.

**Parameters**

+---------+----------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hCertStore     | Handle to the certificate store                                                                                                 |
+---------+----------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hBackend       | Handle to the back-end where to store the generated certificate. RTS_INVALID_HANDLE should be used if no back-end is specified. |
+---------+----------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pCertInfo      | Information of the certificate to be generated.                                                                                 |
+---------+----------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | cmpID          | Component ID of the component for which the CSR is created.                                                                     |
+---------+----------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ui32KeySize    | Size in bits of the private key.                                                                                                |
+---------+----------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | encoding       | Encoding of the generated CSR.                                                                                                  |
+---------+----------------+---------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pCSR           | The signing request in binary form.                                                                                             |
+---------+----------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pCallbackParam | Parameter used when the callback is called when the operation has finished.                                                     |
+---------+----------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pfCallback     | Callback function that is called at the end of the operation                                                                    |
+---------+----------------+---------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Result of the operation

.. _group___cmp_x509_cert_itf_1ga01ee2bd1985de5a20ab80cc616d9b6a6:

RTS_RESULT X509CertStoreAddCert (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RTS_HANDLE hCert, RTS_IEC_INT trustLevel)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Add the given certificate to the Certificate store

**Parameters**

+---------+------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hCertStore | Handle of to certificate store.                                                                                                 |
+---------+------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hBackend   | Handle to the back-end where to store the generated certificate. RTS_INVALID_HANDLE should be used if no back-end is specified. |
+---------+------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hCert      | Handle of the certificate to be imported.                                                                                       |
+---------+------------+---------------------------------------------------------------------------------------------------------------------------------+
| [in]    | trustLevel | The category where to store the certificate. Note: RtsTrustLevel_Own ist not selectable. \parampResult Result of the operation. |
+---------+------------+---------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Handle to the imported certificate.

.. _group___cmp_x509_cert_itf_1ga410f59ca7b7871c9723cc5a82f495382:

RTS_RESULT X509CertStoreRemoveCert (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RTS_HANDLE hCert, RTS_BOOL bRemovePrivateKey)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Remove the certificate from the store.

**Parameters**

+---------+-------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hCertStore        | Handle of to certificate store.                                                                                                                      |
+---------+-------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hBackend          | Handle to the back-end where to store the generated certificate. RTS_INVALID_HANDLE should be used if no back-end is specified.                      |
+---------+-------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hCert             | Handle of the certificate to remove.                                                                                                                 |
+---------+-------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | bRemovePrivateKey | Select if the private key of the certificate should be deleted too. If the certificate is renewed the same private key the key shouldn't be deleted. |
+---------+-------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1gab3f65d84a84e8839f61eefa0763785de:

RTS_HANDLE X509CertStoreGetFirstCert (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RTS_IEC_INT trustLevel, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaa3f612bd6436163892df6ccbf4c3eaf1:

RTS_HANDLE X509CertStoreGetNextCert (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RTS_HANDLE hCert, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga10a10dfcd08794eb0825b6812eb2bfda:

RTS_HANDLE X509CertStoreRegister (RTS_HANDLE hCertStore, CMPID cmpID, RtsX509CertInfo *pCertInfo, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Register your certificate at the certificate store. This has to be done in order to allow the user the view the different configured certificates and to generate missing certificates or to renew outdated certificates. Register the same information you are using in the X509CertStoreSearch function.

**Parameters**

+---------+------------+-----------------------------------------------------------------------------------------------------------+
| [in]    | hCertStore | Handle of to certificate store.                                                                           |
+---------+------------+-----------------------------------------------------------------------------------------------------------+
| [in]    | CmpID      | Component ID which registered the certificate                                                             |
+---------+------------+-----------------------------------------------------------------------------------------------------------+
| [in]    | pCertInfo  | Certificate information to be registered. Should match the information needed to use the Search function. |
+---------+------------+-----------------------------------------------------------------------------------------------------------+
| [out]   | pResult    | Pointer to error code                                                                                     |
+---------+------------+-----------------------------------------------------------------------------------------------------------+

**Returns:**

Handle to the entry

.. _group___cmp_x509_cert_itf_1ga8545f584011c653ac8baa957d1020bc0:

RTS_RESULT X509CertStoreUnregister (RTS_HANDLE hCertStore, RTS_HANDLE hRegisteredComponent)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Parameters**

+---------+----------------------+--------------------------------------------------------+
| [in]    | hCertStore           | Handle of to certificate store                         |
+---------+----------------------+--------------------------------------------------------+
| [in]    | hRegisteredComponent | Handle to the entry retrieved by X509CertStoreRegister |
+---------+----------------------+--------------------------------------------------------+

**Returns:**

Result of the operation

.. _group___cmp_x509_cert_itf_1ga1d36aa91065172a577af54736687fb4e:

RTS_HANDLE X509CertStoreGetRegisteredCert (RTS_HANDLE hCertStore, RTS_HANDLE hUseCase, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the certificate available for a registered use case. If not certificate is available RTS_INVALID_HANDLE will be returned. The following rules apply for selecting the certificate:

  - Check if a certificate is configured by the user. (The thumb-print is pinned for component and index). Use this one if available, return error if not available.

  - If no certificate is configured filter the available certificates by subject, key usage, extended key usage and a valid timestamp. Return error if list is empty.

  - Split the available certificates by signed and self signed certificates. Prefer the signed certificates over the self signed certificates:

  - Select the certificate with the longest period of validity.

  - If some certificates have the same period of validity select the one with the strongest key.

**Parameters**

+---------+------------+---------------------------------------------------------------------------+
| [in]    | hCertStore | Handle of to certificate store.                                           |
+---------+------------+---------------------------------------------------------------------------+
| [in]    | hUseCase   | Handle to the registered use case. Retrieved using X509CertStoreRegister. |
+---------+------------+---------------------------------------------------------------------------+
| [out]   | pResult    | Pointer to error code                                                     |
+---------+------------+---------------------------------------------------------------------------+

**Returns:**

Handle to the certificate. Use X509CertClose to close the certificate.

.. last line of group.rst template
.. last line of composition.rst template


