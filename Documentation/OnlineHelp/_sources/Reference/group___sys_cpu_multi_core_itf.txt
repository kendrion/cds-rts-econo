.. first line of composition.rst template

.. first line of group.rst template

.. _group___sys_cpu_multi_core_itf:

==================
SysCpuMultiCoreItf
==================

Interface of SysCpuMultiCore. :ref:`More... <group___sys_cpu_multi_core_itf-details>`

Modules
-------

- :ref:`Event parameter <group___sys_cpu_multi_core_itf___eventparameter>`

- :ref:`Events <group___sys_cpu_multi_core_itf___events>`

- :ref:`Settings <group___sys_cpu_multi_core_itf___settings>`

- :ref:`Static defines <group___sys_cpu_multi_core_itf___staticdefines>`

Data Structures
---------------

- struct :ref:`CpuCoreBits <union_cpu_core_bits>`

- struct :ref:`tagCpuCoreBindingDesc <structtag_cpu_core_binding_desc>`

- struct :ref:`tagsysmcbdalloc_struct <structtagsysmcbdalloc__struct>`

- struct :ref:`tagsysmcbdcount_struct <structtagsysmcbdcount__struct>`

- struct :ref:`tagsysmcbdfree_struct <structtagsysmcbdfree__struct>`

- struct :ref:`tagsysmcbdgetfirstid_struct <structtagsysmcbdgetfirstid__struct>`

- struct :ref:`tagsysmcbdgetnextid_struct <structtagsysmcbdgetnextid__struct>`

- struct :ref:`tagsysmcbdisset_struct <structtagsysmcbdisset__struct>`

- struct :ref:`tagsysmcgetload_struct <structtagsysmcgetload__struct>`

- struct :ref:`tagsysmcgetnumofcores_struct <structtagsysmcgetnumofcores__struct>`

- struct :ref:`tagsysmcgetprocessbinding_struct <structtagsysmcgetprocessbinding__struct>`

- struct :ref:`tagsysmcgettaskbinding_struct <structtagsysmcgettaskbinding__struct>`

- struct :ref:`ISysCpuMultiCore_C <struct_i_sys_cpu_multi_core___c>`

Macros
------

- #define :ref:`ITF_SysCpuMultiCore <group___sys_cpu_multi_core_itf_1gaff9baa213d2b63faa34678aaa4053336>`

- #define :ref:`EXTITF_SysCpuMultiCore <group___sys_cpu_multi_core_itf_1gab19e913d3e1ba1faf919f2e3a8f97864>`

Typedefs
--------

- typedef struct :ref:`tagCpuCoreBindingDesc <structtag_cpu_core_binding_desc>` :ref:`CpuCoreBindingDesc <group___sys_cpu_multi_core_itf_1ga990300d712bbd8dd872389e4a57380bc>`

- typedef struct :ref:`tagsysmcbdalloc_struct <structtagsysmcbdalloc__struct>` :ref:`sysmcbdalloc_struct <group___sys_cpu_multi_core_itf_1ga34643d390e7c496e237aa2f48b69cad2>`

- typedef struct :ref:`tagsysmcbdcount_struct <structtagsysmcbdcount__struct>` :ref:`sysmcbdcount_struct <group___sys_cpu_multi_core_itf_1ga4583f3d1ecfe6e2e0af3e6e8a1d8a38c>`

- typedef struct :ref:`tagsysmcbdfree_struct <structtagsysmcbdfree__struct>` :ref:`sysmcbdfree_struct <group___sys_cpu_multi_core_itf_1ga031ba83dcde009a9ad49adfa8275d3fd>`

- typedef struct :ref:`tagsysmcbdgetfirstid_struct <structtagsysmcbdgetfirstid__struct>` :ref:`sysmcbdgetfirstid_struct <group___sys_cpu_multi_core_itf_1ga0bf77a388434f729531593940ae02948>`

- typedef struct :ref:`tagsysmcbdgetnextid_struct <structtagsysmcbdgetnextid__struct>` :ref:`sysmcbdgetnextid_struct <group___sys_cpu_multi_core_itf_1ga485711ed9f75659861167cf0127c990d>`

- typedef struct :ref:`tagsysmcbdisset_struct <structtagsysmcbdisset__struct>` :ref:`sysmcbdisset_struct <group___sys_cpu_multi_core_itf_1ga89bf7bb33713d1b419ed35ed7bea8c92>`

- typedef struct :ref:`tagsysmcgetload_struct <structtagsysmcgetload__struct>` :ref:`sysmcgetload_struct <group___sys_cpu_multi_core_itf_1ga8ffb5973137cf357da8ab98aed5fd458>`

- typedef struct :ref:`tagsysmcgetnumofcores_struct <structtagsysmcgetnumofcores__struct>` :ref:`sysmcgetnumofcores_struct <group___sys_cpu_multi_core_itf_1ga820422a5f5531dc7c128bf0584ba04d8>`

- typedef struct :ref:`tagsysmcgetprocessbinding_struct <structtagsysmcgetprocessbinding__struct>` :ref:`sysmcgetprocessbinding_struct <group___sys_cpu_multi_core_itf_1ga0b64fad5640e611ee4038bfddd8da1a8>`

- typedef struct :ref:`tagsysmcgettaskbinding_struct <structtagsysmcgettaskbinding__struct>` :ref:`sysmcgettaskbinding_struct <group___sys_cpu_multi_core_itf_1ga7a525de72f4e1ece481a4bdedaa45251>`

- typedef :ref:`ISysCpuMultiCore_C <struct_i_sys_cpu_multi_core___c>` :ref:`ISysCpuMultiCore <group___sys_cpu_multi_core_itf_1gabca52eac9b2d0f93af38c09a39fbfa98>`

Functions
---------

- void :ref:`sysmcbdalloc <group___sys_cpu_multi_core_itf_1gac4f508901816a0262f9a75a753ebbed4>` (:ref:`sysmcbdalloc_struct <group___sys_cpu_multi_core_itf_1ga34643d390e7c496e237aa2f48b69cad2>` * p)

- void :ref:`sysmcbdcount <group___sys_cpu_multi_core_itf_1ga0496bf9ce955cf88bfbec84b3d98509c>` (:ref:`sysmcbdcount_struct <group___sys_cpu_multi_core_itf_1ga4583f3d1ecfe6e2e0af3e6e8a1d8a38c>` * p)

- void :ref:`sysmcbdfree <group___sys_cpu_multi_core_itf_1ga62fc58f3ff6b0a9b5fdca9ac905a49ef>` (:ref:`sysmcbdfree_struct <group___sys_cpu_multi_core_itf_1ga031ba83dcde009a9ad49adfa8275d3fd>` * p)

- void :ref:`sysmcbdgetfirstid <group___sys_cpu_multi_core_itf_1ga7109aeeab758e7f40dde58e84087c9c3>` (:ref:`sysmcbdgetfirstid_struct <group___sys_cpu_multi_core_itf_1ga0bf77a388434f729531593940ae02948>` * p)

- void :ref:`sysmcbdgetnextid <group___sys_cpu_multi_core_itf_1ga0c799e18991fb2bcd5dfddc28d2bdf77>` (:ref:`sysmcbdgetnextid_struct <group___sys_cpu_multi_core_itf_1ga485711ed9f75659861167cf0127c990d>` * p)

- void :ref:`sysmcbdisset <group___sys_cpu_multi_core_itf_1ga0142ed1a70c983b1c9797f8edcf7a553>` (:ref:`sysmcbdisset_struct <group___sys_cpu_multi_core_itf_1ga89bf7bb33713d1b419ed35ed7bea8c92>` * p)

- void :ref:`sysmcgetload <group___sys_cpu_multi_core_itf_1gab30bcd94c9ed65ee5205031654f6178c>` (:ref:`sysmcgetload_struct <group___sys_cpu_multi_core_itf_1ga8ffb5973137cf357da8ab98aed5fd458>` * p)

- void :ref:`sysmcgetnumofcores <group___sys_cpu_multi_core_itf_1gaa44a3fb76bc604fc96e32a8664bdba92>` (:ref:`sysmcgetnumofcores_struct <group___sys_cpu_multi_core_itf_1ga820422a5f5531dc7c128bf0584ba04d8>` * p)

- void :ref:`sysmcgetprocessbinding <group___sys_cpu_multi_core_itf_1gabc46aa562c75ff628b9f0a70db6afd61>` (:ref:`sysmcgetprocessbinding_struct <group___sys_cpu_multi_core_itf_1ga0b64fad5640e611ee4038bfddd8da1a8>` * p)

- void :ref:`sysmcgettaskbinding <group___sys_cpu_multi_core_itf_1ga913176bec64ab3bddaa69c60cfa1dbac>` (:ref:`sysmcgettaskbinding_struct <group___sys_cpu_multi_core_itf_1ga7a525de72f4e1ece481a4bdedaa45251>` * p)

- RTS_RESULT :ref:`SysCpuMultiCoreOSInit <group___sys_cpu_multi_core_itf_1ga6608c8cd3da78bbf5b65e2b63d4fc46e>` (INIT_STRUCT * pInit)

- RTS_RESULT :ref:`SysCpuMultiCoreOSHookFunction <group___sys_cpu_multi_core_itf_1ga61a0a2d508898c4f903779980b58e870>` (RTS_UI32 ulHook, RTS_UINTPTR ulParam1, RTS_UINTPTR ulParam2)

- RTS_HANDLE :ref:`SysMCAddTaskGroup <group___sys_cpu_multi_core_itf_1ga3e7226a3e5850ff12b21afc0cc357afe>` (char * pszTaskGroup, RTS_UI32 taskGroupOptions, RTS_RESULT * pResult)

- RTS_RESULT :ref:`SysMCRemoveTaskGroup <group___sys_cpu_multi_core_itf_1ga14ebbd6a5e82a7fea5038a1224fbf20e>` (RTS_HANDLE hTaskGroup)

- RTS_HANDLE :ref:`SysMCFindTaskGroup <group___sys_cpu_multi_core_itf_1ga90cedc6b143396cc5040a8d60355da06>` (char * pszTaskGroup, RTS_I32 bIecTaskGroup, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`SysMCGetFirstTaskGroup <group___sys_cpu_multi_core_itf_1ga5b2ad8115ed6541c1bddf2499125fa31>` (RTS_RESULT * pResult)

- RTS_HANDLE :ref:`SysMCGetNextTaskGroup <group___sys_cpu_multi_core_itf_1gae8dd16f4dd503e41179ac5af684a957c>` (RTS_HANDLE hPrevTaskGroup, RTS_RESULT * pResult)

- char * :ref:`SysMCGetTaskGroupName <group___sys_cpu_multi_core_itf_1gab7a5dc75e3ddf495f6521c9a3746b043>` (RTS_HANDLE hTaskGroup, RTS_RESULT * pResult)

- :ref:`CpuCoreBindingDesc <group___sys_cpu_multi_core_itf_1ga990300d712bbd8dd872389e4a57380bc>` * :ref:`SysMCGetTaskGroupBinding <group___sys_cpu_multi_core_itf_1ga8e6466c59085cd67a619e49d2cb28de5>` (RTS_HANDLE hTaskGroup, RTS_RESULT * pResult)

- RTS_UI32 :ref:`SysMCGetTaskGroupOptions <group___sys_cpu_multi_core_itf_1ga199e91c3e0eb5724b40f1f56461937e6>` (RTS_HANDLE hTaskGroup, RTS_RESULT * pResult)

- RTS_RESULT :ref:`SysMCChangeTaskGroupStrategy <group___sys_cpu_multi_core_itf_1ga7accb4ae53fe0b6374bd719eda626578>` (RTS_HANDLE hTaskGroup, RTS_UI32 taskGroupStrategy)

- RTS_RESULT :ref:`SysMCSetTaskGroupBinding <group___sys_cpu_multi_core_itf_1ga0c34f39b422fa76f399d49f1b3f3e35e>` (RTS_HANDLE hTaskGroup, :ref:`CpuCoreBindingDesc <group___sys_cpu_multi_core_itf_1ga990300d712bbd8dd872389e4a57380bc>` * pBindingDesc)

- RTS_RESULT :ref:`SysMCAddToTaskGroup <group___sys_cpu_multi_core_itf_1gad11a4ecca49ea9a1a9aed3314553c269>` (RTS_HANDLE hSysTask, RTS_HANDLE hTaskGroup)

- RTS_RESULT :ref:`SysMCRemoveFromTaskGroup <group___sys_cpu_multi_core_itf_1ga65eb376a169af515e537a94c8c593299>` (RTS_HANDLE hSysTask, RTS_HANDLE hTaskGroup)

- RTS_RESULT :ref:`SysMCBeginTaskGroupConf <group___sys_cpu_multi_core_itf_1ga87eb95c838a43dbb3c2a8f1aa4274a84>` (RTS_HANDLE hTaskGroup)

- RTS_RESULT :ref:`SysMCEndTaskGroupConf <group___sys_cpu_multi_core_itf_1ga85d810d30e53ba1698443cc4fd0d5896>` (RTS_HANDLE hTaskGroup)

- :ref:`CpuCoreBindingDesc <group___sys_cpu_multi_core_itf_1ga990300d712bbd8dd872389e4a57380bc>` * :ref:`SysMCBDAlloc <group___sys_cpu_multi_core_itf_1ga37d02f00277ccf1ea8921eb243d9edf1>` (RTS_RESULT * pResult)

- RTS_RESULT :ref:`SysMCBDFree <group___sys_cpu_multi_core_itf_1ga67b4af553e2fc0838ac31c538813b143>` (:ref:`CpuCoreBindingDesc <group___sys_cpu_multi_core_itf_1ga990300d712bbd8dd872389e4a57380bc>` * pBindingDesc)

- RTS_RESULT :ref:`SysMCBDZero <group___sys_cpu_multi_core_itf_1ga74f1ef1820f7040ab8a6fc4d06adf90e>` (:ref:`CpuCoreBindingDesc <group___sys_cpu_multi_core_itf_1ga990300d712bbd8dd872389e4a57380bc>` * pBindingDesc)

- RTS_RESULT :ref:`SysMCBDSet <group___sys_cpu_multi_core_itf_1ga4d694d700fde30f78a8e6c6d56ae6953>` (:ref:`CpuCoreBindingDesc <group___sys_cpu_multi_core_itf_1ga990300d712bbd8dd872389e4a57380bc>` * pBindingDesc, RTS_UI32 uCoreId)

- RTS_RESULT :ref:`SysMCBDReset <group___sys_cpu_multi_core_itf_1ga81c37f56c8162e9cf6798e81692d43f5>` (:ref:`CpuCoreBindingDesc <group___sys_cpu_multi_core_itf_1ga990300d712bbd8dd872389e4a57380bc>` * pBindingDesc, RTS_UI32 uCoreId)

- RTS_RESULT :ref:`SysMCBDIsSet <group___sys_cpu_multi_core_itf_1ga31996614ae2b8ad82fa65ff647e87025>` (:ref:`CpuCoreBindingDesc <group___sys_cpu_multi_core_itf_1ga990300d712bbd8dd872389e4a57380bc>` * pBindingDesc, RTS_UI32 uCoreId)

- RTS_UI32 :ref:`SysMCBDCount <group___sys_cpu_multi_core_itf_1ga1bd02aa285cb33b49355e102a444a5a5>` (:ref:`CpuCoreBindingDesc <group___sys_cpu_multi_core_itf_1ga990300d712bbd8dd872389e4a57380bc>` * pBindingDesc, RTS_RESULT * pResult)

- RTS_UI32 :ref:`SysMCBDGetFirstID <group___sys_cpu_multi_core_itf_1gaa0407c35494b8c8a53a26c8c7b24d621>` (:ref:`CpuCoreBindingDesc <group___sys_cpu_multi_core_itf_1ga990300d712bbd8dd872389e4a57380bc>` * pBindingDesc, RTS_RESULT * pResult)

- RTS_UI32 :ref:`SysMCBDGetNextID <group___sys_cpu_multi_core_itf_1gaf7ac85cc51905025e4f7aaa512bb58ba>` (:ref:`CpuCoreBindingDesc <group___sys_cpu_multi_core_itf_1ga990300d712bbd8dd872389e4a57380bc>` * pBindingDesc, RTS_UI32 uPrevCoreID, RTS_RESULT * pResult)

- RTS_RESULT :ref:`SysMCBindProcess <group___sys_cpu_multi_core_itf_1ga87a4c7e4fc4cbc1742e0db7cc9b89db7>` (:ref:`CpuCoreBindingDesc <group___sys_cpu_multi_core_itf_1ga990300d712bbd8dd872389e4a57380bc>` * pBindingDesc, RTS_IEC_HANDLE hProcess)

- RTS_RESULT :ref:`SysMCBindProcess_ <group___sys_cpu_multi_core_itf_1gad2a081e193f037befa9272979b986f35>` (:ref:`CpuCoreBindingDesc <group___sys_cpu_multi_core_itf_1ga990300d712bbd8dd872389e4a57380bc>` * pBindingDesc, RTS_IEC_HANDLE hProcess)

- RTS_RESULT :ref:`SysMCBindTask <group___sys_cpu_multi_core_itf_1ga61c9583a7b245940d42f4ee58e96f310>` (:ref:`CpuCoreBindingDesc <group___sys_cpu_multi_core_itf_1ga990300d712bbd8dd872389e4a57380bc>` * pBindingDesc, RTS_IEC_HANDLE hTask)

- RTS_RESULT :ref:`SysMCBindTask_ <group___sys_cpu_multi_core_itf_1ga25fad5b42431683bc9123e7a47808ed6>` (:ref:`CpuCoreBindingDesc <group___sys_cpu_multi_core_itf_1ga990300d712bbd8dd872389e4a57380bc>` * pBindingDesc, RTS_IEC_HANDLE hTask)

- RTS_RESULT :ref:`SysMCUnbindProcess <group___sys_cpu_multi_core_itf_1gadb909c872b5a787ebf42c6d368cc90e0>` (RTS_IEC_HANDLE hProcess)

- RTS_RESULT :ref:`SysMCUnbindProcess_ <group___sys_cpu_multi_core_itf_1gaaabfb963dafcd85e1b1ef1b35c16a565>` (RTS_IEC_HANDLE hProcess)

- RTS_RESULT :ref:`SysMCUnbindTask <group___sys_cpu_multi_core_itf_1ga8c502c9779d3c49788cc47018b1407b4>` (RTS_IEC_HANDLE hTask)

- RTS_RESULT :ref:`SysMCUnbindTask_ <group___sys_cpu_multi_core_itf_1gaa30487d7d6674b2cfac6bff166e59975>` (RTS_IEC_HANDLE hTask)

- RTS_RESULT :ref:`SysMCGetLoad <group___sys_cpu_multi_core_itf_1ga1be2430e917d710b3f6d242944434592>` (RTS_UI32 uCoreID, RTS_UI8 * pPercent)

- RTS_RESULT :ref:`SysMCGetLoad_ <group___sys_cpu_multi_core_itf_1ga41bebadc1868cd428caeb2debf2ff40d>` (RTS_UI32 uCoreID, RTS_UI8 * pPercent)

- RTS_UI32 :ref:`SysMCGetNumOfCores <group___sys_cpu_multi_core_itf_1gadf9130c00eee49dd86fb4dfd55ef0c8a>` (RTS_RESULT * pResult)

- RTS_UI32 :ref:`SysMCGetNumOfCores_ <group___sys_cpu_multi_core_itf_1ga157b4dcefc157c8ff096a52de5ef8701>` (RTS_RESULT * pResult)

- RTS_RESULT :ref:`SysMCGetProcessBinding <group___sys_cpu_multi_core_itf_1ga77d577955203eb463a31afbc4112f472>` (RTS_IEC_HANDLE hProcess, :ref:`CpuCoreBindingDesc <group___sys_cpu_multi_core_itf_1ga990300d712bbd8dd872389e4a57380bc>` * pBindingDesc)

- RTS_RESULT :ref:`SysMCGetProcessBinding_ <group___sys_cpu_multi_core_itf_1gadd050f9b966798c186b9814924aade0a>` (RTS_IEC_HANDLE hProcess, :ref:`CpuCoreBindingDesc <group___sys_cpu_multi_core_itf_1ga990300d712bbd8dd872389e4a57380bc>` * pBindingDesc)

- RTS_RESULT :ref:`SysMCGetTaskBinding <group___sys_cpu_multi_core_itf_1ga9929613cee047235c7e4bab785978bd6>` (RTS_IEC_HANDLE hTask, :ref:`CpuCoreBindingDesc <group___sys_cpu_multi_core_itf_1ga990300d712bbd8dd872389e4a57380bc>` * pBindingDesc)

- RTS_RESULT :ref:`SysMCGetTaskBinding_ <group___sys_cpu_multi_core_itf_1gaa7fc872c7df6386652f4d931701256e1>` (RTS_IEC_HANDLE hTask, :ref:`CpuCoreBindingDesc <group___sys_cpu_multi_core_itf_1ga990300d712bbd8dd872389e4a57380bc>` * pBindingDesc)

- RTS_UI32 :ref:`SysMCGetCurrentCoreID <group___sys_cpu_multi_core_itf_1ga9161f12f86827eab55b7c5c100745638>` (RTS_RESULT * pResult)

- RTS_UI32 :ref:`SysMCGetCurrentCoreID_ <group___sys_cpu_multi_core_itf_1ga9df4a7641181a251554db824306e29e3>` (RTS_RESULT * pResult)

.. _group___sys_cpu_multi_core_itf-details:

Detailed Description
--------------------

Interface of SysCpuMultiCore.

This interface provides functions to manage multi core cpu system.

Naming convention: In this interface a core describes a logical processor, a logical CPU, independent of the physical hardware. A CoreId is a zero based number of a core, corresponding to the position of a bit in the CoreBits bitfield. E.g., a dual core processor with hyperthreading supplies four logical processors, SysMCGetNumOfCores returns 4 cores and they are numbered from 0 to 3.

The bitfield is placed in a processor word (XWORD ulCoreBits) inside the :ref:`CpuCoreBits <union_cpu_core_bits>` union in case the number of cores fits there in, i.e. up to 32 cores on a 32 bit system, up to 64 cores on a 64 bit system. In case the number of cores exceed these values (i.e. nNumOfCores > SYSMCBITSPERXWORD), an allocated array of XWORDs is used (pulCoreBits) and this is where the functions SysMCBDAlloc and SysMCBDFree come in handy.

NOTE: SysMCBDAlloc also initializes the member nNumOfCores of the CpuCoreBindingDesc structure. In case a local declared variable of CpuCoreBindingDesc is used, this member nNumOfCores should be initialized manually.

**Copyright:**

Copyright (c) 2017-2018 CODESYS GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved.

Macro Definition Documentation
------------------------------
.. _group___sys_cpu_multi_core_itf_1gaff9baa213d2b63faa34678aaa4053336:

#define ITF_SysCpuMultiCore
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_cpu_multi_core_itf_1gab19e913d3e1ba1faf919f2e3a8f97864:

#define EXTITF_SysCpuMultiCore
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___sys_cpu_multi_core_itf_1ga990300d712bbd8dd872389e4a57380bc:

typedef struct tagCpuCoreBindingDesc  CpuCoreBindingDesc
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

CpuCoreBindingDesc

.. _group___sys_cpu_multi_core_itf_1ga34643d390e7c496e237aa2f48b69cad2:

typedef struct tagsysmcbdalloc_struct  sysmcbdalloc_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

sysmcbdalloc

.. _group___sys_cpu_multi_core_itf_1ga4583f3d1ecfe6e2e0af3e6e8a1d8a38c:

typedef struct tagsysmcbdcount_struct  sysmcbdcount_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

sysmcbdcount

.. _group___sys_cpu_multi_core_itf_1ga031ba83dcde009a9ad49adfa8275d3fd:

typedef struct tagsysmcbdfree_struct  sysmcbdfree_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

sysmcbdfree

.. _group___sys_cpu_multi_core_itf_1ga0bf77a388434f729531593940ae02948:

typedef struct tagsysmcbdgetfirstid_struct  sysmcbdgetfirstid_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

sysmcbdgetfirstid

.. _group___sys_cpu_multi_core_itf_1ga485711ed9f75659861167cf0127c990d:

typedef struct tagsysmcbdgetnextid_struct  sysmcbdgetnextid_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

sysmcbdgetnextid

.. _group___sys_cpu_multi_core_itf_1ga89bf7bb33713d1b419ed35ed7bea8c92:

typedef struct tagsysmcbdisset_struct  sysmcbdisset_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

sysmcbdisset

.. _group___sys_cpu_multi_core_itf_1ga8ffb5973137cf357da8ab98aed5fd458:

typedef struct tagsysmcgetload_struct  sysmcgetload_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

sysmcgetload

.. _group___sys_cpu_multi_core_itf_1ga820422a5f5531dc7c128bf0584ba04d8:

typedef struct tagsysmcgetnumofcores_struct  sysmcgetnumofcores_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns the number of available cores. Available means: Available to be used by runtime system.

.. _group___sys_cpu_multi_core_itf_1ga0b64fad5640e611ee4038bfddd8da1a8:

typedef struct tagsysmcgetprocessbinding_struct  sysmcgetprocessbinding_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Read the binding description of a process.

.. _group___sys_cpu_multi_core_itf_1ga7a525de72f4e1ece481a4bdedaa45251:

typedef struct tagsysmcgettaskbinding_struct  sysmcgettaskbinding_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Read the binding description of a task.

.. _group___sys_cpu_multi_core_itf_1gabca52eac9b2d0f93af38c09a39fbfa98:

typedef ISysCpuMultiCore_C ISysCpuMultiCore
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function Documentation
----------------------

.. _group___sys_cpu_multi_core_itf_1gac4f508901816a0262f9a75a753ebbed4:

void sysmcbdalloc (sysmcbdalloc_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_cpu_multi_core_itf_1ga0496bf9ce955cf88bfbec84b3d98509c:

void sysmcbdcount (sysmcbdcount_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_cpu_multi_core_itf_1ga62fc58f3ff6b0a9b5fdca9ac905a49ef:

void sysmcbdfree (sysmcbdfree_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_cpu_multi_core_itf_1ga7109aeeab758e7f40dde58e84087c9c3:

void sysmcbdgetfirstid (sysmcbdgetfirstid_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_cpu_multi_core_itf_1ga0c799e18991fb2bcd5dfddc28d2bdf77:

void sysmcbdgetnextid (sysmcbdgetnextid_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_cpu_multi_core_itf_1ga0142ed1a70c983b1c9797f8edcf7a553:

void sysmcbdisset (sysmcbdisset_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_cpu_multi_core_itf_1gab30bcd94c9ed65ee5205031654f6178c:

void sysmcgetload (sysmcgetload_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_cpu_multi_core_itf_1gaa44a3fb76bc604fc96e32a8664bdba92:

void sysmcgetnumofcores (sysmcgetnumofcores_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_cpu_multi_core_itf_1gabc46aa562c75ff628b9f0a70db6afd61:

void sysmcgetprocessbinding (sysmcgetprocessbinding_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_cpu_multi_core_itf_1ga913176bec64ab3bddaa69c60cfa1dbac:

void sysmcgettaskbinding (sysmcgettaskbinding_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_cpu_multi_core_itf_1ga6608c8cd3da78bbf5b65e2b63d4fc46e:

RTS_RESULT SysCpuMultiCoreOSInit (INIT_STRUCT *pInit)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EXTERN LIB SECTION END

.. _group___sys_cpu_multi_core_itf_1ga61a0a2d508898c4f903779980b58e870:

RTS_RESULT SysCpuMultiCoreOSHookFunction (RTS_UI32 ulHook, RTS_UINTPTR ulParam1, RTS_UINTPTR ulParam2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_cpu_multi_core_itf_1ga3e7226a3e5850ff12b21afc0cc357afe:

RTS_HANDLE SysMCAddTaskGroup (char *pszTaskGroup, RTS_UI32 taskGroupOptions, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Task group maintenance

This function adds a task group. In case the task group is already present, the handle is returned anyway but an internal reference counter is incremented.

**Parameters**

+---------+------------------+---------------------------------------------------------+
| [in]    | pszTaskGroup     | The name of the task group to add                       |
+---------+------------------+---------------------------------------------------------+
| [in]    | taskGroupOptions | See 'Task group options'                                |
+---------+------------------+---------------------------------------------------------+
| [in]    | pResult          | Pointer to a variable to return an errorcode (optional) |
+---------+------------------+---------------------------------------------------------+

**Returns:**

Returns the handle to the newly added task group or RTS_INVALID_HANDLE.

**Return values**

+--------------------+-----------------------------------------------+
| ERR_OK             | Call was sucessfull.                          |
+--------------------+-----------------------------------------------+
| ERR_NOTINITIALIZED | The required memory pool was not initialized. |
+--------------------+-----------------------------------------------+
| ERR_NOMEMORY       | Not enough memory to allocate.                |
+--------------------+-----------------------------------------------+

.. _group___sys_cpu_multi_core_itf_1ga14ebbd6a5e82a7fea5038a1224fbf20e:

RTS_RESULT SysMCRemoveTaskGroup (RTS_HANDLE hTaskGroup)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Task group maintenance

This function removes a task group. The group is not deleted until the internal reference counter reaches zero.

**Parameters**

+---------+------------+-------------------------------------------+
| [in]    | hTaskGroup | The handle to a previous added task group |
+---------+------------+-------------------------------------------+

**Returns:**

Returns an errorcode.

**Return values**

+--------------------+------------------------------+
| ERR_OK             | Call was sucessfull.         |
+--------------------+------------------------------+
| ERR_INVALID_HANDLE | The given handle is invalid. |
+--------------------+------------------------------+

.. _group___sys_cpu_multi_core_itf_1ga90cedc6b143396cc5040a8d60355da06:

RTS_HANDLE SysMCFindTaskGroup (char *pszTaskGroup, RTS_I32 bIecTaskGroup, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Task group maintenance

This function searches for a task group and returns its handle on success.

**Parameters**

+---------+---------------+--------------------------------------------------------------------+
| [in]    | pszTaskGroup  | The name of the task group to search for                           |
+---------+---------------+--------------------------------------------------------------------+
| [in]    | bIecTaskGroup | Search IEC task groups only (TRUE), search all task groups (FALSE) |
+---------+---------------+--------------------------------------------------------------------+
| [in]    | pResult       | Pointer to a variable to return an errorcode (optional)            |
+---------+---------------+--------------------------------------------------------------------+

**Returns:**

Returns the handle to the searched task group or RTS_INVALID_HANDLE.

**Return values**

+--------------------+-----------------------------------------------+
| ERR_OK             | Call was sucessfull.                          |
+--------------------+-----------------------------------------------+
| ERR_NOTINITIALIZED | The required memory pool was not initialized. |
+--------------------+-----------------------------------------------+
| ERR_NO_OBJECT      | The task group was not found.                 |
+--------------------+-----------------------------------------------+

.. _group___sys_cpu_multi_core_itf_1ga5b2ad8115ed6541c1bddf2499125fa31:

RTS_HANDLE SysMCGetFirstTaskGroup (RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Task group maintenance

This function returns the first found task group. The returned handle may be used for SysMCGetNextTaskGroup.

**Parameters**

+---------+---------+----------------------------------------------+
| [in]    | pResult | Pointer to a variable to return an errorcode |
+---------+---------+----------------------------------------------+

**Returns:**

Returns the handle to the searched task group or RTS_INVALID_HANDLE.

**Return values**

+--------------------+-----------------------------------------------+
| ERR_OK             | Call was sucessfull.                          |
+--------------------+-----------------------------------------------+
| ERR_NOTINITIALIZED | The required memory pool was not initialized. |
+--------------------+-----------------------------------------------+
| ERR_NO_OBJECT      | The task group was not found.                 |
+--------------------+-----------------------------------------------+

.. _group___sys_cpu_multi_core_itf_1gae8dd16f4dd503e41179ac5af684a957c:

RTS_HANDLE SysMCGetNextTaskGroup (RTS_HANDLE hPrevTaskGroup, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Task group maintenance

This function returns the next found task group and is used to iterate through all task groups until the result is ERR_END_OF_OBJECT.

**Parameters**

+---------+----------------+----------------------------------------------+
| [in]    | hPrevTaskGroup | The handle to a previous found task group    |
+---------+----------------+----------------------------------------------+
| [in]    | pResult        | Pointer to a variable to return an errorcode |
+---------+----------------+----------------------------------------------+

**Returns:**

Returns the handle to the searched task group or RTS_INVALID_HANDLE.

**Return values**

+--------------------+-----------------------------------------------+
| ERR_OK             | Call was sucessfull.                          |
+--------------------+-----------------------------------------------+
| ERR_NOTINITIALIZED | The required memory pool was not initialized. |
+--------------------+-----------------------------------------------+
| ERR_INVALID_HANDLE | The given handle is invalid.                  |
+--------------------+-----------------------------------------------+
| ERR_END_OF_OBJECT  | There are no more task groups to find.        |
+--------------------+-----------------------------------------------+

.. _group___sys_cpu_multi_core_itf_1gab7a5dc75e3ddf495f6521c9a3746b043:

char* SysMCGetTaskGroupName (RTS_HANDLE hTaskGroup, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Task group maintenance

This function returns the name of a task group with the given handle.

**Parameters**

+---------+------------+----------------------------------------------+
| [in]    | hTaskGroup | The handle to a task group                   |
+---------+------------+----------------------------------------------+
| [in]    | pResult    | Pointer to a variable to return an errorcode |
+---------+------------+----------------------------------------------+

**Returns:**

Returns a pointer to the name of the task group or NULL.

**Return values**

+--------------------+-----------------------------------------------+
| ERR_OK             | Call was sucessfull.                          |
+--------------------+-----------------------------------------------+
| ERR_NOTINITIALIZED | The required memory pool was not initialized. |
+--------------------+-----------------------------------------------+
| ERR_INVALID_HANDLE | The given handle is invalid.                  |
+--------------------+-----------------------------------------------+

.. _group___sys_cpu_multi_core_itf_1ga8e6466c59085cd67a619e49d2cb28de5:

CpuCoreBindingDesc* SysMCGetTaskGroupBinding (RTS_HANDLE hTaskGroup, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Task group maintenance

This function returns the binding description of a task group with the given handle.

**Parameters**

+---------+------------+----------------------------------------------+
| [in]    | hTaskGroup | The handle to a task group                   |
+---------+------------+----------------------------------------------+
| [in]    | pResult    | Pointer to a variable to return an errorcode |
+---------+------------+----------------------------------------------+

**Returns:**

Returns a pointer to binding description of the task group or NULL.

**Return values**

+--------------------+-----------------------------------------------+
| ERR_OK             | Call was sucessfull.                          |
+--------------------+-----------------------------------------------+
| ERR_NOTINITIALIZED | The required memory pool was not initialized. |
+--------------------+-----------------------------------------------+
| ERR_INVALID_HANDLE | The given handle is invalid.                  |
+--------------------+-----------------------------------------------+

.. _group___sys_cpu_multi_core_itf_1ga199e91c3e0eb5724b40f1f56461937e6:

RTS_UI32 SysMCGetTaskGroupOptions (RTS_HANDLE hTaskGroup, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Task group maintenance

This function returns the options of a task group with the given handle.

**Parameters**

+---------+------------+----------------------------------------------+
| [in]    | hTaskGroup | The handle to a task group                   |
+---------+------------+----------------------------------------------+
| [in]    | pResult    | Pointer to a variable to return an errorcode |
+---------+------------+----------------------------------------------+

**Returns:**

Returns the options of the task group (see 'Task group options').

**Return values**

+--------------------+-----------------------------------------------+
| ERR_OK             | Call was sucessfull.                          |
+--------------------+-----------------------------------------------+
| ERR_NOTINITIALIZED | The required memory pool was not initialized. |
+--------------------+-----------------------------------------------+
| ERR_INVALID_HANDLE | The given handle is invalid.                  |
+--------------------+-----------------------------------------------+

.. _group___sys_cpu_multi_core_itf_1ga7accb4ae53fe0b6374bd719eda626578:

RTS_RESULT SysMCChangeTaskGroupStrategy (RTS_HANDLE hTaskGroup, RTS_UI32 taskGroupStrategy)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Task group maintenance

This function overwrites the strategy part of the options of a task group with the given handle. A following SysMCSetTaskGroupBinding is recommended.

**Parameters**

+---------+------------------+----------------------------+
| [in]    | hTaskGroup       | The handle to a task group |
+---------+------------------+----------------------------+
| [in]    | taskGroupOptions | See 'Task group options'   |
+---------+------------------+----------------------------+

**Returns:**

Returns an errorcode.

**Return values**

+--------------------+-----------------------------------------------+
| ERR_OK             | Call was sucessfull.                          |
+--------------------+-----------------------------------------------+
| ERR_NOTINITIALIZED | The required memory pool was not initialized. |
+--------------------+-----------------------------------------------+
| ERR_INVALID_HANDLE | The given handle is invalid.                  |
+--------------------+-----------------------------------------------+

.. _group___sys_cpu_multi_core_itf_1ga0c34f39b422fa76f399d49f1b3f3e35e:

RTS_RESULT SysMCSetTaskGroupBinding (RTS_HANDLE hTaskGroup, CpuCoreBindingDesc *pBindingDesc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Task group maintenance

This function sets the binding description of a task group with the given handle and checks the license. NOTE: Free floating groups for IEC are only possible if at least the number of physical cores is licensed.

**Parameters**

+---------+--------------+-------------------------------------------------+
| [in]    | hTaskGroup   | The handle to a task group                      |
+---------+--------------+-------------------------------------------------+
| [in]    | pBindingDesc | Pointer to the description of the core binding. |
+---------+--------------+-------------------------------------------------+

**Returns:**

Returns an errorcode.

**Return values**

+---------------------+-----------------------------------------------+
| ERR_OK              | Call was sucessfull.                          |
+---------------------+-----------------------------------------------+
| ERR_NOTINITIALIZED  | The required memory pool was not initialized. |
+---------------------+-----------------------------------------------+
| ERR_INVALID_HANDLE  | The given handle is invalid.                  |
+---------------------+-----------------------------------------------+
| ERR_PARAMETER       | The given binding description is invalid.     |
+---------------------+-----------------------------------------------+
| ERR_LICENSE_MISSING | The given binding is not licensed.            |
+---------------------+-----------------------------------------------+

.. _group___sys_cpu_multi_core_itf_1gad11a4ecca49ea9a1a9aed3314553c269:

RTS_RESULT SysMCAddToTaskGroup (RTS_HANDLE hSysTask, RTS_HANDLE hTaskGroup)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Task group maintenance

This function adds a task to a task group and checks the license. After that it binds the tasks of the group if not in configuration mode (see SysMCBeginTaskGroupConf/SysMCEndTaskGroupConf). NOTE: Free floating groups for IEC are only possible if at least the number of physical cores is licensed. NOTE: In case the process is bound to one core, no task binding is possible at all, but the function returns ERR_OK anyway.

**Parameters**

+---------+------------+----------------------------+
| [in]    | hSysTask   | The handle to a SysTask    |
+---------+------------+----------------------------+
| [in]    | hTaskGroup | The handle to a task group |
+---------+------------+----------------------------+

**Returns:**

Returns an errorcode.

**Return values**

+---------------------+------------------------------------------------+
| ERR_OK              | Call was sucessfull.                           |
+---------------------+------------------------------------------------+
| ERR_NOTINITIALIZED  | The required memory pool was not initialized.  |
+---------------------+------------------------------------------------+
| ERR_INVALID_HANDLE  | The given handle is invalid.                   |
+---------------------+------------------------------------------------+
| ERR_PARAMETER       | The given SysTask handle is invalid.           |
+---------------------+------------------------------------------------+
| ERR_DUPLICATE       | The given SysTask handle is already added.     |
+---------------------+------------------------------------------------+
| ERR_NOMEMORY        | Not enough memory to allocate.                 |
+---------------------+------------------------------------------------+
| ERR_FAILED          | The binding configuration is invalid.          |
+---------------------+------------------------------------------------+
| ERR_LICENSE_MISSING | The binding of the task group is not licensed. |
+---------------------+------------------------------------------------+

.. _group___sys_cpu_multi_core_itf_1ga65eb376a169af515e537a94c8c593299:

RTS_RESULT SysMCRemoveFromTaskGroup (RTS_HANDLE hSysTask, RTS_HANDLE hTaskGroup)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Task group maintenance

This function removes a task from a task group.

**Parameters**

+---------+------------+----------------------------+
| [in]    | hSysTask   | The handle to a SysTask    |
+---------+------------+----------------------------+
| [in]    | hTaskGroup | The handle to a task group |
+---------+------------+----------------------------+

**Returns:**

Returns an errorcode.

**Return values**

+--------------------+-----------------------------------------------+
| ERR_OK             | Call was sucessfull.                          |
+--------------------+-----------------------------------------------+
| ERR_NOTINITIALIZED | The required memory pool was not initialized. |
+--------------------+-----------------------------------------------+
| ERR_INVALID_HANDLE | The given handle is invalid.                  |
+--------------------+-----------------------------------------------+
| ERR_PARAMETER      | The given SysTask handle is invalid.          |
+--------------------+-----------------------------------------------+
| ERR_NO_OBJECT      | The given SysTask handle was not found.       |
+--------------------+-----------------------------------------------+

.. _group___sys_cpu_multi_core_itf_1ga87eb95c838a43dbb3c2a8f1aa4274a84:

RTS_RESULT SysMCBeginTaskGroupConf (RTS_HANDLE hTaskGroup)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Task group maintenance

This function starts the configuration mode of task groups.

**Parameters**

+---------+------------+----------------------------+
| [in]    | hTaskGroup | The handle to a task group |
+---------+------------+----------------------------+

**Returns:**

Returns an errorcode.

**Return values**

+--------------------+------------------------------+
| ERR_OK             | Call was sucessfull.         |
+--------------------+------------------------------+
| ERR_INVALID_HANDLE | The given handle is invalid. |
+--------------------+------------------------------+

.. _group___sys_cpu_multi_core_itf_1ga85d810d30e53ba1698443cc4fd0d5896:

RTS_RESULT SysMCEndTaskGroupConf (RTS_HANDLE hTaskGroup)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Task group maintenance

This function ends the configuration mode of task groups and than binds the tasks of all groups as configured. NOTE: In case the process is bound to one core, no task binding is possible at all, but the function returns ERR_OK anyway.

**Parameters**

+---------+------------+----------------------------+
| [in]    | hTaskGroup | The handle to a task group |
+---------+------------+----------------------------+

**Returns:**

Returns an errorcode.

**Return values**

+--------------------+---------------------------------------+
| ERR_OK             | Call was sucessfull.                  |
+--------------------+---------------------------------------+
| ERR_INVALID_HANDLE | The given handle is invalid.          |
+--------------------+---------------------------------------+
| ERR_FAILED         | The binding configuration is invalid. |
+--------------------+---------------------------------------+

.. _group___sys_cpu_multi_core_itf_1ga37d02f00277ccf1ea8921eb243d9edf1:

CpuCoreBindingDesc* SysMCBDAlloc (RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

CpuCoreBindingDesc helper function

SysMCBDAlloc allocates a CpuCoreBindingDesc which should be freed with SysMCBDFree after usage. Initializes the nNumOfCores member. In case nNumOfCores > SYSMCBITSPERXWORD an array of appropriate XWORDs is allocated to pulCoreBits.

**Parameters**

+---------+---------+---------------------------------------------------------+
| [in]    | pResult | Pointer to a variable to return an errorcode (optional) |
+---------+---------+---------------------------------------------------------+

**Returns:**

Returns a pointer to CpuCoreBindingDesc or NULL if no memory is available.

**Return values**

+--------------------+-----------------------------------+
| ERR_OK             | A valid pointer is returned.      |
+--------------------+-----------------------------------+
| ERR_NOMEMORY       | Not enough memory is available.   |
+--------------------+-----------------------------------+
| ERR_NOTINITIALIZED | Component is not yet initialized. |
+--------------------+-----------------------------------+

.. _group___sys_cpu_multi_core_itf_1ga67b4af553e2fc0838ac31c538813b143:

RTS_RESULT SysMCBDFree (CpuCoreBindingDesc *pBindingDesc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

CpuCoreBindingDesc helper function

SysMCBDFree frees an CpuCoreBindingDesc which should be allocated with SysMCBDAlloc before usage.

**Parameters**

+---------+--------------+-------------------------------------------------+
| [in]    | pBindingDesc | Pointer to the description of the core binding. |
+---------+--------------+-------------------------------------------------+

**Returns:**

Returns an errorcode.

**Return values**

+---------------+----------------------------------------+
| ERR_OK        | Memory is sucessfully freed.           |
+---------------+----------------------------------------+
| ERR_FAILED    | No appropriate memory block was found. |
+---------------+----------------------------------------+
| ERR_PARAMETER | CpuCoreBindingDesc is invalid pointer. |
+---------------+----------------------------------------+

.. _group___sys_cpu_multi_core_itf_1ga74f1ef1820f7040ab8a6fc4d06adf90e:

RTS_RESULT SysMCBDZero (CpuCoreBindingDesc *pBindingDesc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

CpuCoreBindingDesc helper function

SysMCBDZero clears all the :ref:`CpuCoreBits <union_cpu_core_bits>` of the given CpuCoreBindingDesc. SysMCBDZero should be called prior to any call of SysMCBDSet.

**Parameters**

+---------+--------------+-------------------------------------------------+
| [in]    | pBindingDesc | Pointer to the description of the core binding. |
+---------+--------------+-------------------------------------------------+

**Returns:**

Returns an errorcode.

**Return values**

+---------------+----------------------------------------+
| ERR_OK        | Operation sucessfully finished.        |
+---------------+----------------------------------------+
| ERR_PARAMETER | CpuCoreBindingDesc is invalid pointer. |
+---------------+----------------------------------------+

.. _group___sys_cpu_multi_core_itf_1ga4d694d700fde30f78a8e6c6d56ae6953:

RTS_RESULT SysMCBDSet (CpuCoreBindingDesc *pBindingDesc, RTS_UI32 uCoreId)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

CpuCoreBindingDesc helper function

Set the appropriate bit for uCoreId in the CpuCoreBindingDesc.CpuCoreBits. SysMCBDZero should be called prior to any call of SysMCBDSet.

**Parameters**

+---------+--------------+---------------------------------------------------------+
| [in]    | pBindingDesc | Pointer to the description of the core binding.         |
+---------+--------------+---------------------------------------------------------+
| [in]    | uCoreId      | Identifies the core ID. Starting with 0=first core, ... |
+---------+--------------+---------------------------------------------------------+

**Returns:**

Returns an errorcode.

**Return values**

+---------------+--------------------------------------------------------------+
| ERR_OK        | Operation sucessfully finished.                              |
+---------------+--------------------------------------------------------------+
| ERR_PARAMETER | CpuCoreBindingDesc is invalid pointer or uCoreId is invalid. |
+---------------+--------------------------------------------------------------+

.. _group___sys_cpu_multi_core_itf_1ga81c37f56c8162e9cf6798e81692d43f5:

RTS_RESULT SysMCBDReset (CpuCoreBindingDesc *pBindingDesc, RTS_UI32 uCoreId)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

CpuCoreBindingDesc helper function

SysMCBDReset resets the appropriate bit for uCoreId in the CpuCoreBindingDesc.CpuCoreBits, i.e. clears it.

**Returns:**

Returns an errorcode.

**Parameters**

+---------+--------------+---------------------------------------------------------+
| [in]    | pBindingDesc | Pointer to the description of the core binding.         |
+---------+--------------+---------------------------------------------------------+
| [in]    | uCoreId      | Identifies the core ID. Starting with 0=first core, ... |
+---------+--------------+---------------------------------------------------------+

**Return values**

+---------------+--------------------------------------------------------------+
| ERR_OK        | Operation sucessfully finished.                              |
+---------------+--------------------------------------------------------------+
| ERR_PARAMETER | CpuCoreBindingDesc is invalid pointer or uCoreId is invalid. |
+---------------+--------------------------------------------------------------+

.. _group___sys_cpu_multi_core_itf_1ga31996614ae2b8ad82fa65ff647e87025:

RTS_RESULT SysMCBDIsSet (CpuCoreBindingDesc *pBindingDesc, RTS_UI32 uCoreId)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

CpuCoreBindingDesc helper function

SysMCBDIsSet tests the appropriate bit for uCoreId in CpuCoreBindingDesc.CpuCoreBits: see errorcode

**Returns:**

Returns an errorcode.

**Parameters**

+---------+--------------+---------------------------------------------------------+
| [in]    | pBindingDesc | Pointer to the description of the core binding.         |
+---------+--------------+---------------------------------------------------------+
| [in]    | uCoreId      | Identifies the core ID. Starting with 0=first core, ... |
+---------+--------------+---------------------------------------------------------+

**Return values**

+---------------+--------------------------------------------------------------+
| ERR_OK        | Bit is set.                                                  |
+---------------+--------------------------------------------------------------+
| ERR_FAILED    | Bit is not set.                                              |
+---------------+--------------------------------------------------------------+
| ERR_PARAMETER | CpuCoreBindingDesc is invalid pointer or uCoreId is invalid. |
+---------------+--------------------------------------------------------------+

.. _group___sys_cpu_multi_core_itf_1ga1bd02aa285cb33b49355e102a444a5a5:

RTS_UI32 SysMCBDCount (CpuCoreBindingDesc *pBindingDesc, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

CpuCoreBindingDesc helper function

SysMCBDCount counts the set bits in CpuCoreBindingDesc.CpuCoreBits.

**Returns:**

Returns the number of the bits set.

**Parameters**

+---------+--------------+---------------------------------------------------------+
| [in]    | pBindingDesc | Pointer to the description of the core binding.         |
+---------+--------------+---------------------------------------------------------+
| [in]    | pResult      | Pointer to a variable to return an errorcode (optional) |
+---------+--------------+---------------------------------------------------------+

**Return values**

+---------------+----------------------------------------+
| ERR_OK        | Operation sucessfully finished.        |
+---------------+----------------------------------------+
| ERR_PARAMETER | CpuCoreBindingDesc is invalid pointer. |
+---------------+----------------------------------------+

.. _group___sys_cpu_multi_core_itf_1gaa0407c35494b8c8a53a26c8c7b24d621:

RTS_UI32 SysMCBDGetFirstID (CpuCoreBindingDesc *pBindingDesc, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

CpuCoreBindingDesc helper function

SysMCBDGetFirstID returns the CoreId (i.e. the position) of the first set bit in CpuCoreBindingDesc.CpuCoreBits.

**Parameters**

+---------+--------------+-------------------------------------------------+
| [in]    | pBindingDesc | Pointer to the description of the core binding. |
+---------+--------------+-------------------------------------------------+
| [in]    | pResult      | Pointer to a variable to return an errorcode.   |
+---------+--------------+-------------------------------------------------+

**Returns:**

Returns a valid CoreId if ERR_OK, otherwise the result is undefined.

**Return values**

+-------------------+----------------------------------------+
| ERR_OK            | First found CoreId is returned.        |
+-------------------+----------------------------------------+
| ERR_PARAMETER     | CpuCoreBindingDesc is invalid pointer. |
+-------------------+----------------------------------------+
| ERR_END_OF_OBJECT | No core was set.                       |
+-------------------+----------------------------------------+

.. _group___sys_cpu_multi_core_itf_1gaf7ac85cc51905025e4f7aaa512bb58ba:

RTS_UI32 SysMCBDGetNextID (CpuCoreBindingDesc *pBindingDesc, RTS_UI32 uPrevCoreID, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

CpuCoreBindingDesc helper function

SysMCBDGetNextID returns the CoreId (i.e. the position) of the next set bit in CpuCoreBindingDesc.CpuCoreBits.

**Parameters**

+---------+--------------+---------------------------------------------------------------------------+
| [in]    | pBindingDesc | Pointer to the description of the core binding.                           |
+---------+--------------+---------------------------------------------------------------------------+
| [in]    | uPrevCoreID  | CoreId found by SysMCBDGetFirstID or a previous call of SysMCBDGetNextID. |
+---------+--------------+---------------------------------------------------------------------------+
| [in]    | pResult      | Pointer to a variable to return an errorcode.                             |
+---------+--------------+---------------------------------------------------------------------------+

**Returns:**

Returns a valid CoreId if ERR_OK, otherwise the result is undefined.

**Return values**

+-------------------+----------------------------------------+
| ERR_OK            | Next found CoreId is returned.         |
+-------------------+----------------------------------------+
| ERR_PARAMETER     | CpuCoreBindingDesc is invalid pointer. |
+-------------------+----------------------------------------+
| ERR_END_OF_OBJECT | No more cores were set.                |
+-------------------+----------------------------------------+

.. _group___sys_cpu_multi_core_itf_1ga87a4c7e4fc4cbc1742e0db7cc9b89db7:

RTS_RESULT SysMCBindProcess (CpuCoreBindingDesc *pBindingDesc, RTS_IEC_HANDLE hProcess)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to bind a process to a core or a set of cores.

To set the corresponding bit(s) in CpuCoreBindingDesc.CpuCoreBits use SysMCBDSet.

**Parameters**

+---------+--------------+--------------------------------------------------------------+
| [in]    | pBindingDesc | Pointer to the binding description for the new core binding. |
+---------+--------------+--------------------------------------------------------------+
| [in]    | hProcess     | Handle of the process to bind.                               |
+---------+--------------+--------------------------------------------------------------+

**Returns:**

Returns the result.

**Return values**

+----------------------+-------------------------------------------------+
| ERR_OK               | Call was sucessfull.                            |
+----------------------+-------------------------------------------------+
| ERR_PARAMETER        | Parameter is invalid, e.g. core does not exist. |
+----------------------+-------------------------------------------------+
| ERR_OPERATION_DENIED | Operation is denied on OS level.                |
+----------------------+-------------------------------------------------+
| ERR_INVALID_HANDLE   | Handle is invalid.                              |
+----------------------+-------------------------------------------------+
| ERR_FAILED           | Function failed for any reason on OS level.     |
+----------------------+-------------------------------------------------+
| ERR_NOTIMPLEMENTED   | Function is not implemented.                    |
+----------------------+-------------------------------------------------+
| ERR_NOT_SUPPORTED    | Function is not supported.                      |
+----------------------+-------------------------------------------------+

.. _group___sys_cpu_multi_core_itf_1gad2a081e193f037befa9272979b986f35:

RTS_RESULT SysMCBindProcess_ (CpuCoreBindingDesc *pBindingDesc, RTS_IEC_HANDLE hProcess)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The OS implementation of SysMCBindProcess

.. _group___sys_cpu_multi_core_itf_1ga61c9583a7b245940d42f4ee58e96f310:

RTS_RESULT SysMCBindTask (CpuCoreBindingDesc *pBindingDesc, RTS_IEC_HANDLE hTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to bind a task to a core or a set of cores.

To set the corresponding bit(s) in CpuCoreBindingDesc.CpuCoreBits use SysMCBDSet.

**Parameters**

+---------+--------------+--------------------------------------------------------------+
| [in]    | pBindingDesc | Pointer to the binding description for the new core binding. |
+---------+--------------+--------------------------------------------------------------+
| [in]    | hTask        | Handle of the task to bind.                                  |
+---------+--------------+--------------------------------------------------------------+

**Returns:**

Returns the result.

**Return values**

+----------------------+-------------------------------------------------+
| ERR_OK               | Call was sucessfull.                            |
+----------------------+-------------------------------------------------+
| ERR_PARAMETER        | Parameter is invalid, e.g. core does not exist. |
+----------------------+-------------------------------------------------+
| ERR_OPERATION_DENIED | Operation is denied on OS level.                |
+----------------------+-------------------------------------------------+
| ERR_INVALID_HANDLE   | Handle is invalid.                              |
+----------------------+-------------------------------------------------+
| ERR_FAILED           | Function failed for any reason on OS level.     |
+----------------------+-------------------------------------------------+
| ERR_NOTIMPLEMENTED   | Function is not implemented.                    |
+----------------------+-------------------------------------------------+
| ERR_NOT_SUPPORTED    | Function is not supported.                      |
+----------------------+-------------------------------------------------+

.. _group___sys_cpu_multi_core_itf_1ga25fad5b42431683bc9123e7a47808ed6:

RTS_RESULT SysMCBindTask_ (CpuCoreBindingDesc *pBindingDesc, RTS_IEC_HANDLE hTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The OS implementation of SysMCBindTask

.. _group___sys_cpu_multi_core_itf_1gadb909c872b5a787ebf42c6d368cc90e0:

RTS_RESULT SysMCUnbindProcess (RTS_IEC_HANDLE hProcess)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to remove the binding to a core or a set of cores of a process.

This means the OS is again responsible on which core(s) the process is allowed to run on.

**Parameters**

+---------+----------+----------------------------------+
| [in]    | hProcess | Handle of the process to unbind. |
+---------+----------+----------------------------------+

**Returns:**

Returns the result.

**Return values**

+----------------------+---------------------------------------------+
| ERR_OK               | Call was sucessfull.                        |
+----------------------+---------------------------------------------+
| ERR_PARAMETER        | Parameter is invalid.                       |
+----------------------+---------------------------------------------+
| ERR_OPERATION_DENIED | Operation is denied on OS level.            |
+----------------------+---------------------------------------------+
| ERR_INVALID_HANDLE   | Handle is invalid.                          |
+----------------------+---------------------------------------------+
| ERR_FAILED           | Function failed for any reason on OS level. |
+----------------------+---------------------------------------------+
| ERR_NOTIMPLEMENTED   | Function is not implemented.                |
+----------------------+---------------------------------------------+

.. _group___sys_cpu_multi_core_itf_1gaaabfb963dafcd85e1b1ef1b35c16a565:

RTS_RESULT SysMCUnbindProcess_ (RTS_IEC_HANDLE hProcess)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The OS implementation of SysMCUnbindProcess

.. _group___sys_cpu_multi_core_itf_1ga8c502c9779d3c49788cc47018b1407b4:

RTS_RESULT SysMCUnbindTask (RTS_IEC_HANDLE hTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to remove the binding to a core or a group of cores of a task.

This means the OS is again responsible on which core(s) the task is allowed to run on.

**Parameters**

+---------+-------+-------------------------------+
| [in]    | hTask | Handle of the task to unbind. |
+---------+-------+-------------------------------+

**Returns:**

Returns the result.

**Return values**

+----------------------+---------------------------------------------+
| ERR_OK               | Call was sucessfull.                        |
+----------------------+---------------------------------------------+
| ERR_PARAMETER        | Parameter is invalid.                       |
+----------------------+---------------------------------------------+
| ERR_OPERATION_DENIED | Operation is denied on OS level.            |
+----------------------+---------------------------------------------+
| ERR_INVALID_HANDLE   | Handle is invalid.                          |
+----------------------+---------------------------------------------+
| ERR_FAILED           | Function failed for any reason on OS level. |
+----------------------+---------------------------------------------+
| ERR_NOTIMPLEMENTED   | Function is not implemented.                |
+----------------------+---------------------------------------------+

.. _group___sys_cpu_multi_core_itf_1gaa30487d7d6674b2cfac6bff166e59975:

RTS_RESULT SysMCUnbindTask_ (RTS_IEC_HANDLE hTask)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The OS implementation of SysMCUnbindTask

.. _group___sys_cpu_multi_core_itf_1ga1be2430e917d710b3f6d242944434592:

RTS_RESULT SysMCGetLoad (RTS_UI32 uCoreID, RTS_UI8 *pPercent)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

OPTIONAL FUNCTION:

Function to get the current average workload of a dedicated core, identified by the input parameter. NOTE: This function may not be supported by every operating system!

**Parameters**

+---------+----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | uCoreID  | Identifies the core whose load has to be returned. Starting with 0=first core, ... NOTE: If uCoreID=RTS_UI32_MAX, average CPU load over all cores in percent is returned! |
+---------+----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pPercent | CPU-Core load in percent.                                                                                                                                                 |
+---------+----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Returns the result.

**Return values**

+--------------------+-------------------------------------------------+
| ERR_OK             | Call was sucessfull.                            |
+--------------------+-------------------------------------------------+
| ERR_PARAMETER      | Parameter is invalid, e.g. core does not exist. |
+--------------------+-------------------------------------------------+
| ERR_NOTINITIALIZED | Function is not initialized.                    |
+--------------------+-------------------------------------------------+
| ERR_NOBUFFER       | Not enough memory for the performance counters  |
+--------------------+-------------------------------------------------+
| ERR_FAILED         | Function failed for any reason on OS level.     |
+--------------------+-------------------------------------------------+
| ERR_NOTIMPLEMENTED | Function is not implemented.                    |
+--------------------+-------------------------------------------------+

.. _group___sys_cpu_multi_core_itf_1ga41bebadc1868cd428caeb2debf2ff40d:

RTS_RESULT SysMCGetLoad_ (RTS_UI32 uCoreID, RTS_UI8 *pPercent)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The OS implementation of SysMCGetLoad

.. _group___sys_cpu_multi_core_itf_1gadf9130c00eee49dd86fb4dfd55ef0c8a:

RTS_UI32 SysMCGetNumOfCores (RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to get the number of cores available for use by the runtime system.

**Parameters**

+---------+---------+---------------------------------------------------------+
| [in]    | pResult | Pointer to a variable to return an errorcode (optional) |
+---------+---------+---------------------------------------------------------+

**Returns:**

Returns the number of cores.

**Return values**

+--------------------+---------------------------------------------+
| ERR_OK             | Call was sucessfull.                        |
+--------------------+---------------------------------------------+
| ERR_FAILED         | Function failed for any reason on OS level. |
+--------------------+---------------------------------------------+
| ERR_NOTIMPLEMENTED | Function is not implemented.                |
+--------------------+---------------------------------------------+

.. _group___sys_cpu_multi_core_itf_1ga157b4dcefc157c8ff096a52de5ef8701:

RTS_UI32 SysMCGetNumOfCores_ (RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The OS implementation of SysMCGetNumOfCores

.. _group___sys_cpu_multi_core_itf_1ga77d577955203eb463a31afbc4112f472:

RTS_RESULT SysMCGetProcessBinding (RTS_IEC_HANDLE hProcess, CpuCoreBindingDesc *pBindingDesc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to read the binding of a process to core(s).

NOTE: To obtain the binding of the current process hProcess may be RTS_INVALID_HANDLE. NOTE: To obtain the CoreIds set in CpuCoreBindingDesc use SysMCBDGetFirstID and SysMCBDGetNextID.

**Parameters**

+---------+--------------+------------------------------------------------------------------+
| [in]    | hProcess     | Handle of the process or RTS_INVALID_HANDLE for current process. |
+---------+--------------+------------------------------------------------------------------+
| [out]   | pBindingDesc | Pointer to the binding description for the core binding.         |
+---------+--------------+------------------------------------------------------------------+

**Returns:**

Returns the result.

**Return values**

+--------------------+---------------------------------------------+
| ERR_OK             | Call was sucessfull.                        |
+--------------------+---------------------------------------------+
| ERR_PARAMETER      | Parameter is invalid.                       |
+--------------------+---------------------------------------------+
| ERR_FAILED         | Function failed for any reason on OS level. |
+--------------------+---------------------------------------------+
| ERR_NOTIMPLEMENTED | Function is not implemented.                |
+--------------------+---------------------------------------------+
| ERR_NOT_SUPPORTED  | Function is not supported.                  |
+--------------------+---------------------------------------------+

.. _group___sys_cpu_multi_core_itf_1gadd050f9b966798c186b9814924aade0a:

RTS_RESULT SysMCGetProcessBinding_ (RTS_IEC_HANDLE hProcess, CpuCoreBindingDesc *pBindingDesc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The OS implementation of SysMCGetProcessBinding

.. _group___sys_cpu_multi_core_itf_1ga9929613cee047235c7e4bab785978bd6:

RTS_RESULT SysMCGetTaskBinding (RTS_IEC_HANDLE hTask, CpuCoreBindingDesc *pBindingDesc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to read the binding of a task to core(s).

NOTE: To obtain the binding of the current task hTask may be RTS_INVALID_HANDLE. NOTE: Operating system dependent this function may support only the current task. NOTE: To obtain the CoreIds set in CpuCoreBindingDesc use SysMCBDGetFirstID and SysMCBDGetNextID.

**Parameters**

+---------+--------------+------------------------------------------------------------+
| [in]    | hTask        | Handle of the task or RTS_INVALID_HANDLE for current task. |
+---------+--------------+------------------------------------------------------------+
| [out]   | pBindingDesc | Pointer to the binding description for the core binding.   |
+---------+--------------+------------------------------------------------------------+

**Returns:**

Returns the result.

**Return values**

+--------------------+---------------------------------------------+
| ERR_OK             | Call was sucessfull.                        |
+--------------------+---------------------------------------------+
| ERR_PARAMETER      | Parameter is invalid.                       |
+--------------------+---------------------------------------------+
| ERR_FAILED         | Function failed for any reason on OS level. |
+--------------------+---------------------------------------------+
| ERR_NOTIMPLEMENTED | Function is not implemented.                |
+--------------------+---------------------------------------------+
| ERR_NOT_SUPPORTED  | Function is not supported.                  |
+--------------------+---------------------------------------------+

.. _group___sys_cpu_multi_core_itf_1gaa7fc872c7df6386652f4d931701256e1:

RTS_RESULT SysMCGetTaskBinding_ (RTS_IEC_HANDLE hTask, CpuCoreBindingDesc *pBindingDesc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The OS implementation of SysMCGetTaskBinding

.. _group___sys_cpu_multi_core_itf_1ga9161f12f86827eab55b7c5c100745638:

RTS_UI32 SysMCGetCurrentCoreID (RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to read current CoreId the calling process or task is running on.

**Parameters**

+---------+---------+---------------------------------------------------------+
| [in]    | pResult | Pointer to a variable to return an errorcode (optional) |
+---------+---------+---------------------------------------------------------+

**Returns:**

Returns the current CoreId.

**Return values**

+--------------------+---------------------------------------------+
| ERR_OK             | Call was sucessfull.                        |
+--------------------+---------------------------------------------+
| ERR_FAILED         | Function failed for any reason on OS level. |
+--------------------+---------------------------------------------+
| ERR_NOTIMPLEMENTED | Function is not implemented.                |
+--------------------+---------------------------------------------+
| ERR_NOT_SUPPORTED  | Function is not supported.                  |
+--------------------+---------------------------------------------+

.. _group___sys_cpu_multi_core_itf_1ga9df4a7641181a251554db824306e29e3:

RTS_UI32 SysMCGetCurrentCoreID_ (RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The OS implementation of SysMCGetCurrentCoreID

.. last line of group.rst template
.. last line of composition.rst template


