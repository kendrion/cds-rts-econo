.. first line of composition.rst template

.. first line of group.rst template

.. _group___cmp_security_manager_itf:

=====================
CmpSecurityManagerItf
=====================

Interface of CmpSecurityManager. :ref:`More... <group___cmp_security_manager_itf-details>`

Modules
-------

- :ref:`Compiler switch <group___cmp_security_manager_itf___compilerswitch>`

- :ref:`Event parameter <group___cmp_security_manager_itf___eventparameter>`

- :ref:`Events <group___cmp_security_manager_itf___events>`

- :ref:`SecurityEditableFlags <group___cmp_security_manager_itf___security_editable_flags>`

- :ref:`SecuritySelectableFlags <group___cmp_security_manager_itf___security_selectable_flags>`

- :ref:`SecuritySettingFlags <group___cmp_security_manager_itf___security_setting_flags>`

- :ref:`SecuritySettings <group___cmp_security_manager_itf___security_settings>`

- :ref:`Settings <group___cmp_security_manager_itf___settings>`

- :ref:`Static defines <group___cmp_security_manager_itf___staticdefines>`

Data Structures
---------------

- struct :ref:`_SecuritySetting <struct___security_setting>`

- struct :ref:`_SecuritySelectableSetting <struct___security_selectable_setting>`

- struct :ref:`_SecuritySettingValue <union___security_setting_value>`

- struct :ref:`_SecurityEditableSetting <struct___security_editable_setting>`

- struct :ref:`ICmpSecurityManager_C <struct_i_cmp_security_manager___c>`

Macros
------

- #define :ref:`SECURITY_VALUE_CREATE_SELFSIGNED_CERT_LIST <group___cmp_security_manager_itf_1ga35939aaaf3fa5936143cdba336a6296a>` {\
{(RTS_I32) :ref:`CREATE_SELFSIGNED_CERT_YES <group___cmp_security_manager_itf_1ggaf936bfb1da8d8e891c8f75cec7e827faae78d10739cde48314e4b64310857aedb>` , :ref:`CMPSECMAN_SFLAGS_NONE <group___cmp_security_manager_itf___security_selectable_flags_1gac9107231eaf39c3dac3113befeae5ca0>` , :ref:`SECURITY_VALUE_CREATE_SELFSIGNED_CERT_YES <group___cmp_security_manager_itf___security_settings_1ga6165135e114cdddf74e347d97ef33084>` , "Create a selfsigned cert"},\
{(RTS_I32) :ref:`CREATE_SELFSIGNED_CERT_NO <group___cmp_security_manager_itf_1ggaf936bfb1da8d8e891c8f75cec7e827faa4ae0110527fddceb670cbb793e994ead>` , :ref:`CMPSECMAN_SFLAGS_NONE <group___cmp_security_manager_itf___security_selectable_flags_1gac9107231eaf39c3dac3113befeae5ca0>` , :ref:`SECURITY_VALUE_CREATE_SELFSIGNED_CERT_NO <group___cmp_security_manager_itf___security_settings_1gadb37ab51f0a2f28dc40698556341930f>` , "Don't create a selfsigned cert"}\
}

- #define :ref:`ITF_CmpSecurityManager <group___cmp_security_manager_itf_1gabb8559ed66b1ca13dd086babf0f2f536>`

- #define :ref:`EXTITF_CmpSecurityManager <group___cmp_security_manager_itf_1gad28f8c197d677a8154c5311d6692743f>`

Typedefs
--------

- typedef struct :ref:`_SecuritySetting <struct___security_setting>` :ref:`SecuritySetting <group___cmp_security_manager_itf_1ga2f1b7f04346c3edc9ea7f6466034dde6>`

- typedef struct :ref:`_SecuritySelectableSetting <struct___security_selectable_setting>` :ref:`SecuritySelectableSetting <group___cmp_security_manager_itf_1ga88fb4838e84e3e4a0fb5335b3dae82a5>`

- typedef union :ref:`_SecuritySettingValue <union___security_setting_value>` :ref:`SecuritySettingValue <group___cmp_security_manager_itf_1gac5532c61f8490e8516c74d9ecbdce621>`

- typedef struct :ref:`_SecurityEditableSetting <struct___security_editable_setting>` :ref:`SecurityEditableSetting <group___cmp_security_manager_itf_1ga67af4a9d927839a7122ae38e56266cbb>`

- typedef :ref:`ICmpSecurityManager_C <struct_i_cmp_security_manager___c>` :ref:`ICmpSecurityManager <group___cmp_security_manager_itf_1gaa1fb4c1920957a44b230de3a550debee>`

Enumerations
------------

- enum :ref:`SECURITY_CREATESELFSIGNEDCERT_IDS <group___cmp_security_manager_itf_1gaf936bfb1da8d8e891c8f75cec7e827fa>` { :ref:`CREATE_SELFSIGNED_CERT_YES <group___cmp_security_manager_itf_1ggaf936bfb1da8d8e891c8f75cec7e827faae78d10739cde48314e4b64310857aedb>`, :ref:`CREATE_SELFSIGNED_CERT_NO <group___cmp_security_manager_itf_1ggaf936bfb1da8d8e891c8f75cec7e827faa4ae0110527fddceb670cbb793e994ead>` }

Functions
---------

- RTS_HANDLE :ref:`SecManRegisterSelectableSetting <group___cmp_security_manager_itf_1gaf76f47f0adf081fe1df891172f801f1c>` (CMPID cmpId, const char * pszKey, const char * pszDescription, const char * pszDefaultSecName, const :ref:`SecuritySelectableSetting <group___cmp_security_manager_itf_1ga88fb4838e84e3e4a0fb5335b3dae82a5>` * pList, RTS_UI32 ui32Settings, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`SecManRegisterEditableSetting <group___cmp_security_manager_itf_1ga463715ff698601288f82a1614d708012>` (CMPID cmpId, const char * pszKey, const char * pszDescription, :ref:`SecurityEditableSetting <group___cmp_security_manager_itf_1ga67af4a9d927839a7122ae38e56266cbb>`  setting, RTS_RESULT * pResult)

- RTS_RESULT :ref:`SecManUnregisterSetting <group___cmp_security_manager_itf_1gaa8aeb0dbc5985248b43b53bfdf037d63>` (RTS_HANDLE hSecuritySetting)

- RTS_HANDLE :ref:`SecManFindSetting <group___cmp_security_manager_itf_1ga60689d648cafeaf6a7ca8db7740abaa6>` (CMPID cmpId, const char * pszKey, RTS_RESULT * pResult)

- const :ref:`SecuritySelectableSetting <group___cmp_security_manager_itf_1ga88fb4838e84e3e4a0fb5335b3dae82a5>` * :ref:`SecManGetSelectableSetting <group___cmp_security_manager_itf_1ga7c32a95c317e180c6346bc4a675e34e3>` (RTS_HANDLE hSecuritySetting, RTS_RESULT * pResult)

- :ref:`SecurityEditableSetting <group___cmp_security_manager_itf_1ga67af4a9d927839a7122ae38e56266cbb>` * :ref:`SecManGetEditableSetting <group___cmp_security_manager_itf_1gac609e6d32c1ce75d98e0c71e22023221>` (RTS_HANDLE hSecuritySetting, RTS_RESULT * pResult)

- RTS_RESULT :ref:`SecManFillCertificateInfo <group___cmp_security_manager_itf_1ga9358c64f6efe1568056e2b031d01a091>` (CMPID cmpId, :ref:`RtsX509CertInfo <group___cmp_x509_cert_itf_1ga96114d4c034d1905d83ce6d9a53c9a16>` * pCertInfo)

- RTS_RESULT :ref:`SecManCheckTlsContext <group___cmp_security_manager_itf_1ga7c5a289e7d7c8a907da11f7480f5d72e>` (RTS_UI32 ui32TlsMethod, char * pszCipherList, RTS_I32 i32VerifyMode)

.. _group___cmp_security_manager_itf-details:

Detailed Description
--------------------

Interface of CmpSecurityManager.

The security manager interface is used to specify the level of all available security features in one central component. Additionally the X.509 certificates for servers in the runtime system can be specified here.

The actual available security features (for which the level can be specified) are: 1. Programming system communication: encrypted / unencrypted 2. IEC application code and bootproject: signed / unsigned, encrypted / unencrypted 3. WebServer: http / https

NOTE: This list will be extended in the future, if new security features are available and the corresponding security level must be specified!

SECURITY-NOTE: The security manager must be linked statically to the runtime system core to prevent, that it cannot be removed or replaced by a malware!

**Copyright:**

Copyright (c) 2017-2018 CODESYS GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved.

Macro Definition Documentation
------------------------------
.. _group___cmp_security_manager_itf_1ga35939aaaf3fa5936143cdba336a6296a:

#define SECURITY_VALUE_CREATE_SELFSIGNED_CERT_LIST
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Value:**

.. parsed-literal::

    {\\
    {(RTS_I32) :ref:`CREATE_SELFSIGNED_CERT_YES <group___cmp_security_manager_itf_1ggaf936bfb1da8d8e891c8f75cec7e827faae78d10739cde48314e4b64310857aedb>` , :ref:`CMPSECMAN_SFLAGS_NONE <group___cmp_security_manager_itf___security_selectable_flags_1gac9107231eaf39c3dac3113befeae5ca0>` , :ref:`SECURITY_VALUE_CREATE_SELFSIGNED_CERT_YES <group___cmp_security_manager_itf___security_settings_1ga6165135e114cdddf74e347d97ef33084>` , "Create a selfsigned cert"},\\
    {(RTS_I32) :ref:`CREATE_SELFSIGNED_CERT_NO <group___cmp_security_manager_itf_1ggaf936bfb1da8d8e891c8f75cec7e827faa4ae0110527fddceb670cbb793e994ead>` , :ref:`CMPSECMAN_SFLAGS_NONE <group___cmp_security_manager_itf___security_selectable_flags_1gac9107231eaf39c3dac3113befeae5ca0>` , :ref:`SECURITY_VALUE_CREATE_SELFSIGNED_CERT_NO <group___cmp_security_manager_itf___security_settings_1gadb37ab51f0a2f28dc40698556341930f>` , "Don't create a selfsigned cert"}\\
    }

.. _group___cmp_security_manager_itf_1gabb8559ed66b1ca13dd086babf0f2f536:

#define ITF_CmpSecurityManager
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_security_manager_itf_1gad28f8c197d677a8154c5311d6692743f:

#define EXTITF_CmpSecurityManager
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___cmp_security_manager_itf_1ga2f1b7f04346c3edc9ea7f6466034dde6:

typedef struct _SecuritySetting  SecuritySetting
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Entry of one security feature to be managed by the CmpSecurityManager.

.. _group___cmp_security_manager_itf_1ga88fb4838e84e3e4a0fb5335b3dae82a5:

typedef struct _SecuritySelectableSetting  SecuritySelectableSetting
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This structure stores a single entry of a selectable setting. Each possible selection is a single struture element when registering the setting. The registration can be done using SecManRegisterSelectableSetting function. The selected setting can be retrieved by using SecManGetSelectableSetting.

.. _group___cmp_security_manager_itf_1gac5532c61f8490e8516c74d9ecbdce621:

typedef union _SecuritySettingValue  SecuritySettingValue
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Union to store an editable integer, string or wstring value. Value can be specified in the security manager.

.. _group___cmp_security_manager_itf_1ga67af4a9d927839a7122ae38e56266cbb:

typedef struct _SecurityEditableSetting  SecurityEditableSetting
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This structure stores a editable setting. The setting can be registerd using SecManRegisterEditableSetting function. The default value given when registring will be returned until the setting has been changed by the someone. Then the changed value will be returned. To indicate if a string or an intager is stored use either CMPSECMAN_FLAGS_STRINGSETTING or CMPSECMAN_FLAGS_INTSETTING. The corresponding field in the secValue union is then used. Use the function SecManGetEditableSetting to retrieve the valued stored.

.. _group___cmp_security_manager_itf_1gaa1fb4c1920957a44b230de3a550debee:

typedef ICmpSecurityManager_C ICmpSecurityManager
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Enumeration Type Documentation
------------------------------

.. _group___cmp_security_manager_itf_1gaf936bfb1da8d8e891c8f75cec7e827fa:

enum SECURITY_CREATESELFSIGNEDCERT_IDS
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

SecurityIDs 

**Enumerator:**

+----------------------------+
| CREATE_SELFSIGNED_CERT_YES |
+----------------------------+
| CREATE_SELFSIGNED_CERT_NO  |
+----------------------------+

Function Documentation
----------------------

.. _group___cmp_security_manager_itf_1gaf76f47f0adf081fe1df891172f801f1c:

RTS_HANDLE SecManRegisterSelectableSetting (CMPID cmpId, const char *pszKey, const char *pszDescription, const char *pszDefaultSecName, const SecuritySelectableSetting *pList, RTS_UI32 ui32Settings, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to register one security setting of a component.

**Parameters**

+---------+--------------+----------------------------------------------------------+
| [in]    | pEntry       | Pointer to description structure of the security setting |
+---------+--------------+----------------------------------------------------------+
| [in]    | pSettings    | Pointer to the security settings list                    |
+---------+--------------+----------------------------------------------------------+
| [in]    | ui32Settings | Number of security settings in the list                  |
+---------+--------------+----------------------------------------------------------+
| [out]   | pResult      | Pointer to error code                                    |
+---------+--------------+----------------------------------------------------------+

**Return values**

+--------------------+-----------------------------------------------------------------------------+
| ERR_OK             | Settings could be registered                                                |
+--------------------+-----------------------------------------------------------------------------+
| ERR_NOTINITIALIZED | CmpSecurityManager is not yet initialized                                   |
+--------------------+-----------------------------------------------------------------------------+
| ERR_NO_MEMORY      | No memory to register security settings                                     |
+--------------------+-----------------------------------------------------------------------------+
| ERR_DUPLICATE      | The setting was registered already. The handle of the existing is returned. |
+--------------------+-----------------------------------------------------------------------------+

**Returns:**

Handle to the registered security settings

.. _group___cmp_security_manager_itf_1ga463715ff698601288f82a1614d708012:

RTS_HANDLE SecManRegisterEditableSetting (CMPID cmpId, const char *pszKey, const char *pszDescription, SecurityEditableSetting setting, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to register one security setting of a component.

**Parameters**

+---------+----------+----------------------------------------------------------+
| [in]    | pEntry   | Pointer to description structure of the security setting |
+---------+----------+----------------------------------------------------------+
| [in]    | pSetting | Pointer to the editable security settings                |
+---------+----------+----------------------------------------------------------+
| [out]   | pResult  | Pointer to error code                                    |
+---------+----------+----------------------------------------------------------+

**Return values**

+--------------------+-----------------------------------------------------------------------------+
| ERR_OK             | Settings could be registered                                                |
+--------------------+-----------------------------------------------------------------------------+
| ERR_NOTINITIALIZED | CmpSecurityManager is not yet initialized                                   |
+--------------------+-----------------------------------------------------------------------------+
| ERR_NO_MEMORY      | No memory to register security settings                                     |
+--------------------+-----------------------------------------------------------------------------+
| ERR_DUPLICATE      | The setting was registered already. The handle of the existing is returned. |
+--------------------+-----------------------------------------------------------------------------+

**Returns:**

Handle to the registered security settings

.. _group___cmp_security_manager_itf_1gaa8aeb0dbc5985248b43b53bfdf037d63:

RTS_RESULT SecManUnregisterSetting (RTS_HANDLE hSecuritySetting)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Unregister security setting

**Parameters**

+---------+------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hSecuritySetting | Handle to the security settings returned by :ref:`SecManRegisterSelectableSetting() <group___cmp_open_s_s_l_dep___staticdefines_1ga3ed53ead56a9e36082748dc224880f1f>` or SecManFindSettings() or :ref:`SecManRegisterEditableSetting() <group___cmp_security_manager_itf_1ga463715ff698601288f82a1614d708012>` |
+---------+------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Result of the operation

**Return values**

+---------------+--------------------------+
| ERR_OK        | Unregister succeeded     |
+---------------+--------------------------+
| ERR_PARAMETER | hSecuritySetting invalid |
+---------------+--------------------------+

.. _group___cmp_security_manager_itf_1ga60689d648cafeaf6a7ca8db7740abaa6:

RTS_HANDLE SecManFindSetting (CMPID cmpId, const char *pszKey, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Find settings specified by componentID and usageID

**Parameters**

+---------+---------+-----------------------------------------------------------+
| [in]    | cmpId   | ComponentID of the server that provides security features |
+---------+---------+-----------------------------------------------------------+
| [in]    | pszKey  | Name of the setting                                       |
+---------+---------+-----------------------------------------------------------+
| [out]   | pResult | Pointer to error code                                     |
+---------+---------+-----------------------------------------------------------+

**Return values**

+--------------------+-------------------------------------------+
| ERR_OK             | Settings could be found                   |
+--------------------+-------------------------------------------+
| ERR_NOTINITIALIZED | CmpSecurityManager is not yet initialized |
+--------------------+-------------------------------------------+
| ERR_NO_OBJECT      | No settings registered                    |
+--------------------+-------------------------------------------+

**Returns:**

Handle to the registered security settings

.. _group___cmp_security_manager_itf_1ga7c32a95c317e180c6346bc4a675e34e3:

const SecuritySelectableSetting* SecManGetSelectableSetting (RTS_HANDLE hSecuritySetting, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the selected setting because of the security policy of the target!

**Parameters**

+---------+------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hSecuritySetting | Handle to the security settings returned by :ref:`SecManRegisterSelectableSetting() <group___cmp_open_s_s_l_dep___staticdefines_1ga3ed53ead56a9e36082748dc224880f1f>` or SecManFindSettings() |
+---------+------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult          | Pointer to error code                                                                                                                                                                         |
+---------+------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+-----------------------------+
| ERR_OK        | One setting is returned     |
+---------------+-----------------------------+
| ERR_PARAMETER | hSecuritySetting is invalid |
+---------------+-----------------------------+
| ERR_NO_OBJECT | No setting selected         |
+---------------+-----------------------------+

**Returns:**

Pointer to the security setting which is selected on the target

.. _group___cmp_security_manager_itf_1gac609e6d32c1ce75d98e0c71e22023221:

SecurityEditableSetting* SecManGetEditableSetting (RTS_HANDLE hSecuritySetting, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the edited value setting because of the security policy of the target!

**Parameters**

+---------+------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hSecuritySetting | Handle to the security settings returned by :ref:`SecManRegisterSelectableSetting() <group___cmp_open_s_s_l_dep___staticdefines_1ga3ed53ead56a9e36082748dc224880f1f>` or SecManFindSettings() |
+---------+------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult          | Pointer to error code                                                                                                                                                                         |
+---------+------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+-----------------------------+
| ERR_OK        | One setting is returned     |
+---------------+-----------------------------+
| ERR_PARAMETER | hSecuritySetting is invalid |
+---------------+-----------------------------+
| ERR_NO_OBJECT | No setting selected         |
+---------------+-----------------------------+

**Returns:**

Pointer to the security setting which is selected on the target

.. _group___cmp_security_manager_itf_1ga9358c64f6efe1568056e2b031d01a091:

RTS_RESULT SecManFillCertificateInfo (CMPID cmpId, RtsX509CertInfo *pCertInfo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to overload the certificate info from a specified server resp. for a usage

**Parameters**

+---------+-----------+-----------------------------------------------------------+
| [in]    | cmpId     | ComponentID of the server that provides security features |
+---------+-----------+-----------------------------------------------------------+
| [in]    | pCertInfo | Pointer to the preinitialized certificate info            |
+---------+-----------+-----------------------------------------------------------+

**Returns:**

Result of the operation

**Return values**

+--------------------+---------------------------------+
| ERR_OK             | Certificate info was overloaded |
+--------------------+---------------------------------+
| ERR_NOTIMPLEMENTED | No overload done                |
+--------------------+---------------------------------+

.. _group___cmp_security_manager_itf_1ga7c5a289e7d7c8a907da11f7480f5d72e:

RTS_RESULT SecManCheckTlsContext (RTS_UI32 ui32TlsMethod, char *pszCipherList, RTS_I32 i32VerifyMode)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function checks a TLS context that is created via :ref:`TlsCreateContext() <group___cmp_tls_itf_1gacc000e3cd5fa34999896abf07160003c>` resp. :ref:`TlsCreateContext2() <group___cmp_tls_itf_1ga3b3f5ee888d46abc4757a7f0d9d6c560>` . Here the TlsMethod, CipherList and VerifyMethod can be checked against own security policy!

NOTE: This is only a callback function from the implementation of the CmpTlsItf! So don't us it directly!

**Parameters**

+---------+---------------+------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ui32TlsMethod | Mode of the TLS connections. See: TLS_METHOD_... macros                                                                      |
+---------+---------------+------------------------------------------------------------------------------------------------------------------------------+
| [in]    | szCipherList  | Cipher selection of the TLS connection. See CipherList setting for details. If NULL the default of the setting will be used. |
+---------+---------------+------------------------------------------------------------------------------------------------------------------------------+
| [in]    | i32VerifyMode | Verify mode of the TLS connection. See: TLS_VERIFY... macros. Default server: NONE; Default client: VERIFY_PEER.             |
+---------+---------------+------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Result of the operation

**Return values**

+------------+--------------------------------------------------------------------+
| ERR_OK     | All context settings are complying the security policy             |
+------------+--------------------------------------------------------------------+
| ERR_FAILED | At least one context setting is not complying the security policy! |
+------------+--------------------------------------------------------------------+

.. last line of group.rst template
.. last line of composition.rst template


