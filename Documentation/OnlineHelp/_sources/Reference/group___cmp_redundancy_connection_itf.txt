.. first line of composition.rst template

.. first line of group.rst template

.. _group___cmp_redundancy_connection_itf:

==========================
CmpRedundancyConnectionItf
==========================

Interface of CmpRedundancyConnection. :ref:`More... <group___cmp_redundancy_connection_itf-details>`

Data Structures
---------------

- struct :ref:`ICmpRedundancyConnection_C <struct_i_cmp_redundancy_connection___c>`

Macros
------

- #define :ref:`ITF_CmpRedundancyConnection <group___cmp_redundancy_connection_itf_1ga51964b411929c3d9e175a66e55458a9d>`

- #define :ref:`EXTITF_CmpRedundancyConnection <group___cmp_redundancy_connection_itf_1gaff09c0ad87854a30f1fa789742fc2db7>`

Typedefs
--------

- typedef :ref:`ICmpRedundancyConnection_C <struct_i_cmp_redundancy_connection___c>` :ref:`ICmpRedundancyConnection <group___cmp_redundancy_connection_itf_1ga3475ff40230cebeb89b45f94438ddb28>`

Functions
---------

- RTS_HANDLE :ref:`RdcyConnectionOpen <group___cmp_redundancy_connection_itf_1ga46abfb651f9c7831e447b495542c0fa6>` (:ref:`REDUNDANCY_COMM_MODE <group___cmp_redundancy_itf_1gae9015dc80362e86c441a3b750d366dee>`  mode, RTS_UI32 uiMessageSize)

- RTS_RESULT :ref:`RdcyConnectionClose <group___cmp_redundancy_connection_itf_1ga75423e56befe426b05f660bf870b8ad4>` (RTS_HANDLE hConnection, :ref:`REDUNDANCY_COMM_MODE <group___cmp_redundancy_itf_1gae9015dc80362e86c441a3b750d366dee>`  mode)

- RTS_UI32 :ref:`RdcyConnectionGetOwnAddress <group___cmp_redundancy_connection_itf_1ga7dd61ff94262110134227266f74bfa30>` (void)

- RTS_BOOL :ref:`RdcyConnectionReceiveSync <group___cmp_redundancy_connection_itf_1gab6ef807aeaddd33c68bf5888bc3000ee>` (RTS_HANDLE hConnection, char * pbyData, RTS_UI32 diDataSize, :ref:`CLIENT_REPLY <group___cmp_redundancy_itf_1ga9aca827043efb8b7c5d41e1c7b5341af>` * pReply)

- RTS_UI32 :ref:`RdcyConnectionGetReceiveSize <group___cmp_redundancy_connection_itf_1ga43410685fb1283c2a67b18f2596ef284>` (RTS_HANDLE hConnection, RTS_UI32 ulTimeout)

- RTS_UI32 :ref:`RdcyConnectionSendSync <group___cmp_redundancy_connection_itf_1gad6c62be663e4c95944b5a80fc1e2029d>` (RTS_HANDLE hConnection, char * pbyData, RTS_UI32 diDataSize)

- RTS_UI32 :ref:`RdcyConnectionReceiveData <group___cmp_redundancy_connection_itf_1gae9d7d928f5a019222b7cec84cf85d940>` (RTS_HANDLE hConnection, char * pbyData, RTS_UI32 diDataSize, :ref:`CLIENT_REPLY <group___cmp_redundancy_itf_1ga9aca827043efb8b7c5d41e1c7b5341af>` * pReply, RTS_UI32 ulTimeout)

- RTS_UI32 :ref:`RdcyConnectionSendData <group___cmp_redundancy_connection_itf_1ga4e84f36b4904c07cb58f865ece58d27a>` (RTS_HANDLE hConnection, char * pbyData, RTS_UI32 diDataSize)

- RTS_RESULT :ref:`RdcyConnectionReadSettings <group___cmp_redundancy_connection_itf_1gae88499d65bac0fdf4ca408aff384d804>` (void)

- RTS_RESULT :ref:`RdcyConnectionSrvReadSettings <group___cmp_redundancy_connection_itf_1ga0e953bc0cb3c4bde2a827afd9de88324>` (:ref:`BINTAGWRITER <struct_b_i_n_t_a_g_w_r_i_t_e_r>` * pwriter)

- RTS_RESULT :ref:`RdcyConnectionSrvWriteSettings <group___cmp_redundancy_connection_itf_1ga81f0c212553e0f586afcb5d876acae69>` (:ref:`BINTAGREADER <struct_b_i_n_t_a_g_r_e_a_d_e_r>` * preader)

- RTS_UI32 :ref:`RdcyConnectionGetSyncMessageSize <group___cmp_redundancy_connection_itf_1ga519fa579c026aaa385cfcde8343e2aeb>` (void)

- RTS_UI32 :ref:`RdcyConnectionGetDataMessageSize <group___cmp_redundancy_connection_itf_1ga8e8e405fcfa2f7c3a987b12ef0604d46>` (void)

.. _group___cmp_redundancy_connection_itf-details:

Detailed Description
--------------------

Interface of CmpRedundancyConnection.

This is the interface of the redundancy connection. The redundancy connection is responsible for data exchange between the two redundancy partners. The redundancy component itself is managing the connections. This component is responsible to establish, close and perform communication under control of the redundancy component itself. There is a default implementation using IP protocols TCP and UDP. It is possible to use alternative protocols, by implementing this interface and replacing the default component based on IP protocols. There are two different kinds of data exchange:

- Sending and receiving synchronisation messages

- Sending and receiving data messages

Synchronisation messages are used during redundant operation. They are exchanged every task cycle. Data messages are used during synchronisation phase. They are used to transmit the boot application file, and global data.

Default implementation is using UDP for synchronisation messages, and TCP for data messages.

**Copyright:**

Copyright (c) 2017-2018 CODESYS GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved.

Macro Definition Documentation
------------------------------
.. _group___cmp_redundancy_connection_itf_1ga51964b411929c3d9e175a66e55458a9d:

#define ITF_CmpRedundancyConnection
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_redundancy_connection_itf_1gaff09c0ad87854a30f1fa789742fc2db7:

#define EXTITF_CmpRedundancyConnection
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___cmp_redundancy_connection_itf_1ga3475ff40230cebeb89b45f94438ddb28:

typedef ICmpRedundancyConnection_C ICmpRedundancyConnection
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function Documentation
----------------------

.. _group___cmp_redundancy_connection_itf_1ga46abfb651f9c7831e447b495542c0fa6:

RTS_HANDLE RdcyConnectionOpen (REDUNDANCY_COMM_MODE mode, RTS_UI32 uiMessageSize)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Open a redundancy connection for synchronisation. This connection will be used to receive data from redundancy partner. Synchronisation messages are quite small, but must be transmitted in realtime.

**Parameters**


| [in]    | mode | Indicates if the socked was opened in sync mode or data mode, and if used for send or received, or server or client. The following modes apply: RCOM_SyncReceive: Open a redundancy connection for sync messages receive. A UDP socket is opend and bind to local address in default implementation. RCOM_SyncSend: Open a redundancy connection for sync messages transmit. A UDP socket is opend in default implementation. RCOM_DataClient: Open a redundancy connection for data exchange. This connection will be used as client side for data transfer. The standby partner is playing the role of the communication client. Data transfer messages are quite big, and should be transmitted as fast as possible. A TCP socket is opend in default implementation, and connect to partner. RCOM_DataServer: Open a redundancy connection for data exchange. This connection will be used as server side for data transfer. The standalone and active partner is playing the role of the communication server. Data transfer messages are quite big, and should be transmitted as fast as possible. A TCP socket is opend in default implementation, and bind and listen. This socket is waiting for a client connection. |


**Returns:**

Handle of connection, for example socket number. Will be used to send and receive data. In case of error RTS_INVALID_HANDLE will be returned.

.. _group___cmp_redundancy_connection_itf_1ga75423e56befe426b05f660bf870b8ad4:

RTS_RESULT RdcyConnectionClose (RTS_HANDLE hConnection, REDUNDANCY_COMM_MODE mode)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Close a redundancy connection previously opened with RdcyConnectionOpen.

**Parameters**

+---------+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hConnection | Handle to the connection                                                                                                                                                                                                                |
+---------+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | mode        | Indicates if the socked was opened in sync mode or data mode, see RdcyConnectionOpen. Additional mode is RCOM_DataWork. This mode is used to close a client connection, to make server socket again waiting for a new client connection |
+---------+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

ERR_OK in case of success, other error code in case of error.

.. _group___cmp_redundancy_connection_itf_1ga7dd61ff94262110134227266f74bfa30:

RTS_UI32 RdcyConnectionGetOwnAddress (void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Return unique address of local device. Used to determine active/standby state in case both devices boot up at the same time. The device with higher address will be active. (if devices do not boot up at the same time, first device booting up will be first standalone, and then active when second device boots.

**Returns:**

Unique address of device as DWORD.

.. _group___cmp_redundancy_connection_itf_1gab6ef807aeaddd33c68bf5888bc3000ee:

RTS_BOOL RdcyConnectionReceiveSync (RTS_HANDLE hConnection, char *pbyData, RTS_UI32 diDataSize, CLIENT_REPLY *pReply)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Receive synchronisation data from partner device.

**Parameters**

+---------+-------------+-------------------------------------------------------------------------------+
| [in]    | hConnection | Handle to the connection, previously opened with RdcyConnectionOpen           |
+---------+-------------+-------------------------------------------------------------------------------+
| [in]    | pbyData     | Buffer to receive the received data                                           |
+---------+-------------+-------------------------------------------------------------------------------+
| [in]    | diDataSize  | Size of receive buffer, in bytes                                              |
+---------+-------------+-------------------------------------------------------------------------------+
| [in]    | pReply      | Pointer to CLIENT_REPLY structure, containing information about received data |
+---------+-------------+-------------------------------------------------------------------------------+

**Returns:**

TRUE in case of success, FALSE in case of error.

.. _group___cmp_redundancy_connection_itf_1ga43410685fb1283c2a67b18f2596ef284:

RTS_UI32 RdcyConnectionGetReceiveSize (RTS_HANDLE hConnection, RTS_UI32 ulTimeout)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Determine the number of bytes that can be read. Return 0 if no data is available.

**Parameters**

+---------+-------------+---------------------------------------------------------------------+
| [in]    | hConnection | Handle to the connection, previously opened with RdcyConnectionOpen |
+---------+-------------+---------------------------------------------------------------------+
| [in]    | ulTimeout   | Timeout in milliseconds                                             |
+---------+-------------+---------------------------------------------------------------------+

**Returns:**

Number of bytes that can be read with a following call of RdcyConnectionReceiveSync.

.. _group___cmp_redundancy_connection_itf_1gad6c62be663e4c95944b5a80fc1e2029d:

RTS_UI32 RdcyConnectionSendSync (RTS_HANDLE hConnection, char *pbyData, RTS_UI32 diDataSize)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Send synchronisation data to partner device.

**Parameters**

+---------+-------------+---------------------------------------------------------------------+
| [in]    | hConnection | Handle to the connection, previously opened with RdcyConnectionOpen |
+---------+-------------+---------------------------------------------------------------------+
| [in]    | pbyData     | Buffer with data to send                                            |
+---------+-------------+---------------------------------------------------------------------+
| [in]    | diDataSize  | Size of data to send, in bytes                                      |
+---------+-------------+---------------------------------------------------------------------+

**Returns:**

Number of bytes successfully sent. 0 in case of error.

.. _group___cmp_redundancy_connection_itf_1gae9d7d928f5a019222b7cec84cf85d940:

RTS_UI32 RdcyConnectionReceiveData (RTS_HANDLE hConnection, char *pbyData, RTS_UI32 diDataSize, CLIENT_REPLY *pReply, RTS_UI32 ulTimeout)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Receive data from partner device. To see how much data is in the message, you can cast received bytes to RedundancyTlgHeader and look at member dwLen.

**Parameters**

+---------+-------------+-----------------------------------------------------------------------------------------------------------------+
| [in]    | hConnection | Handle to the connection, previously opened with RdcyConnectionOpen, in mode RCOM_DataClient or RCOM_DataServer |
+---------+-------------+-----------------------------------------------------------------------------------------------------------------+
| [in]    | pbyData     | Buffer to receive data                                                                                          |
+---------+-------------+-----------------------------------------------------------------------------------------------------------------+
| [in]    | diDataSize  | Size of receive buffer, in bytes                                                                                |
+---------+-------------+-----------------------------------------------------------------------------------------------------------------+
| [in]    | pReply      | Pointer to CLIENT_REPLY structure, containing information about received data                                   |
+---------+-------------+-----------------------------------------------------------------------------------------------------------------+
| [in]    | ulTimeout   | Timeout for receiving data                                                                                      |
+---------+-------------+-----------------------------------------------------------------------------------------------------------------+

**Returns:**

Number of bytes successfully read into receive buffer. Return 0 if no data available.

.. _group___cmp_redundancy_connection_itf_1ga4e84f36b4904c07cb58f865ece58d27a:

RTS_UI32 RdcyConnectionSendData (RTS_HANDLE hConnection, char *pbyData, RTS_UI32 diDataSize)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Send data to partner device.

**Parameters**

+---------+-------------+-----------------------------------------------------------------------------------------------------------------+
| [in]    | hConnection | Handle to the connection, previously opened with RdcyConnectionOpen, in mode RCOM_DataClient or RCOM_DataServer |
+---------+-------------+-----------------------------------------------------------------------------------------------------------------+
| [in]    | pbyData     | Buffer with data to send                                                                                        |
+---------+-------------+-----------------------------------------------------------------------------------------------------------------+
| [in]    | diDataSize  | Size of data to send, in bytes                                                                                  |
+---------+-------------+-----------------------------------------------------------------------------------------------------------------+

**Returns:**

Number of bytes successfully sent. 0 in case of error.

.. _group___cmp_redundancy_connection_itf_1gae88499d65bac0fdf4ca408aff384d804:

RTS_RESULT RdcyConnectionReadSettings (void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Called when initializing the redundancy component with the redundancy connection settings from the CODESYS control config file. Connection settings are for e.g. IP / MAC / ... addresses of the redundancy partners, ports, timeouts, ... depending on the used communication.

**Returns:**

ERR_OK in case of success, ERR_FAILED in case of error.

.. _group___cmp_redundancy_connection_itf_1ga0e953bc0cb3c4bde2a827afd9de88324:

RTS_RESULT RdcyConnectionSrvReadSettings (BINTAGWRITER *pwriter)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Called when service is received to read the redundancy settings from the CODESYS control config file.

**Parameters**

+---------+---------+-------------------------------------------------+
| [in]    | pwriter | Pointer to the writer to write the settings to. |
+---------+---------+-------------------------------------------------+

**Returns:**

ERR_OK in case of success, ERR_FAILED in case of error.

.. _group___cmp_redundancy_connection_itf_1ga81f0c212553e0f586afcb5d876acae69:

RTS_RESULT RdcyConnectionSrvWriteSettings (BINTAGREADER *preader)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Called when service is received to write the redundancy settings from CODESYS into the CODESYS control config file.

**Parameters**

+---------+---------+------------------------------------------------------------+
| [in]    | preader | Pointer to the reader from which the settings can be read. |
+---------+---------+------------------------------------------------------------+

**Returns:**

ERR_OK in case of success, ERR_FAILED in case of error.

.. _group___cmp_redundancy_connection_itf_1ga519fa579c026aaa385cfcde8343e2aeb:

RTS_UI32 RdcyConnectionGetSyncMessageSize (void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function is used to determine the maximum message size of a data message, including header. In case of UDP/IP communication, the function will return 0x000001E0

**Returns:**

Data message size.

.. _group___cmp_redundancy_connection_itf_1ga8e8e405fcfa2f7c3a987b12ef0604d46:

RTS_UI32 RdcyConnectionGetDataMessageSize (void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function is used to determine the maximum message size of a data message, including header. In case of TCP/IP communication, the function will return 0x00005000

**Returns:**

Data message size.

.. last line of group.rst template
.. last line of composition.rst template


