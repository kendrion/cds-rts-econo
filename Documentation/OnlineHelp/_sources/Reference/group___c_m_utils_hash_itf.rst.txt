.. first line of composition.rst template

:orphan:

.. first line of group.rst template

.. _group___c_m_utils_hash_itf:

==============
CMUtilsHashItf
==============

.. contents::
    :local:
    :depth: 1

Interface of CMUtilsHash.

Detailed Description
--------------------

Interface for the implementation of a hash table with a linked list of hash entries to handle collisions.

Usage: 1. Creating a hash table using of static memory [recommended]:

CMUtlHashTable s_hashTable; #define MY_NUM_OF_HASHENTRIES 10 RTS_UI8 s_hashTableBuffer[ :ref:`MEMPOOLHASH_GET_HASHTABLE_LEN( MY_NUM_OF_HASHENTRIES ) <group___cmp_mem_pool_hash_itf_1ga9f60c91c693921a70376127b86f1388b>` ];

// Create hash table RTS_RESULT result = :ref:`CAL_CMUtlHashCreate2(&s_hashTable, MY_NUM_OF_HASHENTRIES, s_hashTableBuffer, COMPONENT_NAME) <group___c_m_utils_hash_itf_1ga02201f0824fa8bd349ac860cdef9667a>` ;

2. Creating a hash table using of dynamic memory:

CMUtlHashTable s_hashTable; #define MY_NUM_OF_HASHENTRIES 10

// Create hash table RTS_RESULT result = :ref:`CAL_CMUtlHashCreate2(&s_hashTable, MY_NUM_OF_HASHENTRIES, s_hashTableBuffer, COMPONENT_NAME) <group___c_m_utils_hash_itf_1ga02201f0824fa8bd349ac860cdef9667a>` ;

// Delete hash table :ref:`CAL_CMUtlHashDelete(&s_hashTable) <group___c_m_utils_hash_itf_1ga75fc51518f728eaf75de3ee464135686>` ;

// Insert hash entry to the hash table voidpBlock = ...; // Pointer to memory block to insert result = CAL_CMUtlHashInsert(&s_hashTable, "MyKey", strlen("MyKey") + 1, FALSE, pBlock);

// Insert new static hash entry to the hash table, which is filled with the parameters static CMUtlHashEntry s_newEntry; result = CAL_CMUtlHashInsert2(&s_hashTable, &s_newEntry, "MyKey", strlen("MyKey") + 1, FALSE, pBlock);

// Remove hash entry specified by key :ref:`CAL_CMUtlHashRemove(&s_hashTable, &s_newEntry) <group___c_m_utils_hash_itf_1gafe359d8342f37fcb5cfb7afc3925e70e>` ;

// Remove hash entry specified by entry CAL_CMUtlHashRemove2(&s_hashTable, "MyKey", strlen("MyKey") + 1);

// Search a hash entry RTS_RESULT result; CMUtlHashEntrypEntry = CAL_CMUtlHashSearch(&s_hashTable, "MyKey", strlen("MyKey") + 1, &result); voidpBlock = pEntry->pData;

**Copyright:**

Copyright (c) 2017-2020 CODESYS Development GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved.

Modules
-------

- :ref:`Hash entry <group___c_m_utils_hash_itf___hashentry>`

- :ref:`Hash entry flags <group___c_m_utils_hash_itf___hashentryflags>`

- :ref:`Hash flag handling macros <group___c_m_utils_hash_itf___hashflaghandlingmacros>`

- :ref:`Hash key <group___c_m_utils_hash_itf___hashkey>`

- :ref:`Hash table <group___c_m_utils_hash_itf___hashtable>`

- :ref:`Hash table flags <group___c_m_utils_hash_itf___hashtableflags>`

Data Structures
---------------

- struct :ref:`ICMUtilsHash_C <struct_i_c_m_utils_hash___c>`

Macros
------

- #define :ref:`USE_CMUtlHashCreate <group___c_m_utils_hash_itf_1ga23f6ba64edb5ca7e05a212c452479781>` :ref:`PFCMUTLHASHCREATE <group___c_m_utils_hash_itf_1gad02f6b641136e0f7c90aeff928188595>` pfCMUtlHashCreate;

- #define :ref:`EXT_CMUtlHashCreate <group___c_m_utils_hash_itf_1ga7f502c5c73fd96d6eb2677d45faf7f0c>` extern :ref:`PFCMUTLHASHCREATE <group___c_m_utils_hash_itf_1gad02f6b641136e0f7c90aeff928188595>` pfCMUtlHashCreate;

- #define :ref:`GET_CMUtlHashCreate <group___c_m_utils_hash_itf_1gafcd9e3ee44c2fadf857ab1b47a09c07c>` s_pfCMGetAPI2( "CMUtlHashCreate", (RTS_VOID_FCTPTR *)&pfCMUtlHashCreate, (fl), 0, 0)

- #define :ref:`CAL_CMUtlHashCreate <group___c_m_utils_hash_itf_1ga42acea4934322b173228a1086f2ef2b1>` pfCMUtlHashCreate

- #define :ref:`CHK_CMUtlHashCreate <group___c_m_utils_hash_itf_1gaae35bb27006b6139956851becee11d6c>` (pfCMUtlHashCreate != NULL)

- #define :ref:`EXP_CMUtlHashCreate <group___c_m_utils_hash_itf_1ga79f05a5fd100928f6e2e8de5c2d82974>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"CMUtlHashCreate", (RTS_UINTPTR) :ref:`CMUtlHashCreate <group___c_m_utils_hash_itf_1ga375c42a276465738d3211280cfe43708>` , 0, 0)

- #define :ref:`USE_CMUtlHashCreate2 <group___c_m_utils_hash_itf_1ga86e258d9f81c805510a9aaff9598e380>` :ref:`PFCMUTLHASHCREATE2 <group___c_m_utils_hash_itf_1ga055d9ecc6a9820a304dbbaff01a368e1>` pfCMUtlHashCreate2;

- #define :ref:`EXT_CMUtlHashCreate2 <group___c_m_utils_hash_itf_1ga4722c8b0d25b09a8b0da25e198914ee4>` extern :ref:`PFCMUTLHASHCREATE2 <group___c_m_utils_hash_itf_1ga055d9ecc6a9820a304dbbaff01a368e1>` pfCMUtlHashCreate2;

- #define :ref:`GET_CMUtlHashCreate2 <group___c_m_utils_hash_itf_1gaf3871603face62eeaa3d390c8f739b0b>` s_pfCMGetAPI2( "CMUtlHashCreate2", (RTS_VOID_FCTPTR *)&pfCMUtlHashCreate2, (fl), 0, 0)

- #define :ref:`CAL_CMUtlHashCreate2 <group___c_m_utils_hash_itf_1ga02201f0824fa8bd349ac860cdef9667a>` pfCMUtlHashCreate2

- #define :ref:`CHK_CMUtlHashCreate2 <group___c_m_utils_hash_itf_1ga8a900876605e4977b3cfccf94cda14b3>` (pfCMUtlHashCreate2 != NULL)

- #define :ref:`EXP_CMUtlHashCreate2 <group___c_m_utils_hash_itf_1ga9571542a04dd866baaba30c9e29a088a>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"CMUtlHashCreate2", (RTS_UINTPTR) :ref:`CMUtlHashCreate2 <group___c_m_utils_hash_itf_1ga9af9fc49890a611ee125df7078d9ea3d>` , 0, 0)

- #define :ref:`USE_CMUtlHashCreate3 <group___c_m_utils_hash_itf_1ga7398184375f040f808e48cad0f5a279b>` :ref:`PFCMUTLHASHCREATE3 <group___c_m_utils_hash_itf_1gaf26fe76b588874303d26cdb23ce9c33f>` pfCMUtlHashCreate3;

- #define :ref:`EXT_CMUtlHashCreate3 <group___c_m_utils_hash_itf_1ga1fb0f31cd4eeb95ce63f0dbedda637b5>` extern :ref:`PFCMUTLHASHCREATE3 <group___c_m_utils_hash_itf_1gaf26fe76b588874303d26cdb23ce9c33f>` pfCMUtlHashCreate3;

- #define :ref:`GET_CMUtlHashCreate3 <group___c_m_utils_hash_itf_1ga6b6754e47b643068be363e3d7aeb19cc>` s_pfCMGetAPI2( "CMUtlHashCreate3", (RTS_VOID_FCTPTR *)&pfCMUtlHashCreate3, (fl), 0, 0)

- #define :ref:`CAL_CMUtlHashCreate3 <group___c_m_utils_hash_itf_1gad3660b2cf14dbe18f1a0038b8455ab0f>` pfCMUtlHashCreate3

- #define :ref:`CHK_CMUtlHashCreate3 <group___c_m_utils_hash_itf_1gaf884e8ffaef77556c0bf9cf59b793422>` (pfCMUtlHashCreate3 != NULL)

- #define :ref:`EXP_CMUtlHashCreate3 <group___c_m_utils_hash_itf_1ga3e2b1bd99d138f466324d67a0cb157a2>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"CMUtlHashCreate3", (RTS_UINTPTR) :ref:`CMUtlHashCreate3 <group___c_m_utils_hash_itf_1gaa5ee46609cf8fa4c66be70f0746a5440>` , 0, 0)

- #define :ref:`USE_CMUtlHashDelete <group___c_m_utils_hash_itf_1gaced5e209b9c62971f8ad22685ee2a934>` :ref:`PFCMUTLHASHDELETE <group___c_m_utils_hash_itf_1gaecfadee18b566043e05c0d44e1c9c287>` pfCMUtlHashDelete;

- #define :ref:`EXT_CMUtlHashDelete <group___c_m_utils_hash_itf_1gac89e528db13ed92fafe23b2e0e8e8b75>` extern :ref:`PFCMUTLHASHDELETE <group___c_m_utils_hash_itf_1gaecfadee18b566043e05c0d44e1c9c287>` pfCMUtlHashDelete;

- #define :ref:`GET_CMUtlHashDelete <group___c_m_utils_hash_itf_1ga4b70f189fe4835291d04842cbd178809>` s_pfCMGetAPI2( "CMUtlHashDelete", (RTS_VOID_FCTPTR *)&pfCMUtlHashDelete, (fl), 0, 0)

- #define :ref:`CAL_CMUtlHashDelete <group___c_m_utils_hash_itf_1ga75fc51518f728eaf75de3ee464135686>` pfCMUtlHashDelete

- #define :ref:`CHK_CMUtlHashDelete <group___c_m_utils_hash_itf_1gab96451980cbb79bde1c593c4ae2e5bf7>` (pfCMUtlHashDelete != NULL)

- #define :ref:`EXP_CMUtlHashDelete <group___c_m_utils_hash_itf_1ga180b67eb4079191ca7389f373a64536f>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"CMUtlHashDelete", (RTS_UINTPTR) :ref:`CMUtlHashDelete <group___c_m_utils_hash_itf_1ga8ec3ddce056ee5f5291a2f3df5be91c6>` , 0, 0)

- #define :ref:`USE_CMUtlHashInsert <group___c_m_utils_hash_itf_1ga5e7c7e49135b932b284892c4b37611eb>` :ref:`PFCMUTLHASHINSERT <group___c_m_utils_hash_itf_1ga47fff3eabb33956eecc070d5f55f6865>` pfCMUtlHashInsert;

- #define :ref:`EXT_CMUtlHashInsert <group___c_m_utils_hash_itf_1ga1b4ca62627a9ca8fcf92df6422051677>` extern :ref:`PFCMUTLHASHINSERT <group___c_m_utils_hash_itf_1ga47fff3eabb33956eecc070d5f55f6865>` pfCMUtlHashInsert;

- #define :ref:`GET_CMUtlHashInsert <group___c_m_utils_hash_itf_1gade98d8e8b1bbe240e492f5a93f1edc34>` s_pfCMGetAPI2( "CMUtlHashInsert", (RTS_VOID_FCTPTR *)&pfCMUtlHashInsert, (fl), 0, 0)

- #define :ref:`CAL_CMUtlHashInsert <group___c_m_utils_hash_itf_1ga9fc97e1fedb76b0eb74e9944d1bf26d5>` pfCMUtlHashInsert

- #define :ref:`CHK_CMUtlHashInsert <group___c_m_utils_hash_itf_1gaf0d3e340f958944c35594a04de1698b8>` (pfCMUtlHashInsert != NULL)

- #define :ref:`EXP_CMUtlHashInsert <group___c_m_utils_hash_itf_1gacc9a753e44d53b46f7ca11a95c98330e>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"CMUtlHashInsert", (RTS_UINTPTR) :ref:`CMUtlHashInsert <group___c_m_utils_hash_itf_1ga0d34d9a12bb3b22a3e7f84f4cb6461bc>` , 0, 0)

- #define :ref:`USE_CMUtlHashInsert2 <group___c_m_utils_hash_itf_1ga97fcd845f84b4f80a9df2445aef1fa68>` :ref:`PFCMUTLHASHINSERT2 <group___c_m_utils_hash_itf_1ga6eb504414511a26989dd930f464ff8a8>` pfCMUtlHashInsert2;

- #define :ref:`EXT_CMUtlHashInsert2 <group___c_m_utils_hash_itf_1gae4a3137ac81ad535dc75bab1408de61e>` extern :ref:`PFCMUTLHASHINSERT2 <group___c_m_utils_hash_itf_1ga6eb504414511a26989dd930f464ff8a8>` pfCMUtlHashInsert2;

- #define :ref:`GET_CMUtlHashInsert2 <group___c_m_utils_hash_itf_1gaa495944d3bc9300e293e4459c8a391fc>` s_pfCMGetAPI2( "CMUtlHashInsert2", (RTS_VOID_FCTPTR *)&pfCMUtlHashInsert2, (fl), 0, 0)

- #define :ref:`CAL_CMUtlHashInsert2 <group___c_m_utils_hash_itf_1ga274a35f0781eaf84be0da61c66109eaa>` pfCMUtlHashInsert2

- #define :ref:`CHK_CMUtlHashInsert2 <group___c_m_utils_hash_itf_1ga95eb465f4240ed4740b10e79e069e6b1>` (pfCMUtlHashInsert2 != NULL)

- #define :ref:`EXP_CMUtlHashInsert2 <group___c_m_utils_hash_itf_1ga37efc6c7f6b9b1fbda923713d4bf6fdc>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"CMUtlHashInsert2", (RTS_UINTPTR) :ref:`CMUtlHashInsert2 <group___c_m_utils_hash_itf_1ga179a1e14b91e32416317b7424fec5824>` , 0, 0)

- #define :ref:`USE_CMUtlHashRemove <group___c_m_utils_hash_itf_1gaa20672dc7d0228a9dd99a80301196612>` :ref:`PFCMUTLHASHREMOVE <group___c_m_utils_hash_itf_1gaa4e57fa4dedb21eeae6d90a06fe8f430>` pfCMUtlHashRemove;

- #define :ref:`EXT_CMUtlHashRemove <group___c_m_utils_hash_itf_1ga2774231ad7ff7c39bf00cf30abf0cb61>` extern :ref:`PFCMUTLHASHREMOVE <group___c_m_utils_hash_itf_1gaa4e57fa4dedb21eeae6d90a06fe8f430>` pfCMUtlHashRemove;

- #define :ref:`GET_CMUtlHashRemove <group___c_m_utils_hash_itf_1ga883fc36814c6cfb5c29e0d1d7a133b0e>` s_pfCMGetAPI2( "CMUtlHashRemove", (RTS_VOID_FCTPTR *)&pfCMUtlHashRemove, (fl), 0, 0)

- #define :ref:`CAL_CMUtlHashRemove <group___c_m_utils_hash_itf_1gafe359d8342f37fcb5cfb7afc3925e70e>` pfCMUtlHashRemove

- #define :ref:`CHK_CMUtlHashRemove <group___c_m_utils_hash_itf_1ga1c43c1d32d1e1e0f622018ce26e8ea56>` (pfCMUtlHashRemove != NULL)

- #define :ref:`EXP_CMUtlHashRemove <group___c_m_utils_hash_itf_1ga62aacd73b4591051791e1dc6347059d1>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"CMUtlHashRemove", (RTS_UINTPTR) :ref:`CMUtlHashRemove <group___c_m_utils_hash_itf_1ga4a666238a761ef007c69bf6ecf5c0bfa>` , 0, 0)

- #define :ref:`USE_CMUtlHashRemove2 <group___c_m_utils_hash_itf_1ga0a2d79f3eb0fc12bec1d4c25524a7139>` :ref:`PFCMUTLHASHREMOVE2 <group___c_m_utils_hash_itf_1ga48f3de313d940c8f7b8e82d0ead54e7b>` pfCMUtlHashRemove2;

- #define :ref:`EXT_CMUtlHashRemove2 <group___c_m_utils_hash_itf_1ga8acb4ebb3bd1a8eba8cb72ddf0c1903e>` extern :ref:`PFCMUTLHASHREMOVE2 <group___c_m_utils_hash_itf_1ga48f3de313d940c8f7b8e82d0ead54e7b>` pfCMUtlHashRemove2;

- #define :ref:`GET_CMUtlHashRemove2 <group___c_m_utils_hash_itf_1gaf24f59e1e30867d6149d3d2b284bdb99>` s_pfCMGetAPI2( "CMUtlHashRemove2", (RTS_VOID_FCTPTR *)&pfCMUtlHashRemove2, (fl), 0, 0)

- #define :ref:`CAL_CMUtlHashRemove2 <group___c_m_utils_hash_itf_1ga6eda020a798f785bc6a26b46522d6ace>` pfCMUtlHashRemove2

- #define :ref:`CHK_CMUtlHashRemove2 <group___c_m_utils_hash_itf_1ga82b298e7b2f5e7e1b8d1c9b37f562c93>` (pfCMUtlHashRemove2 != NULL)

- #define :ref:`EXP_CMUtlHashRemove2 <group___c_m_utils_hash_itf_1ga9e398321d3c09ed431de487977424c8d>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"CMUtlHashRemove2", (RTS_UINTPTR) :ref:`CMUtlHashRemove2 <group___c_m_utils_hash_itf_1ga21dfba83a41eca5dd92864a1495bfad6>` , 0, 0)

- #define :ref:`USE_CMUtlHashSearch <group___c_m_utils_hash_itf_1gae9e795177cca51861c75b15e2afa6e77>` :ref:`PFCMUTLHASHSEARCH <group___c_m_utils_hash_itf_1gabfa30d00491bd188469224aca721e6bc>` pfCMUtlHashSearch;

- #define :ref:`EXT_CMUtlHashSearch <group___c_m_utils_hash_itf_1gaf1e2aeb504458acd17a122215165511c>` extern :ref:`PFCMUTLHASHSEARCH <group___c_m_utils_hash_itf_1gabfa30d00491bd188469224aca721e6bc>` pfCMUtlHashSearch;

- #define :ref:`GET_CMUtlHashSearch <group___c_m_utils_hash_itf_1gac21d3751ac36c065582337b411108284>` s_pfCMGetAPI2( "CMUtlHashSearch", (RTS_VOID_FCTPTR *)&pfCMUtlHashSearch, (fl), 0, 0)

- #define :ref:`CAL_CMUtlHashSearch <group___c_m_utils_hash_itf_1ga7bc107143948b6a650f9485d1c753ee1>` pfCMUtlHashSearch

- #define :ref:`CHK_CMUtlHashSearch <group___c_m_utils_hash_itf_1ga39d81102be9a5099f5d73f0bd08b851d>` (pfCMUtlHashSearch != NULL)

- #define :ref:`EXP_CMUtlHashSearch <group___c_m_utils_hash_itf_1ga99c5d6f920119e30492d8925be4a72cf>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"CMUtlHashSearch", (RTS_UINTPTR) :ref:`CMUtlHashSearch <group___c_m_utils_hash_itf_1ga80c5e7e19886459ca77c785c40835363>` , 0, 0)

- #define :ref:`USE_CMUtlHashIterate <group___c_m_utils_hash_itf_1gaa4f89f8b241feea4432984ec6cf6ecba>` :ref:`PFCMUTLHASHITERATE <group___c_m_utils_hash_itf_1gaa1dc4f4afc94b49b0e81ba9bd6e53284>` pfCMUtlHashIterate;

- #define :ref:`EXT_CMUtlHashIterate <group___c_m_utils_hash_itf_1ga920e5f70d63c2d6ce6af859c031ade55>` extern :ref:`PFCMUTLHASHITERATE <group___c_m_utils_hash_itf_1gaa1dc4f4afc94b49b0e81ba9bd6e53284>` pfCMUtlHashIterate;

- #define :ref:`GET_CMUtlHashIterate <group___c_m_utils_hash_itf_1ga415b41f9fe5364f47920a742800a0238>` s_pfCMGetAPI2( "CMUtlHashIterate", (RTS_VOID_FCTPTR *)&pfCMUtlHashIterate, (fl), 0, 0)

- #define :ref:`CAL_CMUtlHashIterate <group___c_m_utils_hash_itf_1ga7348519de51188c4c7ae9595054e16c7>` pfCMUtlHashIterate

- #define :ref:`CHK_CMUtlHashIterate <group___c_m_utils_hash_itf_1ga562c4f06db834b67c98ae32bf774c3a9>` (pfCMUtlHashIterate != NULL)

- #define :ref:`EXP_CMUtlHashIterate <group___c_m_utils_hash_itf_1gac138b194570e1a33a1627e360767335f>` s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"CMUtlHashIterate", (RTS_UINTPTR) :ref:`CMUtlHashIterate <group___c_m_utils_hash_itf_1ga533027c75cb84469c9f3f30f75eb27c9>` , 0, 0)

- #define :ref:`ITF_CMUtilsHash <group___c_m_utils_hash_itf_1gaf736cd5ad089830646080ab0350c6c26>`

- #define :ref:`EXTITF_CMUtilsHash <group___c_m_utils_hash_itf_1ga628cfe043b3f40cd710133dc4175a614>`

Typedefs
--------

- typedef RTS_RESULT(* :ref:`PFCMUTLHASHCREATE <group___c_m_utils_hash_itf_1gad02f6b641136e0f7c90aeff928188595>`)(CMUtlHashTable *pHashTable, RTS_SIZE sNumHashEntries, char *pszComponentName)

- typedef RTS_RESULT(* :ref:`PFCMUTLHASHCREATE2 <group___c_m_utils_hash_itf_1ga055d9ecc6a9820a304dbbaff01a368e1>`)(CMUtlHashTable *pHashTable, RTS_SIZE sNumHashEntries, RTS_UI8 *pHashTableBuffer, char *pszComponentName)

- typedef RTS_RESULT(* :ref:`PFCMUTLHASHCREATE3 <group___c_m_utils_hash_itf_1gaf26fe76b588874303d26cdb23ce9c33f>`)(CMUtlHashTable *pHashTable, RTS_SIZE sNumHashEntries, RTS_UI8 *pHashTableBuffer, RTS_UI32 ui32Flags, char *pszComponentName)

- typedef RTS_RESULT(* :ref:`PFCMUTLHASHDELETE <group___c_m_utils_hash_itf_1gaecfadee18b566043e05c0d44e1c9c287>`)(CMUtlHashTable *pHashTable)

- typedef RTS_RESULT(* :ref:`PFCMUTLHASHINSERT <group___c_m_utils_hash_itf_1ga47fff3eabb33956eecc070d5f55f6865>`)(CMUtlHashTable *pHashTable, RTS_UI8 *pKey, RTS_SIZE keyLen, RTS_BOOL bCopyKey, void *pData)

- typedef RTS_RESULT(* :ref:`PFCMUTLHASHINSERT2 <group___c_m_utils_hash_itf_1ga6eb504414511a26989dd930f464ff8a8>`)(CMUtlHashTable *pHashTable, CMUtlHashEntry *pNewEntry, RTS_UI8 *pKey, RTS_SIZE keyLen, RTS_BOOL bCopyKey, void *pData)

- typedef RTS_RESULT(* :ref:`PFCMUTLHASHREMOVE <group___c_m_utils_hash_itf_1gaa4e57fa4dedb21eeae6d90a06fe8f430>`)(CMUtlHashTable *pHashTable, CMUtlHashEntry *pEntry)

- typedef RTS_RESULT(* :ref:`PFCMUTLHASHREMOVE2 <group___c_m_utils_hash_itf_1ga48f3de313d940c8f7b8e82d0ead54e7b>`)(CMUtlHashTable *pHashTable, RTS_UI8 *pKey, RTS_SIZE keyLen)

- typedef :ref:`CMUtlHashEntry <group___c_m_utils_hash_itf___hashentry_1gadd57a73c7ff3d9e8bfb558347e689613>` *(* :ref:`PFCMUTLHASHSEARCH <group___c_m_utils_hash_itf_1gabfa30d00491bd188469224aca721e6bc>`)(CMUtlHashTable *pHashTable, RTS_UI8 *pKey, RTS_SIZE keyLen, RTS_RESULT *pResult)

- typedef RTS_RESULT(* :ref:`PF_HASHENTRY_CALLBACK <group___c_m_utils_hash_itf_1ga588538d9612929bceb3f4e17846685eb>`)(CMUtlHashEntry *pEntry, RTS_UINTPTR cbUserData)

- typedef RTS_RESULT(* :ref:`PFCMUTLHASHITERATE <group___c_m_utils_hash_itf_1gaa1dc4f4afc94b49b0e81ba9bd6e53284>`)(CMUtlHashTable *pHashTable, PF_HASHENTRY_CALLBACK pfcbHashEntry, RTS_UINTPTR cbUserData)

- typedef :ref:`ICMUtilsHash_C <struct_i_c_m_utils_hash___c>` :ref:`ICMUtilsHash <group___c_m_utils_hash_itf_1ga77c6bf6dd622bf2555cfd3aca1f5ce00>`

Functions
---------

- RTS_RESULT :ref:`CMUtlHashCreate <group___c_m_utils_hash_itf_1ga375c42a276465738d3211280cfe43708>` (:ref:`CMUtlHashTable <group___c_m_utils_hash_itf___hashtable_1ga18c3802cb4ec26bec34e42874fd3b65d>` * pHashTable, RTS_SIZE sNumHashEntries, char * pszComponentName)

- RTS_RESULT :ref:`CMUtlHashCreate2 <group___c_m_utils_hash_itf_1ga9af9fc49890a611ee125df7078d9ea3d>` (:ref:`CMUtlHashTable <group___c_m_utils_hash_itf___hashtable_1ga18c3802cb4ec26bec34e42874fd3b65d>` * pHashTable, RTS_SIZE sNumHashEntries, RTS_UI8 * pHashTableBuffer, char * pszComponentName)

- RTS_RESULT :ref:`CMUtlHashCreate3 <group___c_m_utils_hash_itf_1gaa5ee46609cf8fa4c66be70f0746a5440>` (:ref:`CMUtlHashTable <group___c_m_utils_hash_itf___hashtable_1ga18c3802cb4ec26bec34e42874fd3b65d>` * pHashTable, RTS_SIZE sNumHashEntries, RTS_UI8 * pHashTableBuffer, RTS_UI32 ui32Flags, char * pszComponentName)

- RTS_RESULT :ref:`CMUtlHashDelete <group___c_m_utils_hash_itf_1ga8ec3ddce056ee5f5291a2f3df5be91c6>` (:ref:`CMUtlHashTable <group___c_m_utils_hash_itf___hashtable_1ga18c3802cb4ec26bec34e42874fd3b65d>` * pHashTable)

- RTS_RESULT :ref:`CMUtlHashInsert <group___c_m_utils_hash_itf_1ga0d34d9a12bb3b22a3e7f84f4cb6461bc>` (:ref:`CMUtlHashTable <group___c_m_utils_hash_itf___hashtable_1ga18c3802cb4ec26bec34e42874fd3b65d>` * pHashTable, RTS_UI8 * pKey, RTS_SIZE keyLen, RTS_BOOL bCopyKey, void * pData)

- RTS_RESULT :ref:`CMUtlHashInsert2 <group___c_m_utils_hash_itf_1ga179a1e14b91e32416317b7424fec5824>` (:ref:`CMUtlHashTable <group___c_m_utils_hash_itf___hashtable_1ga18c3802cb4ec26bec34e42874fd3b65d>` * pHashTable, :ref:`CMUtlHashEntry <group___c_m_utils_hash_itf___hashentry_1gadd57a73c7ff3d9e8bfb558347e689613>` * pNewEntry, RTS_UI8 * pKey, RTS_SIZE keyLen, RTS_BOOL bCopyKey, void * pData)

- RTS_RESULT :ref:`CMUtlHashRemove <group___c_m_utils_hash_itf_1ga4a666238a761ef007c69bf6ecf5c0bfa>` (:ref:`CMUtlHashTable <group___c_m_utils_hash_itf___hashtable_1ga18c3802cb4ec26bec34e42874fd3b65d>` * pHashTable, :ref:`CMUtlHashEntry <group___c_m_utils_hash_itf___hashentry_1gadd57a73c7ff3d9e8bfb558347e689613>` * pEntry)

- RTS_RESULT :ref:`CMUtlHashRemove2 <group___c_m_utils_hash_itf_1ga21dfba83a41eca5dd92864a1495bfad6>` (:ref:`CMUtlHashTable <group___c_m_utils_hash_itf___hashtable_1ga18c3802cb4ec26bec34e42874fd3b65d>` * pHashTable, RTS_UI8 * pKey, RTS_SIZE keyLen)

- :ref:`CMUtlHashEntry <group___c_m_utils_hash_itf___hashentry_1gadd57a73c7ff3d9e8bfb558347e689613>` * :ref:`CMUtlHashSearch <group___c_m_utils_hash_itf_1ga80c5e7e19886459ca77c785c40835363>` (:ref:`CMUtlHashTable <group___c_m_utils_hash_itf___hashtable_1ga18c3802cb4ec26bec34e42874fd3b65d>` * pHashTable, RTS_UI8 * pKey, RTS_SIZE keyLen, RTS_RESULT * pResult)

- RTS_RESULT :ref:`CMUtlHashIterate <group___c_m_utils_hash_itf_1ga533027c75cb84469c9f3f30f75eb27c9>` (:ref:`CMUtlHashTable <group___c_m_utils_hash_itf___hashtable_1ga18c3802cb4ec26bec34e42874fd3b65d>` * pHashTable, :ref:`PF_HASHENTRY_CALLBACK <group___c_m_utils_hash_itf_1ga588538d9612929bceb3f4e17846685eb>`  pfcbHashEntry, RTS_UINTPTR cbUserData)

Macro Definition Documentation
------------------------------
.. _group___c_m_utils_hash_itf_1ga23f6ba64edb5ca7e05a212c452479781:

#define USE_CMUtlHashCreate :ref:`PFCMUTLHASHCREATE <group___c_m_utils_hash_itf_1gad02f6b641136e0f7c90aeff928188595>` pfCMUtlHashCreate;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga7f502c5c73fd96d6eb2677d45faf7f0c:

#define EXT_CMUtlHashCreate extern :ref:`PFCMUTLHASHCREATE <group___c_m_utils_hash_itf_1gad02f6b641136e0f7c90aeff928188595>` pfCMUtlHashCreate;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gafcd9e3ee44c2fadf857ab1b47a09c07c:

#define GET_CMUtlHashCreate s_pfCMGetAPI2( "CMUtlHashCreate", (RTS_VOID_FCTPTR *)&pfCMUtlHashCreate, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga42acea4934322b173228a1086f2ef2b1:

#define CAL_CMUtlHashCreate pfCMUtlHashCreate
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gaae35bb27006b6139956851becee11d6c:

#define CHK_CMUtlHashCreate (pfCMUtlHashCreate != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga79f05a5fd100928f6e2e8de5c2d82974:

#define EXP_CMUtlHashCreate s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"CMUtlHashCreate", (RTS_UINTPTR) :ref:`CMUtlHashCreate <group___c_m_utils_hash_itf_1ga375c42a276465738d3211280cfe43708>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga86e258d9f81c805510a9aaff9598e380:

#define USE_CMUtlHashCreate2 :ref:`PFCMUTLHASHCREATE2 <group___c_m_utils_hash_itf_1ga055d9ecc6a9820a304dbbaff01a368e1>` pfCMUtlHashCreate2;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga4722c8b0d25b09a8b0da25e198914ee4:

#define EXT_CMUtlHashCreate2 extern :ref:`PFCMUTLHASHCREATE2 <group___c_m_utils_hash_itf_1ga055d9ecc6a9820a304dbbaff01a368e1>` pfCMUtlHashCreate2;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gaf3871603face62eeaa3d390c8f739b0b:

#define GET_CMUtlHashCreate2 s_pfCMGetAPI2( "CMUtlHashCreate2", (RTS_VOID_FCTPTR *)&pfCMUtlHashCreate2, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga02201f0824fa8bd349ac860cdef9667a:

#define CAL_CMUtlHashCreate2 pfCMUtlHashCreate2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga8a900876605e4977b3cfccf94cda14b3:

#define CHK_CMUtlHashCreate2 (pfCMUtlHashCreate2 != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga9571542a04dd866baaba30c9e29a088a:

#define EXP_CMUtlHashCreate2 s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"CMUtlHashCreate2", (RTS_UINTPTR) :ref:`CMUtlHashCreate2 <group___c_m_utils_hash_itf_1ga9af9fc49890a611ee125df7078d9ea3d>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga7398184375f040f808e48cad0f5a279b:

#define USE_CMUtlHashCreate3 :ref:`PFCMUTLHASHCREATE3 <group___c_m_utils_hash_itf_1gaf26fe76b588874303d26cdb23ce9c33f>` pfCMUtlHashCreate3;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga1fb0f31cd4eeb95ce63f0dbedda637b5:

#define EXT_CMUtlHashCreate3 extern :ref:`PFCMUTLHASHCREATE3 <group___c_m_utils_hash_itf_1gaf26fe76b588874303d26cdb23ce9c33f>` pfCMUtlHashCreate3;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga6b6754e47b643068be363e3d7aeb19cc:

#define GET_CMUtlHashCreate3 s_pfCMGetAPI2( "CMUtlHashCreate3", (RTS_VOID_FCTPTR *)&pfCMUtlHashCreate3, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gad3660b2cf14dbe18f1a0038b8455ab0f:

#define CAL_CMUtlHashCreate3 pfCMUtlHashCreate3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gaf884e8ffaef77556c0bf9cf59b793422:

#define CHK_CMUtlHashCreate3 (pfCMUtlHashCreate3 != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga3e2b1bd99d138f466324d67a0cb157a2:

#define EXP_CMUtlHashCreate3 s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"CMUtlHashCreate3", (RTS_UINTPTR) :ref:`CMUtlHashCreate3 <group___c_m_utils_hash_itf_1gaa5ee46609cf8fa4c66be70f0746a5440>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gaced5e209b9c62971f8ad22685ee2a934:

#define USE_CMUtlHashDelete :ref:`PFCMUTLHASHDELETE <group___c_m_utils_hash_itf_1gaecfadee18b566043e05c0d44e1c9c287>` pfCMUtlHashDelete;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gac89e528db13ed92fafe23b2e0e8e8b75:

#define EXT_CMUtlHashDelete extern :ref:`PFCMUTLHASHDELETE <group___c_m_utils_hash_itf_1gaecfadee18b566043e05c0d44e1c9c287>` pfCMUtlHashDelete;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga4b70f189fe4835291d04842cbd178809:

#define GET_CMUtlHashDelete s_pfCMGetAPI2( "CMUtlHashDelete", (RTS_VOID_FCTPTR *)&pfCMUtlHashDelete, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga75fc51518f728eaf75de3ee464135686:

#define CAL_CMUtlHashDelete pfCMUtlHashDelete
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gab96451980cbb79bde1c593c4ae2e5bf7:

#define CHK_CMUtlHashDelete (pfCMUtlHashDelete != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga180b67eb4079191ca7389f373a64536f:

#define EXP_CMUtlHashDelete s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"CMUtlHashDelete", (RTS_UINTPTR) :ref:`CMUtlHashDelete <group___c_m_utils_hash_itf_1ga8ec3ddce056ee5f5291a2f3df5be91c6>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga5e7c7e49135b932b284892c4b37611eb:

#define USE_CMUtlHashInsert :ref:`PFCMUTLHASHINSERT <group___c_m_utils_hash_itf_1ga47fff3eabb33956eecc070d5f55f6865>` pfCMUtlHashInsert;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga1b4ca62627a9ca8fcf92df6422051677:

#define EXT_CMUtlHashInsert extern :ref:`PFCMUTLHASHINSERT <group___c_m_utils_hash_itf_1ga47fff3eabb33956eecc070d5f55f6865>` pfCMUtlHashInsert;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gade98d8e8b1bbe240e492f5a93f1edc34:

#define GET_CMUtlHashInsert s_pfCMGetAPI2( "CMUtlHashInsert", (RTS_VOID_FCTPTR *)&pfCMUtlHashInsert, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga9fc97e1fedb76b0eb74e9944d1bf26d5:

#define CAL_CMUtlHashInsert pfCMUtlHashInsert
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gaf0d3e340f958944c35594a04de1698b8:

#define CHK_CMUtlHashInsert (pfCMUtlHashInsert != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gacc9a753e44d53b46f7ca11a95c98330e:

#define EXP_CMUtlHashInsert s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"CMUtlHashInsert", (RTS_UINTPTR) :ref:`CMUtlHashInsert <group___c_m_utils_hash_itf_1ga0d34d9a12bb3b22a3e7f84f4cb6461bc>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga97fcd845f84b4f80a9df2445aef1fa68:

#define USE_CMUtlHashInsert2 :ref:`PFCMUTLHASHINSERT2 <group___c_m_utils_hash_itf_1ga6eb504414511a26989dd930f464ff8a8>` pfCMUtlHashInsert2;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gae4a3137ac81ad535dc75bab1408de61e:

#define EXT_CMUtlHashInsert2 extern :ref:`PFCMUTLHASHINSERT2 <group___c_m_utils_hash_itf_1ga6eb504414511a26989dd930f464ff8a8>` pfCMUtlHashInsert2;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gaa495944d3bc9300e293e4459c8a391fc:

#define GET_CMUtlHashInsert2 s_pfCMGetAPI2( "CMUtlHashInsert2", (RTS_VOID_FCTPTR *)&pfCMUtlHashInsert2, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga274a35f0781eaf84be0da61c66109eaa:

#define CAL_CMUtlHashInsert2 pfCMUtlHashInsert2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga95eb465f4240ed4740b10e79e069e6b1:

#define CHK_CMUtlHashInsert2 (pfCMUtlHashInsert2 != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga37efc6c7f6b9b1fbda923713d4bf6fdc:

#define EXP_CMUtlHashInsert2 s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"CMUtlHashInsert2", (RTS_UINTPTR) :ref:`CMUtlHashInsert2 <group___c_m_utils_hash_itf_1ga179a1e14b91e32416317b7424fec5824>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gaa20672dc7d0228a9dd99a80301196612:

#define USE_CMUtlHashRemove :ref:`PFCMUTLHASHREMOVE <group___c_m_utils_hash_itf_1gaa4e57fa4dedb21eeae6d90a06fe8f430>` pfCMUtlHashRemove;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga2774231ad7ff7c39bf00cf30abf0cb61:

#define EXT_CMUtlHashRemove extern :ref:`PFCMUTLHASHREMOVE <group___c_m_utils_hash_itf_1gaa4e57fa4dedb21eeae6d90a06fe8f430>` pfCMUtlHashRemove;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga883fc36814c6cfb5c29e0d1d7a133b0e:

#define GET_CMUtlHashRemove s_pfCMGetAPI2( "CMUtlHashRemove", (RTS_VOID_FCTPTR *)&pfCMUtlHashRemove, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gafe359d8342f37fcb5cfb7afc3925e70e:

#define CAL_CMUtlHashRemove pfCMUtlHashRemove
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga1c43c1d32d1e1e0f622018ce26e8ea56:

#define CHK_CMUtlHashRemove (pfCMUtlHashRemove != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga62aacd73b4591051791e1dc6347059d1:

#define EXP_CMUtlHashRemove s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"CMUtlHashRemove", (RTS_UINTPTR) :ref:`CMUtlHashRemove <group___c_m_utils_hash_itf_1ga4a666238a761ef007c69bf6ecf5c0bfa>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga0a2d79f3eb0fc12bec1d4c25524a7139:

#define USE_CMUtlHashRemove2 :ref:`PFCMUTLHASHREMOVE2 <group___c_m_utils_hash_itf_1ga48f3de313d940c8f7b8e82d0ead54e7b>` pfCMUtlHashRemove2;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga8acb4ebb3bd1a8eba8cb72ddf0c1903e:

#define EXT_CMUtlHashRemove2 extern :ref:`PFCMUTLHASHREMOVE2 <group___c_m_utils_hash_itf_1ga48f3de313d940c8f7b8e82d0ead54e7b>` pfCMUtlHashRemove2;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gaf24f59e1e30867d6149d3d2b284bdb99:

#define GET_CMUtlHashRemove2 s_pfCMGetAPI2( "CMUtlHashRemove2", (RTS_VOID_FCTPTR *)&pfCMUtlHashRemove2, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga6eda020a798f785bc6a26b46522d6ace:

#define CAL_CMUtlHashRemove2 pfCMUtlHashRemove2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga82b298e7b2f5e7e1b8d1c9b37f562c93:

#define CHK_CMUtlHashRemove2 (pfCMUtlHashRemove2 != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga9e398321d3c09ed431de487977424c8d:

#define EXP_CMUtlHashRemove2 s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"CMUtlHashRemove2", (RTS_UINTPTR) :ref:`CMUtlHashRemove2 <group___c_m_utils_hash_itf_1ga21dfba83a41eca5dd92864a1495bfad6>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gae9e795177cca51861c75b15e2afa6e77:

#define USE_CMUtlHashSearch :ref:`PFCMUTLHASHSEARCH <group___c_m_utils_hash_itf_1gabfa30d00491bd188469224aca721e6bc>` pfCMUtlHashSearch;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gaf1e2aeb504458acd17a122215165511c:

#define EXT_CMUtlHashSearch extern :ref:`PFCMUTLHASHSEARCH <group___c_m_utils_hash_itf_1gabfa30d00491bd188469224aca721e6bc>` pfCMUtlHashSearch;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gac21d3751ac36c065582337b411108284:

#define GET_CMUtlHashSearch s_pfCMGetAPI2( "CMUtlHashSearch", (RTS_VOID_FCTPTR *)&pfCMUtlHashSearch, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga7bc107143948b6a650f9485d1c753ee1:

#define CAL_CMUtlHashSearch pfCMUtlHashSearch
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga39d81102be9a5099f5d73f0bd08b851d:

#define CHK_CMUtlHashSearch (pfCMUtlHashSearch != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga99c5d6f920119e30492d8925be4a72cf:

#define EXP_CMUtlHashSearch s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"CMUtlHashSearch", (RTS_UINTPTR) :ref:`CMUtlHashSearch <group___c_m_utils_hash_itf_1ga80c5e7e19886459ca77c785c40835363>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gaa4f89f8b241feea4432984ec6cf6ecba:

#define USE_CMUtlHashIterate :ref:`PFCMUTLHASHITERATE <group___c_m_utils_hash_itf_1gaa1dc4f4afc94b49b0e81ba9bd6e53284>` pfCMUtlHashIterate;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga920e5f70d63c2d6ce6af859c031ade55:

#define EXT_CMUtlHashIterate extern :ref:`PFCMUTLHASHITERATE <group___c_m_utils_hash_itf_1gaa1dc4f4afc94b49b0e81ba9bd6e53284>` pfCMUtlHashIterate;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga415b41f9fe5364f47920a742800a0238:

#define GET_CMUtlHashIterate s_pfCMGetAPI2( "CMUtlHashIterate", (RTS_VOID_FCTPTR *)&pfCMUtlHashIterate, (fl), 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga7348519de51188c4c7ae9595054e16c7:

#define CAL_CMUtlHashIterate pfCMUtlHashIterate
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga562c4f06db834b67c98ae32bf774c3a9:

#define CHK_CMUtlHashIterate (pfCMUtlHashIterate != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gac138b194570e1a33a1627e360767335f:

#define EXP_CMUtlHashIterate s_pfCMRegisterAPI( (const CMP_EXT_FUNCTION_REF*)"CMUtlHashIterate", (RTS_UINTPTR) :ref:`CMUtlHashIterate <group___c_m_utils_hash_itf_1ga533027c75cb84469c9f3f30f75eb27c9>` , 0, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gaf736cd5ad089830646080ab0350c6c26:

#define ITF_CMUtilsHash
^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga628cfe043b3f40cd710133dc4175a614:

#define EXTITF_CMUtilsHash
^^^^^^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___c_m_utils_hash_itf_1gad02f6b641136e0f7c90aeff928188595:

typedef RTS_RESULT( *  PFCMUTLHASHCREATE) (CMUtlHashTable *pHashTable, RTS_SIZE sNumHashEntries, char *pszComponentName)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga055d9ecc6a9820a304dbbaff01a368e1:

typedef RTS_RESULT( *  PFCMUTLHASHCREATE2) (CMUtlHashTable *pHashTable, RTS_SIZE sNumHashEntries, RTS_UI8 *pHashTableBuffer, char *pszComponentName)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gaf26fe76b588874303d26cdb23ce9c33f:

typedef RTS_RESULT( *  PFCMUTLHASHCREATE3) (CMUtlHashTable *pHashTable, RTS_SIZE sNumHashEntries, RTS_UI8 *pHashTableBuffer, RTS_UI32 ui32Flags, char *pszComponentName)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gaecfadee18b566043e05c0d44e1c9c287:

typedef RTS_RESULT( *  PFCMUTLHASHDELETE) (CMUtlHashTable *pHashTable)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga47fff3eabb33956eecc070d5f55f6865:

typedef RTS_RESULT( *  PFCMUTLHASHINSERT) (CMUtlHashTable *pHashTable, RTS_UI8 *pKey, RTS_SIZE keyLen, RTS_BOOL bCopyKey, void *pData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga6eb504414511a26989dd930f464ff8a8:

typedef RTS_RESULT( *  PFCMUTLHASHINSERT2) (CMUtlHashTable *pHashTable, CMUtlHashEntry *pNewEntry, RTS_UI8 *pKey, RTS_SIZE keyLen, RTS_BOOL bCopyKey, void *pData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gaa4e57fa4dedb21eeae6d90a06fe8f430:

typedef RTS_RESULT( *  PFCMUTLHASHREMOVE) (CMUtlHashTable *pHashTable, CMUtlHashEntry *pEntry)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga48f3de313d940c8f7b8e82d0ead54e7b:

typedef RTS_RESULT( *  PFCMUTLHASHREMOVE2) (CMUtlHashTable *pHashTable, RTS_UI8 *pKey, RTS_SIZE keyLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1gabfa30d00491bd188469224aca721e6bc:

typedef CMUtlHashEntry*( *  PFCMUTLHASHSEARCH) (CMUtlHashTable *pHashTable, RTS_UI8 *pKey, RTS_SIZE keyLen, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga588538d9612929bceb3f4e17846685eb:

typedef RTS_RESULT( * PF_HASHENTRY_CALLBACK) (CMUtlHashEntry *pEntry, RTS_UINTPTR cbUserData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This callback function can be implemented by components iterating over the content of a hash table using CMUtlHashIterate.

**Parameters**

+---------+------------+-------------------------------------------------------------+
| [in]    | pEntry     | The current entry of the iteration                          |
+---------+------------+-------------------------------------------------------------+
| [in]    | cbUserData | The user provided value that was passed to CMUtlHashIterate |
+---------+------------+-------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+------------+-------------------------------------------------------------------------------------------------------+
| ERR_OK     | The iteration should continue if there are more entries.                                              |
+------------+-------------------------------------------------------------------------------------------------------+
| ERR_FAILED | The iteration will be stopped and not proceed with the remaining entries after the callback returned. |
+------------+-------------------------------------------------------------------------------------------------------+

.. _group___c_m_utils_hash_itf_1gaa1dc4f4afc94b49b0e81ba9bd6e53284:

typedef RTS_RESULT( *  PFCMUTLHASHITERATE) (CMUtlHashTable *pHashTable, PF_HASHENTRY_CALLBACK pfcbHashEntry, RTS_UINTPTR cbUserData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_hash_itf_1ga77c6bf6dd622bf2555cfd3aca1f5ce00:

typedef ICMUtilsHash_C ICMUtilsHash
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function Documentation
----------------------

.. _group___c_m_utils_hash_itf_1ga375c42a276465738d3211280cfe43708:

RTS_RESULT CMUtlHashCreate (CMUtlHashTable *pHashTable, RTS_SIZE sNumHashEntries, char *pszComponentName)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to create a hash table.

**Parameters**


| [inout] | pHashTable       | Pointer to a hash table object, which is filled by this function call!                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |

| [in]    | sNumHashEntries  | Length of the hash table respectively the number of elements that can be stored in the hash table without any collision. NOTE: Hash table is allocated on heap via :ref:`SysMemAllocData() <group___sys_mem_itf_1gac86cb3a6875b73f207e0c14292b96e4e>` within this function. If you would like to provide a static memory for the hash table. Use :ref:`CMUtlHashCreate2() <group___c_m_utils_hash_itf_1ga9af9fc49890a611ee125df7078d9ea3d>` instead! The number of available hash entries should be a prime number to get a nice spreading. |
+---------+------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pszComponentName | Pointer to component name of the caller (which is generated typically in the macro COMPONENT_NAME)                                                                                                                                                                                                                                                                                                                                                                                                                                          |


**Return values**

+---------------+---------------------------------------+
| ERR_OK        | Hash table could be created           |
+---------------+---------------------------------------+
| ERR_PARAMETER | Invalid pointer or sHashTableLen is 0 |
+---------------+---------------------------------------+
| ERR_NOMEMORY  | No memory to create the hash table    |
+---------------+---------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_hash_itf_1ga9af9fc49890a611ee125df7078d9ea3d:

RTS_RESULT CMUtlHashCreate2 (CMUtlHashTable *pHashTable, RTS_SIZE sNumHashEntries, RTS_UI8 *pHashTableBuffer, char *pszComponentName)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to create a hash table with a specified hash buffer.

**Parameters**

+---------+------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [inout] | pHashTable       | Pointer to a hash table object, which is filled by this function                                                                                                                                                                                                                                                                                                                   |
+---------+------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | sNumHashEntries  | Length of the hash table respectively the number of elements that can be stored in the hash table without any collision                                                                                                                                                                                                                                                            |
+---------+------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pHashTableBuffer | Pointer to the hash table (can be static memory). Length must be (sNumHashEntriessizeof(RTS_UI8))!. NOTE: If pHashTableBuffer = NULL. the hash table will be allocated on heap via :ref:`SysMemAllocData() <group___sys_mem_itf_1gac86cb3a6875b73f207e0c14292b96e4e>` within this function. The number of available hash entries should be a prime number to get a nice spreading. |
+---------+------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pszComponentName | Pointer to component name of the caller (which is generated typically in the macro COMPONENT_NAME)                                                                                                                                                                                                                                                                                 |
+---------+------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+---------------------------------------+
| ERR_OK        | Hash table could be created           |
+---------------+---------------------------------------+
| ERR_PARAMETER | Invalid pointer or sHashTableLen is 0 |
+---------------+---------------------------------------+
| ERR_NOMEMORY  | No memory to create the hash table    |
+---------------+---------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_hash_itf_1gaa5ee46609cf8fa4c66be70f0746a5440:

RTS_RESULT CMUtlHashCreate3 (CMUtlHashTable *pHashTable, RTS_SIZE sNumHashEntries, RTS_UI8 *pHashTableBuffer, RTS_UI32 ui32Flags, char *pszComponentName)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to create a hash table with a specified hash buffer.

**Parameters**

+---------+------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [inout] | pHashTable       | Pointer to a hash table object, which is filled by this function                                                                                                                                                                                                                                                                                                                   |
+---------+------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | sNumHashEntries  | Length of the hash table respectively the number of elements that can be stored in the hash table without any collision                                                                                                                                                                                                                                                            |
+---------+------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pHashTableBuffer | Pointer to the hash table (can be static memory). Length must be (sNumHashEntriessizeof(RTS_UI8))!. NOTE: If pHashTableBuffer = NULL. the hash table will be allocated on heap via :ref:`SysMemAllocData() <group___sys_mem_itf_1gac86cb3a6875b73f207e0c14292b96e4e>` within this function. The number of available hash entries should be a prime number to get a nice spreading. |
+---------+------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ui32Flags        | Flags how to create the hash table. See: Hash table flags                                                                                                                                                                                                                                                                                                                          |
+---------+------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pszComponentName | Pointer to component name of the caller (which is generated typically in the macro COMPONENT_NAME)                                                                                                                                                                                                                                                                                 |
+---------+------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+---------------------------------------+
| ERR_OK        | Hash table could be created           |
+---------------+---------------------------------------+
| ERR_PARAMETER | Invalid pointer or sHashTableLen is 0 |
+---------------+---------------------------------------+
| ERR_NOMEMORY  | No memory to create the hash table    |
+---------------+---------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_hash_itf_1ga8ec3ddce056ee5f5291a2f3df5be91c6:

RTS_RESULT CMUtlHashDelete (CMUtlHashTable *pHashTable)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to delete a hash table.

**Parameters**

+---------+------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pHashTable | Pointer to a hash table filled by :ref:`CMUtlHashCreate() <group___c_m_utils_hash_itf_1ga375c42a276465738d3211280cfe43708>` or :ref:`CMUtlHashCreate2() <group___c_m_utils_hash_itf_1ga9af9fc49890a611ee125df7078d9ea3d>` |
+---------+------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+---------------------------------+
| ERR_OK        | Hash table could be deleted     |
+---------------+---------------------------------+
| ERR_PARAMETER | Invalid hash table pointer      |
+---------------+---------------------------------+
| ERR_FAILED    | Hash table could not be deleted |
+---------------+---------------------------------+

**Returns:**

error code

.. _group___c_m_utils_hash_itf_1ga0d34d9a12bb3b22a3e7f84f4cb6461bc:

RTS_RESULT CMUtlHashInsert (CMUtlHashTable *pHashTable, RTS_UI8 *pKey, RTS_SIZE keyLen, RTS_BOOL bCopyKey, void *pData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to insert a new hash entry. New hash entry (CMUtlHashEntry) is allocated from heap via :ref:`SysMemAllocData() <group___sys_mem_itf_1gac86cb3a6875b73f207e0c14292b96e4e>` . Note: If the size of the key is equal or lower the register size of the architecture the key is directly used as hash.

**Parameters**

+---------+------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pHashTable | Pointer to a hash table filled by :ref:`CMUtlHashCreate() <group___c_m_utils_hash_itf_1ga375c42a276465738d3211280cfe43708>` or :ref:`CMUtlHashCreate2() <group___c_m_utils_hash_itf_1ga9af9fc49890a611ee125df7078d9ea3d>`                                                                                            |
+---------+------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pKey       | Corresponding unique key. Can be an integer or string key.                                                                                                                                                                                                                                                           |
+---------+------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | keyLen     | Key length in bytes                                                                                                                                                                                                                                                                                                  |
+---------+------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | bCopyKey   | TRUE=Key is copied. If the size of the key is bigger than the register size of the architecture then the key is copied. FALSE=Only a reference to the key is hold and the value is not copied at all! Please take care: For integral values or addresses that should be used as keys typically TRUE has to be passed |
+---------+------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pData      | Pointer to data to store in hash entry                                                                                                                                                                                                                                                                               |
+---------+------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+------------------------------------------------------------+
| ERR_OK        | Hash entry could be inserted                               |
+---------------+------------------------------------------------------------+
| ERR_PARAMETER | Invalid hash table pointer                                 |
+---------------+------------------------------------------------------------+
| ERR_NOMEMORY  | Hash entry failed to insert because of insufficient memory |
+---------------+------------------------------------------------------------+
| ERR_FAILED    | Hash entry failed to insert                                |
+---------------+------------------------------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_hash_itf_1ga179a1e14b91e32416317b7424fec5824:

RTS_RESULT CMUtlHashInsert2 (CMUtlHashTable *pHashTable, CMUtlHashEntry *pNewEntry, RTS_UI8 *pKey, RTS_SIZE keyLen, RTS_BOOL bCopyKey, void *pData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to insert a new hash entry. Note: If the size of the key is equal or lower the register size of the architecture the key is directly used as hash.

**Parameters**

+---------+------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pHashTable | Pointer to a hash table filled by :ref:`CMUtlHashCreate() <group___c_m_utils_hash_itf_1ga375c42a276465738d3211280cfe43708>` or :ref:`CMUtlHashCreate2() <group___c_m_utils_hash_itf_1ga9af9fc49890a611ee125df7078d9ea3d>`                                                                                            |
+---------+------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pNewEntry  | Pointer to a new the hash entry memory object to be added in the hash table. Can be static memory. If the pointer is NULL, a new hash entry (CMUtlHashEntry) is allocated from heap via :ref:`SysMemAllocData() <group___sys_mem_itf_1gac86cb3a6875b73f207e0c14292b96e4e>` .                                         |
+---------+------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pKey       | Corresponding unique key. Can be an integer or string key.                                                                                                                                                                                                                                                           |
+---------+------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | keyLen     | Key length in bytes                                                                                                                                                                                                                                                                                                  |
+---------+------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | bCopyKey   | TRUE=Key is copied. If the size of the key is bigger than the register size of the architecture then the key is copied. FALSE=Only a reference to the key is hold and the value is not copied at all! Please take care: For integral values or addresses that should be used as keys typically TRUE has to be passed |
+---------+------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pData      | Pointer to data to store in hash entry                                                                                                                                                                                                                                                                               |
+---------+------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+------------------------------------------------------------+
| ERR_OK        | Hash entry could be inserted                               |
+---------------+------------------------------------------------------------+
| ERR_PARAMETER | Invalid hash table pointer                                 |
+---------------+------------------------------------------------------------+
| ERR_NOMEMORY  | Hash entry failed to insert because of insufficient memory |
+---------------+------------------------------------------------------------+
| ERR_FAILED    | Hash entry failed to insert                                |
+---------------+------------------------------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_hash_itf_1ga4a666238a761ef007c69bf6ecf5c0bfa:

RTS_RESULT CMUtlHashRemove (CMUtlHashTable *pHashTable, CMUtlHashEntry *pEntry)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to remove a hash entry specified by its entry pointer.

**Parameters**

+---------+------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pHashTable | Pointer to a hash table filled by :ref:`CMUtlHashCreate() <group___c_m_utils_hash_itf_1ga375c42a276465738d3211280cfe43708>` or :ref:`CMUtlHashCreate2() <group___c_m_utils_hash_itf_1ga9af9fc49890a611ee125df7078d9ea3d>` |
+---------+------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pEntry     | Pointer to the hash entry retrieved by CMUtlHashSearch                                                                                                                                                                    |
+---------+------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+------------------------------------------+
| ERR_OK        | Hash entry could be removed              |
+---------------+------------------------------------------+
| ERR_PARAMETER | Invalid hash table pointer or hash entry |
+---------------+------------------------------------------+
| ERR_NO_OBJECT | Unknown hash entry                       |
+---------------+------------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_hash_itf_1ga21dfba83a41eca5dd92864a1495bfad6:

RTS_RESULT CMUtlHashRemove2 (CMUtlHashTable *pHashTable, RTS_UI8 *pKey, RTS_SIZE keyLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to remove a hash entry specified by its key.

**Parameters**

+---------+------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pHashTable | Pointer to a hash table filled by :ref:`CMUtlHashCreate() <group___c_m_utils_hash_itf_1ga375c42a276465738d3211280cfe43708>` or :ref:`CMUtlHashCreate2() <group___c_m_utils_hash_itf_1ga9af9fc49890a611ee125df7078d9ea3d>` |
+---------+------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pKey       | Corresponding unique key. Can be an integer or string key.                                                                                                                                                                |
+---------+------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | keyLen     | Key length in bytes                                                                                                                                                                                                       |
+---------+------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+------------------------------------------+
| ERR_OK        | Hash entry could be removed              |
+---------------+------------------------------------------+
| ERR_PARAMETER | Invalid hash table pointer or hash entry |
+---------------+------------------------------------------+
| ERR_NO_OBJECT | Unknown hash entry                       |
+---------------+------------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_hash_itf_1ga80c5e7e19886459ca77c785c40835363:

CMUtlHashEntry* CMUtlHashSearch (CMUtlHashTable *pHashTable, RTS_UI8 *pKey, RTS_SIZE keyLen, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to search for an entry in the hash table. Note: If the size of the key is equal or lower the register size of the architecture the key is directly used as hash.

**Parameters**

+---------+------------+-----------------------------------------------------------------------------------------------------------------------------+
| [in]    | pHashTable | Pointer to a hash table object, which is filled by this function                                                            |
+---------+------------+-----------------------------------------------------------------------------------------------------------------------------+
| [in]    | pKey       | Pointer to the key value to search for the entry                                                                            |
+---------+------------+-----------------------------------------------------------------------------------------------------------------------------+
| [in]    | keyLen     | Length of the key. If the key is a string, additionally the NUL termination character must be _included_ in the key length! |
+---------+------------+-----------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult    | Pointer to error code                                                                                                       |
+---------+------------+-----------------------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+----------------------------------------------+
| ERR_OK        | Hash entry could be found                    |
+---------------+----------------------------------------------+
| ERR_PARAMETER | Invalid hash table pointer or pointer to key |
+---------------+----------------------------------------------+
| ERR_NO_OBJECT | No hash entry matching to the key found      |
+---------------+----------------------------------------------+

**Returns:**

Pointer to the hash entry or NULL if not found

.. _group___c_m_utils_hash_itf_1ga533027c75cb84469c9f3f30f75eb27c9:

RTS_RESULT CMUtlHashIterate (CMUtlHashTable *pHashTable, PF_HASHENTRY_CALLBACK pfcbHashEntry, RTS_UINTPTR cbUserData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to iterate over all entries in the hash table.

**Parameters**

+---------+---------------+----------------------------------------------------------------------------------+
| [in]    | pHashTable    | Pointer to a hash table object, which will be iterated over by this function     |
+---------+---------------+----------------------------------------------------------------------------------+
| [in]    | pfcbHashEntry | Callback function that will be called for every entry of the hash-table.         |
+---------+---------------+----------------------------------------------------------------------------------+
| [in]    | cbUserData    | User provided value that will transparently be passed to all calls of pfCallback |
+---------+---------------+----------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+-----------------------------------------+
| ERR_OK        | Hash entry could be found               |
+---------------+-----------------------------------------+
| ERR_PARAMETER | Invalid hash table or callback function |
+---------------+-----------------------------------------+

.. last line of group.rst template
.. last line of composition.rst template


