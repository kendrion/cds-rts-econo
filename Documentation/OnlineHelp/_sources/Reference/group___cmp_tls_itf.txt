.. first line of composition.rst template

.. first line of group.rst template

.. _group___cmp_tls_itf:

=========
CmpTlsItf
=========

Interface of CmpTLS. :ref:`More... <group___cmp_tls_itf-details>`

Modules
-------

- :ref:`Context settings <group___cmp_tls_itf___contextsettings>`

- :ref:`Memory settings <group___cmp_tls_itf___memorysettings>`

Data Structures
---------------

- struct :ref:`tagcmptlsaccept_struct <structtagcmptlsaccept__struct>`

- struct :ref:`tagcmptlsbufferdatareceived_struct <structtagcmptlsbufferdatareceived__struct>`

- struct :ref:`tagcmptlsbufferdatasent_struct <structtagcmptlsbufferdatasent__struct>`

- struct :ref:`tagcmptlsbufferdatatosendavailable_struct <structtagcmptlsbufferdatatosendavailable__struct>`

- struct :ref:`tagcmptlsbufferopen_struct <structtagcmptlsbufferopen__struct>`

- struct :ref:`tagcmptlsclose_struct <structtagcmptlsclose__struct>`

- struct :ref:`tagcmptlsconnect_struct <structtagcmptlsconnect__struct>`

- struct :ref:`tagcmptlscreatecontext_struct <structtagcmptlscreatecontext__struct>`

- struct :ref:`tagcmptlsfreecontext_struct <structtagcmptlsfreecontext__struct>`

- struct :ref:`tagcmptlsread_struct <structtagcmptlsread__struct>`

- struct :ref:`tagcmptlsshutdown_struct <structtagcmptlsshutdown__struct>`

- struct :ref:`tagcmptlswrite_struct <structtagcmptlswrite__struct>`

- struct :ref:`ICmpTls_C <struct_i_cmp_tls___c>`

Macros
------

- #define :ref:`TLS_METHOD_SSLv2_CLIENT <group___cmp_tls_itf_1ga2f945a725fdb8b437620b2be99608184>` 0x00		/* Not compiled */

- #define :ref:`TLS_METHOD_SSLv3_CLIENT <group___cmp_tls_itf_1ga6f50c58ca4c4b245e95bad4fe9d1979c>` 0x01

- #define :ref:`TLS_METHOD_SSLv23_CLIENT <group___cmp_tls_itf_1ga948a89d97e28957b50fdba4206bb5191>` 0x02

- #define :ref:`TLS_METHOD_TLSv1_CLIENT <group___cmp_tls_itf_1ga1c883c9e08b01aeacd39a3d5c8ec988d>` 0x03

- #define :ref:`TLS_METHOD_TLSv2_CLIENT <group___cmp_tls_itf_1gac43ae6b3fd2cdf6e8a188c44705261ce>` 0x04

- #define :ref:`TLS_METHOD_SSLv2_SERVER <group___cmp_tls_itf_1gaf34261fc526160aa4543b8fd2a7f59a2>` 0x05		/* Not compiled */

- #define :ref:`TLS_METHOD_SSLv3_SERVER <group___cmp_tls_itf_1gaf2e4b5c2a1e7ce03474604df045b2722>` 0x06

- #define :ref:`TLS_METHOD_SSLv23_SERVER <group___cmp_tls_itf_1gac404cb66feefe0408fd10f3bafe0c87a>` 0x07

- #define :ref:`TLS_METHOD_TLSv1_SERVER <group___cmp_tls_itf_1ga8a14eff2bfbeccb1861fc01cfaf9376f>` 0x08

- #define :ref:`TLS_METHOD_TLSv2_SERVER <group___cmp_tls_itf_1ga4a8a031b3f41d9664b84d04318e37d94>` 0x09

- #define :ref:`TLS_METHOD_LAST_INDEX <group___cmp_tls_itf_1ga3d07524e3c19a0274e6934d5e6d288a4>` 0x0A

- #define :ref:`TLS_VERIFY_NONE <group___cmp_tls_itf_1gaf7a27f470dd48b00832366e9566fa68d>` 0x01

- #define :ref:`TLS_VERIFY_PEER <group___cmp_tls_itf_1gaf25f84bbcb48a5cc367eba969607f144>` 0x02

- #define :ref:`TLS_VERIFY_FAIL_IF_NO_PEER_CERT <group___cmp_tls_itf_1ga3586fdb1fc15a02d7d052e11d1fb845f>` 0x04

- #define :ref:`TLS_VERIFY_CLIENT_ONCE <group___cmp_tls_itf_1gaeea97d714a254197bb37ed9e04d7c48a>` 0x08

- #define :ref:`TLS_FIRST_RELEASE_MAJOR <group___cmp_tls_itf_1ga3d7d85c556a161e774227a97d500ab09>` 1

- #define :ref:`TLS_FIRST_RELEASE_MINOR <group___cmp_tls_itf_1ga0155ec62013c3751c43cbcfbc91300a2>` 0

- #define :ref:`TLS_HIGHEST_SUPPORTED_MAJOR <group___cmp_tls_itf_1ga2bd667c5e401338c0437c3717a51bf65>` 1

- #define :ref:`TLS_HIGHEST_SUPPORTED_MINOR <group___cmp_tls_itf_1ga5bc3d4af7fa35b88dd38e81f757ad0bb>` 0

- #define :ref:`TLS_MAX_RECORD_SIZE <group___cmp_tls_itf_1ga8e6616487e4f14e26caa910bbc5bfdf6>` 0x4000

- #define :ref:`TLS_MAX_HEADER_SIZE <group___cmp_tls_itf_1ga0607b84539683d37291820ebab6482bc>` 0x0158

- #define :ref:`TLSKEY_STR_CERT_STORE_BASE_DIR <group___cmp_tls_itf_1ga5c65adc827dc0eb67eb0c70f720b9001>` "CertStoreBase"

- #define :ref:`TLSVALUE_STR_CERT_STORE_BASE_DIR_DEFAULT <group___cmp_tls_itf_1ga4469b7efccca694cb588f1773ec21917>` "./PKI/"

- #define :ref:`TLS_CERT_STORE_CERT_DIR <group___cmp_tls_itf_1gabcf8cfcf0a6c4638909dacc4d36fd276>` "cert/"

- #define :ref:`TLS_CERT_STORE_PRIVATE_DIR <group___cmp_tls_itf_1ga458bf578f8e7657c1db85f238c374223>` "private/"

- #define :ref:`TLS_CERT_STORE_TURESTED_DIR <group___cmp_tls_itf_1gab8404c3883344e116be26cec31f1236f>` "trusted/"

- #define :ref:`TLS_CERT_STORE_CRL_DIR <group___cmp_tls_itf_1ga88e698e3041c57ffa751cf5de1f43060>` "crl/"

- #define :ref:`CMPTLSMETHOD_SSLV2_CLIENT <group___cmp_tls_itf_1gab798b02cb166a4ce5190f395d409ee21>` RTS_IEC_INT_C(0x0)

- #define :ref:`CMPTLSMETHOD_SSLV3_CLIENT <group___cmp_tls_itf_1gaf617299953ac42f44eaac55821554d33>` RTS_IEC_INT_C(0x1)	/* Not Available */

- #define :ref:`CMPTLSMETHOD_SSLV23_CLIENT <group___cmp_tls_itf_1gaa61090aebff1c6a58ba852fd4b8b3e41>` RTS_IEC_INT_C(0x2)	/* SSL v3 Client */

- #define :ref:`CMPTLSMETHOD_TLSV1_CLIENT <group___cmp_tls_itf_1ga7ef136802ab87e1e8ab01f79f7291ee6>` RTS_IEC_INT_C(0x3)	/* SSL Client accepting all versions but SSL v2 */

- #define :ref:`CMPTLSMETHOD_TLSV2_CLIENT <group___cmp_tls_itf_1ga8b0b51d8815bd1bc44bcf188bddc6048>` RTS_IEC_INT_C(0x4)	/* TLS 1.1 Client */

- #define :ref:`CMPTLSMETHOD_SSLV2_SERVER <group___cmp_tls_itf_1ga9e021fa013bdf92cc647f389c01c5850>` RTS_IEC_INT_C(0x5)	/* TLS 1.2 Client (Default for CmpTlsCreateContext) */

- #define :ref:`CMPTLSMETHOD_SSLV3_SERVER <group___cmp_tls_itf_1ga74a7aa08aa276a4557ad6d0e39b31d6a>` RTS_IEC_INT_C(0x6)	/* Not Available */

- #define :ref:`CMPTLSMETHOD_SSLV23_SERVER <group___cmp_tls_itf_1ga7a39accbb83c68a19eed571e09b3368f>` RTS_IEC_INT_C(0x7)	/* SSL v3 Server */

- #define :ref:`CMPTLSMETHOD_TLSV1_SERVER <group___cmp_tls_itf_1gad9d361385fa34612d76973ed3a2573c7>` RTS_IEC_INT_C(0x8)	/* SSL Server accepting all versions but SSL v2 */

- #define :ref:`CMPTLSMETHOD_TLSV2_SERVER <group___cmp_tls_itf_1ga4f22482770ef8cb4fde1f1a8cfb123d7>` RTS_IEC_INT_C(0x9)	/* TLS 1.1 Server
TLS 1.2 Server */

- #define :ref:`CMPTLSMETHOD <group___cmp_tls_itf_1ga3b96caf939f04cb43c7362b3d3259156>` RTS_IEC_INT

- #define :ref:`ITF_CmpTls <group___cmp_tls_itf_1ga420ad42d93ceb6d4a8400f77df105369>`

- #define :ref:`EXTITF_CmpTls <group___cmp_tls_itf_1gafac2792b33df992964d0f750da11863e>`

Typedefs
--------

- typedef RTS_RESULT(* :ref:`PFVERIFYCERTIFICATE <group___cmp_tls_itf_1gab63f3f78083786891b00cc648f43c9d6>`)(RTS_HANDLE hCert, RTS_RESULT verifyResult, void *pUserParameter)

- typedef struct :ref:`tagcmptlsaccept_struct <structtagcmptlsaccept__struct>` :ref:`cmptlsaccept_struct <group___cmp_tls_itf_1ga382897581ea888d0863284c9056c1366>`

- typedef struct :ref:`tagcmptlsbufferdatareceived_struct <structtagcmptlsbufferdatareceived__struct>` :ref:`cmptlsbufferdatareceived_struct <group___cmp_tls_itf_1gad75b12460f95e7b3b182b784a0363f14>`

- typedef struct :ref:`tagcmptlsbufferdatasent_struct <structtagcmptlsbufferdatasent__struct>` :ref:`cmptlsbufferdatasent_struct <group___cmp_tls_itf_1ga95b7ba266dba1954da0c99f8ae2d99f7>`

- typedef struct :ref:`tagcmptlsbufferdatatosendavailable_struct <structtagcmptlsbufferdatatosendavailable__struct>` :ref:`cmptlsbufferdatatosendavailable_struct <group___cmp_tls_itf_1ga5da2bdff418c7119da6d8989951cb332>`

- typedef struct :ref:`tagcmptlsbufferopen_struct <structtagcmptlsbufferopen__struct>` :ref:`cmptlsbufferopen_struct <group___cmp_tls_itf_1ga1a3de0b7ab342720da7fda21b0a86f04>`

- typedef struct :ref:`tagcmptlsclose_struct <structtagcmptlsclose__struct>` :ref:`cmptlsclose_struct <group___cmp_tls_itf_1ga42a29fd86f0cbe69ec290a4a847e70a7>`

- typedef struct :ref:`tagcmptlsconnect_struct <structtagcmptlsconnect__struct>` :ref:`cmptlsconnect_struct <group___cmp_tls_itf_1ga0c1140f72f8ac8016da60625a14226cd>`

- typedef struct :ref:`tagcmptlscreatecontext_struct <structtagcmptlscreatecontext__struct>` :ref:`cmptlscreatecontext_struct <group___cmp_tls_itf_1ga67434aef139afd0e16585c0fc0cbd8bf>`

- typedef struct :ref:`tagcmptlsfreecontext_struct <structtagcmptlsfreecontext__struct>` :ref:`cmptlsfreecontext_struct <group___cmp_tls_itf_1gab1953133c689f82ef3b485d6227a6a81>`

- typedef struct :ref:`tagcmptlsread_struct <structtagcmptlsread__struct>` :ref:`cmptlsread_struct <group___cmp_tls_itf_1ga089017dad964ff393318c31620b63c5d>`

- typedef struct :ref:`tagcmptlsshutdown_struct <structtagcmptlsshutdown__struct>` :ref:`cmptlsshutdown_struct <group___cmp_tls_itf_1ga2a09444e860e6f2511dac62df5759833>`

- typedef struct :ref:`tagcmptlswrite_struct <structtagcmptlswrite__struct>` :ref:`cmptlswrite_struct <group___cmp_tls_itf_1ga01a0db75e3d1704c3e1dc10835edf15c>`

- typedef :ref:`ICmpTls_C <struct_i_cmp_tls___c>` :ref:`ICmpTls <group___cmp_tls_itf_1ga6560a6395f044f77d90f20a5fc41e242>`

Functions
---------

- RTS_HANDLE :ref:`TlsCreateContext <group___cmp_tls_itf_1gacc000e3cd5fa34999896abf07160003c>` (char * pszNamespace, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`TlsCreateContext2 <group___cmp_tls_itf_1ga3b3f5ee888d46abc4757a7f0d9d6c560>` (RTS_HANDLE hCert, RTS_UI32 ui32TlsMethod, char * szCipherList, RTS_I32 i32VerifyMode, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`TlsCreateContext3 <group___cmp_tls_itf_1ga198c3b3544bfeb0b2470029f5ce9a7eb>` (RTS_HANDLE hCert, RTS_UI32 ui32TlsMethod, char * szCipherList, RTS_I32 i32VerifyMode, :ref:`PFVERIFYCERTIFICATE <group___cmp_tls_itf_1gab63f3f78083786891b00cc648f43c9d6>`  pfVerifyCallback, void * pUserParameter, RTS_RESULT * pResult)

- RTS_RESULT :ref:`TlsFreeContext <group___cmp_tls_itf_1gad1c85fc8d93dc13be8b84d25d2c5e6df>` (RTS_HANDLE hTlsContext)

- RTS_HANDLE :ref:`TlsBufferOpen <group___cmp_tls_itf_1gaa5375effc8e1bd3ceb4f716eebb65e97>` (RTS_HANDLE hContext, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pRxBuffer, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pTxBuffer, RTS_RESULT * pResult)

- RTS_RESULT :ref:`TlsBufferDataReveived <group___cmp_tls_itf_1ga00666f1288e41aedb2bece75022f4c23>` (RTS_HANDLE hTlsConn)

- RTS_RESULT :ref:`TlsBufferDataSent <group___cmp_tls_itf_1gad175022db20e44bb4848c591b4683c5a>` (RTS_HANDLE hTlsConn)

- RTS_BOOL :ref:`TlsBufferDataToSendAvailable <group___cmp_tls_itf_1ga618c499bd6b31cf68f2ce5388beca1a1>` (RTS_HANDLE hTlsConn)

- RTS_UI32 :ref:`TlsBufferNumOfWrittenBlocks <group___cmp_tls_itf_1gaacb8435caf7aa4da27866d4deb0d6434>` (RTS_HANDLE hTlsConn)

- RTS_RESULT :ref:`TlsAccept <group___cmp_tls_itf_1gaa7f35b84dc83d95d0f73b18f18bf5fb6>` (RTS_HANDLE hTlsConn)

- RTS_RESULT :ref:`TlsConnect <group___cmp_tls_itf_1ga6cb5cdbfe28b6f16a54cb0d86e957345>` (RTS_HANDLE hTlsConn)

- RTS_SSIZE :ref:`TlsRead <group___cmp_tls_itf_1gab6c4d5f5a049c926cd64d4805134432a>` (RTS_HANDLE hTlsConn, RTS_UI8 * pbyBuffer, RTS_SSIZE ulBufferSize, RTS_RESULT * pResult)

- RTS_SSIZE :ref:`TlsWrite <group___cmp_tls_itf_1ga060d452f7860f52a5720c75653457e4a>` (RTS_HANDLE hTlsConn, RTS_UI8 * pbyData, RTS_SSIZE ulDataSize, RTS_RESULT * pResult)

- RTS_RESULT :ref:`TlsShutdown <group___cmp_tls_itf_1ga600585a8ccf4ed9f99834f2078edfb4a>` (RTS_HANDLE hTlsConn)

- RTS_RESULT :ref:`TlsClose <group___cmp_tls_itf_1gabc9e98cc9d5079e2ea3290bb40e71d53>` (RTS_HANDLE hTlsConn)

- void :ref:`TlsRandAdd <group___cmp_tls_itf_1gaf21c9eefa62ecd03eec441668dc8e5b8>` (const RTS_UI8 * pui8Buffer, RTS_I32 i32BufferSize, RTS_REAL64 r64Entroy)

- RTS_BOOL :ref:`TlsRandCheckStatus <group___cmp_tls_itf_1gabe9ae196c7e2992609a1ce6bf48d0163>` (void)

- void :ref:`cmptlsaccept <group___cmp_tls_itf_1ga72db2b27a16d150b0c59f5300e3a0f42>` (:ref:`cmptlsaccept_struct <group___cmp_tls_itf_1ga382897581ea888d0863284c9056c1366>` * p)

- void :ref:`cmptlsbufferdatareceived <group___cmp_tls_itf_1gae4204c1710d79b372db9de8653950821>` (:ref:`cmptlsbufferdatareceived_struct <group___cmp_tls_itf_1gad75b12460f95e7b3b182b784a0363f14>` * p)

- void :ref:`cmptlsbufferdatasent <group___cmp_tls_itf_1gabba9dca4bc90e77db4477b43e15d312c>` (:ref:`cmptlsbufferdatasent_struct <group___cmp_tls_itf_1ga95b7ba266dba1954da0c99f8ae2d99f7>` * p)

- void :ref:`cmptlsbufferdatatosendavailable <group___cmp_tls_itf_1gac88f556750f1e39e09f870b0a77e61b1>` (:ref:`cmptlsbufferdatatosendavailable_struct <group___cmp_tls_itf_1ga5da2bdff418c7119da6d8989951cb332>` * p)

- void :ref:`cmptlsbufferopen <group___cmp_tls_itf_1ga15bba2da25368c81c7bc2a63e6d579f4>` (:ref:`cmptlsbufferopen_struct <group___cmp_tls_itf_1ga1a3de0b7ab342720da7fda21b0a86f04>` * p)

- void :ref:`cmptlsclose <group___cmp_tls_itf_1gaeaf9e54504ea32a9ab1566950f828404>` (:ref:`cmptlsclose_struct <group___cmp_tls_itf_1ga42a29fd86f0cbe69ec290a4a847e70a7>` * p)

- void :ref:`cmptlsconnect <group___cmp_tls_itf_1gac17d68f46c1e04dfcc010988d4a2617b>` (:ref:`cmptlsconnect_struct <group___cmp_tls_itf_1ga0c1140f72f8ac8016da60625a14226cd>` * p)

- void :ref:`cmptlscreatecontext <group___cmp_tls_itf_1ga04ed6e2332b6f0e6c5255030f53eefa9>` (:ref:`cmptlscreatecontext_struct <group___cmp_tls_itf_1ga67434aef139afd0e16585c0fc0cbd8bf>` * p)

- void :ref:`cmptlsfreecontext <group___cmp_tls_itf_1gaca686cd927ae8ddeeb5c61ea23caa01e>` (:ref:`cmptlsfreecontext_struct <group___cmp_tls_itf_1gab1953133c689f82ef3b485d6227a6a81>` * p)

- void :ref:`cmptlsread <group___cmp_tls_itf_1gae6f6f54d76b9b337ce5fd8eab6d04d0c>` (:ref:`cmptlsread_struct <group___cmp_tls_itf_1ga089017dad964ff393318c31620b63c5d>` * p)

- void :ref:`cmptlsshutdown <group___cmp_tls_itf_1gac1882aad4851fec869d644ce14a001ce>` (:ref:`cmptlsshutdown_struct <group___cmp_tls_itf_1ga2a09444e860e6f2511dac62df5759833>` * p)

- void :ref:`cmptlswrite <group___cmp_tls_itf_1ga702156563dd9658580d2d703f4531ef4>` (:ref:`cmptlswrite_struct <group___cmp_tls_itf_1ga01a0db75e3d1704c3e1dc10835edf15c>` * p)

.. _group___cmp_tls_itf-details:

Detailed Description
--------------------

Interface of CmpTLS.

Interface for TLS encrypted communication over sockets and encrypted CODESYS communication

Limitations:

- Component should only be used to support TLS within the sebserver. Validation of the peer certificate is not available. So there is no secure way to establish a secure client connection.

- The functions for secure CODESYS communication are only prototypes. They don't have to be used.

**Copyright:**

Copyright (c) 2017-2018 CODESYS GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved.

Macro Definition Documentation
------------------------------
.. _group___cmp_tls_itf_1ga2f945a725fdb8b437620b2be99608184:

#define TLS_METHOD_SSLv2_CLIENT 0x00		/* Not compiled */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga6f50c58ca4c4b245e95bad4fe9d1979c:

#define TLS_METHOD_SSLv3_CLIENT 0x01
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga948a89d97e28957b50fdba4206bb5191:

#define TLS_METHOD_SSLv23_CLIENT 0x02
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga1c883c9e08b01aeacd39a3d5c8ec988d:

#define TLS_METHOD_TLSv1_CLIENT 0x03
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1gac43ae6b3fd2cdf6e8a188c44705261ce:

#define TLS_METHOD_TLSv2_CLIENT 0x04
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1gaf34261fc526160aa4543b8fd2a7f59a2:

#define TLS_METHOD_SSLv2_SERVER 0x05		/* Not compiled */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1gaf2e4b5c2a1e7ce03474604df045b2722:

#define TLS_METHOD_SSLv3_SERVER 0x06
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1gac404cb66feefe0408fd10f3bafe0c87a:

#define TLS_METHOD_SSLv23_SERVER 0x07
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga8a14eff2bfbeccb1861fc01cfaf9376f:

#define TLS_METHOD_TLSv1_SERVER 0x08
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga4a8a031b3f41d9664b84d04318e37d94:

#define TLS_METHOD_TLSv2_SERVER 0x09
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga3d07524e3c19a0274e6934d5e6d288a4:

#define TLS_METHOD_LAST_INDEX 0x0A
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1gaf7a27f470dd48b00832366e9566fa68d:

#define TLS_VERIFY_NONE 0x01
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1gaf25f84bbcb48a5cc367eba969607f144:

#define TLS_VERIFY_PEER 0x02
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga3586fdb1fc15a02d7d052e11d1fb845f:

#define TLS_VERIFY_FAIL_IF_NO_PEER_CERT 0x04
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1gaeea97d714a254197bb37ed9e04d7c48a:

#define TLS_VERIFY_CLIENT_ONCE 0x08
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga3d7d85c556a161e774227a97d500ab09:

#define TLS_FIRST_RELEASE_MAJOR 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga0155ec62013c3751c43cbcfbc91300a2:

#define TLS_FIRST_RELEASE_MINOR 0
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga2bd667c5e401338c0437c3717a51bf65:

#define TLS_HIGHEST_SUPPORTED_MAJOR 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga5bc3d4af7fa35b88dd38e81f757ad0bb:

#define TLS_HIGHEST_SUPPORTED_MINOR 0
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga8e6616487e4f14e26caa910bbc5bfdf6:

#define TLS_MAX_RECORD_SIZE 0x4000
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga0607b84539683d37291820ebab6482bc:

#define TLS_MAX_HEADER_SIZE 0x0158
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga5c65adc827dc0eb67eb0c70f720b9001:

#define TLSKEY_STR_CERT_STORE_BASE_DIR "CertStoreBase"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Path to the base directory of the PKI infrastructure. The path should contain a trailing slash. This setting is only available until a component for managing certificates is available. Will be removed in future!

.. _group___cmp_tls_itf_1ga4469b7efccca694cb588f1773ec21917:

#define TLSVALUE_STR_CERT_STORE_BASE_DIR_DEFAULT "./PKI/"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1gabcf8cfcf0a6c4638909dacc4d36fd276:

#define TLS_CERT_STORE_CERT_DIR "cert/"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga458bf578f8e7657c1db85f238c374223:

#define TLS_CERT_STORE_PRIVATE_DIR "private/"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1gab8404c3883344e116be26cec31f1236f:

#define TLS_CERT_STORE_TURESTED_DIR "trusted/"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga88e698e3041c57ffa751cf5de1f43060:

#define TLS_CERT_STORE_CRL_DIR "crl/"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1gab798b02cb166a4ce5190f395d409ee21:

#define CMPTLSMETHOD_SSLV2_CLIENT RTS_IEC_INT_C(0x0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EXTERN LIB SECTION BEGIN

Enum: CmpTlsMethod

.. _group___cmp_tls_itf_1gaf617299953ac42f44eaac55821554d33:

#define CMPTLSMETHOD_SSLV3_CLIENT RTS_IEC_INT_C(0x1)	/* Not Available */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1gaa61090aebff1c6a58ba852fd4b8b3e41:

#define CMPTLSMETHOD_SSLV23_CLIENT RTS_IEC_INT_C(0x2)	/* SSL v3 Client */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga7ef136802ab87e1e8ab01f79f7291ee6:

#define CMPTLSMETHOD_TLSV1_CLIENT RTS_IEC_INT_C(0x3)	/* SSL Client accepting all versions but SSL v2 */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga8b0b51d8815bd1bc44bcf188bddc6048:

#define CMPTLSMETHOD_TLSV2_CLIENT RTS_IEC_INT_C(0x4)	/* TLS 1.1 Client */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga9e021fa013bdf92cc647f389c01c5850:

#define CMPTLSMETHOD_SSLV2_SERVER RTS_IEC_INT_C(0x5)	/* TLS 1.2 Client (Default for CmpTlsCreateContext) */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga74a7aa08aa276a4557ad6d0e39b31d6a:

#define CMPTLSMETHOD_SSLV3_SERVER RTS_IEC_INT_C(0x6)	/* Not Available */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga7a39accbb83c68a19eed571e09b3368f:

#define CMPTLSMETHOD_SSLV23_SERVER RTS_IEC_INT_C(0x7)	/* SSL v3 Server */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1gad9d361385fa34612d76973ed3a2573c7:

#define CMPTLSMETHOD_TLSV1_SERVER RTS_IEC_INT_C(0x8)	/* SSL Server accepting all versions but SSL v2 */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga4f22482770ef8cb4fde1f1a8cfb123d7:

#define CMPTLSMETHOD_TLSV2_SERVER
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Value:**

.. parsed-literal::

    RTS_IEC_INT_C(0x9)	/* TLS 1.1 Server
TLS 1.2 Server */

.. _group___cmp_tls_itf_1ga3b96caf939f04cb43c7362b3d3259156:

#define CMPTLSMETHOD RTS_IEC_INT
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga420ad42d93ceb6d4a8400f77df105369:

#define ITF_CmpTls
^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1gafac2792b33df992964d0f750da11863e:

#define EXTITF_CmpTls
^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___cmp_tls_itf_1gab63f3f78083786891b00cc648f43c9d6:

typedef RTS_RESULT( * PFVERIFYCERTIFICATE)(RTS_HANDLE hCert, RTS_RESULT verifyResult, void *pUserParameter)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This callback is called after the peers certificate has been validated. You can use this callback to do some additional verification. Return ERR_CERT_OK to signal the the verification is was OK. Return any other error code to cause the TLS connection to fail.

**Parameters**

+---------+----------------+----------------------------------------------------------+
| [in]    | hCert          | Certificate sent by the peer. This needs to be verified. |
+---------+----------------+----------------------------------------------------------+
| [in]    | verifyResult   | The verify result of the X509CertStore.                  |
+---------+----------------+----------------------------------------------------------+
| [in]    | hConnection    | The handle of the TLS connection.                        |
+---------+----------------+----------------------------------------------------------+
| [in]    | pUserParameter | Parameter given in TlsCreatecontext3                     |
+---------+----------------+----------------------------------------------------------+
| [in]    | pResult        | Result of the operation.                                 |
+---------+----------------+----------------------------------------------------------+

**Returns:**

Handle to the created TLS context.

.. _group___cmp_tls_itf_1ga382897581ea888d0863284c9056c1366:

typedef struct tagcmptlsaccept_struct  cmptlsaccept_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Starts handshaking on the server side. The client has to initiate the handshaking. This is the first function call on the serverside after establishing the unterlaying connection. Data has to be received first. This function will is likley to read and write data.

:return: Result of this operation. May be one of these values:

- ERR_OK: No error. Everything worked as expected.

- ERR_NOTINITIALIZED: The TLS component was not initialized proberly.

- ERR_TLS_CONNECTION_CLOSED: The TLS connection is closed. Use TlsShutdown to shutdown locally.

- ERR_TLS_WANT_READ: The operation needs TO read data FROM the IO system. There is no data available.

- ERR_TLS_WANT_WRITE: The operation needs to write data to the IO system. This is not possible.

- ERR_TLS_RETRY_OPERATION: Something went wrong. Try the same function call again

- ERR_TLS_IO_SYSTEM: An error in the unterlaying IO system.

- ERR_TLS_INTERNAL: An internal Error of the TLS Component

- ERR_FAILED: Unknown error.

.. _group___cmp_tls_itf_1gad75b12460f95e7b3b182b784a0363f14:

typedef struct tagcmptlsbufferdatareceived_struct  cmptlsbufferdatareceived_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function is used to indicate that the Rx buffer contains new TLS data. Call this function is new data have arrived. All data of the buffer has to be consumed by the TLS implementation before overwritting the existing data and calling this funciton. Call TlsRead until the corresponding error code is returned. If not all data is consumed the TLS stream will be broken and the data can't be decrypted anymore. The Rx buffer will not be changed.

.. _group___cmp_tls_itf_1ga95b7ba266dba1954da0c99f8ae2d99f7:

typedef struct tagcmptlsbufferdatasent_struct  cmptlsbufferdatasent_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function is used to indicate that the data written by the TLS implementation has been sent to the peer. If this function is called the TLS implementation will start writing it's output at the beginning of the Tx buffer again. Call this function if the data of the Tx buffer has been sent. The length parameter of the Tx buffer will be set to 0.

.. _group___cmp_tls_itf_1ga5da2bdff418c7119da6d8989951cb332:

typedef struct tagcmptlsbufferdatatosendavailable_struct  cmptlsbufferdatatosendavailable_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function is called to determine if the tx buffer contains data which should be sent to the peer.

.. _group___cmp_tls_itf_1ga1a3de0b7ab342720da7fda21b0a86f04:

typedef struct tagcmptlsbufferopen_struct  cmptlsbufferopen_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create a TLS connection around any existing transport media. There are two buffers needed: a send and a receive buffer. Put the data received from the peer to the Rx buffer. The data written by the TLS implementation will be put to the Tx buffer. This buffer has to be sent to the peer after calling the connect, accept or write functions. Maybe after calling the read function the buffer has to be sent too. This depends on internal TLS protocol stuff (change of session keys etc) which may occur at any time. This will be indicated throuth the corresponding returned flag. The TLS connection will be established explicit by calling TSLConnect, or on the server side by calling the Accept function. If the handshaking hasn't finished the read and write functions will internally finish the handshaking until the connection is established. The implementation will start writing at the beginning at each call. If the function indicated that the the data must be sent the next call will overwrite the data in the Tx buffer. So the caller must handle the data before calling the next TLS function. The buffers given here contain raw TLS protocol data. This data has to be transferred to the peer using a reliable way. The packages have to arrive completely and in the right order. Otherwise TLS won't work. To read or to write the corresponding plaintext data use the TlsRead and TlsWrite functions. Handling is done as follows: Received data:

- The bytestrings pointer will point to the beginning of the data.

- The bytestrings max length will hold the buffers size

- The bytestrings length will hold the current available amount of data.

- The function ResetRx will not change any of the byte string. Only the internal read position will be set to the beginning of the buffer

Transmit data:

- The bytestrings pointer will point to the of the empty writing buffer.

- The bytestrings max length will hold the buffer size

- The bytestrings length will contain the amount of data written by the TLS implementation.

- The function ResetTx will reset the internal write position. The length of the bytestring will be set to 0.

:return: The handle to the created TLS connection, or RTS_INVALID_HANDLE, if operation failed.

.. _group___cmp_tls_itf_1ga42a29fd86f0cbe69ec290a4a847e70a7:

typedef struct tagcmptlsclose_struct  cmptlsclose_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

lose the TLS connection. All data will be cleand up. The handle used for creating the connection will be closed too. No shutdown is done here. This is allowed by the TLS protocol.

:return: Result of this operation. May be one of these values:

- ERR_OK: No error. Everything worked as expected.

- ERR_FAILED: Unknown error.

.. _group___cmp_tls_itf_1ga0c1140f72f8ac8016da60625a14226cd:

typedef struct tagcmptlsconnect_struct  cmptlsconnect_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Starts handshaking on the client side. This data is likley to read and write data.

:return: Result of this operation. May be one of these values:

- ERR_OK: No error. Everything worked as expected.

- ERR_NOTINITIALIZED: The TLS component was not initialized proberly.

- ERR_TLS_CONNECTION_CLOSED: The TLS connection is closed. Use TlsShutdown to shutdown locally.

- ERR_TLS_WANT_READ: The operation needs TO read data FROM the IO system. There is no data available.

- ERR_TLS_WANT_WRITE: The operation needs to write data to the IO system. This is not possible.

- ERR_TLS_RETRY_OPERATION: Something went wrong. Try the same function call again

- ERR_TLS_IO_SYSTEM: An error in the unterlaying IO system.

- ERR_TLS_INTERNAL: An internal Error of the TLS Component

- ERR_FAILED: Unknown error.

.. _group___cmp_tls_itf_1ga67434aef139afd0e16585c0fc0cbd8bf:

typedef struct tagcmptlscreatecontext_struct  cmptlscreatecontext_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function create a TLS context. This context is needed to perform TLS communication using the SysSocket2 library. The context contains all informaiton how to handle this TLS connection.

:return: Handle to the new accepted socket or RTS_INVALID_HANDLE if failed.

.. _group___cmp_tls_itf_1gab1953133c689f82ef3b485d6227a6a81:

typedef struct tagcmptlsfreecontext_struct  cmptlsfreecontext_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function cleans up the TLS context created with CmpTlsCreateContext.

.. _group___cmp_tls_itf_1ga089017dad964ff393318c31620b63c5d:

typedef struct tagcmptlsread_struct  cmptlsread_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Receive data from the encrypted channel. If the connection is not established yet, this will be done transparent in the background. Normally only data is of the encrypted channel is consumed. In some cases (Handshaking has not finished or renegotiation of the session keys) this function will also write data. If the unterlaying IO doens't write automatically the need to send data will be indicated using the corresponding error code.

:return: Number of bytes received. 0 if an error occured.

.. _group___cmp_tls_itf_1ga2a09444e860e6f2511dac62df5759833:

typedef struct tagcmptlsshutdown_struct  cmptlsshutdown_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

There are two ways to shutdown the TLS connection: bidirectional: The first call of TlsShutdown will send the shutdown message. The operation will return ERR_TLS_RETRY_OPERATION. Then the function has to be called again. If the acknowledge of the peer was received ERR_OK will be returned. If the acknowledge was not received yet the function will return ERR_TLS_WANT_READ. unidirectional: The first call of TlsShutdown will send the shutdown message. The operation will return ERR_TLS_RETRY_OPERATION. Close the IO channel and clean up. Don't wait for the acknowledge of the peer.

:return: Result of this operation. May be one of these values:

- ERR_OK: No error. Everything worked as expected.

- ERR_NOTINITIALIZED: The TLS component was not initialized proberly.

- ERR_TLS_CONNECTION_CLOSED: The TLS connection is closed.

- ERR_TLS_WANT_READ: The operation needs TO read data FROM the IO system. There is no data available.

- ERR_TLS_WANT_WRITE: The operation needs to write data to the IO system. This is not possible.

- ERR_TLS_RETRY_OPERATION: Something went wrong. Try the same function call again

- ERR_TLS_IO_SYSTEM: An error in the unterlaying IO system.

- ERR_TLS_INTERNAL: An internal Error of the TLS Component

- ERR_FAILED: Unknown error.

.. _group___cmp_tls_itf_1ga01a0db75e3d1704c3e1dc10835edf15c:

typedef struct tagcmptlswrite_struct  cmptlswrite_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Send data over the encrypted channel. If the connection is not established yet, this will be done transparent in the background. Normally only data is written to the unterlaying IO. In some cases data have to be read (Handshaking has not finished or renegotiation of the session keys). If not data is for reading is available this will be indicated through the corresponding error code.

:return: Number of bytes sent. 0 if an error occured.

.. _group___cmp_tls_itf_1ga6560a6395f044f77d90f20a5fc41e242:

typedef ICmpTls_C ICmpTls
^^^^^^^^^^^^^^^^^^^^^^^^^

Function Documentation
----------------------

.. _group___cmp_tls_itf_1gacc000e3cd5fa34999896abf07160003c:

RTS_HANDLE TlsCreateContext (char *pszNamespace, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Creates a TLS context, needed for creating TLS connections. One context may be used for many TLS connections. A Context contains all the application specific information of the connection. New connections are initialized using a context. ATTENTION: This function is deprecated. User TlsCreateContext2 or TlsCreateContext3 instead.

**Parameters**

+---------+--------------+----------------------------------------------------------------------------------+
| [in]    | pszNamespace | Namespace of the context. Settings of the context are read from the config file. |
+---------+--------------+----------------------------------------------------------------------------------+
| [out]   | pResult      | Result of this operation.                                                        |
+---------+--------------+----------------------------------------------------------------------------------+

**Returns:**

Handle to the created TLS context.

.. _group___cmp_tls_itf_1ga3b3f5ee888d46abc4757a7f0d9d6c560:

RTS_HANDLE TlsCreateContext2 (RTS_HANDLE hCert, RTS_UI32 ui32TlsMethod, char *szCipherList, RTS_I32 i32VerifyMode, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Creates a TLS context, needed for creating TLS connections. One context may be used for many TLS connections. A Context contains all the application specific information of the connection. New connections are initialized using a context.

**Parameters**

+---------+---------------+------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hCert         | Certificate used by the TLS connection. If a client connection should be established the certificate is optional.            |
+---------+---------------+------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ui32TlsMethod | Mode of the TLS connections. See: TLS_METHOD_... macros                                                                      |
+---------+---------------+------------------------------------------------------------------------------------------------------------------------------+
| [in]    | szCipherList  | Cipher selection of the TLS connection. See CipherList setting for details. If NULL the default of the setting will be used. |
+---------+---------------+------------------------------------------------------------------------------------------------------------------------------+
| [in]    | i32VerifyMode | Verify mode of the TLS connection. See: TLS_VERIFY... macros. Default server: NONE; Default client: VERIFY_PEER.             |
+---------+---------------+------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pResult       | Result of the operation.                                                                                                     |
+---------+---------------+------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Handle to the created TLS context.

.. _group___cmp_tls_itf_1ga198c3b3544bfeb0b2470029f5ce9a7eb:

RTS_HANDLE TlsCreateContext3 (RTS_HANDLE hCert, RTS_UI32 ui32TlsMethod, char *szCipherList, RTS_I32 i32VerifyMode, PFVERIFYCERTIFICATE pfVerifyCallback, void *pUserParameter, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Creates a TLS context, needed for creating TLS connections. One context may be used for many TLS connections. A Context contains all the application specific information of the connection. New connections are initialized using a context.

**Parameters**

+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hCert            | Certificate used by the TLS connection. If a client connection should be established the certificate is optional.                          |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ui32TlsMethod    | Mode of the TLS connections. See: TLS_METHOD_... macros                                                                                    |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | szCipherList     | Cipher selection of the TLS connection. See CipherList setting for details. If NULL the default of the setting will be used.               |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | i32VerifyMode    | Verify mode of the TLS connection. See: TLS_VERIFY... macros. Default server: NONE; Default client: VERIFY_PEER.                           |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pfVerifyCallback | Callback function to verify the certificate. This callback is called after the certificate has been prevalidated by the certificate store. |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pUserParameter   | A parameter that is passed to the pfVerifyCallback.                                                                                        |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pResult          | Result of the operation.                                                                                                                   |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Handle to the created TLS context.

.. _group___cmp_tls_itf_1gad1c85fc8d93dc13be8b84d25d2c5e6df:

RTS_RESULT TlsFreeContext (RTS_HANDLE hTlsContext)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Delete the TLS context created using TLSCreateContext

**Parameters**

+---------+---------+-----------------------------------------------+
| [in]    | hTlsCtx | Handle to the context, that should be deleted |
+---------+---------+-----------------------------------------------+

**Returns:**

Result of this operation.

.. _group___cmp_tls_itf_1gaa5375effc8e1bd3ceb4f716eebb65e97:

RTS_HANDLE TlsBufferOpen (RTS_HANDLE hContext, RtsByteString *pRxBuffer, RtsByteString *pTxBuffer, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create a TLS connection around any existing transport media. There are two buffers needed: a send and a receive buffer. Put the data received from the peer to the Rx buffer. The data written by the TLS implementation will be put to the Tx buffer. This buffer has to be sent to the peer after calling the connect, accept or write functions. Maybe after calling the read function the buffer has to be sent too. This depends on internal TLS protocol stuff (change of session keys etc) which may occur at any time. This will be indicated through the corresponding returned flag. The TLS connection will be established explicit by calling TSLConnect, or on the server side by calling the Accept function. If the handshaking hasn't finished the read and write functions will internally finish the handshaking until the connection is established. The implementation will start writing at the beginning at each call. If the function indicated that the the data must be sent the next call will overwrite the data in the Tx buffer. So the caller must handle the data before calling the next TLS function. The buffers given here contain raw TLS protocol data. This data has to be transferred to the peer using a reliable way. The packages have to arrive completely and in the right order. Otherwise TLS won't work. To read or to write the corresponding plain text data use the TlsRead and TlsWrite functions. Handling is done as follows: Received data: The bytestrings pointer will point to the beginning of the data. The bytestrings max length will hold the buffers size The bytestrings length will hold the current available amount of data. The function ResetRx will not change any of the byte string. Only the internal read position will be set to the beginning of the buffer

Transmit data: The bytestrings pointer will point to the of the empty writing buffer. The bytestrings max length will hold the buffer size The bytestrings length will contain the amount of data written by the TLS implementation. The function ResetTx will reset the internal write position. The length of the byte string will be set to 0. To make the handling of the Tx buffer easier the pDataWritten will be set to 1. This indicates that the TLS implementation has written some data.

**Parameters**

+---------+-----------+--------------------------------------------------------------------------------------------------------------+
| [in]    | hSocket   | The socket handle, used for the TLC connection. The socket should be TCP type and be connected to it's peer. |
+---------+-----------+--------------------------------------------------------------------------------------------------------------+
| [in]    | hTlsCtx   | Handle to the TLS configuration context. Create by TlsCreateContext or TlsCreateContext2                     |
+---------+-----------+--------------------------------------------------------------------------------------------------------------+
| [in]    | pRxBuffer | Pointer to the buffer containing the data received from the peer.                                            |
+---------+-----------+--------------------------------------------------------------------------------------------------------------+
| [in]    | pTxBuffer | Pointer to the buffer containing the data to be sent to the peer.                                            |
+---------+-----------+--------------------------------------------------------------------------------------------------------------+
| [out]   | pResult   | Result of this operation. Possible values:                                                                   |
|         |           |                                                                                                              |
|         |           | - ERR_OK: The TLS connection was created successful.                                                         |
|         |           |                                                                                                              |
|         |           | - ERR_NOMEMORY: The TLS connection could not be created. No memory available                                 |
|         |           |                                                                                                              |
|         |           | - ERR_INVALID_HANDLE: The TLS connection could not be created. The given context handle is invalid.          |
|         |           |                                                                                                              |
|         |           | - ERR_PARAMETER: Some parameters where inconsistent or wrong.                                                |
+---------+-----------+--------------------------------------------------------------------------------------------------------------+

**Returns:**

The handle to the created TLS connection, or RTS_INVALID_HANDLE, if operation failed.

.. _group___cmp_tls_itf_1ga00666f1288e41aedb2bece75022f4c23:

RTS_RESULT TlsBufferDataReveived (RTS_HANDLE hTlsConn)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function is used to indicate that the Rx buffer contains new TLS data. Call this function is new data have arrived. All data of the buffer has to be consumed by the TLS implementation before overwriting the existing data and calling this function. Call TlsRead until the corresponding error code is returned. If not all data is consumed the TLS stream will be broken and the data can't be decrypted anymore. The Rx buffer will not be changed.

**Parameters**

+---------+----------+-------------------------------------------------------------------------+
| [in]    | hTlsConn | Handle to the TLS connection. Must have been created with TlsBufferOpen |
+---------+----------+-------------------------------------------------------------------------+

.. _group___cmp_tls_itf_1gad175022db20e44bb4848c591b4683c5a:

RTS_RESULT TlsBufferDataSent (RTS_HANDLE hTlsConn)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function is used to indicate that the data written by the TLS implementation has been sent to the peer. If this function is called the TLS implementation will start writing it's output at the beginning of the Tx buffer again. Call this function if the data of the Tx buffer has been sent. The length parameter of the Tx buffer will be set to 0.

**Parameters**

+---------+----------+-------------------------------------------------------------------------+
| [in]    | hTlsConn | Handle to the TLS connection. Must have been created with TlsBufferOpen |
+---------+----------+-------------------------------------------------------------------------+

.. _group___cmp_tls_itf_1ga618c499bd6b31cf68f2ce5388beca1a1:

RTS_BOOL TlsBufferDataToSendAvailable (RTS_HANDLE hTlsConn)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function is called to determine if the tx buffer contains data which should be sent to the peer.

**Parameters**

+---------+----------+-------------------------------------------------------------------------+
| [in]    | hTlsConn | Handle to the TLS connection. Must have been created with TlsBufferOpen |
+---------+----------+-------------------------------------------------------------------------+

.. _group___cmp_tls_itf_1gaacb8435caf7aa4da27866d4deb0d6434:

RTS_UI32 TlsBufferNumOfWrittenBlocks (RTS_HANDLE hTlsConn)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function returns the number of written TLS packets since the last call of TlsBufferDataSent.

**Parameters**

+---------+----------+-------------------------------------------------------------------------+
| [in]    | hTlsConn | Handle to the TLS connection. Must have been created with TlsBufferOpen |
+---------+----------+-------------------------------------------------------------------------+

.. _group___cmp_tls_itf_1gaa7f35b84dc83d95d0f73b18f18bf5fb6:

RTS_RESULT TlsAccept (RTS_HANDLE hTlsConn)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Starts handshaking on the server side. The client has to initiate the handshaking. This is the first function call on the server side after establishing the underlaying connection. Data has to be received first. This function will is likely to read and write data.

**Parameters**

+---------+----------+----------------------------------------------------------------------------+
| [in]    | hTlsConn | Handle of the TLS connection, created with one of the TLSxxxOpen functions |
+---------+----------+----------------------------------------------------------------------------+

**Returns:**

Result of this operation. May be one of these values:

- ERR_OK: No error. Everything worked as expected.

- ERR_NOTINITIALIZED: The TLS component was not initialized properly.

- ERR_TLS_CONNECTION_CLOSED: The TLS connection is closed. Use TlsShutdown to shutdown locally.

- ERR_TLS_WANT_READ: The operation needs to read data from the IO system. There is no data available.

- ERR_TLS_WANT_WRITE: The operation needs to write data to the IO system. This is not possible.

- ERR_TLS_RETRY_OPERATION: Something went wrong. Try the same function call again

- ERR_TLS_IO_SYSTEM: An error in the underlaying IO system.

- ERR_TLS_INTERNAL: An internal Error of the TLS Component

- ERR_FAILED: Unknown error.

.. _group___cmp_tls_itf_1ga6cb5cdbfe28b6f16a54cb0d86e957345:

RTS_RESULT TlsConnect (RTS_HANDLE hTlsConn)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Starts handshaking on the client side. This data is likely to read and write data

**Parameters**

+---------+----------+----------------------------------------------------------------------------+
| [in]    | hTlsConn | Handle of the TLS connection, created with one of the TLSxxxOpen functions |
+---------+----------+----------------------------------------------------------------------------+

**Returns:**

Result of this operation. May be one of these values:

- ERR_OK: No error. Everything worked as expected.

- ERR_NOTINITIALIZED: The TLS component was not initialized properly.

- ERR_TLS_CONNECTION_CLOSED: The TLS connection is closed. Use TlsShutdown to shutdown locally.

- ERR_TLS_WANT_READ: The operation needs to read data from the IO system. There is no data available.

- ERR_TLS_WANT_WRITE: The operation needs to write data to the IO system. This is not possible.

- ERR_TLS_RETRY_OPERATION: Something went wrong. Try the same function call again

- ERR_TLS_IO_SYSTEM: An error in the underlaying IO system.

- ERR_TLS_INTERNAL: An internal Error of the TLS Component

- ERR_FAILED: Unknown error.

.. _group___cmp_tls_itf_1gab6c4d5f5a049c926cd64d4805134432a:

RTS_SSIZE TlsRead (RTS_HANDLE hTlsConn, RTS_UI8 *pbyBuffer, RTS_SSIZE ulBufferSize, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Receive data from the encrypted channel. If the connection is not established yet, this will be done transparent in the background. Normally only data is of the encrypted channel is consumed. In some cases (Handshaking has not finished or renegotiation of the session keys) this function will also write data. If the underlaying IO doesn't write automatically the need to send data will be indicated using the corresponding error code.

**Parameters**

+---------+-----------+--------------------------------------------------------------------------------------------------------+
| [in]    | hTlsConn  | Handle of the TLS connection, created with one of the TLSxxxOpen functions                             |
+---------+-----------+--------------------------------------------------------------------------------------------------------+
| [in]    | pbyData   | Pointer to a data buffer, where the received data should be written to.                                |
+---------+-----------+--------------------------------------------------------------------------------------------------------+
| [in]    | lDataSize | Size of pbyData. Maximum number of bytes, that could be received from the TLS connection.              |
+---------+-----------+--------------------------------------------------------------------------------------------------------+
| [out]   | pResult   | Result of this operation. May be one of these values:                                                  |
|         |           |                                                                                                        |
|         |           | - ERR_OK: No error. Everything worked as expected.                                                     |
|         |           |                                                                                                        |
|         |           | - ERR_NOTINITIALIZED: The TLS component was not initialized properly.                                  |
|         |           |                                                                                                        |
|         |           | - ERR_TLS_CONNECTION_CLOSED: The TLS connection is closed. Use TlsShutdown to shutdown locally.        |
|         |           |                                                                                                        |
|         |           | - ERR_TLS_WANT_READ: The operation needs to read data from the IO system. There is no data available.  |
|         |           |                                                                                                        |
|         |           | - ERR_TLS_WANT_WRITE: The operation needs to write data to the IO system. This is not possible.        |
|         |           |                                                                                                        |
|         |           | - ERR_TLS_RETRY_OPERATION: Something went wrong. Try the same function call again                      |
|         |           |                                                                                                        |
|         |           | - ERR_TLS_IO_SYSTEM: An error in the underlaying IO system.                                            |
|         |           |                                                                                                        |
|         |           | - ERR_TLS_INTERNAL: An internal Error of the TLS Component                                             |
|         |           |                                                                                                        |
|         |           | - ERR_FAILED: Unknown error.                                                                           |
+---------+-----------+--------------------------------------------------------------------------------------------------------+

**Returns:**

Number of bytes received. 0 if an error occurred.

.. _group___cmp_tls_itf_1ga060d452f7860f52a5720c75653457e4a:

RTS_SSIZE TlsWrite (RTS_HANDLE hTlsConn, RTS_UI8 *pbyData, RTS_SSIZE ulDataSize, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Send data over the encrypted channel. If the connection is not established yet, this will be done transparent in the background. Normally only data is written to the underlaying IO. In some cases data have to be read (Handshaking has not finished or renegotiation of the session keys). If not data is for reading is available this will be indicated through the corresponding error code.

**Parameters**

+---------+-----------+--------------------------------------------------------------------------------------------------------+
| [in]    | hTlsConn  | Handle of the TLS connection, created with one of the TLSxxxOpen functions                             |
+---------+-----------+--------------------------------------------------------------------------------------------------------+
| [in]    | pbyData   | Pointer to data, that should be sent over the TLS connection                                           |
+---------+-----------+--------------------------------------------------------------------------------------------------------+
| [in]    | lDataSize | Size of pbyData. Number of bytes that should be sent over the TLS connection                           |
+---------+-----------+--------------------------------------------------------------------------------------------------------+
| [out]   | pResult   | Result of this operation. May be one of these values:                                                  |
|         |           |                                                                                                        |
|         |           | - ERR_OK: No error. Everything worked as expected.                                                     |
|         |           |                                                                                                        |
|         |           | - ERR_NOTINITIALIZED: The TLS component was not initialized properly.                                  |
|         |           |                                                                                                        |
|         |           | - ERR_TLS_CONNECTION_CLOSED: The TLS connection is closed. Use TlsShutdown to shutdown locally.        |
|         |           |                                                                                                        |
|         |           | - ERR_TLS_WANT_READ: The operation needs to read data from the IO system. There is no data available.  |
|         |           |                                                                                                        |
|         |           | - ERR_TLS_WANT_WRITE: The operation needs to write data to the IO system. This is not possible.        |
|         |           |                                                                                                        |
|         |           | - ERR_TLS_RETRY_OPERATION: Something went wrong. Try the same function call again                      |
|         |           |                                                                                                        |
|         |           | - ERR_TLS_IO_SYSTEM: An error in the underlaying IO system.                                            |
|         |           |                                                                                                        |
|         |           | - ERR_TLS_INTERNAL: An internal Error of the TLS Component                                             |
|         |           |                                                                                                        |
|         |           | - ERR_FAILED: Unknown error.                                                                           |
+---------+-----------+--------------------------------------------------------------------------------------------------------+

**Returns:**

Number of bytes sent. 0 if an error occured.

.. _group___cmp_tls_itf_1ga600585a8ccf4ed9f99834f2078edfb4a:

RTS_RESULT TlsShutdown (RTS_HANDLE hTlsConn)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Shutdown the TLS connection. There are two ways to shutdown the TLS connection: bidirectional: The first call of TlsShutdown will send the shutdown message. The operation will return ERR_TLS_RETRY_OPERATION. Then the function has to be called again. If the acknowledge of the peer was received ERR_OK will be returned. If the acknowledge was not received yet the function will return ERR_TLS_WANT_READ. unidirectional: The first call of TlsShutdown will send the shutdown message. The operation will return ERR_TLS_RETRY_OPERATION. Close the IO channel and clean up. Don't wait for the acknowledge of the peer.

**Parameters**

+---------+----------+----------------------------------------------------------------------------+
| [in]    | hTlsConn | Handle of the TLS connection, created with one of the TLSxxxOpen functions |
+---------+----------+----------------------------------------------------------------------------+

**Returns:**

Result of this operation. May be one of these values:

- ERR_OK: No error. Everything worked as expected.

- ERR_NOTINITIALIZED: The TLS component was not initialized properly.

- ERR_TLS_CONNECTION_CLOSED: The TLS connection is closed.

- ERR_TLS_WANT_READ: The operation needs to read data from the IO system. There is no data available.

- ERR_TLS_WANT_WRITE: The operation needs to write data to the IO system. This is not possible.

- ERR_TLS_RETRY_OPERATION: Something went wrong. Try the same function call again

- ERR_TLS_IO_SYSTEM: An error in the underlaying IO system.

- ERR_TLS_INTERNAL: An internal Error of the TLS Component

- ERR_FAILED: Unknown error.

.. _group___cmp_tls_itf_1gabc9e98cc9d5079e2ea3290bb40e71d53:

RTS_RESULT TlsClose (RTS_HANDLE hTlsConn)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Close the TLS connection. All data will be cleaned up. The handle used for creating the connection will be closed too. No shutdown is done here. This is allowed by the TLS protocol.

**Parameters**

+---------+----------+----------------------------------------------------------------------------+
| [in]    | hTlsConn | Handle of the TLS connection, created with one of the TLSxxxOpen functions |
+---------+----------+----------------------------------------------------------------------------+

**Returns:**

Result of this operation. May be one of these values:

- ERR_OK: No error. Everything worked as expected.

- ERR_FAILED: Unknown error.

.. _group___cmp_tls_itf_1gaf21c9eefa62ecd03eec441668dc8e5b8:

void TlsRandAdd (const RTS_UI8 *pui8Buffer, RTS_I32 i32BufferSize, RTS_REAL64 r64Entroy)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Add entropy to the PRNG (Pseudo Random Number Generator)of the underlaying TLS implementation.

**Parameters**

+---------+---------------+-------------------------------------------------+
| [in]    | pui8Buffer    | Pointer to the data containing the random value |
+---------+---------------+-------------------------------------------------+
| [in]    | i32BufferSize | Size of the input buffer                        |
+---------+---------------+-------------------------------------------------+
| [in]    | dEntropy      | How many bytes of randomness are in the buffer. |
+---------+---------------+-------------------------------------------------+

**Returns:**

TRUE: If the channel has be secured already. FALSE: If the channel has net been secured already, or is not a valid channelID

.. _group___cmp_tls_itf_1gabe9ae196c7e2992609a1ce6bf48d0163:

RTS_BOOL TlsRandCheckStatus (void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Check if the PRNG has enought entropy to work properly
**Returns:**

TRUE: If the channel has be secured already. FALSE: If the channel has net been secured already, or is not a valid channelID

.. _group___cmp_tls_itf_1ga72db2b27a16d150b0c59f5300e3a0f42:

void cmptlsaccept (cmptlsaccept_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1gae4204c1710d79b372db9de8653950821:

void cmptlsbufferdatareceived (cmptlsbufferdatareceived_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1gabba9dca4bc90e77db4477b43e15d312c:

void cmptlsbufferdatasent (cmptlsbufferdatasent_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1gac88f556750f1e39e09f870b0a77e61b1:

void cmptlsbufferdatatosendavailable (cmptlsbufferdatatosendavailable_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga15bba2da25368c81c7bc2a63e6d579f4:

void cmptlsbufferopen (cmptlsbufferopen_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1gaeaf9e54504ea32a9ab1566950f828404:

void cmptlsclose (cmptlsclose_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1gac17d68f46c1e04dfcc010988d4a2617b:

void cmptlsconnect (cmptlsconnect_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga04ed6e2332b6f0e6c5255030f53eefa9:

void cmptlscreatecontext (cmptlscreatecontext_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1gaca686cd927ae8ddeeb5c61ea23caa01e:

void cmptlsfreecontext (cmptlsfreecontext_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1gae6f6f54d76b9b337ce5fd8eab6d04d0c:

void cmptlsread (cmptlsread_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1gac1882aad4851fec869d644ce14a001ce:

void cmptlsshutdown (cmptlsshutdown_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_tls_itf_1ga702156563dd9658580d2d703f4531ef4:

void cmptlswrite (cmptlswrite_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. last line of group.rst template
.. last line of composition.rst template


