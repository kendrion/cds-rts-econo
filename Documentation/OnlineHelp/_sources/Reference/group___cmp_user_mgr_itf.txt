.. first line of composition.rst template

.. first line of group.rst template

.. _group___cmp_user_mgr_itf:

=============
CmpUserMgrItf
=============

Interface of CmpUserMgr. :ref:`More... <group___cmp_user_mgr_itf-details>`

Modules
-------

- :ref:`Crypt types <group___cmp_user_mgr_itf___crypttypes>`

- :ref:`Event parameter <group___cmp_user_mgr_itf___eventparameter>`

- :ref:`Events <group___cmp_user_mgr_itf___events>`

- :ref:`Online services <group___cmp_user_mgr_itf___onlineservices>`

- :ref:`Online tags <group___cmp_user_mgr_itf___onlinetags>`

- :ref:`SecuritySettings <group___cmp_user_mgr_itf___security_settings>`

- :ref:`Static defines <group___cmp_user_mgr_itf___staticdefines>`

- :ref:`User management session entry <group___cmp_user_mgr_itf___usermanagementsessionentry>`

Data Structures
---------------

- struct :ref:`ICmpUserMgr_C <struct_i_cmp_user_mgr___c>`

Macros
------

- #define :ref:`ITF_CmpUserMgr <group___cmp_user_mgr_itf_1gab88f7c09dfe09a061e2e65e4956f1637>`

- #define :ref:`EXTITF_CmpUserMgr <group___cmp_user_mgr_itf_1gacb0060492bf0f66e41ce1ab1b7f051fe>`

Typedefs
--------

- typedef :ref:`ICmpUserMgr_C <struct_i_cmp_user_mgr___c>` :ref:`ICmpUserMgr <group___cmp_user_mgr_itf_1ga69bbc71eafd986cdec3b69cd43bbb953>`

Functions
---------

- RTS_HANDLE :ref:`UserMgrLogin <group___cmp_user_mgr_itf_1ga80270babf13f3e227545cbba32125b9b>` (char * pszUser, RTS_RESULT * pResult)

- RTS_RESULT :ref:`UserMgrLogout <group___cmp_user_mgr_itf_1ga8bafb4bb1c23e759da7b0132c588cd92>` (RTS_HANDLE hUser)

- RTS_RESULT :ref:`UserMgrLogoutBySessionId <group___cmp_user_mgr_itf_1gaa9d6ca064a5d54a34d4633d391455741>` (RTS_UI32 ulSessionId)

- RTS_RESULT :ref:`UserMgrCheckPassword <group___cmp_user_mgr_itf_1gafcba0d18affaf1602f6a605ebfac03e1>` (RTS_HANDLE hUser, char * pszPassword)

- RTS_RESULT :ref:`UserMgrGetProperty <group___cmp_user_mgr_itf_1ga7ffe800f744655a046a43db606b9c26a>` (RTS_HANDLE hUser, RTS_UI32 * pulProperty)

- RTS_RESULT :ref:`UserMgrIsGroupMember <group___cmp_user_mgr_itf_1gae962249386d3a00accfd171770f20539>` (char * pszGroup, RTS_HANDLE hUser)

- RTS_UI32 :ref:`UserMgrGetState <group___cmp_user_mgr_itf_1ga2daa8f26e18329819c9710f5134db15c>` (RTS_HANDLE hUser, RTS_RESULT * pResult)

- RTS_RESULT :ref:`UserMgrHasAccessRights <group___cmp_user_mgr_itf_1ga5d11a545de34d03cd0d6cc0f8e6733a4>` (char * pszObject, RTS_UI32 ulSessionId, RTS_UI32 ulRequestedRights)

- RTS_RESULT :ref:`UserMgrGetAccessRights <group___cmp_user_mgr_itf_1ga656e11e35075b93e09d2ca7a56967665>` (char * pszObject, RTS_UI32 ulSessionId, RTS_UI32 * pulRights, RTS_UI32 * pulDeniedRights)

- RTS_RESULT :ref:`UserMgrHasUserAccessRights <group___cmp_user_mgr_itf_1ga3124c60fe0ff5fa27092bd4ceb122d10>` (char * pszObject, RTS_HANDLE hUser, RTS_UI32 ulRequestedRights)

- RTS_RESULT :ref:`UserMgrGetUserAccessRights <group___cmp_user_mgr_itf_1gac9c09641fa7fd6b39e09dcf3f39c433a>` (char * pszObject, RTS_HANDLE hUser, RTS_UI32 * pulRights, RTS_UI32 * pulDeniedRights)

- RTS_RESULT :ref:`UserMgrAddSessionId <group___cmp_user_mgr_itf_1ga646496f21699fe1701c6c741f5e0542b>` (RTS_HANDLE hUser, RTS_UI32 * pulSessionId)

- RTS_RESULT :ref:`UserMgrRemoveSessionId <group___cmp_user_mgr_itf_1ga92a97b07a7e8d61cd49e11df8007b475>` (RTS_UI32 ulSessionId)

- RTS_HANDLE :ref:`UserMgrFindUserBySessionId <group___cmp_user_mgr_itf_1gac36ebd3251499004300db9e53d1b8572>` (RTS_UI32 ulSessionId, RTS_RESULT * pResult)

- RTS_RESULT :ref:`UserMgrAddInfoToUser <group___cmp_user_mgr_itf_1ga621c9ce48b167c9aadf4bb7188c34d79>` (RTS_HANDLE hUser, RTS_SIZE key, RTS_TYPEDVALUE * pValue)

- RTS_RESULT :ref:`UserMgrRemoveInfoFromUser <group___cmp_user_mgr_itf_1ga086c3b0db90ac145d197f64c56c09810>` (RTS_HANDLE hUser, RTS_SIZE key)

- RTS_RESULT :ref:`UserMgrRemoveInfoFromAllUsers <group___cmp_user_mgr_itf_1ga894e70b5aefc4736c825943a9fdd7e26>` (RTS_SIZE key)

- RTS_RESULT :ref:`UserMgrGetInfoOfUser <group___cmp_user_mgr_itf_1ga3248a60285c41178b795da5da760d013>` (RTS_HANDLE hUser, RTS_SIZE key, RTS_TYPEDVALUE * pValue)

- RTS_RESULT :ref:`UserMgrAddOnlineAccessError <group___cmp_user_mgr_itf_1gaddf08a12aea358635a4a9457681a7eaa>` (:ref:`BINTAGWRITER <struct_b_i_n_t_a_g_w_r_i_t_e_r>` * pWriter, RTS_RESULT Result, char * pszObject, RTS_UI32 ulRequestedRights, RTS_UI32 ulSessionID)

- RTS_HANDLE :ref:`UserMgrObjectAdd <group___cmp_user_mgr_itf_1gaa021567cec09ab6cc29943be279b432e>` (char * pszObject, RTS_RESULT * pResult)

- RTS_RESULT :ref:`UserMgrObjectRemove <group___cmp_user_mgr_itf_1ga363c3413dc5373024db05ce129bd3eb1>` (RTS_HANDLE hObject)

- RTS_HANDLE :ref:`UserMgrObjectAddChild <group___cmp_user_mgr_itf_1gaa1aec550d16f1101c2f0d5a556da640b>` (RTS_HANDLE hFatherObject, char * pszObject, RTS_RESULT * pResult)

- RTS_RESULT :ref:`UserMgrObjectSetUsedRights <group___cmp_user_mgr_itf_1ga1b6be0047e6d248e2004b175617ccbe1>` (RTS_HANDLE hObject, RTS_UI32 ulUsedRights)

- RTS_RESULT :ref:`UserMgrObjectGetUsedRights <group___cmp_user_mgr_itf_1gae57cc6e510589eb43c49d6787185e716>` (RTS_HANDLE hObject, RTS_UI32 * pulUsedRights)

- RTS_HANDLE :ref:`UserMgrObjectOpen <group___cmp_user_mgr_itf_1gac80d1200c4e35fa00cfda3d214216209>` (char * pszObject, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`UserMgrObjectOpen2 <group___cmp_user_mgr_itf_1ga53c3ea3e0dfae31bd085371b11caa6d5>` (char * pszObject, RTS_HANDLE hUser, RTS_RESULT * pResult)

- RTS_RESULT :ref:`UserMgrObjectClose <group___cmp_user_mgr_itf_1ga183f82c9a2d5b08929bd5538ee6cc83c>` (RTS_HANDLE hObject)

- RTS_RESULT :ref:`UserMgrGetChallenge <group___cmp_user_mgr_itf_1ga3fb09a22e2014a8db0c6cb9d6d35bd81>` (RTS_UI32 * pulChallenge)

- RTS_RESULT :ref:`UserMgrCryptPassword <group___cmp_user_mgr_itf_1ga3ef36e5728101a8f5c975d4cb4952356>` (char * pszPassword, char * pszPasswordCrypted, int * pnPasswordCryptedSize, RTS_UI32 ulCryptType, RTS_UI32 ulChallenge)

- RTS_RESULT :ref:`UserMgrDecryptPassword <group___cmp_user_mgr_itf_1gad01cecf0fee2a6a5d5bc0d8c2b4a969d>` (char * pszPasswordCrypted, int nPasswordCryptedSize, RTS_UI32 ulCryptType, RTS_UI32 ulChallenge, char * pszPassword, int * pnMaxLenPassword)

.. _group___cmp_user_mgr_itf-details:

Detailed Description
--------------------

Interface of CmpUserMgr.

Interface for the user management component.

The user management in the runtime system is based on ACL (Access Control Lists). Here we have Users and UserGroups and access rights on objects.

Here are the principles of the user management:

1. There are users which are identified by its user name 2. A User can be a member of one or several UserGroups. But at least the user is a member of the group "Everyone". 3. There are some predefined UserGroups, which covers the most typical use cases:

- "Administrator": Administrator group. A member of this groups has all access rights on all objects!

- "Developer": Developer group. A member of this groups has all access to the IEC applications an all related stuff.

- "Service": Service group. A member of this groups has all access to object for maintenance and service operations.

- "Watch": Watch group. A member of this groups has read-only access to the objects.

- "Everyone": Everyone group. A member of this groups has read-only access to the objects.

4. A UserGroup can be derived from another UserGroup an inherits all rights from the base group 5. Every object in the runtime system, that must be protected with access rights is registered dynamically during startup of the runtime by the corresponding component under the appropriate folder. The objects in the runtime system are organized as a tree with 2 root nodes:

- Runtime system object: "Device" | "PlcLogic" | "Application" | "Logger" | "Settings" | "UserManagement"

- Filesystem objects: "/" | "Temp" | "Test.txt"

6. There are 5 different access rights that can be specified at every group for each object:

- USERDB_RIGHT_NONE: Access denied

- USERDB_RIGHT_VIEW: Only view rights on the object. Object cannot be modified in any case!

- USERDB_RIGHT_MODIFY: Object can be viewed and modified

- USERDB_RIGHT_EXECUTE: Object can be executed

- USERDB_RIGHT_ADD_REMOVE: It is allowed to add and remove objects or subobjects

- USERDB_RIGHT_ALL: All rights allowed on the object

**Copyright:**

Copyright (c) 2017-2018 CODESYS GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved.

Macro Definition Documentation
------------------------------
.. _group___cmp_user_mgr_itf_1gab88f7c09dfe09a061e2e65e4956f1637:

#define ITF_CmpUserMgr
^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_user_mgr_itf_1gacb0060492bf0f66e41ce1ab1b7f051fe:

#define EXTITF_CmpUserMgr
^^^^^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___cmp_user_mgr_itf_1ga69bbc71eafd986cdec3b69cd43bbb953:

typedef ICmpUserMgr_C ICmpUserMgr
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function Documentation
----------------------

.. _group___cmp_user_mgr_itf_1ga80270babf13f3e227545cbba32125b9b:

RTS_HANDLE UserMgrLogin (char *pszUser, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Login user on the usermanagement NOTE: The returned handle is not compatible with a handle from the UserDB, and these handles must not be mixed.

**Parameters**

+---------+---------+-----------------------+
| [in]    | pszUser | Name of the user      |
+---------+---------+-----------------------+
| [out]   | pResult | Pointer to error code |
+---------+---------+-----------------------+

**Return values**

+--------------------+-------------------------------------------------------------------+
| ERR_OK             | User is available                                                 |
+--------------------+-------------------------------------------------------------------+
| ERR_PARAMETER      | If pszUser is NULL                                                |
+--------------------+-------------------------------------------------------------------+
| ERR_NOTINITIALIZED | The user management is not initialized or it is not loaded yet    |
+--------------------+-------------------------------------------------------------------+
| ERR_NO_OBJECT      | or ERR_PARAMETER The user is not available in the user management |
+--------------------+-------------------------------------------------------------------+
| ERR_NOMEMORY       | Could not store user information                                  |
+--------------------+-------------------------------------------------------------------+

**Returns:**

Handle to the user or RTS_INVALID_HANDLE if not available

.. _group___cmp_user_mgr_itf_1ga8bafb4bb1c23e759da7b0132c588cd92:

RTS_RESULT UserMgrLogout (RTS_HANDLE hUser)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Logout specified by User NOTE: The requred user handle is not compatible with a handle from the UserDB, and these handles must not be mixed.

**Parameters**

+---------+-------+--------------------+
| [in]    | hUser | Handle to the user |
+---------+-------+--------------------+

**Returns:**

Error code

**Return values**

+--------------------+----------------------------------------+
| ERR_OK             | User is available and logout succeeded |
+--------------------+----------------------------------------+
| ERR_PARAMETER      | If user is not avilable                |
+--------------------+----------------------------------------+
| ERR_INVALID_HANDLE | hUser is invalid or unknown            |
+--------------------+----------------------------------------+

.. _group___cmp_user_mgr_itf_1gaa9d6ca064a5d54a34d4633d391455741:

RTS_RESULT UserMgrLogoutBySessionId (RTS_UI32 ulSessionId)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Logout specified by SessionID

**Parameters**

+---------+-------------+---------------------------------------------------------------------------------------------+
| [in]    | ulSessionId | SessionID of the device online connection (see :ref:`CmpDeviceItf.h <_cmp_device_itf_8h>` ) |
+---------+-------------+---------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+--------------------+----------------------------------------------------------+
| ERR_OK             | SessionID or user is available and logout succeeded      |
+--------------------+----------------------------------------------------------+
| ERR_PARAMETER      | If SessionID or user is not avilable                     |
+--------------------+----------------------------------------------------------+
| ERR_INVALID_HANDLE | Related user handle of the session is invalid or unknown |
+--------------------+----------------------------------------------------------+

.. _group___cmp_user_mgr_itf_1gafcba0d18affaf1602f6a605ebfac03e1:

RTS_RESULT UserMgrCheckPassword (RTS_HANDLE hUser, char *pszPassword)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Check user password against credentials (authentication)! NOTE: The requred user handle is not compatible with a handle from the UserDB, and these handles must not be mixed.

**Parameters**

+---------+-------------+------------------------------------+
| [in]    | hUser       | Handle to the user                 |
+---------+-------------+------------------------------------+
| [in]    | pszPassword | Pointer to the cleartext password! |
+---------+-------------+------------------------------------+

**Returns:**

Error code

**Return values**

+--------------------+---------------------------------------------+
| ERR_OK             | User is available                           |
+--------------------+---------------------------------------------+
| ERR_PARAMETER      | If user is not avilable                     |
+--------------------+---------------------------------------------+
| ERR_FAILED         | If user password does not match credentials |
+--------------------+---------------------------------------------+
| ERR_INVALID_HANDLE | hUser is invalid or unknown                 |
+--------------------+---------------------------------------------+

.. _group___cmp_user_mgr_itf_1ga7ffe800f744655a046a43db606b9c26a:

RTS_RESULT UserMgrGetProperty (RTS_HANDLE hUser, RTS_UI32 *pulProperty)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get properties of a user NOTE: The requred user handle is not compatible with a handle from the UserDB, and these handles must not be mixed.

**Parameters**

+---------+-------------+--------------------------------------------------------------------------------+
| [in]    | hUser       | Handle to the user                                                             |
+---------+-------------+--------------------------------------------------------------------------------+
| [out]   | pulProperty | Pointer to return the properties. For details see category "UserDB properties" |
+---------+-------------+--------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+--------------------+-------------------------------+
| ERR_OK             | Properties could be retrieved |
+--------------------+-------------------------------+
| ERR_PARAMETER      | Property pointer = NULL       |
+--------------------+-------------------------------+
| ERR_INVALID_HANDLE | hUser is invalid or unknown   |
+--------------------+-------------------------------+

.. _group___cmp_user_mgr_itf_1gae962249386d3a00accfd171770f20539:

RTS_RESULT UserMgrIsGroupMember (char *pszGroup, RTS_HANDLE hUser)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Check if the a user is a member of the given group NOTE: The requred user handle is not compatible with a handle from the UserDB, and these handles must not be mixed.

**Parameters**

+---------+----------+--------------------+
| [in]    | pszGroup | Group name         |
+---------+----------+--------------------+
| [in]    | hUser    | Handle to the user |
+---------+----------+--------------------+

**Returns:**

Error code

**Return values**

+--------------------+---------------------------------------------+
| ERR_OK             | The user is a member of the given group     |
+--------------------+---------------------------------------------+
| ERR_FAILED         | The user is not a member of the given group |
+--------------------+---------------------------------------------+
| ERR_INVALID_HANDLE | hUser is invalid or unknown                 |
+--------------------+---------------------------------------------+

.. _group___cmp_user_mgr_itf_1ga2daa8f26e18329819c9710f5134db15c:

RTS_UI32 UserMgrGetState (RTS_HANDLE hUser, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns the user state The returned bitfield shows whether the user is logged in and is authenticated (see category User state) NOTE: The requred user handle is not compatible with a handle from the UserDB, and these handles must not be mixed.

**Parameters**

+---------+---------+-----------------------+
| [in]    | hUser   | Handle to the user    |
+---------+---------+-----------------------+
| [out]   | pResult | Pointer to error code |
+---------+---------+-----------------------+

**Returns:**

User state

**Return values**

+--------------------+-----------------------------+
| ERR_OK             | Success                     |
+--------------------+-----------------------------+
| ERR_INVALID_HANDLE | hUser is invalid or unknown |
+--------------------+-----------------------------+

.. _group___cmp_user_mgr_itf_1ga5d11a545de34d03cd0d6cc0f8e6733a4:

RTS_RESULT UserMgrHasAccessRights (char *pszObject, RTS_UI32 ulSessionId, RTS_UI32 ulRequestedRights)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Check user access rights on the specified object (authorization)!

**Parameters**

+---------+-------------------+---------------------------------------------------------------------------------------------+
| [in]    | pszObject         | Full object name (see object tree)                                                          |
+---------+-------------------+---------------------------------------------------------------------------------------------+
| [in]    | ulSessionId       | SessionID of the device online connection (see :ref:`CmpDeviceItf.h <_cmp_device_itf_8h>` ) |
+---------+-------------------+---------------------------------------------------------------------------------------------+
| [in]    | ulRequestedRights | Requested rights on that object                                                             |
+---------+-------------------+---------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+----------------------+---------------------------------------------------------------------------------------+
| ERR_OK               | If user has the requested rights on the object or if no user management is configured |
+----------------------+---------------------------------------------------------------------------------------+
| ERR_PARAMETER        | If SessionID or user is not avilable or the object does not exist                     |
+----------------------+---------------------------------------------------------------------------------------+
| ERR_FAILED           | If something failed retrieving the access rights                                      |
+----------------------+---------------------------------------------------------------------------------------+
| ERR_NO_ACCESS_RIGHTS | Explicitly denied rights                                                              |
+----------------------+---------------------------------------------------------------------------------------+
| ERR_INVALID_HANDLE   | Related user handle of the session is invalid or unknown                              |
+----------------------+---------------------------------------------------------------------------------------+

.. _group___cmp_user_mgr_itf_1ga656e11e35075b93e09d2ca7a56967665:

RTS_RESULT UserMgrGetAccessRights (char *pszObject, RTS_UI32 ulSessionId, RTS_UI32 *pulRights, RTS_UI32 *pulDeniedRights)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get user access rights on the specified object (authorization)!

**Parameters**

+---------+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pszObject       | Full object name (see object tree)                                                                                                                                                   |
+---------+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ulSessionId     | SessionID of the device online connection (see :ref:`CmpDeviceItf.h <_cmp_device_itf_8h>` )                                                                                          |
+---------+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pulRights       | Pointer to get admitted rights                                                                                                                                                       |
+---------+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pulDeniedRights | Pointer to get denied rights. NOTE: If the required right is denied _and_ admitted on the specified object, the denied right is more significant and so the access must be denied !! |
+---------+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+----------------------+---------------------------------------------------------------------------------------+
| ERR_OK               | If user has the requested rights on the object or if no user management is configured |
+----------------------+---------------------------------------------------------------------------------------+
| ERR_PARAMETER        | If SessionID or user is not avilable or the object does not exist                     |
+----------------------+---------------------------------------------------------------------------------------+
| ERR_FAILED           | If something failed retrieving the access rights                                      |
+----------------------+---------------------------------------------------------------------------------------+
| ERR_NO_ACCESS_RIGHTS | Explicitly denied rights                                                              |
+----------------------+---------------------------------------------------------------------------------------+
| ERR_INVALID_HANDLE   | Related user handle of the session is invalid or unknown                              |
+----------------------+---------------------------------------------------------------------------------------+

.. _group___cmp_user_mgr_itf_1ga3124c60fe0ff5fa27092bd4ceb122d10:

RTS_RESULT UserMgrHasUserAccessRights (char *pszObject, RTS_HANDLE hUser, RTS_UI32 ulRequestedRights)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Check user access rights on the specified object (authorization)! NOTE: The requred user handle is not compatible with a handle from the UserDB, and these handles must not be mixed.

**Parameters**

+---------+-------------------+------------------------------------+
| [in]    | pszObject         | Full object name (see object tree) |
+---------+-------------------+------------------------------------+
| [in]    | hUser             | Handle to the user                 |
+---------+-------------------+------------------------------------+
| [in]    | ulRequestedRights | Requested rights on that object    |
+---------+-------------------+------------------------------------+

**Returns:**

Error code

**Return values**

+----------------------+---------------------------------------------------------------------------------------+
| ERR_OK               | If user has the requested rights on the object or if no user management is configured |
+----------------------+---------------------------------------------------------------------------------------+
| ERR_PARAMETER        | If user is not avilable or the object does not exist                                  |
+----------------------+---------------------------------------------------------------------------------------+
| ERR_FAILED           | If something failed retrieving the access rights                                      |
+----------------------+---------------------------------------------------------------------------------------+
| ERR_NO_ACCESS_RIGHTS | Explicitly denied rights                                                              |
+----------------------+---------------------------------------------------------------------------------------+
| ERR_INVALID_HANDLE   | hUser is invalid or unknown                                                           |
+----------------------+---------------------------------------------------------------------------------------+

.. _group___cmp_user_mgr_itf_1gac9c09641fa7fd6b39e09dcf3f39c433a:

RTS_RESULT UserMgrGetUserAccessRights (char *pszObject, RTS_HANDLE hUser, RTS_UI32 *pulRights, RTS_UI32 *pulDeniedRights)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get user access rights on the specified object (authorization)! NOTE: The requred user handle is not compatible with a handle from the UserDB, and these handles must not be mixed.

**Parameters**

+---------+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pszObject       | Full object name (see object tree)                                                                                                                                                   |
+---------+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hUser           | Handle to the user                                                                                                                                                                   |
+---------+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pulRights       | Pointer to get admitted rights                                                                                                                                                       |
+---------+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pulDeniedRights | Pointer to get denied rights. NOTE: If the required right is denied _and_ admitted on the specified object, the denied right is more significant and so the access must be denied !! |
+---------+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+----------------------+---------------------------------------------------------------------------------------+
| ERR_OK               | If user has the requested rights on the object or if no user management is configured |
+----------------------+---------------------------------------------------------------------------------------+
| ERR_PARAMETER        | If user is not avilable or the object does not exist                                  |
+----------------------+---------------------------------------------------------------------------------------+
| ERR_FAILED           | If something failed retrieving the access rights                                      |
+----------------------+---------------------------------------------------------------------------------------+
| ERR_NO_ACCESS_RIGHTS | Explicitly denied rights                                                              |
+----------------------+---------------------------------------------------------------------------------------+
| ERR_INVALID_HANDLE   | hUser is invalid or unknown                                                           |
+----------------------+---------------------------------------------------------------------------------------+

.. _group___cmp_user_mgr_itf_1ga646496f21699fe1701c6c741f5e0542b:

RTS_RESULT UserMgrAddSessionId (RTS_HANDLE hUser, RTS_UI32 *pulSessionId)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Add online SessionID to the user (bind the user at this session) NOTE: The requred user handle is not compatible with a handle from the UserDB, and these handles must not be mixed.

**Parameters**

+---------+-------------+---------------------------------------------------------------------------------------------+
| [in]    | hUser       | Handle to the user                                                                          |
+---------+-------------+---------------------------------------------------------------------------------------------+
| [in]    | ulSessionId | SessionID of the device online connection (see :ref:`CmpDeviceItf.h <_cmp_device_itf_8h>` ) |
+---------+-------------+---------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+--------------------+---------------------------------------------------------------------------------------+
| ERR_OK             | If user has the requested rights on the object or if no user management is configured |
+--------------------+---------------------------------------------------------------------------------------+
| ERR_NOTINITIALIZED | If CmpUserMgr component is still not initialized                                      |
+--------------------+---------------------------------------------------------------------------------------+
| ERR_NOMEMORY       | Could not store SessionID                                                             |
+--------------------+---------------------------------------------------------------------------------------+

.. _group___cmp_user_mgr_itf_1ga92a97b07a7e8d61cd49e11df8007b475:

RTS_RESULT UserMgrRemoveSessionId (RTS_UI32 ulSessionId)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Remove online SessionID from the user (unbind the user from this session)

**Parameters**

+---------+-------------+---------------------------------------------------------------------------------------------+
| [in]    | hUser       | Handle to the user                                                                          |
+---------+-------------+---------------------------------------------------------------------------------------------+
| [in]    | ulSessionId | SessionID of the device online connection (see :ref:`CmpDeviceItf.h <_cmp_device_itf_8h>` ) |
+---------+-------------+---------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+--------------------+---------------------------------------------------------------------------------------+
| ERR_OK             | If user has the requested rights on the object or if no user management is configured |
+--------------------+---------------------------------------------------------------------------------------+
| ERR_NOTINITIALIZED | If CmpUserMgr component is still not initialized                                      |
+--------------------+---------------------------------------------------------------------------------------+
| ERR_NOMEMORY       | Could not store SessionID                                                             |
+--------------------+---------------------------------------------------------------------------------------+

.. _group___cmp_user_mgr_itf_1gac36ebd3251499004300db9e53d1b8572:

RTS_HANDLE UserMgrFindUserBySessionId (RTS_UI32 ulSessionId, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns the user bound at the SessionID NOTE: The returned handle is not compatible with a handle from the UserDB, and these handles must not be mixed.

**Parameters**

+---------+-------------+---------------------------------------------------------------------------------------------+
| [in]    | ulSessionId | SessionID of the device online connection (see :ref:`CmpDeviceItf.h <_cmp_device_itf_8h>` ) |
+---------+-------------+---------------------------------------------------------------------------------------------+
| [out]   | pResult     | Pointer to error code                                                                       |
+---------+-------------+---------------------------------------------------------------------------------------------+

**Return values**

+--------------------+-------------------------------------------------------------------+
| ERR_OK             | User is available                                                 |
+--------------------+-------------------------------------------------------------------+
| ERR_PARAMETER      | If SessionID is invalid                                           |
+--------------------+-------------------------------------------------------------------+
| ERR_NOTINITIALIZED | The user management is not initialized or it is not loaded yet    |
+--------------------+-------------------------------------------------------------------+
| ERR_NO_OBJECT      | or ERR_PARAMETER The user is not available in the user management |
+--------------------+-------------------------------------------------------------------+

**Returns:**

Handle to the user or RTS_INVALID_HANDLE if not available

.. _group___cmp_user_mgr_itf_1ga621c9ce48b167c9aadf4bb7188c34d79:

RTS_RESULT UserMgrAddInfoToUser (RTS_HANDLE hUser, RTS_SIZE key, RTS_TYPEDVALUE *pValue)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Adds an value to an logged in user. This can be used as some kind of chache that exists as long as the user is logged in.

**Parameters**

+---------+--------+--------------------------------------------------------------------------------------------------+
| [in]    | hUser  | Handle to the user.                                                                              |
+---------+--------+--------------------------------------------------------------------------------------------------+
| [in]    | key    | Access key for the chace value. This has to be used at UserMgrGetInfoOfUser to access the value. |
+---------+--------+--------------------------------------------------------------------------------------------------+
| [in]    | pValue | Value to cache at the user.                                                                      |
+---------+--------+--------------------------------------------------------------------------------------------------+

**Return values**

+---------------+------------------------------------+
| ERR_OK        | Value cached                       |
+---------------+------------------------------------+
| ERR_DUPLICATE | The same key has been used already |
+---------------+------------------------------------+
| ERR_FAILED    | The caching failed                 |
+---------------+------------------------------------+

.. _group___cmp_user_mgr_itf_1ga086c3b0db90ac145d197f64c56c09810:

RTS_RESULT UserMgrRemoveInfoFromUser (RTS_HANDLE hUser, RTS_SIZE key)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Removes a specific chace value from an user.

**Parameters**

+---------+-------+-------------------------+
| [in]    | hUser | Handle to the user.     |
+---------+-------+-------------------------+
| [in]    | key   | Key of the cache value. |
+---------+-------+-------------------------+

**Return values**

+---------------+-----------------------------------------+
| ERR_OK        | Removing cache value successfull        |
+---------------+-----------------------------------------+
| ERR_NO_OBJECT | No cache value with this key available. |
+---------------+-----------------------------------------+
| ERR_FAILED    | Removing cache value failed             |
+---------------+-----------------------------------------+

.. _group___cmp_user_mgr_itf_1ga894e70b5aefc4736c825943a9fdd7e26:

RTS_RESULT UserMgrRemoveInfoFromAllUsers (RTS_SIZE key)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Removes a specific chace value from all logged in users.

**Parameters**

+---------+-----+-------------------------+
| [in]    | key | Key of the cache value. |
+---------+-----+-------------------------+

**Return values**

+------------+----------------------------------+
| ERR_OK     | Removing cache value successfull |
+------------+----------------------------------+
| ERR_FAILED | Removing cache value failed      |
+------------+----------------------------------+

.. _group___cmp_user_mgr_itf_1ga3248a60285c41178b795da5da760d013:

RTS_RESULT UserMgrGetInfoOfUser (RTS_HANDLE hUser, RTS_SIZE key, RTS_TYPEDVALUE *pValue)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Retrieves the value cached using UserMgrAddInfoToUser.

**Parameters**

+---------+--------+-----------------------------+
| [in]    | hUser  | Handle to the user.         |
+---------+--------+-----------------------------+
| [in]    | key    | Key of the cache value.     |
+---------+--------+-----------------------------+
| [in]    | pValue | Value to cache at the user. |
+---------+--------+-----------------------------+

**Return values**

+---------------+-------------------------------------------------------------+
| ERR_OK        | Retrieving cache value successfull. Value copied to pValue. |
+---------------+-------------------------------------------------------------+
| ERR_PARAMETER | Some parameter is invalid                                   |
+---------------+-------------------------------------------------------------+
| ERR_NO_OBJECT | No cache value with this key available.                     |
+---------------+-------------------------------------------------------------+

.. _group___cmp_user_mgr_itf_1gaddf08a12aea358635a4a9457681a7eaa:

RTS_RESULT UserMgrAddOnlineAccessError (BINTAGWRITER *pWriter, RTS_RESULT Result, char *pszObject, RTS_UI32 ulRequestedRights, RTS_UI32 ulSessionID)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Add the error tag to the reply stream of an online service, if the service is denied because of a failed access right (authorization error)!

**Parameters**

+---------+-------------------+---------------------------------------------------------------------------------------------+
| [in]    | pWriter           | Pointer the writer stream                                                                   |
+---------+-------------------+---------------------------------------------------------------------------------------------+
| [in]    | Result            | Result code of the operation                                                                |
+---------+-------------------+---------------------------------------------------------------------------------------------+
| [in]    | pszObject         | Pointer to name of the object, whose access was denied                                      |
+---------+-------------------+---------------------------------------------------------------------------------------------+
| [in]    | ulRequestedRights | Requested rights on the object, which are not enabled                                       |
+---------+-------------------+---------------------------------------------------------------------------------------------+
| [in]    | ulSessionId       | SessionID of the device online connection (see :ref:`CmpDeviceItf.h <_cmp_device_itf_8h>` ) |
+---------+-------------------+---------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+------------+--------------------------------+
| ERR_OK     | Reply tag could be created     |
+------------+--------------------------------+
| ERR_FAILED | Reply tag could not be created |
+------------+--------------------------------+

.. _group___cmp_user_mgr_itf_1gaa021567cec09ab6cc29943be279b432e:

RTS_HANDLE UserMgrObjectAdd (char *pszObject, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Add a new object to the user management, so the access rights can be configured on that object. NOTE: The name of the object must include the full namespace with "Device" as the root node, e.g. "Device.MyObject" or if it's a filesystem object with "/" as the root node.

**Parameters**

+---------+-----------+------------------------------------+
| [in]    | pszObject | Full object name (see object tree) |
+---------+-----------+------------------------------------+
| [out]   | pResult   | Pointer to error code              |
+---------+-----------+------------------------------------+

**Return values**

+--------------------+----------------------------------------------------------------+
| ERR_OK             | Object could be added                                          |
+--------------------+----------------------------------------------------------------+
| ERR_PARAMETER      | Object invalid = NULL or empty                                 |
+--------------------+----------------------------------------------------------------+
| ERR_NOTINITIALIZED | The user management is not initialized or it is not loaded yet |
+--------------------+----------------------------------------------------------------+
| ERR_NOMEMORY       | If memory could not be allocated to store this object          |
+--------------------+----------------------------------------------------------------+

**Returns:**

Handle to the object or RTS_INVALID_HANDLE if it could not be added

.. _group___cmp_user_mgr_itf_1ga363c3413dc5373024db05ce129bd3eb1:

RTS_RESULT UserMgrObjectRemove (RTS_HANDLE hObject)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Remove an object from the user management and all its children

**Parameters**

+---------+---------+------------------+
| [in]    | hObject | Handle to object |
+---------+---------+------------------+

**Returns:**

Error code

**Return values**

+---------------+-------------------------+
| ERR_OK        | Object could be removed |
+---------------+-------------------------+
| ERR_PARAMETER | Invalid object handle   |
+---------------+-------------------------+

.. _group___cmp_user_mgr_itf_1gaa1aec550d16f1101c2f0d5a556da640b:

RTS_HANDLE UserMgrObjectAddChild (RTS_HANDLE hFatherObject, char *pszObject, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Add a new object under a father object specified by its name to the user management, so the access rights can be configured on that object.

**Parameters**

+---------+---------------+-------------------------------------------------------------------+
| [in]    | hFatherObject | Handle to the father object, under which the object will be added |
+---------+---------------+-------------------------------------------------------------------+
| [in]    | pszObject     | Object name (see object tree)                                     |
+---------+---------------+-------------------------------------------------------------------+
| [out]   | pResult       | Pointer to error code                                             |
+---------+---------------+-------------------------------------------------------------------+

**Return values**

+--------------------+----------------------------------------------------------------+
| ERR_OK             | Object could be added                                          |
+--------------------+----------------------------------------------------------------+
| ERR_PARAMETER      | Object invalid = NULL or empty                                 |
+--------------------+----------------------------------------------------------------+
| ERR_NOTINITIALIZED | The user management is not initialized or it is not loaded yet |
+--------------------+----------------------------------------------------------------+
| ERR_NOMEMORY       | If memory could not be allocated to store this object          |
+--------------------+----------------------------------------------------------------+

**Returns:**

Handle to the object or RTS_INVALID_HANDLE if it could not be added

.. _group___cmp_user_mgr_itf_1ga1b6be0047e6d248e2004b175617ccbe1:

RTS_RESULT UserMgrObjectSetUsedRights (RTS_HANDLE hObject, RTS_UI32 ulUsedRights)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Set the used access rights for the object specified by handle. The rights are additionally stored in an internal list. In case USERDB_RIGHT_NONE is passed for ulUsedRights the previously stored rights are retrieved for this object.

**Parameters**

+---------+--------------+-------------------------------------------------------+
| [in]    | hObject      | Handle to the object                                  |
+---------+--------------+-------------------------------------------------------+
| [in]    | ulUsedRights | Used access rights or USERDB_RIGHT_NONE for retrieval |
+---------+--------------+-------------------------------------------------------+

**Return values**

+---------------+-------------------------------------------+
| ERR_OK        | Rights are successfully set               |
+---------------+-------------------------------------------+
| ERR_PARAMETER | Invalid object handle                     |
+---------------+-------------------------------------------+
| ERR_NO_OBJECT | Object was not found for rights retrieval |
+---------------+-------------------------------------------+

**Returns:**

Error code

.. _group___cmp_user_mgr_itf_1gae57cc6e510589eb43c49d6787185e716:

RTS_RESULT UserMgrObjectGetUsedRights (RTS_HANDLE hObject, RTS_UI32 *pulUsedRights)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the used access rights for the object specified by handle. NOTE: In case the used rights are not set the function returns USERDB_RIGHT_ALL.

**Parameters**

+---------+---------------+-------------------------------+
| [in]    | hObject       | Handle to the object          |
+---------+---------------+-------------------------------+
| [out]   | pulUsedRights | Pointer to used access rights |
+---------+---------------+-------------------------------+

**Return values**

+---------------+------------------------------------------+
| ERR_OK        | Rights are successfully set              |
+---------------+------------------------------------------+
| ERR_PARAMETER | Invalid object handle or invalid pointer |
+---------------+------------------------------------------+

**Returns:**

Error code

.. _group___cmp_user_mgr_itf_1gac80d1200c4e35fa00cfda3d214216209:

RTS_HANDLE UserMgrObjectOpen (char *pszObject, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Open an existing object. NOTE: The name of the object must include the full namespace with "Device" as the root node, e.g. "Device.MyObject" or if it's a filesystem object with "/" as the root node.

**Parameters**

+---------+-----------+------------------------------------+
| [in]    | pszObject | Full object name (see object tree) |
+---------+-----------+------------------------------------+
| [out]   | pResult   | Pointer to error code              |
+---------+-----------+------------------------------------+

**Return values**

+---------------+---------------------------------+
| ERR_OK        | Object could be opened          |
+---------------+---------------------------------+
| ERR_PARAMETER | Object not available of invalid |
+---------------+---------------------------------+

**Returns:**

Handle to the object or RTS_INVALID_HANDLE if it is not available

.. _group___cmp_user_mgr_itf_1ga53c3ea3e0dfae31bd085371b11caa6d5:

RTS_HANDLE UserMgrObjectOpen2 (char *pszObject, RTS_HANDLE hUser, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Opens an existing object. Checks if the user is member of at least one group that has access to this object.

**Parameters**

+---------+-----------+------------------------------------+
| [in]    | pszObject | Full object name (see object tree) |
+---------+-----------+------------------------------------+
| [in]    | hUser     | Handle of the logged in user.      |
+---------+-----------+------------------------------------+
| [out]   | pResult   | Pointer to error code              |
+---------+-----------+------------------------------------+

**Return values**

+----------------------+---------------------------------------------------------------+
| ERR_OK               | Object could be opened. User has access rights to the object. |
+----------------------+---------------------------------------------------------------+
| ERR_PARAMETER        | Object not available of invalid.                              |
+----------------------+---------------------------------------------------------------+
| ERR_NO_ACCESS_RIGHTS | User has no access rights to this object.                     |
+----------------------+---------------------------------------------------------------+

**Returns:**

Handle to the object or RTS_INVALID_HANDLE if it is not available or no access rights are existing.

.. _group___cmp_user_mgr_itf_1ga183f82c9a2d5b08929bd5538ee6cc83c:

RTS_RESULT UserMgrObjectClose (RTS_HANDLE hObject)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Close an object

**Parameters**

+---------+---------+------------------+
| [in]    | hObject | Handle to object |
+---------+---------+------------------+

**Returns:**

Error code

**Return values**

+---------------+------------------------+
| ERR_OK        | Object could be closed |
+---------------+------------------------+
| ERR_PARAMETER | Invalid object handle  |
+---------------+------------------------+

.. _group___cmp_user_mgr_itf_1ga3fb09a22e2014a8db0c6cb9d6d35bd81:

RTS_RESULT UserMgrGetChallenge (RTS_UI32 *pulChallenge)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get a new challenge value to encrypt the password

**Parameters**

+---------+--------------+---------------------------------------+
| [out]   | pulChallenge | Pointer to challenge to get the value |
+---------+--------------+---------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+----------------------------------------+
| ERR_OK        | Challenge could be generated           |
+---------------+----------------------------------------+
| ERR_PARAMETER | Invalid parameter: pulChallenge = NULL |
+---------------+----------------------------------------+

.. _group___cmp_user_mgr_itf_1ga3ef36e5728101a8f5c975d4cb4952356:

RTS_RESULT UserMgrCryptPassword (char *pszPassword, char *pszPasswordCrypted, int *pnPasswordCryptedSize, RTS_UI32 ulCryptType, RTS_UI32 ulChallenge)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Encrypt the password specified by crypt type

**Parameters**

+---------+-----------------------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pszPassword           | Cleartext password                                                                                                                                |
+---------+-----------------------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pszPasswordCrypted    | Pointer to get the encrypted password                                                                                                             |
+---------+-----------------------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| [inout] | pnPasswordCryptedSize | Pointer to transmit the buffer length of pszPasswordCrypted or to return the necessary encrypted password length if result code is ERR_BUFFERSIZE |
+---------+-----------------------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ulCryptType           | Crypt type. See category "Crypt types" for details                                                                                                |
+---------+-----------------------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ulChallenge           | Challenge value to encrypt the password                                                                                                           |
+---------+-----------------------+---------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+-------------------+---------------------------------------------------------------------------------------------------------+
| ERR_OK            | Password could be encrypted                                                                             |
+-------------------+---------------------------------------------------------------------------------------------------------+
| ERR_PARAMETER     | At least one parameter is invalid                                                                       |
+-------------------+---------------------------------------------------------------------------------------------------------+
| ERR_NOT_SUPPORTED | Unsupported encryption type                                                                             |
+-------------------+---------------------------------------------------------------------------------------------------------+
| ERR_BUFFERSIZE    | Buffer for pszPasswordCrypted is too short, so the requested length is returned inpnPasswordCryptedSize |
+-------------------+---------------------------------------------------------------------------------------------------------+

.. _group___cmp_user_mgr_itf_1gad01cecf0fee2a6a5d5bc0d8c2b4a969d:

RTS_RESULT UserMgrDecryptPassword (char *pszPasswordCrypted, int nPasswordCryptedSize, RTS_UI32 ulCryptType, RTS_UI32 ulChallenge, char *pszPassword, int *pnMaxLenPassword)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Decrypt the password specified by crypt type

**Parameters**

+---------+----------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pszPasswordCrypted   | Encrypted password                                                                                                                         |
+---------+----------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | nPasswordCryptedSize | Lenght of the encrypted password                                                                                                           |
+---------+----------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ulCryptType          | Crypt type. See category "Crypt types" for details                                                                                         |
+---------+----------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ulChallenge          | Challenge value to encrypt the password                                                                                                    |
+---------+----------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pszPassword          | Cleartext password                                                                                                                         |
+---------+----------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| [inout] | pnMaxLenPassword     | Pointer to transmit the buffer length of pszPassword or to return the necessary decrypted password length if result code is ERR_BUFFERSIZE |
+---------+----------------------+--------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+-------------------+---------------------------------------------------------------------------------------------+
| ERR_OK            | Password could be decrypted                                                                 |
+-------------------+---------------------------------------------------------------------------------------------+
| ERR_PARAMETER     | At least one parameter is invalid                                                           |
+-------------------+---------------------------------------------------------------------------------------------+
| ERR_NOT_SUPPORTED | Unsupported decryption type                                                                 |
+-------------------+---------------------------------------------------------------------------------------------+
| ERR_BUFFERSIZE    | Buffer for pszPassword is too short, so the requested length is returned inpnMaxLenPassword |
+-------------------+---------------------------------------------------------------------------------------------+

.. last line of group.rst template
.. last line of composition.rst template


