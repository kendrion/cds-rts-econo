.. first line of composition.rst template

.. first line of group.rst template

.. _group___c_m_utils_itf:

==========
CMUtilsItf
==========

Interface of CmpMgrUtils. :ref:`More... <group___c_m_utils_itf-details>`

Modules
-------

- :ref:`ComponentNameFlags <group___c_m_utils_itf___component_name_flags>`

- :ref:`Copy mode <group___c_m_utils_itf___copymode>`

- :ref:`RTS_STRING_CLASS <group___c_m_utils_itf___r_t_s___s_t_r_i_n_g___c_l_a_s_s>`

- :ref:`Static defines <group___c_m_utils_itf___staticdefines>`

Data Structures
---------------

- struct :ref:`ICMUtils_C <struct_i_c_m_utils___c>`

Macros
------

- #define :ref:`RTS_WTEXT <group___c_m_utils_itf_1gacde2410cedc704ef7fdfc30f798940e3>` :ref:`__RTS_WTEXT <group___c_m_utils_itf_1ga873c78b3e717d2ec424f82ca8f9020a2>` (s)

- #define :ref:`__RTS_WTEXT <group___c_m_utils_itf_1ga873c78b3e717d2ec424f82ca8f9020a2>` L ## s

- #define :ref:`RTS_WTEXT_EMPTY <group___c_m_utils_itf_1ga93c173c16e86cf09caf17a98a6e2ad7c>` :ref:`RTS_WTEXT <group___c_m_utils_itf_1gacde2410cedc704ef7fdfc30f798940e3>` ("\0")

- #define :ref:`RTS_CWTEXT <group___c_m_utils_itf_1gadfba379f47a2f5358da3fa225c28fef1>` s

- #define :ref:`RTS_RINGBUFFER_STRUCT <group___c_m_utils_itf_1gab5255105f5430b6db1c35052f9298efe>` struct { \
RTS_UI32 uiReadPos; \
RTS_UI32 uiWritePos; \
RTS_UI8 ucBuf[size]; \
}

- #define :ref:`RTS_RINGBUFFER_INIT <group___c_m_utils_itf_1gac7e522d897697eaafaf6b631531e5472>` (rbuf.uiReadPos = rbuf.uiWritePos = 0)

- #define :ref:`RTS_RINGBUFFER_GET_FILL_SIZE <group___c_m_utils_itf_1gad47d89c0308e09d36eac69cc3f0bd644>` ( (sizeof(rbuf.ucBuf) - rbuf.uiReadPos + rbuf.uiWritePos) % sizeof(rbuf.ucBuf) )

- #define :ref:`RTS_RINGBUFFER_GET_FREE_SIZE <group___c_m_utils_itf_1gab3464fee8a13d1f36c297cb5d0ad4a77>` ( (sizeof(rbuf.ucBuf) + rbuf.uiReadPos - rbuf.uiWritePos -1) % sizeof(rbuf.ucBuf) )

- #define :ref:`RTS_RINGBUFFER_READ <group___c_m_utils_itf_1ga958863b3c3b878ffd954ebd15d4dd436>` do{\
RTS_UI32 sizeSectionA, sizeSectionB;\
sizeSectionA = MIN(sizeof(rbuf.ucBuf) - rbuf.uiReadPos, sizeToRead);\
sizeSectionB = sizeToRead - sizeSectionA;\
memcpy(dest, &rbuf.ucBuf[rbuf.uiReadPos], sizeSectionA);\
memcpy(dest + sizeSectionA, &rbuf.ucBuf[0], sizeSectionB);\
rbuf.uiReadPos = (rbuf.uiReadPos + sizeToRead) % sizeof(rbuf.ucBuf);\
}while(0)

- #define :ref:`RTS_RINGBUFFER_READB <group___c_m_utils_itf_1gafaf454f281b6434037b6dfbfc0f5509a>` do{\
:ref:`c <group___cmp_c_a_a_storage_dep_1gacd88f945c2d129ce6a734b5952d90324>` = rbuf.ucBuf[rbuf.uiReadPos];\
rbuf.uiReadPos = (rbuf.uiReadPos + 1) % sizeof(rbuf.ucBuf);\
}while(0)

- #define :ref:`RTS_RINGBUFFER_WRITE <group___c_m_utils_itf_1ga6bb0ba7a08ce9eb3f1c7f4d3ef7e6529>` do{\
RTS_UI32 sizeSectionA, sizeSectionB;\
sizeSectionA = MIN(sizeof(rbuf.ucBuf) - rbuf.uiWritePos, sizeToWrite);\
sizeSectionB = sizeToWrite - sizeSectionA;\
memcpy(&rbuf.ucBuf[rbuf.uiWritePos], src, sizeSectionA);\
memcpy(&rbuf.ucBuf[0], src + sizeSectionA, sizeSectionB);\
rbuf.uiWritePos = (rbuf.uiWritePos + sizeToWrite) % sizeof(rbuf.ucBuf);\
}while(0)

- #define :ref:`RTS_RINGBUFFER_WRITEB <group___c_m_utils_itf_1gae91514facba590a7e1784392df417ab8>` do{\
rbuf.ucBuf[rbuf.uiWritePos] = :ref:`c <group___cmp_c_a_a_storage_dep_1gacd88f945c2d129ce6a734b5952d90324>` ;\
rbuf.uiWritePos = (rbuf.uiWritePos + 1) % sizeof(rbuf.ucBuf);\
}while(0)

- #define :ref:`MAX_LONG_BIN_STRING_LEN <group___c_m_utils_itf_1ga7ceb3baf9a45346a6e76582ce69736f4>` (sizeof(RTS_I32) * 8 + 1)

- #define :ref:`MAX_LONG_DEC_STRING_LEN <group___c_m_utils_itf_1ga5c59b96ddfd13840423d7cde0efa6830>` 11

- #define :ref:`MAX_LONG_HEX_STRING_LEN <group___c_m_utils_itf_1gad7c6d3495166ac9aace972f7e8ae9b5b>` 11

- #define :ref:`MAX_ULONG_BIN_STRING_LEN <group___c_m_utils_itf_1ga77aef42cd557cf411142e3919bc34090>` (sizeof(RTS_UI32) * 8 + 1)

- #define :ref:`MAX_ULONG_DEC_STRING_LEN <group___c_m_utils_itf_1gab3e75c3acc596fd00b7adaa5bbfd986f>` 11

- #define :ref:`MAX_ULONG_HEX_STRING_LEN <group___c_m_utils_itf_1gaff6157ff059997e78b35cab661476ada>` 11

- #define :ref:`MAX_GUID_STRING_LEN <group___c_m_utils_itf_1gab20b0ac701361d7d77c3149900bf69e2>` 38

- #define :ref:`CM_PSTRING_GET_CONTENT <group___c_m_utils_itf_1ga7b2e8a1e3bddf3a49ec81429fdcc738f>` (pString == NULL ? default : ( ((( :ref:`RTS_STRING_CLASS <group___c_m_utils_itf___r_t_s___s_t_r_i_n_g___c_l_a_s_s_1gadd8358e9845261633158109ee2d721b0>` *)pString)->ulFlags & :ref:`RTS_STRING_DYNAMIC <group___c_m_utils_itf___component_name_flags_1gafc4946f3306228537866e9df2642730a>` ) ? (( :ref:`RTS_STRING_CLASS <group___c_m_utils_itf___r_t_s___s_t_r_i_n_g___c_l_a_s_s_1gadd8358e9845261633158109ee2d721b0>` *)pString)->name.psz : (( :ref:`RTS_STRING_CLASS <group___c_m_utils_itf___r_t_s___s_t_r_i_n_g___c_l_a_s_s_1gadd8358e9845261633158109ee2d721b0>` *)pString)->name.sz) )

- #define :ref:`CM_STRING_GET_CONTENT <group___c_m_utils_itf_1ga2a3ac6ac5f81928575782b370cdce882>` :ref:`CM_PSTRING_GET_CONTENT <group___c_m_utils_itf_1ga7b2e8a1e3bddf3a49ec81429fdcc738f>` (&string, NULL)

- #define :ref:`CM_PSTRING_GET_SIZE <group___c_m_utils_itf_1gaa8cfb2dcf0bf564ae546445cbf101716>` (pString == NULL ? 0 : (( :ref:`RTS_STRING_CLASS <group___c_m_utils_itf___r_t_s___s_t_r_i_n_g___c_l_a_s_s_1gadd8358e9845261633158109ee2d721b0>` *)pString)->size)

- #define :ref:`CM_STRING_GET_SIZE <group___c_m_utils_itf_1ga8c687c0ab2d39510df20f46902b3c0e7>` (&string)

- #define :ref:`ITF_CMUtils <group___c_m_utils_itf_1ga4ff85fe8755eb599454b7dc813211102>`

- #define :ref:`EXTITF_CMUtils <group___c_m_utils_itf_1gabf755e8f2c503950751f14e09795e42b>`

Typedefs
--------

- typedef :ref:`ICMUtils_C <struct_i_c_m_utils___c>` :ref:`ICMUtils <group___c_m_utils_itf_1gaf07a95e64a604c62242eae7873ff3124>`

Functions
---------

- char * :ref:`CMUtlSkipWhiteSpace <group___c_m_utils_itf_1ga3d8335358b18dc7cba3013dd70b03b31>` (char * psz)

- char * :ref:`CMUtlLtoa <group___c_m_utils_itf_1ga45a5ec6711e706f2f2d5c33694db8bce>` (RTS_I32 lValue, char * pszString, int nMaxLen, int iBase, RTS_RESULT * pResult)

- RTS_RESULT :ref:`CMUtlStringToVersion <group___c_m_utils_itf_1gaca2ffebd26430628064916303bd09ead>` (char * pszVersion, RTS_UI32 * pui32Version)

- RTS_RESULT :ref:`CMUtlVersionToString <group___c_m_utils_itf_1ga376cb0557e5b2f0772abedfff68c6001>` (RTS_UI32 ui32Version, char * pszVersion, RTS_SIZE nMaxLen)

- char * :ref:`CMUtlUltoa <group___c_m_utils_itf_1ga9412987680570eb4cfd94c1ea28aef01>` (RTS_UI32 ulValue, char * pszString, int nMaxLen, int iBase, RTS_RESULT * pResult)

- char * :ref:`CMUtlStrrev <group___c_m_utils_itf_1gab9631ca8a993256c3d402890c7100b5e>` (char * psz)

- char * :ref:`CMUtlStrRChr <group___c_m_utils_itf_1ga9fc6a2323171525cc477f9b9a640b1d1>` (char * pszString, char * pszBegin, char cFind)

- int :ref:`CMUtlStrICmp <group___c_m_utils_itf_1ga39772608464aee9ad83d6c8e4c00bd94>` (char * pszString1, char * pszString2)

- int :ref:`CMUtlStrNICmp <group___c_m_utils_itf_1ga5a4ae69ac5c46023e542e535f56a8021>` (char * pszString1, char * pszString2, RTS_SIZE n)

- char * :ref:`CMUtlStrIStr <group___c_m_utils_itf_1gaa8438dc4724c8e0050a8e7b184096670>` (const char * pszString, const char * pszStringToFind)

- char * :ref:`CMUtlStrlwr <group___c_m_utils_itf_1gafe96baa9d5c36668d9c81212cb50d3c6>` (char * pszString)

- char * :ref:`CMUtlStrupr <group___c_m_utils_itf_1gaf484c4a17790ff9b48349d87465da708>` (char * pszString)

- RTS_RESULT :ref:`CMUtlSafeStrCpy <group___c_m_utils_itf_1ga3d05cb841b6d7bcd6b59e1abe45211d5>` (char * pszDest, RTS_SIZE nDestSize, const char * pszSrc)

- RTS_RESULT :ref:`CMUtlSafeStrCpy2 <group___c_m_utils_itf_1gaa28631a47989639de8396f4d50b133f7>` (char * pszDest, RTS_SIZE nDestSize, const char * pszSrc, int nCopyMode)

- RTS_RESULT :ref:`CMUtlSafeStrNCpy <group___c_m_utils_itf_1ga57d31a9ee3b3ca44a12044874b644944>` (char * pszDest, RTS_SIZE nDestSize, const char * pszSrc, RTS_SIZE nBytesCopy)

- RTS_RESULT :ref:`CMUtlSafeStrCat <group___c_m_utils_itf_1gac68729609618e1def1d5b198bd4c2af6>` (char * pszDest, RTS_SIZE nDestSize, const char * pszSrc)

- RTS_SIZE :ref:`CMUtlStrLen <group___c_m_utils_itf_1gad6cec8b7ff1fa02a0b8a356f1c86ddc1>` (char * str)

- RTS_SIZE :ref:`CMUtlStrNLen <group___c_m_utils_itf_1ga8a1114a1c443e604ac49ba45df3d3cb4>` (char * str, RTS_SIZE nMaxSize)

- char * :ref:`CMUtlStrToLower <group___c_m_utils_itf_1ga3486e83ae83520a9eed23bcbc0e72deb>` (char * psz)

- char * :ref:`CMUtlStrToUpper <group___c_m_utils_itf_1ga197b037c42382e55e5e9fa39bf2b94eb>` (char * psz)

- RTS_RESULT :ref:`CMUtlvsnprintf <group___c_m_utils_itf_1gab3cccec9a9b6340dde1669a8f7a5b85c>` (char * pszStr, RTS_SIZE ulStrSize, const char * pszFormat, va_list * pargList)

- RTS_RESULT :ref:`CMUtlsnprintf <group___c_m_utils_itf_1ga3dc57055ef9d11cd939a354f18855e66>` (char * pszStr, RTS_SIZE ulStrSize, const char * pszFormat, ...)

- void * :ref:`CMUtlMemCpy <group___c_m_utils_itf_1gae1aa8e307c33731ecf31cf0540329311>` (void * pDest, const void * pSrc, RTS_SIZE ulToCopy)

- RTS_RESULT :ref:`CMUtlSafeMemCpy <group___c_m_utils_itf_1ga3cc88552be6888adecbf431ea711ee06>` (void * pDest, RTS_SIZE ulDestSize, const void * pSrc, RTS_SIZE ulToCopy)

- RTS_RESULT :ref:`CMUtlSafeMemMove <group___c_m_utils_itf_1ga184baecdca09d72f7678633320285c73>` (void * pDest, RTS_SIZE ulDestSize, const void * pSrc, RTS_SIZE ulToCopy)

- RTS_RESULT :ref:`CMUtlGUIDToString <group___c_m_utils_itf_1gada0dd1310b02869b562382e0d8635662>` (RTS_GUID * pguid, char * pszGUID, RTS_SIZE nMaxLen)

- RTS_RESULT :ref:`CMUtlStringToGUID <group___c_m_utils_itf_1gac34ac1c55502bb08ae9b917fc4546767>` (char * pszGUID, RTS_GUID * pguid)

- RTS_RESULT :ref:`CMStringCreate <group___c_m_utils_itf_1ga22f7290a6dea7fddfb80d4f4826a6c5e>` (:ref:`RTS_STRING_CLASS <group___c_m_utils_itf___r_t_s___s_t_r_i_n_g___c_l_a_s_s_1gadd8358e9845261633158109ee2d721b0>` * pString, char * pszComponentName, char * pszInit)

- RTS_RESULT :ref:`CMStringCreate2 <group___c_m_utils_itf_1gab0597b62f2589ad6b17961ae52cca00a>` (:ref:`RTS_STRING_CLASS <group___c_m_utils_itf___r_t_s___s_t_r_i_n_g___c_l_a_s_s_1gadd8358e9845261633158109ee2d721b0>` * pString, char * pszComponentName, char * pszInit, RTS_BOOL bAllocDynamic)

- RTS_RESULT :ref:`CMStringDelete <group___c_m_utils_itf_1ga4b49e9d78e0a500367c53038c2b18929>` (:ref:`RTS_STRING_CLASS <group___c_m_utils_itf___r_t_s___s_t_r_i_n_g___c_l_a_s_s_1gadd8358e9845261633158109ee2d721b0>` * pString)

- RTS_RESULT :ref:`CMStringExtend <group___c_m_utils_itf_1ga01596eeac01110f009bbb2e243c13224>` (:ref:`RTS_STRING_CLASS <group___c_m_utils_itf___r_t_s___s_t_r_i_n_g___c_l_a_s_s_1gadd8358e9845261633158109ee2d721b0>` * pString, RTS_SIZE size)

- RTS_RESULT :ref:`CMStringCopy <group___c_m_utils_itf_1gadf4f7e87ed1732acac6cc86634394c9f>` (:ref:`RTS_STRING_CLASS <group___c_m_utils_itf___r_t_s___s_t_r_i_n_g___c_l_a_s_s_1gadd8358e9845261633158109ee2d721b0>` * pString, char * pszSrc, RTS_SIZE nSrcLen)

- int :ref:`CMUtlwstrcmp <group___c_m_utils_itf_1gac5bf599fa93b8a094915c1e7e3142da1>` (const RTS_WCHAR * pwsz1, const RTS_WCHAR * pwsz2)

- int :ref:`CMUtlwstrncmp <group___c_m_utils_itf_1ga92b781bb5a34cabddabef0c715a9f829>` (const RTS_WCHAR * pwsz1, const RTS_WCHAR * pwsz2, RTS_SIZE nCount)

- RTS_RESULT :ref:`CMUtlwstrcpy <group___c_m_utils_itf_1ga7890cc24bcd8748857c2e8bafc7793f1>` (RTS_WCHAR * pwszDest, RTS_SIZE nDestSize, const RTS_WCHAR * pwszSrc)

- RTS_RESULT :ref:`CMUtlwstrcat <group___c_m_utils_itf_1ga1b80f532e4b8e4fb7e182a0c7feb8903>` (RTS_WCHAR * pwszDest, RTS_SIZE nDestSize, const RTS_WCHAR * pwszSrc)

- RTS_RESULT :ref:`CMUtlwstrncpy <group___c_m_utils_itf_1ga072eeb262261b08149ed271826bbcaaa>` (RTS_WCHAR * pwszDest, RTS_SIZE nDestSize, const RTS_WCHAR * pwszSrc, RTS_SIZE n)

- RTS_SIZE :ref:`CMUtlwstrlen <group___c_m_utils_itf_1ga7472d7fc24e588a05f531c435946418e>` (const RTS_WCHAR * pwsz)

- RTS_WCHAR * :ref:`CMUtlwtolower <group___c_m_utils_itf_1gac8434e87fddd1294b0a9887744a0f555>` (RTS_WCHAR * pwsz)

- RTS_WCHAR * :ref:`CMUtlwtoupper <group___c_m_utils_itf_1gadb7e9096f88b3f20755f8f6b287427a1>` (RTS_WCHAR * pwsz)

- RTS_RESULT :ref:`CMUtlStrToW <group___c_m_utils_itf_1gaa9826bd48ff37dfd357ad1893e676ff4>` (const char * pszSrc, RTS_WCHAR * pwszDest, RTS_SIZE nDestSize)

- RTS_RESULT :ref:`CMUtlWToStr <group___c_m_utils_itf_1gaaff0d78459e6922d37d8aab13f2bc708>` (const RTS_WCHAR * pwszSrc, char * pszDest, RTS_SIZE nDestSize)

- RTS_WCHAR * :ref:`CMUtlwstrchr <group___c_m_utils_itf_1ga7e6c9f82ee7609a35bb23318e16c1ec5>` (const RTS_WCHAR * pwsz, RTS_WCHAR w)

- RTS_RESULT :ref:`CMUtlWToUtf8 <group___c_m_utils_itf_1ga3f1edd84a32b6a9f0a00266a6b140399>` (RTS_WCHAR * pwsz, RTS_SIZE wstrLen, RTS_UI8 * pUtf8Str, RTS_SIZE bufferSize)

- RTS_RESULT :ref:`CMUtlUtf8ToW <group___c_m_utils_itf_1ga5f6e129b157774bfdace4e9d32f803d9>` (RTS_UI8 * pUtf8Str, RTS_SIZE utf8BufferSize, RTS_WCHAR * pwsz, RTS_SIZE wstrLen)

- int :ref:`CMUtlcwstrcmp <group___c_m_utils_itf_1ga19f32fabee7740573b95085e0dcf1ffe>` (const RTS_CWCHAR * pwsz1, const RTS_CWCHAR * pwsz2)

- RTS_RESULT :ref:`CMUtlcwstrcpy <group___c_m_utils_itf_1ga45e8180fa576440b486ba75aa8bcaecd>` (RTS_CWCHAR * pwszDest, RTS_SIZE nDestSize, const RTS_CWCHAR * pwszSrc)

- RTS_RESULT :ref:`CMUtlcwstrcat <group___c_m_utils_itf_1gad30402108a6bb5c1efdd16cca18cfc59>` (RTS_CWCHAR * pwszDest, RTS_SIZE nDestSize, const RTS_CWCHAR * pwszSrc)

- RTS_RESULT :ref:`CMUtlcwstrncpy <group___c_m_utils_itf_1gaab9d32d51be9e780c3f1ae03414e4363>` (RTS_CWCHAR * pwszDest, RTS_SIZE nDestSize, const RTS_CWCHAR * pwszSrc, RTS_SIZE n)

- RTS_SIZE :ref:`CMUtlcwstrlen <group___c_m_utils_itf_1ga93fc44d05f10fa95f85c5d2185fe5d74>` (const RTS_CWCHAR * pwsz)

- RTS_CWCHAR * :ref:`CMUtlcwtolower <group___c_m_utils_itf_1gadec49ad81727beb97890901d5ebb12f8>` (RTS_CWCHAR * pwsz)

- RTS_CWCHAR * :ref:`CMUtlcwtoupper <group___c_m_utils_itf_1gab6383754663421743cd7f9ac6d72a56e>` (RTS_CWCHAR * pwsz)

- RTS_RESULT :ref:`CMUtlStrToCW <group___c_m_utils_itf_1ga448ae98ba43012745004b97987e4ec7e>` (const char * pszSrc, RTS_CWCHAR * pwszDest, RTS_SIZE nDestSize)

- RTS_RESULT :ref:`CMUtlCWToStr <group___c_m_utils_itf_1gafaa2e9d1b36160757dbbb47bb5dfd81e>` (const RTS_CWCHAR * pwszSrc, char * pszDest, RTS_SIZE nDestSize)

- RTS_CWCHAR * :ref:`CMUtlcwstrchr <group___c_m_utils_itf_1ga3ecc52a47e4305bdca90fa7be65da6ba>` (const RTS_CWCHAR * pwsz, RTS_CWCHAR cw)

- RTS_SIZE :ref:`CMUtlBinarySearch_UI32 <group___c_m_utils_itf_1ga09ab0c1ec801767417c5b91c49f36515>` (RTS_UI8 * pui8SearchArray, RTS_SIZE siSearchArraySize, RTS_SIZE siSearchElementSize, RTS_SIZE siSearchElementKeyOffset, RTS_SIZE siMin, RTS_UI32 ui32Key, RTS_RESULT * pResult)

.. _group___c_m_utils_itf-details:

Detailed Description
--------------------

Interface of CmpMgrUtils.

Interface for utility functions of the component manager

The utility functions can be used by all components, because they are always included in the component manager.

**Copyright:**

Copyright (c) 2017-2018 CODESYS GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved.

Macro Definition Documentation
------------------------------
.. _group___c_m_utils_itf_1gacde2410cedc704ef7fdfc30f798940e3:

#define RTS_WTEXT :ref:`__RTS_WTEXT <group___c_m_utils_itf_1ga873c78b3e717d2ec424f82ca8f9020a2>` (s)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_itf_1ga873c78b3e717d2ec424f82ca8f9020a2:

#define __RTS_WTEXT L ## s
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_itf_1ga93c173c16e86cf09caf17a98a6e2ad7c:

#define RTS_WTEXT_EMPTY :ref:`RTS_WTEXT <group___c_m_utils_itf_1gacde2410cedc704ef7fdfc30f798940e3>` ("\0")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_itf_1gadfba379f47a2f5358da3fa225c28fef1:

#define RTS_CWTEXT s
^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_itf_1gab5255105f5430b6db1c35052f9298efe:

#define RTS_RINGBUFFER_STRUCT
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Value:**

.. parsed-literal::

    struct { \\
    RTS_UI32 uiReadPos; \\
    RTS_UI32 uiWritePos; \\
    RTS_UI8 ucBuf[size]; \\
    }

Definition of lock free ring buffer

.. _group___c_m_utils_itf_1gac7e522d897697eaafaf6b631531e5472:

#define RTS_RINGBUFFER_INIT (rbuf.uiReadPos = rbuf.uiWritePos = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Ring buffer initialization

.. _group___c_m_utils_itf_1gad47d89c0308e09d36eac69cc3f0bd644:

#define RTS_RINGBUFFER_GET_FILL_SIZE ( (sizeof(rbuf.ucBuf) - rbuf.uiReadPos + rbuf.uiWritePos) % sizeof(rbuf.ucBuf) )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the length of written data in ring buffer, must be called before reading from buffer!

.. _group___c_m_utils_itf_1gab3464fee8a13d1f36c297cb5d0ad4a77:

#define RTS_RINGBUFFER_GET_FREE_SIZE ( (sizeof(rbuf.ucBuf) + rbuf.uiReadPos - rbuf.uiWritePos -1) % sizeof(rbuf.ucBuf) )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the length of available space in ring buffer, must be called before writing into buffer! Always return one byte less than actual space size to avoid collision.

.. _group___c_m_utils_itf_1ga958863b3c3b878ffd954ebd15d4dd436:

#define RTS_RINGBUFFER_READ
^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Value:**

.. parsed-literal::

    do{\\
    RTS_UI32 sizeSectionA, sizeSectionB;\\
    sizeSectionA = MIN(sizeof(rbuf.ucBuf) - rbuf.uiReadPos, sizeToRead);\\
    sizeSectionB = sizeToRead - sizeSectionA;\\
    memcpy(dest, &rbuf.ucBuf[rbuf.uiReadPos], sizeSectionA);\\
    memcpy(dest + sizeSectionA, &rbuf.ucBuf[0], sizeSectionB);\\
    rbuf.uiReadPos = (rbuf.uiReadPos + sizeToRead) % sizeof(rbuf.ucBuf);\\
    }while(0)

Read data from ring buffer. sizeToRead is the actual data length to be read from the buffer! Comparison between filled data length in buffer and the length needs to be read must be done before calling this function! Example: sizeToRead = MIN( :ref:`RTS_RINGBUFFER_GET_FILL_SIZE(rbuf) <group___c_m_utils_itf_1gad47d89c0308e09d36eac69cc3f0bd644>` , usSize); :ref:`RTS_RINGBUFFER_READ(dest, rbuf, sizeToRead) <group___c_m_utils_itf_1ga958863b3c3b878ffd954ebd15d4dd436>` ;

.. _group___c_m_utils_itf_1gafaf454f281b6434037b6dfbfc0f5509a:

#define RTS_RINGBUFFER_READB
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Value:**

.. parsed-literal::

    do{\\
    :ref:`c <group___cmp_c_a_a_storage_dep_1gacd88f945c2d129ce6a734b5952d90324>` = rbuf.ucBuf[rbuf.uiReadPos];\\
    rbuf.uiReadPos = (rbuf.uiReadPos + 1) % sizeof(rbuf.ucBuf);\\
    }while(0)

Read single byte of data from ring buffer.

.. _group___c_m_utils_itf_1ga6bb0ba7a08ce9eb3f1c7f4d3ef7e6529:

#define RTS_RINGBUFFER_WRITE
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Value:**

.. parsed-literal::

    do{\\
    RTS_UI32 sizeSectionA, sizeSectionB;\\
    sizeSectionA = MIN(sizeof(rbuf.ucBuf) - rbuf.uiWritePos, sizeToWrite);\\
    sizeSectionB = sizeToWrite - sizeSectionA;\\
    memcpy(&rbuf.ucBuf[rbuf.uiWritePos], src, sizeSectionA);\\
    memcpy(&rbuf.ucBuf[0], src + sizeSectionA, sizeSectionB);\\
    rbuf.uiWritePos = (rbuf.uiWritePos + sizeToWrite) % sizeof(rbuf.ucBuf);\\
    }while(0)

Write data into ring buffer. sizeToWrite is the actual data length to be written into the buffer! Comparison between free buffer length and the length needs to be written must be done before calling this function! Example: sizeToWrite = MIN( :ref:`RTS_RINGBUFFER_GET_FREE_SIZE(rbuf) <group___c_m_utils_itf_1gab3464fee8a13d1f36c297cb5d0ad4a77>` , usSize); :ref:`RTS_RINGBUFFER_WRITE(src, rbuf, sizeToWrite) <group___c_m_utils_itf_1ga6bb0ba7a08ce9eb3f1c7f4d3ef7e6529>` ;

.. _group___c_m_utils_itf_1gae91514facba590a7e1784392df417ab8:

#define RTS_RINGBUFFER_WRITEB
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Value:**

.. parsed-literal::

    do{\\
    rbuf.ucBuf[rbuf.uiWritePos] = :ref:`c <group___cmp_c_a_a_storage_dep_1gacd88f945c2d129ce6a734b5952d90324>` ;\\
    rbuf.uiWritePos = (rbuf.uiWritePos + 1) % sizeof(rbuf.ucBuf);\\
    }while(0)

Write single byte of data into ring buffer.

.. _group___c_m_utils_itf_1ga7ceb3baf9a45346a6e76582ce69736f4:

#define MAX_LONG_BIN_STRING_LEN (sizeof(RTS_I32) * 8 + 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Maximum length of the long binary string

.. _group___c_m_utils_itf_1ga5c59b96ddfd13840423d7cde0efa6830:

#define MAX_LONG_DEC_STRING_LEN 11
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Maximum length of the long decimal string

.. _group___c_m_utils_itf_1gad7c6d3495166ac9aace972f7e8ae9b5b:

#define MAX_LONG_HEX_STRING_LEN 11
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Maximum length of the long hexadecimal string

.. _group___c_m_utils_itf_1ga77aef42cd557cf411142e3919bc34090:

#define MAX_ULONG_BIN_STRING_LEN (sizeof(RTS_UI32) * 8 + 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Maximum length of the unsigned long binary string

.. _group___c_m_utils_itf_1gab3e75c3acc596fd00b7adaa5bbfd986f:

#define MAX_ULONG_DEC_STRING_LEN 11
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Maximum length of the unsigned long decimal string

.. _group___c_m_utils_itf_1gaff6157ff059997e78b35cab661476ada:

#define MAX_ULONG_HEX_STRING_LEN 11
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Maximum length of the long unsigned hexadecimal string

.. _group___c_m_utils_itf_1gab20b0ac701361d7d77c3149900bf69e2:

#define MAX_GUID_STRING_LEN 38
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Maximum legth of the GUID string

.. _group___c_m_utils_itf_1ga7b2e8a1e3bddf3a49ec81429fdcc738f:

#define CM_PSTRING_GET_CONTENT (pString == NULL ? default : ( ((( :ref:`RTS_STRING_CLASS <group___c_m_utils_itf___r_t_s___s_t_r_i_n_g___c_l_a_s_s_1gadd8358e9845261633158109ee2d721b0>` *)pString)->ulFlags & :ref:`RTS_STRING_DYNAMIC <group___c_m_utils_itf___component_name_flags_1gafc4946f3306228537866e9df2642730a>` ) ? (( :ref:`RTS_STRING_CLASS <group___c_m_utils_itf___r_t_s___s_t_r_i_n_g___c_l_a_s_s_1gadd8358e9845261633158109ee2d721b0>` *)pString)->name.psz : (( :ref:`RTS_STRING_CLASS <group___c_m_utils_itf___r_t_s___s_t_r_i_n_g___c_l_a_s_s_1gadd8358e9845261633158109ee2d721b0>` *)pString)->name.sz) )


Macro to get the string content out of a string class.

**Parameters**

+---------+---------+---------------------------------------------------------+
| [in]    | pString | Pointer to string class                                 |
+---------+---------+---------------------------------------------------------+
| [in]    | default | Default string, if string content could not be returned |
+---------+---------+---------------------------------------------------------+

**Returns:**

Pointer to content

.. _group___c_m_utils_itf_1ga2a3ac6ac5f81928575782b370cdce882:

#define CM_STRING_GET_CONTENT :ref:`CM_PSTRING_GET_CONTENT <group___c_m_utils_itf_1ga7b2e8a1e3bddf3a49ec81429fdcc738f>` (&string, NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_itf_1gaa8cfb2dcf0bf564ae546445cbf101716:

#define CM_PSTRING_GET_SIZE (pString == NULL ? 0 : (( :ref:`RTS_STRING_CLASS <group___c_m_utils_itf___r_t_s___s_t_r_i_n_g___c_l_a_s_s_1gadd8358e9845261633158109ee2d721b0>` *)pString)->size)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Macro to get the size in bytes of the content of a string class.

**Parameters**

+---------+---------+-------------------------+
| [in]    | pString | Pointer to string class |
+---------+---------+-------------------------+

**Returns:**

Size in bytes of the string content

.. _group___c_m_utils_itf_1ga8c687c0ab2d39510df20f46902b3c0e7:

#define CM_STRING_GET_SIZE (&string)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_itf_1ga4ff85fe8755eb599454b7dc813211102:

#define ITF_CMUtils
^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_itf_1gabf755e8f2c503950751f14e09795e42b:

#define EXTITF_CMUtils
^^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___c_m_utils_itf_1gaf07a95e64a604c62242eae7873ff3124:

typedef ICMUtils_C ICMUtils
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function Documentation
----------------------

.. _group___c_m_utils_itf_1ga3d8335358b18dc7cba3013dd70b03b31:

char* CMUtlSkipWhiteSpace (char *psz)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Called to skip withspaces out of a string.

**Parameters**

+---------+-----+-----------------------+
| [in]    | psz | Pointer to the string |
+---------+-----+-----------------------+

**Returns:**

returns the pointer to the next position in the string with no whitespace

.. _group___c_m_utils_itf_1ga45a5ec6711e706f2f2d5c33694db8bce:

char* CMUtlLtoa (RTS_I32 lValue, char *pszString, int nMaxLen, int iBase, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Converts a long value to a string. The representation can be specified by the iBase value:

2: binary (e.g. "10101010101110111100110011011101"). String length must be at least MAX_LONG_BIN_STRING_LEN bytes!

10: decimal (e.g. "2864434397"). String length must be at least MAX_LONG_DEC_STRING_LEN bytes!

16: hexadecimal (e.g. "0xAABBCCDD"). String length must be at least MAX_LONG_HEX_STRING_LEN bytes!

**Parameters**

+---------+----------+------------------------------------------------------+
| [in]    | lValue   | Long value to convert                                |
+---------+----------+------------------------------------------------------+
| [out]   | szString | Pointer to the string to get integer value as string |
+---------+----------+------------------------------------------------------+
| [in]    | iBase    | Base for the conversion: See description             |
+---------+----------+------------------------------------------------------+

**Returns:**

returns the pointer to the next position in the string with no whitespace

.. _group___c_m_utils_itf_1gaca2ffebd26430628064916303bd09ead:

RTS_RESULT CMUtlStringToVersion (char *pszVersion, RTS_UI32 *pui32Version)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Convert a version as string in an integer. The string must have the format "x.x.x.x".

**Parameters**

+---------+--------------+---------------------------------------+
| [in]    | pszVersion   | Pointer to version as string          |
+---------+--------------+---------------------------------------+
| [out]   | pui32Version | Pointer to get the version as integer |
+---------+--------------+---------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_itf_1ga376cb0557e5b2f0772abedfff68c6001:

RTS_RESULT CMUtlVersionToString (RTS_UI32 ui32Version, char *pszVersion, RTS_SIZE nMaxLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Convert a version into a string. The string has the format "x.x.x.x".

**Parameters**

+---------+-------------+------------------------------+
| [in]    | ui32Version | Version as integer           |
+---------+-------------+------------------------------+
| [out]   | pszVersion  | Pointer to version as string |
+---------+-------------+------------------------------+
| [in]    | nMaxLen     | Max lenght of pszVersion     |
+---------+-------------+------------------------------+

**Returns:**

error code

.. _group___c_m_utils_itf_1ga9412987680570eb4cfd94c1ea28aef01:

char* CMUtlUltoa (RTS_UI32 ulValue, char *pszString, int nMaxLen, int iBase, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Converts an unsigned long value to a string. The representation can be specified by the iBase value:

2: binary (e.g. "10101010101110111100110011011101"). String length must be at least MAX_ULONG_BIN_STRING_LEN bytes!

10: decimal (e.g. "2864434397"). String length must be at least MAX_ULONG_DEC_STRING_LEN bytes!

16: hexadecimal (e.g. "0xAABBCCDD"). String length must be at least MAX_ULONG_HEX_STRING_LEN bytes!

**Parameters**

+---------+----------+------------------------------------------------------+
| [in]    | ulValue  | Unsigned long value to convert                       |
+---------+----------+------------------------------------------------------+
| [out]   | szString | Pointer to the string to get integer value as string |
+---------+----------+------------------------------------------------------+
| [in]    | iBase    | Base for the conversion: See description             |
+---------+----------+------------------------------------------------------+

**Returns:**

returns the pointer to the next position in the string with no whitespace

.. _group___c_m_utils_itf_1gab9631ca8a993256c3d402890c7100b5e:

char* CMUtlStrrev (char *psz)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Reverses content of a string in place

**Parameters**

+---------+-----+-------------------------------------+
| [inout] | psz | Pointer to a null-terminated string |
+---------+-----+-------------------------------------+

**Returns:**

returns the pointer to the next the same string

.. _group___c_m_utils_itf_1ga9fc6a2323171525cc477f9b9a640b1d1:

char* CMUtlStrRChr (char *pszString, char *pszBegin, char cFind)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Scan a string for the last occurrence of a character

**Parameters**

+---------+-----------+--------------------------------------------------------+
| [in]    | pszString | Pointer to scan                                        |
+---------+-----------+--------------------------------------------------------+
| [in]    | pszBegin  | Pointer of a position into pszString to start the scan |
+---------+-----------+--------------------------------------------------------+

**Returns:**

Pointer to the first occurrence in string, or NULL if not found

.. _group___c_m_utils_itf_1ga39772608464aee9ad83d6c8e4c00bd94:

int CMUtlStrICmp (char *pszString1, char *pszString2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Case insensitive string compare.

**Parameters**

+---------+------------+---------------------------------------------------------------------------------------------------+
| [in]    | pszString1 | Pointer to first string to compare RANGE=[NULL,VALID_POINTER_TO_STRING1,VALID_POINTER_TO_STRING2] |
+---------+------------+---------------------------------------------------------------------------------------------------+
| [in]    | pszString2 | Pointer to second string to compare RANGE=[NULL,VALID_POINTER_TO_STRING1]                         |
+---------+------------+---------------------------------------------------------------------------------------------------+

**Returns:**

0 if strings are equal, -1 or 1 if there is a difference between them

.. _group___c_m_utils_itf_1ga5a4ae69ac5c46023e542e535f56a8021:

int CMUtlStrNICmp (char *pszString1, char *pszString2, RTS_SIZE n)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Lower case comparison of two strings specified by length.

**Parameters**

+---------+------------+-------------------------------------+
| [in]    | pszString1 | Pointer to first string to compare  |
+---------+------------+-------------------------------------+
| [in]    | pszString2 | Pointer to second string to compare |
+---------+------------+-------------------------------------+
| [in]    | n          | Number of characters to compare     |
+---------+------------+-------------------------------------+

**Returns:**

0= strings are equal, !0=strings unequal

.. _group___c_m_utils_itf_1gaa8438dc4724c8e0050a8e7b184096670:

char* CMUtlStrIStr (const char *pszString, const char *pszStringToFind)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Find a substring in another string.

**Parameters**

+---------+-----------------+-------------------------------+
| [in]    | pszString       | String to search substring in |
+---------+-----------------+-------------------------------+
| [in]    | pszStringToFind | Substring to find             |
+---------+-----------------+-------------------------------+

**Returns:**

NULL= substring not found in string, !NULL= pointer to string, where substring was found

.. _group___c_m_utils_itf_1gafe96baa9d5c36668d9c81212cb50d3c6:

char* CMUtlStrlwr (char *pszString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Lower case conversion of a string.

**Parameters**

+---------+-----------+------------------------------+
| [in]    | pszString | Pointer to conversion string |
+---------+-----------+------------------------------+

**Returns:**

Returns a pointer to the converted string, NULL if conversion failed

.. _group___c_m_utils_itf_1gaf484c4a17790ff9b48349d87465da708:

char* CMUtlStrupr (char *pszString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Upper case conversion of a string.

**Parameters**

+---------+-----------+------------------------------+
| [in]    | pszString | Pointer to conversion string |
+---------+-----------+------------------------------+

**Returns:**

Returns a pointer to the converted string, NULL if conversion failed

.. _group___c_m_utils_itf_1ga3d05cb841b6d7bcd6b59e1abe45211d5:

RTS_RESULT CMUtlSafeStrCpy (char *pszDest, RTS_SIZE nDestSize, const char *pszSrc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Safe string copy of a string. The length of the destination buffer is checked to avoid memory overwrites.

**Parameters**

+---------+-----------+----------------------------------------------------------+
| [in]    | pszDest   | Pointer to destination buffer                            |
+---------+-----------+----------------------------------------------------------+
| [in]    | nDestSize | Length of destination buffer                             |
+---------+-----------+----------------------------------------------------------+
| [in]    | pszSrc    | Pointer to source buffer. String must be NUL terminated! |
+---------+-----------+----------------------------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_itf_1gaa28631a47989639de8396f4d50b133f7:

RTS_RESULT CMUtlSafeStrCpy2 (char *pszDest, RTS_SIZE nDestSize, const char *pszSrc, int nCopyMode)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Copy a string from one buffer to another, but limit the size of the destination buffer to nDestSize.

**Parameters**

+---------+-----------+---------------------------------------------------------------------------------------------------------------------------+
| [in]    | pszDest   | Pointer to destination buffer RANGE=[0,VALID_POINTER_TO_STRINGDEST]                                                       |
+---------+-----------+---------------------------------------------------------------------------------------------------------------------------+
| [in]    | nDestSize | Length of destination buffer RANGE=[0,INVALID_DST_SIZE,VALID_DST_SIZE]                                                    |
+---------+-----------+---------------------------------------------------------------------------------------------------------------------------+
| [in]    | pszSrc    | Pointer to source buffer. String must be NUL terminated! RANGE=[0,VALID_POINTER_TO_STRINGSRC]                             |
+---------+-----------+---------------------------------------------------------------------------------------------------------------------------+
| [in]    | nCopyMode | Copy mode. See corresponding category "Copy mode" RANGE=[0,CMUTL_CPY_COMM2BUFFER,CMUTL_CPY_BUFFER2COMM,CMUTL_CPY_DEFAULT] |
+---------+-----------+---------------------------------------------------------------------------------------------------------------------------+

**Return values**

+----------------+----------------------------------------------+
| ERR_OK         | Copied successful!                           |
+----------------+----------------------------------------------+
| ERR_BUFFERSIZE | Size of SrcString is greater than nDestSize! |
+----------------+----------------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_itf_1ga57d31a9ee3b3ca44a12044874b644944:

RTS_RESULT CMUtlSafeStrNCpy (char *pszDest, RTS_SIZE nDestSize, const char *pszSrc, RTS_SIZE nBytesCopy)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Copy a string from one buffer to another specified by the number of characters to copy, but limit the size of the destination buffer to nDestSize.

**Parameters**

+---------+------------+---------------------------------------------------------------------------------------------------------------------+
| [in]    | pszDest    | Pointer to destination buffer RANGE=[RTS_INVALID_HANDLE,NULL,VALID_POINTER_TO_STRINGDEST]                           |
+---------+------------+---------------------------------------------------------------------------------------------------------------------+
| [in]    | nDestSize  | Length of destination buffer RANGE=[0,1,RTS_SIZE_MAX]                                                               |
+---------+------------+---------------------------------------------------------------------------------------------------------------------+
| [in]    | pszSrc     | Pointer to source buffer. String must be NUL terminated! RANGE=[RTS_INVALID_HANDLE,NULL,VALID_POINTER_TO_STRINGSRC] |
+---------+------------+---------------------------------------------------------------------------------------------------------------------+
| [in]    | nBytesCopy | Number of bytes to copy RANGE=[0,1,RTS_SIZE_MAX]                                                                    |
+---------+------------+---------------------------------------------------------------------------------------------------------------------+

**Return values**

+----------------+------------------------------------------------------------------------------+
| ERR_OK         | Copy successful                                                              |
+----------------+------------------------------------------------------------------------------+
| ERR_BUFFERSIZE | Destination buffer too short. Only the possible number of charachters copied |
+----------------+------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_itf_1gac68729609618e1def1d5b198bd4c2af6:

RTS_RESULT CMUtlSafeStrCat (char *pszDest, RTS_SIZE nDestSize, const char *pszSrc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Concatenate two strings, but limit the size of the destination buffer to nDestSize.

**Parameters**

+---------+-----------+---------------------------------------------------------------------------------------------------------------------+
| [in]    | pszDest   | Pointer to destination buffer RANGE=[RTS_INVALID_HANDLE,NULL,VALID_POINTER_TO_STRINGDEST]                           |
+---------+-----------+---------------------------------------------------------------------------------------------------------------------+
| [in]    | nDestSize | Length of destination buffer RANGE=[0,1,RTS_SIZE_MAX]                                                               |
+---------+-----------+---------------------------------------------------------------------------------------------------------------------+
| [in]    | pszSrc    | Pointer to source buffer. String must be NUL terminated! RANGE=[RTS_INVALID_HANDLE,NULL,VALID_POINTER_TO_STRINGSRC] |
+---------+-----------+---------------------------------------------------------------------------------------------------------------------+

**Return values**

+----------------+------------------------------------------------------------------------------+
| ERR_OK         | Concatenate successful                                                       |
+----------------+------------------------------------------------------------------------------+
| ERR_BUFFERSIZE | Destination buffer too short. Only the possible number of charachters copied |
+----------------+------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_itf_1gad6cec8b7ff1fa02a0b8a356f1c86ddc1:

RTS_SIZE CMUtlStrLen (char *str)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Calculate the string length

Is able to handle Null pointer

This function works for targets where char has a size of 8 bits as well as for targets where char is 16 bits wide.

**Parameters**

+---------+-----+---------------------------------------------------------+
| [in]    | str | pointer to string RANGE=[NULL,VALID_POINTER_TO_STRING1] |
+---------+-----+---------------------------------------------------------+

**Returns:**

Length of string without trailing \0, 0 if str is Null

.. _group___c_m_utils_itf_1ga8a1114a1c443e604ac49ba45df3d3cb4:

RTS_SIZE CMUtlStrNLen (char *str, RTS_SIZE nMaxSize)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Calculate the string length. This function will stop if no NUL is found in the first nMaxSize bytes of the string.

Is able to handle Null pointer

This function works for targets where char has a size of 8 bits as well as for targets where char is 16 bits wide.

**Returns:**

Length of string without trailing \0, 0 if str is Null, nMaxSize if no NUL is found.

.. _group___c_m_utils_itf_1ga3486e83ae83520a9eed23bcbc0e72deb:

char* CMUtlStrToLower (char *psz)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Convert a string in lower case. String must be NUL terminated!

**Parameters**

+---------+-----+------------------------------+
| [in]    | psz | Pointer to string to convert |
+---------+-----+------------------------------+

**Returns:**

Pointer to psz with the converted content

.. _group___c_m_utils_itf_1ga197b037c42382e55e5e9fa39bf2b94eb:

char* CMUtlStrToUpper (char *psz)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Convert a string in upper case. String must be NUL terminated!

**Parameters**

+---------+-----+------------------------------+
| [in]    | psz | Pointer to string to convert |
+---------+-----+------------------------------+

**Returns:**

Pointer to psz with the converted content

.. _group___c_m_utils_itf_1gab3cccec9a9b6340dde1669a8f7a5b85c:

RTS_RESULT CMUtlvsnprintf (char *pszStr, RTS_SIZE ulStrSize, const char *pszFormat, va_list *pargList)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Safe sprintf with argument list. NOTES:

- If ANSI vsnprintf is not available on the target, vsprintf is used instead and the size of the string can be evaluated only after writing the complete string! So the memory could be overwritten in this case and so the error code is the only way to detect this situation!

- RTS_ASSERT() is generated, if string buffer is too short!

**Parameters**

+---------+-----------+--------------------------+
| [in]    | pszStr    | Destination buffer       |
+---------+-----------+--------------------------+
| [in]    | ulStrSize | Destination buffer size  |
+---------+-----------+--------------------------+
| [in]    | pszFormat | Format string            |
+---------+-----------+--------------------------+
| [in]    | pargList  | Pointer to argument list |
+---------+-----------+--------------------------+

**Returns:**

Error code:

- ERR_OK: String could be written

- ERR_PARAMETER: NULL pointer used as parameter

- ERR_BUFFERSIZE: If pszStr is too short to get the string value

.. _group___c_m_utils_itf_1ga3dc57055ef9d11cd939a354f18855e66:

RTS_RESULT CMUtlsnprintf (char *pszStr, RTS_SIZE ulStrSize, const char *pszFormat,...)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Safe sprintf with format string and variable argument list. NOTES:

- If ANSI vsnprintf is not available on the target, vsprintf is used instead and the size of the string can be evaluated only after writing the complete string! So the memory could be overwritten in this case and so the error code is the only way to detect this situation!

- RTS_ASSERT() is generated, if string buffer is too short!

**Parameters**

+---------+-----------+-------------------------+
| [in]    | pszStr    | Destination buffer      |
+---------+-----------+-------------------------+
| [in]    | ulStrSize | Destination buffer size |
+---------+-----------+-------------------------+
| [in]    | pszFormat | Format string           |
+---------+-----------+-------------------------+
| [in]    | ...       | Argument list           |
+---------+-----------+-------------------------+

**Returns:**

Error code:

- ERR_OK: String could be written

- ERR_PARAMETER: NULL pointer used as parameter

- ERR_BUFFERSIZE: If pszStr is too short to get the string value

.. _group___c_m_utils_itf_1gae1aa8e307c33731ecf31cf0540329311:

void* CMUtlMemCpy (void *pDest, const void *pSrc, RTS_SIZE ulToCopy)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Memory copy between two buffers. NOTES:

- Caller has to take care about parameter checks. E.g. function does not check for nullpointer or overlapping.

- Function behaves exactly like memcpy from standard c-library

- For some platforms (e.g. ARM), the native memcpy might be problematic when accessing external memory. In these cases this implementation can be used

**Parameters**

+---------+----------+-------------------------------------------------+
| [in]    | pDest    | Pointer to destination buffer                   |
+---------+----------+-------------------------------------------------+
| [in]    | pSrc     | Pointer to source buffer                        |
+---------+----------+-------------------------------------------------+
| [in]    | ulToCopy | Bytes to copy from source to destination buffer |
+---------+----------+-------------------------------------------------+

**Returns:**

Pointer to destination buffer

.. _group___c_m_utils_itf_1ga3cc88552be6888adecbf431ea711ee06:

RTS_RESULT CMUtlSafeMemCpy (void *pDest, RTS_SIZE ulDestSize, const void *pSrc, RTS_SIZE ulToCopy)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Safe memory copy between two buffers. The length of the destination buffer is checked to avoid memory overwrites.

**Parameters**

+---------+------------+-------------------------------------------------+
| [in]    | pDest      | Pointer to destination buffer                   |
+---------+------------+-------------------------------------------------+
| [in]    | ulDestSize | Length of destination buffer                    |
+---------+------------+-------------------------------------------------+
| [in]    | pSrc       | Pointer to source buffer                        |
+---------+------------+-------------------------------------------------+
| [in]    | ulToCopy   | Bytes to copy from source to destination buffer |
+---------+------------+-------------------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_itf_1ga184baecdca09d72f7678633320285c73:

RTS_RESULT CMUtlSafeMemMove (void *pDest, RTS_SIZE ulDestSize, const void *pSrc, RTS_SIZE ulToCopy)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Safe memory move between two buffers. The length of the destination buffer is checked to avoid memory overwrites.

**Parameters**

+---------+------------+-------------------------------------------------+
| [in]    | pDest      | Pointer to destination buffer                   |
+---------+------------+-------------------------------------------------+
| [in]    | ulDestSize | Length of destination buffer                    |
+---------+------------+-------------------------------------------------+
| [in]    | pSrc       | Pointer to source buffer                        |
+---------+------------+-------------------------------------------------+
| [in]    | ulToCopy   | Bytes to copy from source to destination buffer |
+---------+------------+-------------------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_itf_1gada0dd1310b02869b562382e0d8635662:

RTS_RESULT CMUtlGUIDToString (RTS_GUID *pguid, char *pszGUID, RTS_SIZE nMaxLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Conversion of a GUID into a string.

**Parameters**

+---------+---------+-----------------------------------------------------------------------------+
| [in]    | pguid   | Pointer to the GUID to convert                                              |
+---------+---------+-----------------------------------------------------------------------------+
| [out]   | pszGUID | Pointer to string buffer for the result                                     |
+---------+---------+-----------------------------------------------------------------------------+
| [in]    | nMaxLen | maximum length of the string buffer. Should be at least MAX_GUID_STRING_LEN |
+---------+---------+-----------------------------------------------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_itf_1gac34ac1c55502bb08ae9b917fc4546767:

RTS_RESULT CMUtlStringToGUID (char *pszGUID, RTS_GUID *pguid)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Conversion of a string into a GUID.

**Parameters**

+---------+---------+------------------------------------+
| [in]    | pszGUID | Pointer to string to convert       |
+---------+---------+------------------------------------+
| [out]   | pguid   | Pointer to the GUID for the result |
+---------+---------+------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_itf_1ga22f7290a6dea7fddfb80d4f4826a6c5e:

RTS_RESULT CMStringCreate (RTS_STRING_CLASS *pString, char *pszComponentName, char *pszInit)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create a string and initialize it with a default string.

**Parameters**

+---------+------------------+-----------------------------------------------------------+
| [in]    | pString          | Pointer to string class                                   |
+---------+------------------+-----------------------------------------------------------+
| [in]    | pszComponentName | Pointer to the component name, which creates this string  |
+---------+------------------+-----------------------------------------------------------+
| [in]    | pszInit          | Pointer to init string to copy into content. Can be NULL. |
+---------+------------------+-----------------------------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_itf_1gab0597b62f2589ad6b17961ae52cca00a:

RTS_RESULT CMStringCreate2 (RTS_STRING_CLASS *pString, char *pszComponentName, char *pszInit, RTS_BOOL bAllocDynamic)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___c_m_utils_itf_1ga4b49e9d78e0a500367c53038c2b18929:

RTS_RESULT CMStringDelete (RTS_STRING_CLASS *pString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create a string and initialize it with a default string.

**Parameters**

+---------+---------+-------------------------+
| [in]    | pString | Pointer to string class |
+---------+---------+-------------------------+

**Returns:**

error code

.. _group___c_m_utils_itf_1ga01596eeac01110f009bbb2e243c13224:

RTS_RESULT CMStringExtend (RTS_STRING_CLASS *pString, RTS_SIZE size)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Extend a string to a specified size.

**Parameters**

+---------+---------+--------------------------------------------+
| [in]    | pString | Pointer to string class                    |
+---------+---------+--------------------------------------------+
| [in]    | size    | Size to which the content must be extended |
+---------+---------+--------------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_itf_1gadf4f7e87ed1732acac6cc86634394c9f:

RTS_RESULT CMStringCopy (RTS_STRING_CLASS *pString, char *pszSrc, RTS_SIZE nSrcLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Copy a string to the string class.

**Parameters**

+---------+---------+--------------------------------------------------------------------------------------+
| [in]    | pString | Pointer to string class                                                              |
+---------+---------+--------------------------------------------------------------------------------------+
| [in]    | pszSrc  | Pointer to the source string buffer                                                  |
+---------+---------+--------------------------------------------------------------------------------------+
| [in]    | nSrcLen | Lenght of the source string buffer or number of bytes to copy (_with_ trailing NUL)! |
+---------+---------+--------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_itf_1gac5bf599fa93b8a094915c1e7e3142da1:

int CMUtlwstrcmp (const RTS_WCHAR *pwsz1, const RTS_WCHAR *pwsz2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

UNICODE string routines

Compare two unicode strings

**Parameters**

+---------+-------+---------------------+
| [in]    | pwsz1 | Pointer to string 1 |
+---------+-------+---------------------+
| [in]    | pwsz2 | Pointer to string 2 |
+---------+-------+---------------------+

**Returns:**

*0: string1 identical to string2 *lower 0: string1 less than string2 *greater 0: string1 greater than string2

.. _group___c_m_utils_itf_1ga92b781bb5a34cabddabef0c715a9f829:

int CMUtlwstrncmp (const RTS_WCHAR *pwsz1, const RTS_WCHAR *pwsz2, RTS_SIZE nCount)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Compare two unicode strings with specified number of characters

**Parameters**

+---------+--------+---------------------------------+
| [in]    | pwsz1  | Pointer to string 1             |
+---------+--------+---------------------------------+
| [in]    | pwsz2  | Pointer to string 2             |
+---------+--------+---------------------------------+
| [in]    | nCount | Number of characters to compare |
+---------+--------+---------------------------------+

**Returns:**

*0: string1 identical to string2 *lower 0: string1 less than string2 *greater 0: string1 greater than string2

.. _group___c_m_utils_itf_1ga7890cc24bcd8748857c2e8bafc7793f1:

RTS_RESULT CMUtlwstrcpy (RTS_WCHAR *pwszDest, RTS_SIZE nDestSize, const RTS_WCHAR *pwszSrc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Copy one unicode string to another in a safe way

**Parameters**

+---------+-----------+-------------------------------------------------------------------+
| [in]    | pwszDest  | Destination string                                                |
+---------+-----------+-------------------------------------------------------------------+
| [in]    | nDestSize | Size of the destination buffer in unicode characters (not bytes)! |
+---------+-----------+-------------------------------------------------------------------+
| [in]    | pwszSrc   | Source string                                                     |
+---------+-----------+-------------------------------------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_itf_1ga1b80f532e4b8e4fb7e182a0c7feb8903:

RTS_RESULT CMUtlwstrcat (RTS_WCHAR *pwszDest, RTS_SIZE nDestSize, const RTS_WCHAR *pwszSrc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Concatenate two unicode strings in a safe way

**Parameters**

+---------+-----------+-------------------------------------------------------------------+
| [in]    | pwszDest  | Destination string                                                |
+---------+-----------+-------------------------------------------------------------------+
| [in]    | nDestSize | Size of the destination buffer in unicode characters (not bytes)! |
+---------+-----------+-------------------------------------------------------------------+
| [in]    | pwszSrc   | Source string                                                     |
+---------+-----------+-------------------------------------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_itf_1ga072eeb262261b08149ed271826bbcaaa:

RTS_RESULT CMUtlwstrncpy (RTS_WCHAR *pwszDest, RTS_SIZE nDestSize, const RTS_WCHAR *pwszSrc, RTS_SIZE n)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Copy number of characters from one unicode string to another in a safe way

**Parameters**

+---------+-----------+-------------------------------------------------------------------+
| [in]    | pwszDest  | Destination string                                                |
+---------+-----------+-------------------------------------------------------------------+
| [in]    | nDestSize | Size of the destination buffer in unicode characters (not bytes)! |
+---------+-----------+-------------------------------------------------------------------+
| [in]    | pwszSrc   | Source string                                                     |
+---------+-----------+-------------------------------------------------------------------+
| [in]    | n         | Number of characters to copy (not bytes)!                         |
+---------+-----------+-------------------------------------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_itf_1ga7472d7fc24e588a05f531c435946418e:

RTS_SIZE CMUtlwstrlen (const RTS_WCHAR *pwsz)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the number of characters (not bytes!) in the content of a string _without_ NUL terminating character.

**Parameters**

+---------+------+-------------------+
| [in]    | pwsz | Pointer to string |
+---------+------+-------------------+

**Returns:**

Number of characters (not bytes!) in the content of a string _without_ NUL terminating character

.. _group___c_m_utils_itf_1gac8434e87fddd1294b0a9887744a0f555:

RTS_WCHAR* CMUtlwtolower (RTS_WCHAR *pwsz)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Convert the characters in a unicode string to lower case.

**Parameters**

+---------+------+-------------------+
| [in]    | pwsz | Pointer to string |
+---------+------+-------------------+

**Returns:**

pwsz is returned

.. _group___c_m_utils_itf_1gadb7e9096f88b3f20755f8f6b287427a1:

RTS_WCHAR* CMUtlwtoupper (RTS_WCHAR *pwsz)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Convert the characters in a unicode string to upper case.

**Parameters**

+---------+------+-------------------+
| [in]    | pwsz | Pointer to string |
+---------+------+-------------------+

**Returns:**

pwsz is returned

.. _group___c_m_utils_itf_1gaa9826bd48ff37dfd357ad1893e676ff4:

RTS_RESULT CMUtlStrToW (const char *pszSrc, RTS_WCHAR *pwszDest, RTS_SIZE nDestSize)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Convert a byte character string to a unicode character string.

**Parameters**

+---------+-----------+-------------------------------------------------------------------+
| [in]    | pszSrc    | Pointer to byte character string                                  |
+---------+-----------+-------------------------------------------------------------------+
| [in]    | pwszDest  | Pointer to unicode character string                               |
+---------+-----------+-------------------------------------------------------------------+
| [in]    | nDestSize | Size of the destination buffer in unicode characters (not bytes)! |
+---------+-----------+-------------------------------------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_itf_1gaaff0d78459e6922d37d8aab13f2bc708:

RTS_RESULT CMUtlWToStr (const RTS_WCHAR *pwszSrc, char *pszDest, RTS_SIZE nDestSize)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Convert a unicode character string to a byte character string .

**Parameters**

+---------+-----------+-----------------------------------------+
| [in]    | pwszSrc   | Pointer to unicode character string     |
+---------+-----------+-----------------------------------------+
| [in]    | pszDest   | Pointer to byte character string        |
+---------+-----------+-----------------------------------------+
| [in]    | nDestSize | Size of the destination buffer in bytes |
+---------+-----------+-----------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_itf_1ga7e6c9f82ee7609a35bb23318e16c1ec5:

RTS_WCHAR* CMUtlwstrchr (const RTS_WCHAR *pwsz, RTS_WCHAR w)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Find a character in a unicode string.

**Parameters**

+---------+------+---------------------------+
| [in]    | pwsz | Pointer to unicode string |
+---------+------+---------------------------+
| [in]    | w    | Character to find         |
+---------+------+---------------------------+

**Returns:**

Returns the find position or NULL if not found

.. _group___c_m_utils_itf_1ga3f1edd84a32b6a9f0a00266a6b140399:

RTS_RESULT CMUtlWToUtf8 (RTS_WCHAR *pwsz, RTS_SIZE wstrLen, RTS_UI8 *pUtf8Str, RTS_SIZE bufferSize)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function converts a UTF-16 encoded WSTRING to a sequenze of UTF-8 code points. If a codepoint cannot be converted this codepoint will be replaced with the Unicode REPLACEMENT CHARACTER (U+FFFD).

**Parameters**

+---------+------------+------------------------------------------------------+
| [in]    | pwsz       | Pointer to WSTRING to be converted.                  |
+---------+------------+------------------------------------------------------+
| [in]    | wstrLen    | Size of readbuffer in WCHARs. Set to -1 if unknown.  |
+---------+------------+------------------------------------------------------+
| [in]    | pUtf8Str   | Pointer to buffer where to store the UTF-8 sequence. |
+---------+------------+------------------------------------------------------+
| [in]    | bufferSize | Buffersize of UTF-8 buffer.                          |
+---------+------------+------------------------------------------------------+

**Returns:**

On of these error codes:

- ERR_OK: Everything went fine. No errors occured.

- ERR_PARAMETER: The parameterchecks failed.

- ERR_CONVERSION_INCOMPLETE: The conversion failed because of some codepoints. These where replaced with U+FFFD.

.. _group___c_m_utils_itf_1ga5f6e129b157774bfdace4e9d32f803d9:

RTS_RESULT CMUtlUtf8ToW (RTS_UI8 *pUtf8Str, RTS_SIZE utf8BufferSize, RTS_WCHAR *pwsz, RTS_SIZE wstrLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function converts a UTF-8 string to a UTF-16 encoded WSTRING. The conversion inserts the REPLACEMENT CHARACTER (U+FFFD) if a UTF-8 codepoint or invalid.

**Parameters**

+---------+-----------------+------------------------------------------+
| [in]    | pUtf8Str        | Pointer to UTF-8 string to be converted. |
+---------+-----------------+------------------------------------------+
| [in]    | pUtf8BufferSize | Read buffer size. Set to -1 if unknown.  |
+---------+-----------------+------------------------------------------+
| [in]    | pwsz            | Pointer to WSTRING buffer.               |
+---------+-----------------+------------------------------------------+
| [in]    | wstrLen         | Number of WCHARs in pwsz.                |
+---------+-----------------+------------------------------------------+

**Returns:**

On of these error codes:

- ERR_OK: Everything went fine. No errors occured.

- ERR_PARAMETER: The parameterchecks failed.

- ERR_CONVERSION_INCOMPLETE: The conversion failed because of some codepoints. These where replaced with U+FFFD.

.. _group___c_m_utils_itf_1ga19f32fabee7740573b95085e0dcf1ffe:

int CMUtlcwstrcmp (const RTS_CWCHAR *pwsz1, const RTS_CWCHAR *pwsz2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Variable string type routines. Can be UNICODE or C-strings, dependant of the type definition of RTS_CWCHAR!

Compare two RTS_CWCHAR strings

**Parameters**

+---------+-------+---------------------+
| [in]    | pwsz1 | Pointer to string 1 |
+---------+-------+---------------------+
| [in]    | pwsz2 | Pointer to string 2 |
+---------+-------+---------------------+

**Returns:**

*0: string1 identical to string2 *lower 0: string1 less than string2 *greater 0: string1 greater than string2

.. _group___c_m_utils_itf_1ga45e8180fa576440b486ba75aa8bcaecd:

RTS_RESULT CMUtlcwstrcpy (RTS_CWCHAR *pwszDest, RTS_SIZE nDestSize, const RTS_CWCHAR *pwszSrc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Copy one RTS_CWCHAR string to another in a safe way

**Parameters**

+---------+-----------+----------------------------------------------------------+
| [in]    | pwszDest  | Destination string                                       |
+---------+-----------+----------------------------------------------------------+
| [in]    | nDestSize | Size of the destination buffer in RTS_CWCHAR characters! |
+---------+-----------+----------------------------------------------------------+
| [in]    | pwszSrc   | Source string                                            |
+---------+-----------+----------------------------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_itf_1gad30402108a6bb5c1efdd16cca18cfc59:

RTS_RESULT CMUtlcwstrcat (RTS_CWCHAR *pwszDest, RTS_SIZE nDestSize, const RTS_CWCHAR *pwszSrc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Concatenate two RTS_CWCHAR strings in a safe way

**Parameters**

+---------+-----------+----------------------------------------------------------+
| [in]    | pwszDest  | Destination string                                       |
+---------+-----------+----------------------------------------------------------+
| [in]    | nDestSize | Size of the destination buffer in RTS_CWCHAR characters! |
+---------+-----------+----------------------------------------------------------+
| [in]    | pwszSrc   | Source string                                            |
+---------+-----------+----------------------------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_itf_1gaab9d32d51be9e780c3f1ae03414e4363:

RTS_RESULT CMUtlcwstrncpy (RTS_CWCHAR *pwszDest, RTS_SIZE nDestSize, const RTS_CWCHAR *pwszSrc, RTS_SIZE n)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Copy number of characters from one RTS_CWCHAR string to another in a safe way

**Parameters**

+---------+-----------+----------------------------------------------------------+
| [in]    | pwszDest  | Destination string                                       |
+---------+-----------+----------------------------------------------------------+
| [in]    | nDestSize | Size of the destination buffer in RTS_CWCHAR characters! |
+---------+-----------+----------------------------------------------------------+
| [in]    | pwszSrc   | Source string                                            |
+---------+-----------+----------------------------------------------------------+
| [in]    | n         | Number of characters to copy (not bytes)!                |
+---------+-----------+----------------------------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_itf_1ga93fc44d05f10fa95f85c5d2185fe5d74:

RTS_SIZE CMUtlcwstrlen (const RTS_CWCHAR *pwsz)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the number of RTS_CWCHAR characters in the content of a string _without_ NUL terminating character.

**Parameters**

+---------+------+-------------------+
| [in]    | pwsz | Pointer to string |
+---------+------+-------------------+

**Returns:**

Number of RTS_CWCHAR characters in the content of a string _without_ NUL terminating character

.. _group___c_m_utils_itf_1gadec49ad81727beb97890901d5ebb12f8:

RTS_CWCHAR* CMUtlcwtolower (RTS_CWCHAR *pwsz)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Convert the characters in a RTS_CWCHAR string to lower case.

**Parameters**

+---------+------+-------------------+
| [in]    | pwsz | Pointer to string |
+---------+------+-------------------+

**Returns:**

pwsz is returned

.. _group___c_m_utils_itf_1gab6383754663421743cd7f9ac6d72a56e:

RTS_CWCHAR* CMUtlcwtoupper (RTS_CWCHAR *pwsz)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Convert the characters in a RTS_CWCHAR string to upper case.

**Parameters**

+---------+------+-------------------+
| [in]    | pwsz | Pointer to string |
+---------+------+-------------------+

**Returns:**

pwsz is returned

.. _group___c_m_utils_itf_1ga448ae98ba43012745004b97987e4ec7e:

RTS_RESULT CMUtlStrToCW (const char *pszSrc, RTS_CWCHAR *pwszDest, RTS_SIZE nDestSize)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Convert a byte character string to a RTS_CWCHAR character string.

**Parameters**

+---------+-----------+----------------------------------------------------------+
| [in]    | pszSrc    | Pointer to byte character string                         |
+---------+-----------+----------------------------------------------------------+
| [in]    | pwszDest  | Pointer to RTS_CWCHAR character string                   |
+---------+-----------+----------------------------------------------------------+
| [in]    | nDestSize | Size of the destination buffer in RTS_CWCHAR characters! |
+---------+-----------+----------------------------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_itf_1gafaa2e9d1b36160757dbbb47bb5dfd81e:

RTS_RESULT CMUtlCWToStr (const RTS_CWCHAR *pwszSrc, char *pszDest, RTS_SIZE nDestSize)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Convert a RTS_CWCHAR character string to a byte character string .

**Parameters**

+---------+-----------+-----------------------------------------+
| [in]    | pwszSrc   | Pointer to RTS_CWCHAR character string  |
+---------+-----------+-----------------------------------------+
| [in]    | pszDest   | Pointer to byte character string        |
+---------+-----------+-----------------------------------------+
| [in]    | nDestSize | Size of the destination buffer in bytes |
+---------+-----------+-----------------------------------------+

**Returns:**

error code

.. _group___c_m_utils_itf_1ga3ecc52a47e4305bdca90fa7be65da6ba:

RTS_CWCHAR* CMUtlcwstrchr (const RTS_CWCHAR *pwsz, RTS_CWCHAR cw)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Find a character in a RTS_CWCHAR string.

**Parameters**

+---------+------+------------------------------+
| [in]    | pwsz | Pointer to RTS_CWCHAR string |
+---------+------+------------------------------+
| [in]    | w    | Character to find            |
+---------+------+------------------------------+

**Returns:**

Returns the find position or NULL if not found

.. _group___c_m_utils_itf_1ga09ab0c1ec801767417c5b91c49f36515:

RTS_SIZE CMUtlBinarySearch_UI32 (RTS_UI8 *pui8SearchArray, RTS_SIZE siSearchArraySize, RTS_SIZE siSearchElementSize, RTS_SIZE siSearchElementKeyOffset, RTS_SIZE siMin, RTS_UI32 ui32Key, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Binary search for a RTS_UI32 key in an array. Array can be an array of structure and the structure contains a member with the key.

**Parameters**

+---------+--------------------------+------------------------------------------------------------------------------------------+
| [in]    | pui8SearchArray          | Pointer to search array. Can be an array of a structure                                  |
+---------+--------------------------+------------------------------------------------------------------------------------------+
| [in]    | siSearchArraySize        | Size of the search array in bytes                                                        |
+---------+--------------------------+------------------------------------------------------------------------------------------+
| [in]    | siSearchElementSize      | Size of one array element (if it is an array of a structure, this is the structure size) |
+---------+--------------------------+------------------------------------------------------------------------------------------+
| [in]    | siSearchElementKeyOffset | Offset within an array element to find the key value                                     |
+---------+--------------------------+------------------------------------------------------------------------------------------+
| [in]    | siMin                    | Minimal index in the array to start the search                                           |
+---------+--------------------------+------------------------------------------------------------------------------------------+
| [in]    | ui32Key                  | Key value to search for                                                                  |
+---------+--------------------------+------------------------------------------------------------------------------------------+
| [out]   | pResult                  | Pointer to error code:                                                                   |
|         |                          |                                                                                          |
|         |                          | - ERR_OK: Key found                                                                      |
|         |                          |                                                                                          |
|         |                          | - ERR_NO_OBJECT: Key not found                                                           |
+---------+--------------------------+------------------------------------------------------------------------------------------+

**Returns:**

Returns the find position or RTS_SIZE_MAX if not found

.. last line of group.rst template
.. last line of composition.rst template


