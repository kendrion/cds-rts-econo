.. first line of composition.rst template

.. first line of group.rst template

.. _group___cmp_iec_var_access_itf:

==================
CmpIecVarAccessItf
==================

Interface of CmpIecVarAccess. :ref:`More... <group___cmp_iec_var_access_itf-details>`

Modules
-------

- :ref:`.ThisisanextensioninthehiwordofTypeClass3	POUTypeClass. This is an extension in the hiword of TypeClass3 <group___cmp_iec_var_access_itf___p_o_u_type_class>`

- :ref:`Branch leaf node flags <group___cmp_iec_var_access_itf___branchleafnodeflags>`

- :ref:`Category online services <group___cmp_iec_var_access_itf___categoryonlineservices>`

- :ref:`Category online tags <group___cmp_iec_var_access_itf___categoryonlinetags>`

- :ref:`Client options <group___cmp_iec_var_access_itf___clientoptions>`

- :ref:`Compiler switch <group___cmp_iec_var_access_itf___compilerswitch>`

- :ref:`Event parameter <group___cmp_iec_var_access_itf___eventparameter>`

- :ref:`Events <group___cmp_iec_var_access_itf___events>`

- :ref:`NodeFlags <group___cmp_iec_var_access_itf___node_flags>`

- :ref:`Online services <group___cmp_iec_var_access_itf___onlineservices>`

- :ref:`POUClass <group___cmp_iec_var_access_itf___p_o_u_class>`

- :ref:`Quality <group___cmp_iec_var_access_itf___quality>`

- :ref:`Settings <group___cmp_iec_var_access_itf___settings>`

- :ref:`Static defines <group___cmp_iec_var_access_itf___staticdefines>`

- :ref:`Varlist flags <group___cmp_iec_var_access_itf___varlistflags>`

Data Structures
---------------

- struct :ref:`tagiecvaraccbrowsedown2_struct <structtagiecvaraccbrowsedown2__struct>`

- struct :ref:`tagiecvaraccbrowsegetnext2_struct <structtagiecvaraccbrowsegetnext2__struct>`

- struct :ref:`tagiecvaraccbrowserecursive_struct <structtagiecvaraccbrowserecursive__struct>`

- struct :ref:`tagiecvaraccbrowseup2_struct <structtagiecvaraccbrowseup2__struct>`

- struct :ref:`tagiecvaraccexitvarinfo_struct <structtagiecvaraccexitvarinfo__struct>`

- struct :ref:`tagiecvaraccgetfirstinterface_struct <structtagiecvaraccgetfirstinterface__struct>`

- struct :ref:`tagiecvaraccgetfirstinterface2_struct <structtagiecvaraccgetfirstinterface2__struct>`

- struct :ref:`tagiecvaraccgetnextinterface_struct <structtagiecvaraccgetnextinterface__struct>`

- struct :ref:`tagiecvaraccgetnextinterface2_struct <structtagiecvaraccgetnextinterface2__struct>`

- struct :ref:`tagiecvaraccgetnode4_struct <structtagiecvaraccgetnode4__struct>`

- struct :ref:`tagiecvaraccgetnodefullpath4_struct <structtagiecvaraccgetnodefullpath4__struct>`

- struct :ref:`tagiecvaraccgetnodename4_struct <structtagiecvaraccgetnodename4__struct>`

- struct :ref:`tagiecvaraccgetsymbolsetmask_struct <structtagiecvaraccgetsymbolsetmask__struct>`

- struct :ref:`tagiecvaraccinitvarinfo_struct <structtagiecvaraccinitvarinfo__struct>`

- struct :ref:`tagiecvaraccinitvarinfo2_struct <structtagiecvaraccinitvarinfo2__struct>`

- struct :ref:`tagiecvaraccinvalidatenode_struct <structtagiecvaraccinvalidatenode__struct>`

- struct :ref:`tagiecvaraccnodeinfoaddbrowseinfo_struct <structtagiecvaraccnodeinfoaddbrowseinfo__struct>`

- struct :ref:`tagiecvaraccnodeinfoaddreference_struct <structtagiecvaraccnodeinfoaddreference__struct>`

- struct :ref:`tagiecvaraccnodeinfogetbrowseinfo_struct <structtagiecvaraccnodeinfogetbrowseinfo__struct>`

- struct :ref:`tagiecvaraccnodeinfogetreference_struct <structtagiecvaraccnodeinfogetreference__struct>`

- struct :ref:`tagiecvaraccnodeinforemovebrowseinfo_struct <structtagiecvaraccnodeinforemovebrowseinfo__struct>`

- struct :ref:`tagiecvaraccnodeinforemovereference_struct <structtagiecvaraccnodeinforemovereference__struct>`

- struct :ref:`tagiecvaraccregisterinstance_struct <structtagiecvaraccregisterinstance__struct>`

- struct :ref:`tagiecvaraccregisterinstance2_struct <structtagiecvaraccregisterinstance2__struct>`

- struct :ref:`tagiecvaraccregisterinstance3_struct <structtagiecvaraccregisterinstance3__struct>`

- struct :ref:`tagiecvaraccregisterinstancebase_struct <structtagiecvaraccregisterinstancebase__struct>`

- struct :ref:`tagiecvaraccsetsymbolconfigcrc_struct <structtagiecvaraccsetsymbolconfigcrc__struct>`

- struct :ref:`tagiecvaraccunregisterinstance_struct <structtagiecvaraccunregisterinstance__struct>`

- struct :ref:`tagiecvaraccupdatesymbolsets_struct <structtagiecvaraccupdatesymbolsets__struct>`

- struct :ref:`_IecVarAccBrowseCallback <struct___iec_var_acc_browse_callback>`

- struct :ref:`ICmpIecVarAccess_C <struct_i_cmp_iec_var_access___c>`

Macros
------

- #define :ref:`IECVARACCESS_NUM_OF_STATIC_APP <group___cmp_iec_var_access_itf_1ga88ff35ae96eebfad5e5a4dd17eaab75b>` 4

- #define :ref:`IECVARACCESS_ROOT_NODE <group___cmp_iec_var_access_itf_1gaabcbc942432eac42a94946ebcbe6a2ae>` "ROOT__NODE"

- #define :ref:`IECVARACCESS_NUM_OF_STATIC_VARLISTS <group___cmp_iec_var_access_itf_1gafdb07f5920b19423aa13db77e5a0d15f>` 10

- #define :ref:`IECVARACCESS_NUM_OF_STATIC_VARS <group___cmp_iec_var_access_itf_1ga6014ff42c782c68a8aef18bd690bb0b0>` 1000

- #define :ref:`CMPIECVARACCESS_NUM_OF_STATIC_VARLISTS <group___cmp_iec_var_access_itf_1ga936125fdbf8f939421598d9ede1d9e11>` :ref:`IECVARACCESS_NUM_OF_STATIC_VARLISTS <group___cmp_iec_var_access_itf_1gafdb07f5920b19423aa13db77e5a0d15f>`

- #define :ref:`CMPIECVARACCESS_NUM_OF_STATIC_VARS <group___cmp_iec_var_access_itf_1ga756b4308a9550fa5ddde37218eaf4d41>` :ref:`IECVARACCESS_NUM_OF_STATIC_VARS <group___cmp_iec_var_access_itf_1ga6014ff42c782c68a8aef18bd690bb0b0>`

- #define :ref:`CMPIECVARACCESS_NUM_OF_STATIC_BROWSEINFOS <group___cmp_iec_var_access_itf_1ga8e28463565d28f8ccc799ecfe894b8a5>` 10

- #define :ref:`TCF_GET_TYPE <group___cmp_iec_var_access_itf_1ga8f58c4daeea94667d861dd32cbc476cd>` 0

- #define :ref:`TCF_GET_BASE_TYPE <group___cmp_iec_var_access_itf_1ga26b159ad229b0756ab853156d42e63e6>` 1

- #define :ref:`TCF_GET_POU_TYPE <group___cmp_iec_var_access_itf_1ga14618ab1b5e7e863af7d98703ac8b73a>` 2

- #define :ref:`TCF_GET_ENUM_TYPE <group___cmp_iec_var_access_itf_1gaeb83e8407b113379c9cd94aed18adb5b>` 4

- #define :ref:`ITF_CmpIecVarAccess <group___cmp_iec_var_access_itf_1ga9afce982cc399358aa2af19aec93b42c>`

- #define :ref:`EXTITF_CmpIecVarAccess <group___cmp_iec_var_access_itf_1ga3ef74ef14f3df6ab57ff520fa288eef8>`

Typedefs
--------

- typedef struct :ref:`tagiecvaraccbrowsedown2_struct <structtagiecvaraccbrowsedown2__struct>` :ref:`iecvaraccbrowsedown2_struct <group___cmp_iec_var_access_itf_1ga46bae2b4c8426550105e346dd5c8f4ef>`

- typedef struct :ref:`tagiecvaraccbrowsegetnext2_struct <structtagiecvaraccbrowsegetnext2__struct>` :ref:`iecvaraccbrowsegetnext2_struct <group___cmp_iec_var_access_itf_1ga1d4dc2f0b89bc4a4233fec90bad696b4>`

- typedef struct :ref:`tagiecvaraccbrowserecursive_struct <structtagiecvaraccbrowserecursive__struct>` :ref:`iecvaraccbrowserecursive_struct <group___cmp_iec_var_access_itf_1ga677ef0230bb65171b6f9aae4f8d3435f>`

- typedef struct :ref:`tagiecvaraccbrowseup2_struct <structtagiecvaraccbrowseup2__struct>` :ref:`iecvaraccbrowseup2_struct <group___cmp_iec_var_access_itf_1ga5a4a8e1d457fe9755c5e8386551d73ef>`

- typedef struct :ref:`tagiecvaraccexitvarinfo_struct <structtagiecvaraccexitvarinfo__struct>` :ref:`iecvaraccexitvarinfo_struct <group___cmp_iec_var_access_itf_1ga1c6c216918565e540ab1fe2ab96a1d85>`

- typedef struct :ref:`tagiecvaraccgetfirstinterface_struct <structtagiecvaraccgetfirstinterface__struct>` :ref:`iecvaraccgetfirstinterface_struct <group___cmp_iec_var_access_itf_1gadff429f5ef0fa9d2dc41c45317dd5562>`

- typedef struct :ref:`tagiecvaraccgetfirstinterface2_struct <structtagiecvaraccgetfirstinterface2__struct>` :ref:`iecvaraccgetfirstinterface2_struct <group___cmp_iec_var_access_itf_1ga4ff11e60f9b918097f40fb3c9ea953bd>`

- typedef struct :ref:`tagiecvaraccgetnextinterface_struct <structtagiecvaraccgetnextinterface__struct>` :ref:`iecvaraccgetnextinterface_struct <group___cmp_iec_var_access_itf_1ga4e67ef5258eae17f66c45e112e954a84>`

- typedef struct :ref:`tagiecvaraccgetnextinterface2_struct <structtagiecvaraccgetnextinterface2__struct>` :ref:`iecvaraccgetnextinterface2_struct <group___cmp_iec_var_access_itf_1gabec551da9e33b01f54bacd17a85f9679>`

- typedef struct :ref:`tagiecvaraccgetnode4_struct <structtagiecvaraccgetnode4__struct>` :ref:`iecvaraccgetnode4_struct <group___cmp_iec_var_access_itf_1ga25fe771b9ca2e17fc4611bca7262b445>`

- typedef struct :ref:`tagiecvaraccgetnodefullpath4_struct <structtagiecvaraccgetnodefullpath4__struct>` :ref:`iecvaraccgetnodefullpath4_struct <group___cmp_iec_var_access_itf_1ga7711ece8d2de545a7c282b7c61d44797>`

- typedef struct :ref:`tagiecvaraccgetnodename4_struct <structtagiecvaraccgetnodename4__struct>` :ref:`iecvaraccgetnodename4_struct <group___cmp_iec_var_access_itf_1ga8d30967974a16107a041d04319cc4e14>`

- typedef struct :ref:`tagiecvaraccgetsymbolsetmask_struct <structtagiecvaraccgetsymbolsetmask__struct>` :ref:`iecvaraccgetsymbolsetmask_struct <group___cmp_iec_var_access_itf_1ga2797728cd6e1a678775fd670ff813a2e>`

- typedef struct :ref:`tagiecvaraccinitvarinfo_struct <structtagiecvaraccinitvarinfo__struct>` :ref:`iecvaraccinitvarinfo_struct <group___cmp_iec_var_access_itf_1ga185900fe3308849081b8487f3a388c1a>`

- typedef struct :ref:`tagiecvaraccinitvarinfo2_struct <structtagiecvaraccinitvarinfo2__struct>` :ref:`iecvaraccinitvarinfo2_struct <group___cmp_iec_var_access_itf_1ga13fbbac923256fbb1ae65b7749d193a5>`

- typedef struct :ref:`tagiecvaraccinvalidatenode_struct <structtagiecvaraccinvalidatenode__struct>` :ref:`iecvaraccinvalidatenode_struct <group___cmp_iec_var_access_itf_1ga7e792159e11001ed44a4d44b4a3e2742>`

- typedef struct :ref:`tagiecvaraccnodeinfoaddbrowseinfo_struct <structtagiecvaraccnodeinfoaddbrowseinfo__struct>` :ref:`iecvaraccnodeinfoaddbrowseinfo_struct <group___cmp_iec_var_access_itf_1ga7234b7db42c7f7e0f9a42b4b81de1225>`

- typedef struct :ref:`tagiecvaraccnodeinfoaddreference_struct <structtagiecvaraccnodeinfoaddreference__struct>` :ref:`iecvaraccnodeinfoaddreference_struct <group___cmp_iec_var_access_itf_1ga8a3b4b6313262c5d7f4b0f294c326b97>`

- typedef struct :ref:`tagiecvaraccnodeinfogetbrowseinfo_struct <structtagiecvaraccnodeinfogetbrowseinfo__struct>` :ref:`iecvaraccnodeinfogetbrowseinfo_struct <group___cmp_iec_var_access_itf_1gafa2f0d6cff0cbae22b0ede41d2049c11>`

- typedef struct :ref:`tagiecvaraccnodeinfogetreference_struct <structtagiecvaraccnodeinfogetreference__struct>` :ref:`iecvaraccnodeinfogetreference_struct <group___cmp_iec_var_access_itf_1ga93eb5707f38fc19d5a895800b2adfc7e>`

- typedef struct :ref:`tagiecvaraccnodeinforemovebrowseinfo_struct <structtagiecvaraccnodeinforemovebrowseinfo__struct>` :ref:`iecvaraccnodeinforemovebrowseinfo_struct <group___cmp_iec_var_access_itf_1gaeab9798f5ca358586bd323b7114ba470>`

- typedef struct :ref:`tagiecvaraccnodeinforemovereference_struct <structtagiecvaraccnodeinforemovereference__struct>` :ref:`iecvaraccnodeinforemovereference_struct <group___cmp_iec_var_access_itf_1ga3ad805cd733d04660d3cb0eedce838c7>`

- typedef struct :ref:`tagiecvaraccregisterinstance_struct <structtagiecvaraccregisterinstance__struct>` :ref:`iecvaraccregisterinstance_struct <group___cmp_iec_var_access_itf_1ga51b46b86a0ae33fde35801db7b1f6737>`

- typedef struct :ref:`tagiecvaraccregisterinstance2_struct <structtagiecvaraccregisterinstance2__struct>` :ref:`iecvaraccregisterinstance2_struct <group___cmp_iec_var_access_itf_1ga5bc859b891f930649b8fcf1b968c3c53>`

- typedef struct :ref:`tagiecvaraccregisterinstance3_struct <structtagiecvaraccregisterinstance3__struct>` :ref:`iecvaraccregisterinstance3_struct <group___cmp_iec_var_access_itf_1gae116d7d79d1e884bcf6690d5137bbaa4>`

- typedef struct :ref:`tagiecvaraccregisterinstancebase_struct <structtagiecvaraccregisterinstancebase__struct>` :ref:`iecvaraccregisterinstancebase_struct <group___cmp_iec_var_access_itf_1ga0403f592ee6b11330e5e3e93d4739674>`

- typedef struct :ref:`tagiecvaraccsetsymbolconfigcrc_struct <structtagiecvaraccsetsymbolconfigcrc__struct>` :ref:`iecvaraccsetsymbolconfigcrc_struct <group___cmp_iec_var_access_itf_1ga0840d7b338a11f4486741dfe389fbb07>`

- typedef struct :ref:`tagiecvaraccunregisterinstance_struct <structtagiecvaraccunregisterinstance__struct>` :ref:`iecvaraccunregisterinstance_struct <group___cmp_iec_var_access_itf_1gaba6d299512653cfb29a4716f2db0d616>`

- typedef struct :ref:`tagiecvaraccupdatesymbolsets_struct <structtagiecvaraccupdatesymbolsets__struct>` :ref:`iecvaraccupdatesymbolsets_struct <group___cmp_iec_var_access_itf_1ga14d4a61498d6eaf2507b87d82380d5a1>`

- typedef enum :ref:`_IecVarAccBrowseDirection <group___cmp_iec_var_access_itf_1gaae1db1d53e1eaf49d7b481ffbad61bab>` :ref:`IecVarAccBrowseDirection <group___cmp_iec_var_access_itf_1ga6947b1464c32103b21f7a7becc5e1957>`

- typedef struct :ref:`_IecVarAccBrowseCallback <struct___iec_var_acc_browse_callback>` :ref:`IecVarAccBrowseCallback <group___cmp_iec_var_access_itf_1ga60f864ee75a3a9512db71fc063366dcb>`

- typedef void(* :ref:`PF_IECVARACC_BROWSECALLBACK <group___cmp_iec_var_access_itf_1ga3ca74d4d445ce8ce22989b92cfb40be0>`)(IecVarAccBrowseCallback *pBrowseParam)

- typedef :ref:`ICmpIecVarAccess_C <struct_i_cmp_iec_var_access___c>` :ref:`ICmpIecVarAccess <group___cmp_iec_var_access_itf_1gaa426786e17974209d90b6f5d40f68e21>`

Enumerations
------------

- enum :ref:`_IecVarAccBrowseDirection <group___cmp_iec_var_access_itf_1gaae1db1d53e1eaf49d7b481ffbad61bab>` { :ref:`BROWSEDIRECTION_ROOT <group___cmp_iec_var_access_itf_1ggaae1db1d53e1eaf49d7b481ffbad61baba26d9f6f94e12c093b28a6d4f29d8624f>`, :ref:`BROWSEDIRECTION_DOWN <group___cmp_iec_var_access_itf_1ggaae1db1d53e1eaf49d7b481ffbad61baba4a0860b338920fb6793273714e5cfdf2>`, :ref:`BROWSEDIRECTION_NEXT <group___cmp_iec_var_access_itf_1ggaae1db1d53e1eaf49d7b481ffbad61babab543fe60f81ad1ac3154b6dad4bd788f>`, :ref:`BROWSEDIRECTION_UP <group___cmp_iec_var_access_itf_1ggaae1db1d53e1eaf49d7b481ffbad61babaf3ab755625f693e97c8736b9e0c4f5fc>` }

Functions
---------

- void :ref:`iecvaraccbrowsedown2 <group___cmp_iec_var_access_itf_1gad9b4fc8ef389d8c5252549c276508a65>` (:ref:`iecvaraccbrowsedown2_struct <group___cmp_iec_var_access_itf_1ga46bae2b4c8426550105e346dd5c8f4ef>` * p)

- void :ref:`iecvaraccbrowsegetnext2 <group___cmp_iec_var_access_itf_1ga0884031da8629536bba5e9d1aa2c81ed>` (:ref:`iecvaraccbrowsegetnext2_struct <group___cmp_iec_var_access_itf_1ga1d4dc2f0b89bc4a4233fec90bad696b4>` * p)

- void :ref:`iecvaraccbrowserecursive <group___cmp_iec_var_access_itf_1gaf8cccd3258b06b570e2362601d8315a8>` (:ref:`iecvaraccbrowserecursive_struct <group___cmp_iec_var_access_itf_1ga677ef0230bb65171b6f9aae4f8d3435f>` * p)

- void :ref:`iecvaraccbrowseup2 <group___cmp_iec_var_access_itf_1gadeabedef7c709a613665453de9fa1c8a>` (:ref:`iecvaraccbrowseup2_struct <group___cmp_iec_var_access_itf_1ga5a4a8e1d457fe9755c5e8386551d73ef>` * p)

- void :ref:`iecvaraccexitvarinfo <group___cmp_iec_var_access_itf_1gae32a91c327579ab3b20cb5eb2eff1bd0>` (:ref:`iecvaraccexitvarinfo_struct <group___cmp_iec_var_access_itf_1ga1c6c216918565e540ab1fe2ab96a1d85>` * p)

- void :ref:`iecvaraccgetfirstinterface <group___cmp_iec_var_access_itf_1gac36ea09c27d89ce60604af14676a48f0>` (:ref:`iecvaraccgetfirstinterface_struct <group___cmp_iec_var_access_itf_1gadff429f5ef0fa9d2dc41c45317dd5562>` * p)

- void :ref:`iecvaraccgetfirstinterface2 <group___cmp_iec_var_access_itf_1gab40a9373b5133299999b66746a6761e8>` (:ref:`iecvaraccgetfirstinterface2_struct <group___cmp_iec_var_access_itf_1ga4ff11e60f9b918097f40fb3c9ea953bd>` * p)

- void :ref:`iecvaraccgetnextinterface <group___cmp_iec_var_access_itf_1ga29f406091ebcfa4dd1a9f7f61f2252c3>` (:ref:`iecvaraccgetnextinterface_struct <group___cmp_iec_var_access_itf_1ga4e67ef5258eae17f66c45e112e954a84>` * p)

- void :ref:`iecvaraccgetnextinterface2 <group___cmp_iec_var_access_itf_1gadd2e310b89ea6c4a9b4703ff6bd1f513>` (:ref:`iecvaraccgetnextinterface2_struct <group___cmp_iec_var_access_itf_1gabec551da9e33b01f54bacd17a85f9679>` * p)

- void :ref:`iecvaraccgetnode4 <group___cmp_iec_var_access_itf_1ga7733a2c7d4f8dd1ff493c3b361318560>` (:ref:`iecvaraccgetnode4_struct <group___cmp_iec_var_access_itf_1ga25fe771b9ca2e17fc4611bca7262b445>` * p)

- void :ref:`iecvaraccgetnodefullpath4 <group___cmp_iec_var_access_itf_1ga9058a8ea7e71ce8aaac606b652ad6890>` (:ref:`iecvaraccgetnodefullpath4_struct <group___cmp_iec_var_access_itf_1ga7711ece8d2de545a7c282b7c61d44797>` * p)

- void :ref:`iecvaraccgetnodename4 <group___cmp_iec_var_access_itf_1gab37f901650294cab160e977959ca7f83>` (:ref:`iecvaraccgetnodename4_struct <group___cmp_iec_var_access_itf_1ga8d30967974a16107a041d04319cc4e14>` * p)

- void :ref:`iecvaraccgetsymbolsetmask <group___cmp_iec_var_access_itf_1ga5dd42b509283b738b48754af295bc3ca>` (:ref:`iecvaraccgetsymbolsetmask_struct <group___cmp_iec_var_access_itf_1ga2797728cd6e1a678775fd670ff813a2e>` * p)

- void :ref:`iecvaraccinitvarinfo <group___cmp_iec_var_access_itf_1gaf3e493b1fb6215d81cc30ed6369a4221>` (:ref:`iecvaraccinitvarinfo_struct <group___cmp_iec_var_access_itf_1ga185900fe3308849081b8487f3a388c1a>` * p)

- void :ref:`iecvaraccinitvarinfo2 <group___cmp_iec_var_access_itf_1gafaaeaf65f298834d441c695432fc9383>` (:ref:`iecvaraccinitvarinfo2_struct <group___cmp_iec_var_access_itf_1ga13fbbac923256fbb1ae65b7749d193a5>` * p)

- void :ref:`iecvaraccinvalidatenode <group___cmp_iec_var_access_itf_1ga455ef5d7699698dabd431559cf1ddee0>` (:ref:`iecvaraccinvalidatenode_struct <group___cmp_iec_var_access_itf_1ga7e792159e11001ed44a4d44b4a3e2742>` * p)

- void :ref:`iecvaraccnodeinfoaddbrowseinfo <group___cmp_iec_var_access_itf_1gae006f7b047ea83593a099e67c8cfe42a>` (:ref:`iecvaraccnodeinfoaddbrowseinfo_struct <group___cmp_iec_var_access_itf_1ga7234b7db42c7f7e0f9a42b4b81de1225>` * p)

- void :ref:`iecvaraccnodeinfoaddreference <group___cmp_iec_var_access_itf_1gae2a84644899801e44848194080886051>` (:ref:`iecvaraccnodeinfoaddreference_struct <group___cmp_iec_var_access_itf_1ga8a3b4b6313262c5d7f4b0f294c326b97>` * p)

- void :ref:`iecvaraccnodeinfogetbrowseinfo <group___cmp_iec_var_access_itf_1ga26337fa813700ac8476d6013ff5e2a0d>` (:ref:`iecvaraccnodeinfogetbrowseinfo_struct <group___cmp_iec_var_access_itf_1gafa2f0d6cff0cbae22b0ede41d2049c11>` * p)

- void :ref:`iecvaraccnodeinfogetreference <group___cmp_iec_var_access_itf_1ga3923d3c2a00bd60cd1a9ea297cd378c4>` (:ref:`iecvaraccnodeinfogetreference_struct <group___cmp_iec_var_access_itf_1ga93eb5707f38fc19d5a895800b2adfc7e>` * p)

- void :ref:`iecvaraccnodeinforemovebrowseinfo <group___cmp_iec_var_access_itf_1ga614b1bdc38952509194da6ae9ccd2d4c>` (:ref:`iecvaraccnodeinforemovebrowseinfo_struct <group___cmp_iec_var_access_itf_1gaeab9798f5ca358586bd323b7114ba470>` * p)

- void :ref:`iecvaraccnodeinforemovereference <group___cmp_iec_var_access_itf_1ga77b4d40386e4bd3a4d931a54864c052f>` (:ref:`iecvaraccnodeinforemovereference_struct <group___cmp_iec_var_access_itf_1ga3ad805cd733d04660d3cb0eedce838c7>` * p)

- void :ref:`iecvaraccregisterinstance <group___cmp_iec_var_access_itf_1ga6c0e0a00cd99b83679929e84b105aa84>` (:ref:`iecvaraccregisterinstance_struct <group___cmp_iec_var_access_itf_1ga51b46b86a0ae33fde35801db7b1f6737>` * p)

- void :ref:`iecvaraccregisterinstance2 <group___cmp_iec_var_access_itf_1gab1fa009e14c4468e4e28642c737a5f69>` (:ref:`iecvaraccregisterinstance2_struct <group___cmp_iec_var_access_itf_1ga5bc859b891f930649b8fcf1b968c3c53>` * p)

- void :ref:`iecvaraccregisterinstance3 <group___cmp_iec_var_access_itf_1ga24b9d63be6c872ba306b0cf0e8e20f38>` (:ref:`iecvaraccregisterinstance3_struct <group___cmp_iec_var_access_itf_1gae116d7d79d1e884bcf6690d5137bbaa4>` * p)

- void :ref:`iecvaraccregisterinstancebase <group___cmp_iec_var_access_itf_1ga7c4500fc2270c23fc6e23cfc298ac1d2>` (:ref:`iecvaraccregisterinstancebase_struct <group___cmp_iec_var_access_itf_1ga0403f592ee6b11330e5e3e93d4739674>` * p)

- void :ref:`iecvaraccsetsymbolconfigcrc <group___cmp_iec_var_access_itf_1ga8b05c419beb475a4008e0d9055c7f09e>` (:ref:`iecvaraccsetsymbolconfigcrc_struct <group___cmp_iec_var_access_itf_1ga0840d7b338a11f4486741dfe389fbb07>` * p)

- void :ref:`iecvaraccunregisterinstance <group___cmp_iec_var_access_itf_1gafbba8b55669011bbb4662ee6c4a7d8f4>` (:ref:`iecvaraccunregisterinstance_struct <group___cmp_iec_var_access_itf_1gaba6d299512653cfb29a4716f2db0d616>` * p)

- void :ref:`iecvaraccupdatesymbolsets <group___cmp_iec_var_access_itf_1ga3bcb252b2d11bb78305c89379f3cd714>` (:ref:`iecvaraccupdatesymbolsets_struct <group___cmp_iec_var_access_itf_1ga14d4a61498d6eaf2507b87d82380d5a1>` * p)

- RTS_RESULT :ref:`IecVarAccInitVarInfo <group___cmp_iec_var_access_itf_1ga722faf6483e1c0cd61756b40902b2391>` (:ref:`VariableInformationStruct2 <group___iec_var_access___itfs_itf_1ga1ae47347becabb1b5592c417df1e3ab5>` * pVarInfo, RTS_UI16 nSizeOfVarInfo)

- RTS_RESULT :ref:`IecVarAccInitVarInfo2 <group___cmp_iec_var_access_itf_1ga5460422a4540f247b5a29bbf25139e1b>` (:ref:`VariableInformationStruct2 <group___iec_var_access___itfs_itf_1ga1ae47347becabb1b5592c417df1e3ab5>` * pVarInfo, RTS_UI16 nSizeOfVarInfo, RTS_HANDLE hUser)

- RTS_RESULT :ref:`IecVarAccExitVarInfo <group___cmp_iec_var_access_itf_1ga97b0fe9ad9fd0abb7adb9011b834165f>` (:ref:`VariableInformationStruct2 <group___iec_var_access___itfs_itf_1ga1ae47347becabb1b5592c417df1e3ab5>` * pVarInfo)

- RTS_RESULT :ref:`IecVarAccCopyVarInfo <group___cmp_iec_var_access_itf_1ga7707b94689989a881eb433ed97ef3130>` (:ref:`VariableInformationStruct2 <group___iec_var_access___itfs_itf_1ga1ae47347becabb1b5592c417df1e3ab5>` * pVariableInformationDest, :ref:`VariableInformationStruct2 <group___iec_var_access___itfs_itf_1ga1ae47347becabb1b5592c417df1e3ab5>` * pVariableInformationSrc)

- RTS_HANDLE :ref:`IecVarAccGetFirstInterface <group___cmp_iec_var_access_itf_1ga4aa0d771ef262824906ba1ed8128892a>` (RTS_RESULT * pResult)

- RTS_HANDLE :ref:`IecVarAccGetNextInterface <group___cmp_iec_var_access_itf_1gad0b0367b82aa3ba97d2f76de68be382e>` (RTS_HANDLE hPrevInterface, RTS_RESULT * pResult)

- RTS_RESULT :ref:`IecVarAccGetApplicationName <group___cmp_iec_var_access_itf_1ga0f3e6dedcabd964e441eb73cfa7fbdf7>` (RTS_HANDLE hInterface, char * pszApplicationName, int nMaxLen)

- RTS_HANDLE :ref:`IecVarAccCreateVarList <group___cmp_iec_var_access_itf_1gab9de52d6883c703a1ee8cacb6afe249a>` (RTS_UI32 ulChannelId, RTS_UI32 ulFlags, RTS_UI32 ulUpdateRateMs, RTS_RESULT * pResult)

- RTS_RESULT :ref:`IecVarAccDeleteVarList <group___cmp_iec_var_access_itf_1gac7c7933412d1244064b806a9f861bc3e>` (RTS_HANDLE hVarList)

- RTS_RESULT :ref:`IecVarAccDeleteVarLists <group___cmp_iec_var_access_itf_1gabb3ff1d88df9f76b471246119f76e78f>` (RTS_UI32 ulChannelId)

- RTS_RESULT :ref:`IecVarAccDeleteAllLists <group___cmp_iec_var_access_itf_1ga889121b9d6d0ccd93bf8586b010f3d0b>` (void)

- RTS_RESULT :ref:`IecVarAccVarListGetFlags <group___cmp_iec_var_access_itf_1ga2c97a334e372d4b676f1afc0aa3a5bc9>` (RTS_HANDLE hVarList, RTS_UI32 * pulFlags)

- RTS_HANDLE :ref:`IecVarAccAppendVar <group___cmp_iec_var_access_itf_1gac4db3907315200638e33a5e77f41c968>` (RTS_HANDLE hVarList, char * pszVar, RTS_SIZE ulSize, RTS_UI32 hClientHandle, RTS_RESULT * pResult)

- RTS_RESULT :ref:`IecVarAccRemoveVar <group___cmp_iec_var_access_itf_1gaecddfad2f2b3cf09bc15256e48481773>` (RTS_HANDLE hVarList, RTS_HANDLE hVar)

- RTS_HANDLE :ref:`IecVarAccGetFirstVar <group___cmp_iec_var_access_itf_1ga325b815dc44aa469f4a8741eb4d97ddf>` (RTS_HANDLE hVarList, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`IecVarAccGetNextVar <group___cmp_iec_var_access_itf_1ga6b57c97f336cbb3295d93581a110e526>` (RTS_HANDLE hVarList, RTS_HANDLE hPrevVar, RTS_RESULT * pResult)

- RTS_RESULT :ref:`IecVarAccInvalidateVar <group___cmp_iec_var_access_itf_1gab7320325b460df2fe14b787bd6bb388d>` (RTS_HANDLE hVarList, RTS_HANDLE hVar)

- RTS_SIZE :ref:`IecVarAccReadVar <group___cmp_iec_var_access_itf_1gaf583afb5e5bf47c0979fb77e10a83784>` (RTS_HANDLE hVar, void * pData, RTS_SIZE ulLen, RTS_UI32 * pulQuality, int varFlags, RTS_RESULT * pResult)

- RTS_SIZE :ref:`IecVarAccWriteVar <group___cmp_iec_var_access_itf_1ga4c4b1886906bcef5126035edf4b7e986>` (RTS_HANDLE hVar, void * pData, RTS_SIZE ulLen, int varFlags, RTS_RESULT * pResult)

- RTS_SIZE :ref:`IecVarAccWriteVar2 <group___cmp_iec_var_access_itf_1gab4860f6330508f99a97cfe724be3b50f>` (RTS_HANDLE hVar, void * pData, RTS_SIZE ulLen, int varFlags, RTS_UI32 ulSessionId, RTS_RESULT * pResult)

- RTS_RESULT :ref:`IecVarAccBeginVariableConfiguration <group___cmp_iec_var_access_itf_1ga418190796c87f261ec1b18ae232f07d4>` (RTS_HANDLE hInterface, int bBlocking)

- RTS_RESULT :ref:`IecVarAccAppendVariable <group___cmp_iec_var_access_itf_1ga7775e03e4d3a8637c97d762b0811a65f>` (RTS_HANDLE hInterface, RTS_HANDLE hNode)

- RTS_RESULT :ref:`IecVarAccAppendVariable3 <group___cmp_iec_var_access_itf_1ga23f9fb98ffe100ec27b2a515bb27f074>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, :ref:`VariableInformationStruct2 <group___iec_var_access___itfs_itf_1ga1ae47347becabb1b5592c417df1e3ab5>` * pVariableInformation)

- RTS_RESULT :ref:`IecVarAccRemoveVariable <group___cmp_iec_var_access_itf_1ga47f1d4d759fca05cf4d64af52871859e>` (RTS_HANDLE hInterface, RTS_HANDLE hNode)

- RTS_RESULT :ref:`IecVarAccRemoveVariable3 <group___cmp_iec_var_access_itf_1ga4ca3f5246bbdc3ddb0238f5d42142290>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, :ref:`VariableInformationStruct2 <group___iec_var_access___itfs_itf_1ga1ae47347becabb1b5592c417df1e3ab5>` * pVariableInformation)

- RTS_RESULT :ref:`IecVarAccEndVariableConfiguration <group___cmp_iec_var_access_itf_1ga0e383a9b609d5b690eac92362f4def02>` (RTS_HANDLE hInterface)

- RTS_RESULT :ref:`IecVarAccBrowseRecursive <group___cmp_iec_var_access_itf_1gad1b0dd591f89b3fda26e4e93d422a8c6>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, :ref:`VariableInformationStruct3 <group___iec_var_access___itfs_itf_1ga28313d192103af84467da2cdf6c22766>` * pVariableInformation, :ref:`PF_IECVARACC_BROWSECALLBACK <group___cmp_iec_var_access_itf_1ga3ca74d4d445ce8ce22989b92cfb40be0>`  pfBrowseCallback, RTS_BOOL bIecCallback, void * pUserParameter)

- RTS_HANDLE :ref:`IecVarAccBrowseGetRoot <group___cmp_iec_var_access_itf_1ga77b3849fa95b83076ca3a11a34cc523d>` (RTS_HANDLE hInterface, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`IecVarAccBrowseGetRoot2 <group___cmp_iec_var_access_itf_1gac83af04253b433db9534ba7f6cdd9ae8>` (RTS_HANDLE hInterface, RTS_HANDLE hUser, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`IecVarAccBrowseDown <group___cmp_iec_var_access_itf_1gaf34865e321ec497113f277eb8162e79e>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`IecVarAccBrowseDown2 <group___cmp_iec_var_access_itf_1ga6efc0067f129d689779d731e29fb5df2>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, :ref:`VariableInformationStruct3 <group___iec_var_access___itfs_itf_1ga28313d192103af84467da2cdf6c22766>` * pVariableInformation, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`IecVarAccBrowseDown3 <group___cmp_iec_var_access_itf_1ga3fb0aa335f1c71392518657b1e9778f2>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, :ref:`VariableInformationStruct2 <group___iec_var_access___itfs_itf_1ga1ae47347becabb1b5592c417df1e3ab5>` * pVariableInformation, RTS_BOOL bBrowseComplexTypes, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`IecVarAccBrowseUp <group___cmp_iec_var_access_itf_1ga22fa16e6bf2d11b5187b1576e669fcda>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`IecVarAccBrowseUp2 <group___cmp_iec_var_access_itf_1ga83f59c0af1e78b23afeeb00b1340618a>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, :ref:`VariableInformationStruct3 <group___iec_var_access___itfs_itf_1ga28313d192103af84467da2cdf6c22766>` * pVariableInformation, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`IecVarAccBrowseUp3 <group___cmp_iec_var_access_itf_1gac64d2f3228b750df1d247f5455e526a0>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, :ref:`VariableInformationStruct2 <group___iec_var_access___itfs_itf_1ga1ae47347becabb1b5592c417df1e3ab5>` * pVariableInformation, RTS_BOOL bBrowseComplexTypes, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`IecVarAccBrowseGetNext <group___cmp_iec_var_access_itf_1ga995df33faec377743519ff3c2ca298fb>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`IecVarAccBrowseGetNext2 <group___cmp_iec_var_access_itf_1gaa4c72362843603b3f0d5407cf6ed1b11>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, :ref:`VariableInformationStruct3 <group___iec_var_access___itfs_itf_1ga28313d192103af84467da2cdf6c22766>` * pVariableInformation, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`IecVarAccBrowseGetNext3 <group___cmp_iec_var_access_itf_1ga79385b3399724319fd1dc3b15c43553e>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, :ref:`VariableInformationStruct2 <group___iec_var_access___itfs_itf_1ga1ae47347becabb1b5592c417df1e3ab5>` * pVariableInformation, RTS_BOOL bBrowseComplexTypes, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`IecVarAccBrowseGetChildByIndex <group___cmp_iec_var_access_itf_1ga475ea49521cc9b91df42be4c73126140>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_UI32 ulIndex, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`IecVarAccBrowseGetChildByIndex2 <group___cmp_iec_var_access_itf_1ga1d27cac93f2b795bba01f5910c338e28>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_UI32 ulIndex, :ref:`VariableInformationStruct2 <group___iec_var_access___itfs_itf_1ga1ae47347becabb1b5592c417df1e3ab5>` * pVariableInformation, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`IecVarAccGetNode <group___cmp_iec_var_access_itf_1ga7b185cab50f947cf607fcc3762d85ea4>` (char * pszPath, RTS_SIZE * pulOffset, RTS_HANDLE * phInterface, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`IecVarAccGetNode3 <group___cmp_iec_var_access_itf_1gab47d5d5b3334338ea9543e62b7c588bc>` (char * pszPath, RTS_HANDLE * phInterface, :ref:`VariableInformationStruct2 <group___iec_var_access___itfs_itf_1ga1ae47347becabb1b5592c417df1e3ab5>` * pVariableInformation, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`IecVarAccGetNode4 <group___cmp_iec_var_access_itf_1ga0cf0feab72cb496b2fa067740952f217>` (char * pszPath, RTS_HANDLE * phInterface, :ref:`VariableInformationStruct3 <group___iec_var_access___itfs_itf_1ga28313d192103af84467da2cdf6c22766>` * pVariableInformation, RTS_RESULT * pResult)

- int :ref:`IecVarAccGetNodeFullPath <group___cmp_iec_var_access_itf_1ga5c350ab398fb9ad7ada87b8bbf563371>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, char * pszPath, int iMaxPath, RTS_RESULT * pResult)

- int :ref:`IecVarAccGetNodeFullPath3 <group___cmp_iec_var_access_itf_1ga36a0557e1e7a430ffc39f248a7f21242>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, :ref:`VariableInformationStruct2 <group___iec_var_access___itfs_itf_1ga1ae47347becabb1b5592c417df1e3ab5>` * pVariableInformation, char * pszPath, int iMaxPath, RTS_RESULT * pResult)

- int :ref:`IecVarAccGetNodeFullPath4 <group___cmp_iec_var_access_itf_1ga0863e37c60512949b6362b96d89d8a1d>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, :ref:`VariableInformationStruct3 <group___iec_var_access___itfs_itf_1ga28313d192103af84467da2cdf6c22766>` * pVariableInformation, char * pszPath, int iMaxPath, RTS_RESULT * pResult)

- char * :ref:`IecVarAccGetNodeName <group___cmp_iec_var_access_itf_1gae41411f2114b601a2030a108c1e56248>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT * pResult)

- char * :ref:`IecVarAccGetNodeName3 <group___cmp_iec_var_access_itf_1gac2d0cf6d0c549665b6caf2c549b7e544>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, :ref:`VariableInformationStruct2 <group___iec_var_access___itfs_itf_1ga1ae47347becabb1b5592c417df1e3ab5>` * pVariableInformation, RTS_RESULT * pResult)

- RTS_RESULT :ref:`IecVarAccGetNodeName4 <group___cmp_iec_var_access_itf_1ga0534f71c17820b2ff84de3f3f99e9b31>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, :ref:`VariableInformationStruct3 <group___iec_var_access___itfs_itf_1ga28313d192103af84467da2cdf6c22766>` * pVariableInformation, char * pszNodeName, RTS_UI32 nNodeNameLen)

- RTS_IEC_INT :ref:`IecVarAccGetAccessRights <group___cmp_iec_var_access_itf_1gafa2ee937409344d46dcb79d1240d0c29>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT * pResult)

- RTS_IEC_INT :ref:`IecVarAccGetAccessRights2 <group___cmp_iec_var_access_itf_1gaea162133f4291b74638638e7846fd131>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, :ref:`VariableInformationStruct2 <group___iec_var_access___itfs_itf_1ga1ae47347becabb1b5592c417df1e3ab5>` * pVariableInformation, RTS_BOOL bGetUserRights, RTS_RESULT * pResult)

- void * :ref:`IecVarAccGetAddress <group___cmp_iec_var_access_itf_1gaa1eaf3290d6d024bbd66dad98b1a119d>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT * pResult)

- void * :ref:`IecVarAccGetAddress2 <group___cmp_iec_var_access_itf_1ga174228d840c9aba801527fde2675ba80>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_SIZE ulOffset, RTS_RESULT * pResult)

- void * :ref:`IecVarAccGetAddress3 <group___cmp_iec_var_access_itf_1ga884daf0176d3582cc5cf7a866f60cfdb>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, :ref:`VariableInformationStruct2 <group___iec_var_access___itfs_itf_1ga1ae47347becabb1b5592c417df1e3ab5>` * pVariableInformation, RTS_RESULT * pResult)

- RTS_IEC_INT :ref:`IecVarAccGetNodeType <group___cmp_iec_var_access_itf_1gac9661cb807489559d01e51d5fe4d7471>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT * pResult)

- RTS_SIZE :ref:`IecVarAccGetSize <group___cmp_iec_var_access_itf_1ga676e57d6fba66f482521b4d1b52eb651>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT * pResult)

- RTS_SIZE :ref:`IecVarAccGetSize2 <group___cmp_iec_var_access_itf_1ga8a00da17bbafad16137831fd6b7c9cc3>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_SIZE ulOffset, RTS_RESULT * pResult)

- RTS_SIZE :ref:`IecVarAccGetSize3 <group___cmp_iec_var_access_itf_1gaa72c0fd79a6635f9472c30eff1361891>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, :ref:`VariableInformationStruct2 <group___iec_var_access___itfs_itf_1ga1ae47347becabb1b5592c417df1e3ab5>` * pVariableInformation, RTS_RESULT * pResult)

- RTS_SIZE :ref:`IecVarAccGetSwapSize <group___cmp_iec_var_access_itf_1gabe5b217e9ff7363b95863f2e9feb3746>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT * pResult)

- :ref:`TypeClass3 <group___sys_internal_lib_itf___typeclass_1gaa0b5be7baae0808a4f3bb9ccc5c79a39>` :ref:`IecVarAccGetTypeClass <group___cmp_iec_var_access_itf_1gaa5bc0641efceaf778958f2510a0636f7>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT * pResult)

- :ref:`TypeClass3 <group___sys_internal_lib_itf___typeclass_1gaa0b5be7baae0808a4f3bb9ccc5c79a39>` :ref:`IecVarAccGetTypeClass3 <group___cmp_iec_var_access_itf_1gab1432dd0ab4697d17566b52ff3d7cf4e>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, :ref:`VariableInformationStruct2 <group___iec_var_access___itfs_itf_1ga1ae47347becabb1b5592c417df1e3ab5>` * pVariableInformation, RTS_RESULT * pResult)

- RTS_SIZE :ref:`IecVarAccGetValue <group___cmp_iec_var_access_itf_1ga2141fc2ba3a6666281e2d3010c42b60d>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, void * pDest, RTS_SIZE ulOffset, RTS_SIZE ulSize, RTS_RESULT * pResult)

- RTS_SIZE :ref:`IecVarAccGetValue3 <group___cmp_iec_var_access_itf_1ga790587021297dbc40405a7a22f947f90>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, :ref:`VariableInformationStruct2 <group___iec_var_access___itfs_itf_1ga1ae47347becabb1b5592c417df1e3ab5>` * pVariableInformation, void * pDest, RTS_SIZE ulSize, RTS_RESULT * pResult)

- RTS_SIZE :ref:`IecVarAccSetValue <group___cmp_iec_var_access_itf_1gaee41867702b94ec9a0a0fac61af96197>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, void * pSrc, RTS_SIZE ulOffset, RTS_SIZE ulSize, RTS_RESULT * pResult)

- RTS_SIZE :ref:`IecVarAccSetValue3 <group___cmp_iec_var_access_itf_1ga0abf53e66a108815f9f945b412bf297d>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, :ref:`VariableInformationStruct2 <group___iec_var_access___itfs_itf_1ga1ae47347becabb1b5592c417df1e3ab5>` * pVariableInformation, void * pSrc, RTS_SIZE ulSize, RTS_RESULT * pResult)

- RTS_SIZE :ref:`IecVarAccSwap <group___cmp_iec_var_access_itf_1ga3f35d3f15c5317c559b4b6b66fb5a799>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, void * pData, RTS_SIZE ulSize, int bMotorola, RTS_RESULT * pResult)

- RTS_SIZE :ref:`IecVarAccSwap2 <group___cmp_iec_var_access_itf_1gae9596f6d7b9153e18fc29f16bc8ff8d4>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, void * pData, RTS_SIZE ulSize, int bMotorola, RTS_SIZE ulOffset, RTS_RESULT * pResult)

- RTS_SIZE :ref:`IecVarAccSwap3 <group___cmp_iec_var_access_itf_1ga276d1d9bc937ea721327368adc39d0e6>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, :ref:`VariableInformationStruct2 <group___iec_var_access___itfs_itf_1ga1ae47347becabb1b5592c417df1e3ab5>` * pVariableInformation, void * pData, RTS_SIZE ulSize, int bMotorola, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`IecVarAccGetTypeNode <group___cmp_iec_var_access_itf_1ga6dc7fb4f1ce8a1d84395984ada8025dc>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`IecVarAccGetTypeNode2 <group___cmp_iec_var_access_itf_1ga3eb6e3dd592af9c3c84472d720693d95>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_SIZE ulOffset, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`IecVarAccGetTypeNode3 <group___cmp_iec_var_access_itf_1ga0caef1ef8ae7573466e32922796adeb1>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, :ref:`VariableInformationStruct2 <group___iec_var_access___itfs_itf_1ga1ae47347becabb1b5592c417df1e3ab5>` * pVariableInformation, RTS_RESULT * pResult)

- RTS_RESULT :ref:`IecVarAccGetTypeDesc <group___cmp_iec_var_access_itf_1ga91251974f7900189e40549f77417a983>` (RTS_HANDLE hInterface, RTS_HANDLE hTypeNode, :ref:`TypeDescAsUnion <group___iec_var_access___itfs_itf_1ga75453f9f66fab7d5d36cd8cf6e04566b>` * pTypeDesc)

- RTS_RESULT :ref:`IecVarAccGetAddressInfo <group___cmp_iec_var_access_itf_1gaa606497474807e8a13598ceabd5a10ac>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, :ref:`VariableInformationStruct2 <group___iec_var_access___itfs_itf_1ga1ae47347becabb1b5592c417df1e3ab5>` * pVariableInformation, char * pszAdressInfo, int * pnAddressInfoLen)

- RTS_I32 :ref:`IecVarAccGetNumOfTypes <group___cmp_iec_var_access_itf_1gaab4b0c1626d8a4e65bedb03a102a531d>` (RTS_HANDLE hInterface, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`IecVarAccGetTypeNodeByIndex <group___cmp_iec_var_access_itf_1ga9d75461cd7b83a51b899eabdfa0fa616>` (RTS_HANDLE hInterface, RTS_I32 nIndex, RTS_RESULT * pResult)

- char * :ref:`IecVarAccGetTypeName <group___cmp_iec_var_access_itf_1ga720265ea27770f46180b84b8dc5cdcad>` (RTS_HANDLE hInterface, RTS_HANDLE hTypeNode, RTS_RESULT * pResult)

- :ref:`TypeClass3 <group___sys_internal_lib_itf___typeclass_1gaa0b5be7baae0808a4f3bb9ccc5c79a39>` :ref:`IecVarAccGetTypeClassFromType <group___cmp_iec_var_access_itf_1gafa120fb54bc99900ea9ee5710bab3153>` (RTS_HANDLE hInterface, RTS_HANDLE hTypeNode, RTS_IEC_DWORD dwFlags, RTS_RESULT * pResult)

- :ref:`POUClass <group___cmp_iec_var_access_itf___p_o_u_class_1ga035e3d5685b47689a39345af2a7a4ea4>` :ref:`IecVarAccGetPOUClass <group___cmp_iec_var_access_itf_1ga559ffe28b5222970c77b7e5f43b87f93>` (RTS_HANDLE hInterface, RTS_HANDLE hTypeNode, RTS_RESULT * pResult)

- RTS_UI32 :ref:`IecVarAccGetNodeFlags <group___cmp_iec_var_access_itf_1gaed13ac03ee8ccf2194ae77f9c389e7fc>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT * pResult)

- RTS_UI16 :ref:`IecVarAccGetNumOfAttributes <group___cmp_iec_var_access_itf_1gad92d11ef8fc40cee078d63a29040101a>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT * pResult)

- char * :ref:`IecVarAccGetAttributeByIndex <group___cmp_iec_var_access_itf_1ga5a486ad34bc9f59dee933d615fdfaae9>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_UI16 ui16Index, RTS_RESULT * pResult)

- :ref:`EnumValues <group___iec_var_access___itfs_itf_1gabec54f2f1e411c4f15a0b60ec4828a10>` * :ref:`IecVarAccGetEnumValues <group___cmp_iec_var_access_itf_1gae564e9d09383778e8ba8ffc74c34bd37>` (RTS_HANDLE hInterface, RTS_HANDLE hTypeNode, RTS_I16 * pi16NumOfEnums, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`IecVarAccGetDerivedBaseType <group___cmp_iec_var_access_itf_1ga68c4d859a8609329cecec7ff094e0184>` (RTS_HANDLE hInterface, RTS_HANDLE hTypeNode, RTS_RESULT * pResult)

- RTS_BOOL :ref:`IecVarAccIsDerivedType <group___cmp_iec_var_access_itf_1ga49854cbdcb7fa57210f3d9d50b2de70e>` (RTS_HANDLE hInterface, RTS_HANDLE hTypeNode, RTS_RESULT * pResult)

- RTS_SIZE :ref:`IecVarAccGetClientOffset <group___cmp_iec_var_access_itf_1gab541def6dd65399a4f7ba20d1ec69956>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT * pResult)

- RTS_IEC_LWORD :ref:`IecVarAccGetNamespaceNodeFlags <group___cmp_iec_var_access_itf_1ga1511d714cba0d65818a128b6a045d2d2>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT * pResult)

- RTS_SIZE :ref:`IecVarAccGetNativeSize <group___cmp_iec_var_access_itf_1gad4a7527069c60e3bc51b87e150069e6e>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, :ref:`VariableInformationStruct2 <group___iec_var_access___itfs_itf_1ga1ae47347becabb1b5592c417df1e3ab5>` * pVariableInformation, RTS_RESULT * pResult)

- :ref:`EnumAttributes <group___iec_var_access___itfs_itf_1gadc8196f9ee2f89d90244d9cb143c91de>` * :ref:`IecVarAccGetEnumMemberAttributeList <group___cmp_iec_var_access_itf_1gadaa8713059f58a06b297db54efe3f8c8>` (RTS_HANDLE hInterface, RTS_HANDLE hTypeNode, RTS_I16 * pnNumOfEnumValues, RTS_RESULT * pResult)

- RTS_UI16 :ref:`IecVarAccGetNumOfTypeAttributes <group___cmp_iec_var_access_itf_1ga5e65112687f8ad7b346df17f9aea77f9>` (RTS_HANDLE hInterface, RTS_HANDLE hTypeNode, RTS_RESULT * pResult)

- char * :ref:`IecVarAccGetTypeAttributeByIndex <group___cmp_iec_var_access_itf_1ga029b7cf3c4b47ea14e826f761e46ba51>` (RTS_HANDLE hInterface, RTS_HANDLE hTypeNode, RTS_UI16 wIndex, RTS_RESULT * pResult)

- RTS_BOOL :ref:`IecVarAccGetRange <group___cmp_iec_var_access_itf_1ga1b5d953c7b9933518076de734b4da22c>` (RTS_HANDLE hInterface, RTS_HANDLE hTypeNode, RTS_UI64 * pLower, RTS_UI64 * pUpper, RTS_RESULT * pResult)

- RTS_RESULT :ref:`IecVarAccGetContentFeatureFlags <group___cmp_iec_var_access_itf_1gaf0bdc4e113c0009e4a0b2fcdb63f984e>` (RTS_HANDLE hInterface, RTS_IEC_INT * pContentFeatureFlags)

- RTS_RESULT :ref:`IecVarAccExecuteCall <group___cmp_iec_var_access_itf_1ga51360c9ec3cb48086ad5ce79f1a15c19>` (RTS_HANDLE hInterface, RTS_HANDLE hNode, :ref:`VariableInformationStruct2 <group___iec_var_access___itfs_itf_1ga1ae47347becabb1b5592c417df1e3ab5>` * pVariableInformation, RTS_UI8 * pArgumentBuffer, RTS_SIZE nArgumentBufferSize)

- RTS_HANDLE :ref:`IecVarAccGetReferenceBaseType <group___cmp_iec_var_access_itf_1ga7d3d550cc0c5f3d7fb5d633d654ed28c>` (RTS_HANDLE hInterface, RTS_HANDLE hTypeNode, RTS_RESULT * pResult)

.. _group___cmp_iec_var_access_itf-details:

Detailed Description
--------------------

Interface of CmpIecVarAccess.

Interface of the IEC variable access component.

The expoted symbols of an application are generated in a separate child application, e.g.: Application1 // Application, which symbols are exported Application1.__Symbols // Application, that contains the symbols

Each symbolic variable is generated as a separate function block, here called leaf node. Each part of the namespace of a symbol is generated as a separate function block too, here called branch node. Each data type is generated globally as a separate typenode functionblock. Each leaf node has a reference to its typenode to describe the datatype.

Example: Branch node | Branch node | | Leaf node | | | "Application1.GVL.A" // Variable A in the global variable list "Application1.PLC_PRG.B" // Variable B in the main program PLC_PRG "Application1.PLC_PRG.C[5]" // Array index 5 of the array C in the main program PLC_PRG "Application1.PLC_PRG.D.E" // Element E of the structure D in main program PLC_PRG

TypeNode1=BYTE TypeNode2=INT TypeNode3=WORD TypeNode4=DWORD TypeNode5=ARRAY [0..14] OF TypeNode1 TypeNode6=STRUCT{E=TypeNode3, EE=TypeNode7,EEE=TypeNode2}; TypeNode7=REAL

Application1.GVL.A: TypeNode1 Application1.PLC_PRG.B: TypeNode4 Application1.PLC_PRG.C: TypeNode5 Application1.PLC_PRG.C[5]: TypeNode1 Application1.PLC_PRG.D: TypeNode6 Application1.PLC_PRG.D.E: TypeNode3

**Copyright:**

Copyright (c) 2017-2018 CODESYS GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved.

Macro Definition Documentation
------------------------------
.. _group___cmp_iec_var_access_itf_1ga88ff35ae96eebfad5e5a4dd17eaab75b:

#define IECVARACCESS_NUM_OF_STATIC_APP 4
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1gaabcbc942432eac42a94946ebcbe6a2ae:

#define IECVARACCESS_ROOT_NODE "ROOT__NODE"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1gafdb07f5920b19423aa13db77e5a0d15f:

#define IECVARACCESS_NUM_OF_STATIC_VARLISTS 10
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1ga6014ff42c782c68a8aef18bd690bb0b0:

#define IECVARACCESS_NUM_OF_STATIC_VARS 1000
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1ga936125fdbf8f939421598d9ede1d9e11:

#define CMPIECVARACCESS_NUM_OF_STATIC_VARLISTS :ref:`IECVARACCESS_NUM_OF_STATIC_VARLISTS <group___cmp_iec_var_access_itf_1gafdb07f5920b19423aa13db77e5a0d15f>`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1ga756b4308a9550fa5ddde37218eaf4d41:

#define CMPIECVARACCESS_NUM_OF_STATIC_VARS :ref:`IECVARACCESS_NUM_OF_STATIC_VARS <group___cmp_iec_var_access_itf_1ga6014ff42c782c68a8aef18bd690bb0b0>`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1ga8e28463565d28f8ccc799ecfe894b8a5:

#define CMPIECVARACCESS_NUM_OF_STATIC_BROWSEINFOS 10
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1ga8f58c4daeea94667d861dd32cbc476cd:

#define TCF_GET_TYPE 0
^^^^^^^^^^^^^^^^^^^^^^

TypeClassFlags: Flags for VarAccGetTypeClassFromType Get the native TypeClass3:

- For an array you get TYPE3_ARRAY

- For an structure/FB you get TYPE3_USERDEF

- For simple types you get the native TypeClass3 entry Return the default type class (as returned in :ref:`IecVarAccGetTypeClass() <group___cmp_iec_var_access_itf_1gaa5bc0641efceaf778958f2510a0636f7>` .

.. _group___cmp_iec_var_access_itf_1ga26b159ad229b0756ab853156d42e63e6:

#define TCF_GET_BASE_TYPE 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the base type of an array as TypeClass3. E.g. for an ARRAY [] OF BYTE you get TYPE3_BYTE.

.. _group___cmp_iec_var_access_itf_1ga14618ab1b5e7e863af7d98703ac8b73a:

#define TCF_GET_POU_TYPE 2
^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the POUType of a userdef type (TYPE3_USERDEF). See POUTypeClass.

.. _group___cmp_iec_var_access_itf_1gaeb83e8407b113379c9cd94aed18adb5b:

#define TCF_GET_ENUM_TYPE 4
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Return TYPE3_ENUM if the type is an enum. See TypeClass3 in :ref:`SysInternalLibItf.h <_sys_internal_lib_itf_8h>` for details.

.. _group___cmp_iec_var_access_itf_1ga9afce982cc399358aa2af19aec93b42c:

#define ITF_CmpIecVarAccess
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1ga3ef74ef14f3df6ab57ff520fa288eef8:

#define EXTITF_CmpIecVarAccess
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___cmp_iec_var_access_itf_1ga46bae2b4c8426550105e346dd5c8f4ef:

typedef struct tagiecvaraccbrowsedown2_struct  iecvaraccbrowsedown2_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EXTERN LIB SECTION BEGIN

iecvaraccbrowsedown2

.. _group___cmp_iec_var_access_itf_1ga1d4dc2f0b89bc4a4233fec90bad696b4:

typedef struct tagiecvaraccbrowsegetnext2_struct  iecvaraccbrowsegetnext2_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccbrowsegetnext2

.. _group___cmp_iec_var_access_itf_1ga677ef0230bb65171b6f9aae4f8d3435f:

typedef struct tagiecvaraccbrowserecursive_struct  iecvaraccbrowserecursive_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccbrowserecursive

.. _group___cmp_iec_var_access_itf_1ga5a4a8e1d457fe9755c5e8386551d73ef:

typedef struct tagiecvaraccbrowseup2_struct  iecvaraccbrowseup2_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccbrowseup2

.. _group___cmp_iec_var_access_itf_1ga1c6c216918565e540ab1fe2ab96a1d85:

typedef struct tagiecvaraccexitvarinfo_struct  iecvaraccexitvarinfo_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccexitvarinfo

.. _group___cmp_iec_var_access_itf_1gadff429f5ef0fa9d2dc41c45317dd5562:

typedef struct tagiecvaraccgetfirstinterface_struct  iecvaraccgetfirstinterface_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccgetfirstinterface

.. _group___cmp_iec_var_access_itf_1ga4ff11e60f9b918097f40fb3c9ea953bd:

typedef struct tagiecvaraccgetfirstinterface2_struct  iecvaraccgetfirstinterface2_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccgetfirstinterface2

.. _group___cmp_iec_var_access_itf_1ga4e67ef5258eae17f66c45e112e954a84:

typedef struct tagiecvaraccgetnextinterface_struct  iecvaraccgetnextinterface_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccgetnextinterface

.. _group___cmp_iec_var_access_itf_1gabec551da9e33b01f54bacd17a85f9679:

typedef struct tagiecvaraccgetnextinterface2_struct  iecvaraccgetnextinterface2_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccgetnextinterface2

.. _group___cmp_iec_var_access_itf_1ga25fe771b9ca2e17fc4611bca7262b445:

typedef struct tagiecvaraccgetnode4_struct  iecvaraccgetnode4_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccgetnode4

.. _group___cmp_iec_var_access_itf_1ga7711ece8d2de545a7c282b7c61d44797:

typedef struct tagiecvaraccgetnodefullpath4_struct  iecvaraccgetnodefullpath4_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccgetnodefullpath4

.. _group___cmp_iec_var_access_itf_1ga8d30967974a16107a041d04319cc4e14:

typedef struct tagiecvaraccgetnodename4_struct  iecvaraccgetnodename4_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccgetnodename4

.. _group___cmp_iec_var_access_itf_1ga2797728cd6e1a678775fd670ff813a2e:

typedef struct tagiecvaraccgetsymbolsetmask_struct  iecvaraccgetsymbolsetmask_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccgetsymbolsetmask

.. _group___cmp_iec_var_access_itf_1ga185900fe3308849081b8487f3a388c1a:

typedef struct tagiecvaraccinitvarinfo_struct  iecvaraccinitvarinfo_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccinitvarinfo

.. _group___cmp_iec_var_access_itf_1ga13fbbac923256fbb1ae65b7749d193a5:

typedef struct tagiecvaraccinitvarinfo2_struct  iecvaraccinitvarinfo2_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccinitvarinfo2

.. _group___cmp_iec_var_access_itf_1ga7e792159e11001ed44a4d44b4a3e2742:

typedef struct tagiecvaraccinvalidatenode_struct  iecvaraccinvalidatenode_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccinvalidatenode

.. _group___cmp_iec_var_access_itf_1ga7234b7db42c7f7e0f9a42b4b81de1225:

typedef struct tagiecvaraccnodeinfoaddbrowseinfo_struct  iecvaraccnodeinfoaddbrowseinfo_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Signature deactivated because of Interface type in RtsBrowseInfo

.. _group___cmp_iec_var_access_itf_1ga8a3b4b6313262c5d7f4b0f294c326b97:

typedef struct tagiecvaraccnodeinfoaddreference_struct  iecvaraccnodeinfoaddreference_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccnodeinfoaddreference

.. _group___cmp_iec_var_access_itf_1gafa2f0d6cff0cbae22b0ede41d2049c11:

typedef struct tagiecvaraccnodeinfogetbrowseinfo_struct  iecvaraccnodeinfogetbrowseinfo_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Signature deactivated because of Interface type in RtsBrowseInfo

.. _group___cmp_iec_var_access_itf_1ga93eb5707f38fc19d5a895800b2adfc7e:

typedef struct tagiecvaraccnodeinfogetreference_struct  iecvaraccnodeinfogetreference_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccnodeinfogetreference

.. _group___cmp_iec_var_access_itf_1gaeab9798f5ca358586bd323b7114ba470:

typedef struct tagiecvaraccnodeinforemovebrowseinfo_struct  iecvaraccnodeinforemovebrowseinfo_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccnodeinforemovebrowseinfo

.. _group___cmp_iec_var_access_itf_1ga3ad805cd733d04660d3cb0eedce838c7:

typedef struct tagiecvaraccnodeinforemovereference_struct  iecvaraccnodeinforemovereference_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccnodeinforemovereference

.. _group___cmp_iec_var_access_itf_1ga51b46b86a0ae33fde35801db7b1f6737:

typedef struct tagiecvaraccregisterinstance_struct  iecvaraccregisterinstance_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccregisterinstance

.. _group___cmp_iec_var_access_itf_1ga5bc859b891f930649b8fcf1b968c3c53:

typedef struct tagiecvaraccregisterinstance2_struct  iecvaraccregisterinstance2_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccregisterinstance2

.. _group___cmp_iec_var_access_itf_1gae116d7d79d1e884bcf6690d5137bbaa4:

typedef struct tagiecvaraccregisterinstance3_struct  iecvaraccregisterinstance3_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccregisterinstance3

.. _group___cmp_iec_var_access_itf_1ga0403f592ee6b11330e5e3e93d4739674:

typedef struct tagiecvaraccregisterinstancebase_struct  iecvaraccregisterinstancebase_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccregisterinstancebase

.. _group___cmp_iec_var_access_itf_1ga0840d7b338a11f4486741dfe389fbb07:

typedef struct tagiecvaraccsetsymbolconfigcrc_struct  iecvaraccsetsymbolconfigcrc_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccsetsymbolconfigcrc

.. _group___cmp_iec_var_access_itf_1gaba6d299512653cfb29a4716f2db0d616:

typedef struct tagiecvaraccunregisterinstance_struct  iecvaraccunregisterinstance_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccunregisterinstance

.. _group___cmp_iec_var_access_itf_1ga14d4a61498d6eaf2507b87d82380d5a1:

typedef struct tagiecvaraccupdatesymbolsets_struct  iecvaraccupdatesymbolsets_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

iecvaraccupdatesymbolsets

.. _group___cmp_iec_var_access_itf_1ga6947b1464c32103b21f7a7becc5e1957:

typedef enum _IecVarAccBrowseDirection  IecVarAccBrowseDirection
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EXTERN LIB SECTION END

.. _group___cmp_iec_var_access_itf_1ga60f864ee75a3a9512db71fc063366dcb:

typedef struct _IecVarAccBrowseCallback  IecVarAccBrowseCallback
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1ga3ca74d4d445ce8ce22989b92cfb40be0:

typedef void( * PF_IECVARACC_BROWSECALLBACK)(IecVarAccBrowseCallback *pBrowseParam)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Callback function

**Parameters**

+---------+-------------+---------------------------------+
| [in]    | pEventParam | Pointer to the event parameter. |
+---------+-------------+---------------------------------+

.. _group___cmp_iec_var_access_itf_1gaa426786e17974209d90b6f5d40f68e21:

typedef ICmpIecVarAccess_C ICmpIecVarAccess
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Enumeration Type Documentation
------------------------------

.. _group___cmp_iec_var_access_itf_1gaae1db1d53e1eaf49d7b481ffbad61bab:

enum _IecVarAccBrowseDirection
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EXTERN LIB SECTION END 

**Enumerator:**

+----------------------+
| BROWSEDIRECTION_ROOT |
+----------------------+
| BROWSEDIRECTION_DOWN |
+----------------------+
| BROWSEDIRECTION_NEXT |
+----------------------+
| BROWSEDIRECTION_UP   |
+----------------------+

Function Documentation
----------------------

.. _group___cmp_iec_var_access_itf_1gad9b4fc8ef389d8c5252549c276508a65:

void iecvaraccbrowsedown2 (iecvaraccbrowsedown2_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1ga0884031da8629536bba5e9d1aa2c81ed:

void iecvaraccbrowsegetnext2 (iecvaraccbrowsegetnext2_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1gaf8cccd3258b06b570e2362601d8315a8:

void iecvaraccbrowserecursive (iecvaraccbrowserecursive_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1gadeabedef7c709a613665453de9fa1c8a:

void iecvaraccbrowseup2 (iecvaraccbrowseup2_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1gae32a91c327579ab3b20cb5eb2eff1bd0:

void iecvaraccexitvarinfo (iecvaraccexitvarinfo_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1gac36ea09c27d89ce60604af14676a48f0:

void iecvaraccgetfirstinterface (iecvaraccgetfirstinterface_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1gab40a9373b5133299999b66746a6761e8:

void iecvaraccgetfirstinterface2 (iecvaraccgetfirstinterface2_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1ga29f406091ebcfa4dd1a9f7f61f2252c3:

void iecvaraccgetnextinterface (iecvaraccgetnextinterface_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1gadd2e310b89ea6c4a9b4703ff6bd1f513:

void iecvaraccgetnextinterface2 (iecvaraccgetnextinterface2_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1ga7733a2c7d4f8dd1ff493c3b361318560:

void iecvaraccgetnode4 (iecvaraccgetnode4_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1ga9058a8ea7e71ce8aaac606b652ad6890:

void iecvaraccgetnodefullpath4 (iecvaraccgetnodefullpath4_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1gab37f901650294cab160e977959ca7f83:

void iecvaraccgetnodename4 (iecvaraccgetnodename4_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1ga5dd42b509283b738b48754af295bc3ca:

void iecvaraccgetsymbolsetmask (iecvaraccgetsymbolsetmask_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1gaf3e493b1fb6215d81cc30ed6369a4221:

void iecvaraccinitvarinfo (iecvaraccinitvarinfo_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1gafaaeaf65f298834d441c695432fc9383:

void iecvaraccinitvarinfo2 (iecvaraccinitvarinfo2_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1ga455ef5d7699698dabd431559cf1ddee0:

void iecvaraccinvalidatenode (iecvaraccinvalidatenode_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1gae006f7b047ea83593a099e67c8cfe42a:

void iecvaraccnodeinfoaddbrowseinfo (iecvaraccnodeinfoaddbrowseinfo_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1gae2a84644899801e44848194080886051:

void iecvaraccnodeinfoaddreference (iecvaraccnodeinfoaddreference_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1ga26337fa813700ac8476d6013ff5e2a0d:

void iecvaraccnodeinfogetbrowseinfo (iecvaraccnodeinfogetbrowseinfo_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1ga3923d3c2a00bd60cd1a9ea297cd378c4:

void iecvaraccnodeinfogetreference (iecvaraccnodeinfogetreference_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1ga614b1bdc38952509194da6ae9ccd2d4c:

void iecvaraccnodeinforemovebrowseinfo (iecvaraccnodeinforemovebrowseinfo_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1ga77b4d40386e4bd3a4d931a54864c052f:

void iecvaraccnodeinforemovereference (iecvaraccnodeinforemovereference_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1ga6c0e0a00cd99b83679929e84b105aa84:

void iecvaraccregisterinstance (iecvaraccregisterinstance_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1gab1fa009e14c4468e4e28642c737a5f69:

void iecvaraccregisterinstance2 (iecvaraccregisterinstance2_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1ga24b9d63be6c872ba306b0cf0e8e20f38:

void iecvaraccregisterinstance3 (iecvaraccregisterinstance3_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1ga7c4500fc2270c23fc6e23cfc298ac1d2:

void iecvaraccregisterinstancebase (iecvaraccregisterinstancebase_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1ga8b05c419beb475a4008e0d9055c7f09e:

void iecvaraccsetsymbolconfigcrc (iecvaraccsetsymbolconfigcrc_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1gafbba8b55669011bbb4662ee6c4a7d8f4:

void iecvaraccunregisterinstance (iecvaraccunregisterinstance_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1ga3bcb252b2d11bb78305c89379f3cd714:

void iecvaraccupdatesymbolsets (iecvaraccupdatesymbolsets_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_iec_var_access_itf_1ga722faf6483e1c0cd61756b40902b2391:

RTS_RESULT IecVarAccInitVarInfo (VariableInformationStruct2 *pVarInfo, RTS_UI16 nSizeOfVarInfo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Initialize the VarInfo. NOTE: You can cast a VariableInformationStruct3 to VariableInformationStruct2, but the nSizeOfVarInfo must match the real VariableInformationStruct3!

**Parameters**

+---------+----------------+---------------------------------+
| [in]    | pVarInfo       | Pointer to varinfo to intialize |
+---------+----------------+---------------------------------+
| [in]    | nSizeOfVarInfo | Size of the varinfo             |
+---------+----------------+---------------------------------+

**Returns:**

Error code

.. _group___cmp_iec_var_access_itf_1ga5460422a4540f247b5a29bbf25139e1b:

RTS_RESULT IecVarAccInitVarInfo2 (VariableInformationStruct2 *pVarInfo, RTS_UI16 nSizeOfVarInfo, RTS_HANDLE hUser)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Initialize the VarInfo. NOTE: You can cast any VariableInformationStruct to VariableInformationStruct2, but the nSizeOfVarInfo must match the size of the given structure.

**Parameters**

+---------+----------------+---------------------------------------------------------------------------+
| [in]    | pVarInfo       | Pointer to varinfo to intialize                                           |
+---------+----------------+---------------------------------------------------------------------------+
| [in]    | nSizeOfVarInfo | Size of the varinfo                                                       |
+---------+----------------+---------------------------------------------------------------------------+
| [in]    | hUser          | Handle to user used by this session. Will be used to check access rights. |
+---------+----------------+---------------------------------------------------------------------------+

**Returns:**

Error code

.. _group___cmp_iec_var_access_itf_1ga97b0fe9ad9fd0abb7adb9011b834165f:

RTS_RESULT IecVarAccExitVarInfo (VariableInformationStruct2 *pVarInfo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Release the VarInfo. NOTE: You can cast a VariableInformationStruct3 to VariableInformationStruct2, but the nSizeOfVarInfo must match the real VariableInformationStruct3!

**Parameters**

+---------+----------+-------------------------------+
| [in]    | pVarInfo | Pointer to varinfo to release |
+---------+----------+-------------------------------+

**Returns:**

Error code

.. _group___cmp_iec_var_access_itf_1ga7707b94689989a881eb433ed97ef3130:

RTS_RESULT IecVarAccCopyVarInfo (VariableInformationStruct2 *pVariableInformationDest, VariableInformationStruct2 *pVariableInformationSrc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Copy content of VarInfo. NOTE: pVariableInformationDest must be initialized with :ref:`IecVarAccInitVarInfo() <group___cmp_iec_var_access_itf_1ga722faf6483e1c0cd61756b40902b2391>` before calling this function!

**Parameters**

+---------+--------------------------+-------------------------------------------+
| [inout] | pVariableInformationDest | Pointer to destination varinfo to copy to |
+---------+--------------------------+-------------------------------------------+
| [in]    | pVariableInformationSrc  | Pointer to source varinfo to copy from    |
+---------+--------------------------+-------------------------------------------+

**Returns:**

Error code

.. _group___cmp_iec_var_access_itf_1ga4aa0d771ef262824906ba1ed8128892a:

RTS_HANDLE IecVarAccGetFirstInterface (RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the first symbolic interface. Each symbolic application is called here an interface.

**Parameters**

+---------+---------+-----------------------+
| [out]   | pResult | Pointer to error code |
+---------+---------+-----------------------+

**Returns:**

Handle to the first symbolic interface (symbolic application, called hInterface)

.. _group___cmp_iec_var_access_itf_1gad0b0367b82aa3ba97d2f76de68be382e:

RTS_HANDLE IecVarAccGetNextInterface (RTS_HANDLE hPrevInterface, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the next symbolic interface

**Parameters**

+---------+----------------+----------------------------------+
| [in]    | hPrevInterface | Handle to the previous interface |
+---------+----------------+----------------------------------+
| [out]   | pResult        | Pointer to error code            |
+---------+----------------+----------------------------------+

**Returns:**

Handle to the next symbolic interface (symbolic application)

.. _group___cmp_iec_var_access_itf_1ga0f3e6dedcabd964e441eb73cfa7fbdf7:

RTS_RESULT IecVarAccGetApplicationName (RTS_HANDLE hInterface, char *pszApplicationName, int nMaxLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the application name of the specified interface

**Parameters**

+---------+--------------------+------------------------------------+
| [in]    | hInterface         | Handle to the interface            |
+---------+--------------------+------------------------------------+
| [out]   | pszApplicationName | Pointer to return application name |
+---------+--------------------+------------------------------------+
| [in]    | nMaxLen            | Maximum string length              |
+---------+--------------------+------------------------------------+

**Returns:**

error code

.. _group___cmp_iec_var_access_itf_1gab9de52d6883c703a1ee8cacb6afe249a:

RTS_HANDLE IecVarAccCreateVarList (RTS_UI32 ulChannelId, RTS_UI32 ulFlags, RTS_UI32 ulUpdateRateMs, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create variable list. A variable list can be used to add variables and to access and handle all these variables with only one handle.

**Parameters**

+---------+----------------+-------------------------------------------------------------------------------------------------+
| [in]    | ulChannelId    | Online channelid to attach the variable list to a valid online connection of the channel server |
+---------+----------------+-------------------------------------------------------------------------------------------------+
| [in]    | ulFlags        | Optional flags for the variable list, see category (Varlist flags)                              |
+---------+----------------+-------------------------------------------------------------------------------------------------+
| [in]    | ulUpdateRateMs | Requested update rate for the complete variable list in milliseconds                            |
+---------+----------------+-------------------------------------------------------------------------------------------------+
| [out]   | pResult        | Pointer to error code                                                                           |
+---------+----------------+-------------------------------------------------------------------------------------------------+

**Returns:**

Handle to the variable list (called hVarList)

.. _group___cmp_iec_var_access_itf_1gac7c7933412d1244064b806a9f861bc3e:

RTS_RESULT IecVarAccDeleteVarList (RTS_HANDLE hVarList)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Delete the specified variable list

**Parameters**

+---------+----------+-----------------------------+
| [in]    | hVarList | Handle to the variable list |
+---------+----------+-----------------------------+

**Returns:**

error code

.. _group___cmp_iec_var_access_itf_1gabb3ff1d88df9f76b471246119f76e78f:

RTS_RESULT IecVarAccDeleteVarLists (RTS_UI32 ulChannelId)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Delete all variable lists that are assigned to the specified sessionid

**Parameters**

+---------+-------------+---------------------------------------------------------------------+
| [in]    | ulChannelId | Online channelid of a valid online connection of the channel server |
+---------+-------------+---------------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_iec_var_access_itf_1ga889121b9d6d0ccd93bf8586b010f3d0b:

RTS_RESULT IecVarAccDeleteAllLists (void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Delete all variable lists
**Returns:**

error code

.. _group___cmp_iec_var_access_itf_1ga2c97a334e372d4b676f1afc0aa3a5bc9:

RTS_RESULT IecVarAccVarListGetFlags (RTS_HANDLE hVarList, RTS_UI32 *pulFlags)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the flags that are assigned to the variable list

**Parameters**

+---------+----------+-----------------------------+
| [in]    | hVarList | Handle to the variable list |
+---------+----------+-----------------------------+
| [out]   | pulFlags | Pointer to get the flags    |
+---------+----------+-----------------------------+

**Returns:**

error code

.. _group___cmp_iec_var_access_itf_1gac4db3907315200638e33a5e77f41c968:

RTS_HANDLE IecVarAccAppendVar (RTS_HANDLE hVarList, char *pszVar, RTS_SIZE ulSize, RTS_UI32 hClientHandle, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Append variable to the variable list

**Parameters**

+---------+---------------+------------------------------------------------------------+
| [in]    | hVarList      | Handle to the variable list                                |
+---------+---------------+------------------------------------------------------------+
| [in]    | pszVar        | Pointer to the variable name to add to the variable list   |
+---------+---------------+------------------------------------------------------------+
| [in]    | ulSize        | Requested size to read. 0xFFFFFFFF: Use real variable size |
+---------+---------------+------------------------------------------------------------+
| [in]    | hClientHandle | Private handle of the client. For client internal use only |
+---------+---------------+------------------------------------------------------------+
| [out]   | pResult       | Pointer to error code                                      |
+---------+---------------+------------------------------------------------------------+

**Returns:**

Handle to the appended variable (called hVar)

.. _group___cmp_iec_var_access_itf_1gaecddfad2f2b3cf09bc15256e48481773:

RTS_RESULT IecVarAccRemoveVar (RTS_HANDLE hVarList, RTS_HANDLE hVar)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Remove a variable from the specified variable list

**Parameters**

+---------+----------+-----------------------------+
| [in]    | hVarList | Handle to the variable list |
+---------+----------+-----------------------------+
| [in]    | hVar     | Handle to the variable      |
+---------+----------+-----------------------------+

**Returns:**

error code

.. _group___cmp_iec_var_access_itf_1ga325b815dc44aa469f4a8741eb4d97ddf:

RTS_HANDLE IecVarAccGetFirstVar (RTS_HANDLE hVarList, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the first variable of the specified variable list

**Parameters**

+---------+----------+-----------------------------+
| [in]    | hVarList | Handle to the variable list |
+---------+----------+-----------------------------+
| [out]   | pResult  | Pointer to error code       |
+---------+----------+-----------------------------+

**Returns:**

Handle to the first variable in the variable list (called hVar)

.. _group___cmp_iec_var_access_itf_1ga6b57c97f336cbb3295d93581a110e526:

RTS_HANDLE IecVarAccGetNextVar (RTS_HANDLE hVarList, RTS_HANDLE hPrevVar, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the next variable of the specified variable list

**Parameters**

+---------+----------+---------------------------------+
| [in]    | hVarList | Handle to the variable list     |
+---------+----------+---------------------------------+
| [in]    | hPrevVar | Handle to the previous variable |
+---------+----------+---------------------------------+
| [out]   | pResult  | Pointer to error code           |
+---------+----------+---------------------------------+

**Returns:**

Handle to the next variable in the variable list (called hVar)

.. _group___cmp_iec_var_access_itf_1gab7320325b460df2fe14b787bd6bb388d:

RTS_RESULT IecVarAccInvalidateVar (RTS_HANDLE hVarList, RTS_HANDLE hVar)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Invalidate variable to disable access

**Parameters**

+---------+----------+-----------------------------+
| [in]    | hVarList | Handle to the variable list |
+---------+----------+-----------------------------+
| [in]    | hVar     | Handle to the variable      |
+---------+----------+-----------------------------+

**Returns:**

error code

.. _group___cmp_iec_var_access_itf_1gaf583afb5e5bf47c0979fb77e10a83784:

RTS_SIZE IecVarAccReadVar (RTS_HANDLE hVar, void *pData, RTS_SIZE ulLen, RTS_UI32 *pulQuality, int varFlags, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Read value of a single specified variable

**Parameters**

+---------+------------+----------------------------------------------------------------------------+
| [in]    | hVar       | Handle to the variable                                                     |
+---------+------------+----------------------------------------------------------------------------+
| [in]    | pData      | Pointer to get the value                                                   |
+---------+------------+----------------------------------------------------------------------------+
| [in]    | ulLen      | Length of data in bytes to read. 0xFFFFFFFF: Real size of the node is read |
+---------+------------+----------------------------------------------------------------------------+
| [out]   | pulQuality | Pointer to get quality of the read request                                 |
+---------+------------+----------------------------------------------------------------------------+
| [in]    | varFlags   | Variable flags, see category "Varlist flags"for details                    |
+---------+------------+----------------------------------------------------------------------------+
| [out]   | pResult    | Pointer to error code                                                      |
+---------+------------+----------------------------------------------------------------------------+

**Returns:**

Number of bytes read

.. _group___cmp_iec_var_access_itf_1ga4c4b1886906bcef5126035edf4b7e986:

RTS_SIZE IecVarAccWriteVar (RTS_HANDLE hVar, void *pData, RTS_SIZE ulLen, int varFlags, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Write value to a single specified variable

**Parameters**

+---------+----------+---------------------------------------------------------+
| [in]    | hVar     | Handle to the variable                                  |
+---------+----------+---------------------------------------------------------+
| [in]    | pData    | Pointer to write value                                  |
+---------+----------+---------------------------------------------------------+
| [in]    | ulLen    | Number of bytes to write                                |
+---------+----------+---------------------------------------------------------+
| [in]    | varFlags | Variable flags, see category "Varlist flags"for details |
+---------+----------+---------------------------------------------------------+
| [out]   | pResult  | Pointer to error code                                   |
+---------+----------+---------------------------------------------------------+

**Returns:**

Number of bytes written

.. _group___cmp_iec_var_access_itf_1gab4860f6330508f99a97cfe724be3b50f:

RTS_SIZE IecVarAccWriteVar2 (RTS_HANDLE hVar, void *pData, RTS_SIZE ulLen, int varFlags, RTS_UI32 ulSessionId, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Write value to a single specified variable

**Parameters**

+---------+-------------+---------------------------------------------------------+
| [in]    | hVar        | Handle to the variable                                  |
+---------+-------------+---------------------------------------------------------+
| [in]    | pData       | Pointer to write value                                  |
+---------+-------------+---------------------------------------------------------+
| [in]    | ulLen       | Number of bytes to write                                |
+---------+-------------+---------------------------------------------------------+
| [in]    | varFlags    | Variable flags, see category "Varlist flags"for details |
+---------+-------------+---------------------------------------------------------+
| [in]    | ulSessionId | Device session ID of the logged in client               |
+---------+-------------+---------------------------------------------------------+
| [out]   | pResult     | Pointer to error code                                   |
+---------+-------------+---------------------------------------------------------+

**Returns:**

Number of bytes written

.. _group___cmp_iec_var_access_itf_1ga418190796c87f261ec1b18ae232f07d4:

RTS_RESULT IecVarAccBeginVariableConfiguration (RTS_HANDLE hInterface, int bBlocking)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Begin the variable configuration. This is used, to enter a new configuration for an optional data server!

**Parameters**

+---------+------------+---------------------------------------------------------------------------------------------------+
| [in]    | hInterface | Handle to the symbolic interface                                                                  |
+---------+------------+---------------------------------------------------------------------------------------------------+
| [in]    | bBlocking  | 1=if the access to the variable configuration should be blocking for other threads, 0=no blocking |
+---------+------------+---------------------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_iec_var_access_itf_1ga7775e03e4d3a8637c97d762b0811a65f:

RTS_RESULT IecVarAccAppendVariable (RTS_HANDLE hInterface, RTS_HANDLE hNode)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Append a variable to the symbolic interface. This is used, to register a variable at an optional data server!

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+
| [in]    | hNode      | Handle to the symbolic node      |
+---------+------------+----------------------------------+

**Returns:**

error code

.. _group___cmp_iec_var_access_itf_1ga23f9fb98ffe100ec27b2a515bb27f074:

RTS_RESULT IecVarAccAppendVariable3 (RTS_HANDLE hInterface, RTS_HANDLE hNode, VariableInformationStruct2 *pVariableInformation)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Append a variable to the symbolic interface. This is used, to register a variable at an optional data server!

**Parameters**

+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface                                           |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | hNode                | Handle to the symbolic node                                                |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | pVariableInformation | Pointer to the variable information that is retrieved by IecVarAccGetNode3 |
+---------+----------------------+----------------------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_iec_var_access_itf_1ga47f1d4d759fca05cf4d64af52871859e:

RTS_RESULT IecVarAccRemoveVariable (RTS_HANDLE hInterface, RTS_HANDLE hNode)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Remove a variable from the symbolic interface. This is used, to unregister a variable at an optional data server!

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+
| [in]    | hNode      | Handle to the symbolic node      |
+---------+------------+----------------------------------+

**Returns:**

error code

.. _group___cmp_iec_var_access_itf_1ga4ca3f5246bbdc3ddb0238f5d42142290:

RTS_RESULT IecVarAccRemoveVariable3 (RTS_HANDLE hInterface, RTS_HANDLE hNode, VariableInformationStruct2 *pVariableInformation)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Remove a variable from the symbolic interface. This is used, to unregister a variable at an optional data server!

**Parameters**

+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface                                           |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | hNode                | Handle to the symbolic node                                                |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | pVariableInformation | Pointer to the variable information that is retrieved by IecVarAccGetNode3 |
+---------+----------------------+----------------------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_iec_var_access_itf_1ga0e383a9b609d5b690eac92362f4def02:

RTS_RESULT IecVarAccEndVariableConfiguration (RTS_HANDLE hInterface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

End the variable configuration. This is used, to leave a new configuration for an optional data server!

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+

**Returns:**

error code

.. _group___cmp_iec_var_access_itf_1gad1b0dd591f89b3fda26e4e93d422a8c6:

RTS_RESULT IecVarAccBrowseRecursive (RTS_HANDLE hInterface, RTS_HANDLE hNode, VariableInformationStruct3 *pVariableInformation, PF_IECVARACC_BROWSECALLBACK pfBrowseCallback, RTS_BOOL bIecCallback, void *pUserParameter)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Browse routine to go through the complete symbolic tree of an interface. At every node you get a callback in your specified pfBrowseCallback function.

**Parameters**

+---------+----------------------+----------------------------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface or RTS_INVALID_HANDLE to start at the first interface |
+---------+----------------------+----------------------------------------------------------------------------------------+
| [in]    | hNode                | Handle to the starting node or RTS_INVALID_HANDLE to start at the first node           |
+---------+----------------------+----------------------------------------------------------------------------------------+
| [in]    | pVariableInformation | Pointer to var info or NULL to start at the first node                                 |
+---------+----------------------+----------------------------------------------------------------------------------------+
| [in]    | pfBrowseCallback     | Function pointer to register the browse callback function                              |
+---------+----------------------+----------------------------------------------------------------------------------------+
| [in]    | bIecCallback         | TRUE=If function pointer is an IEC-function; FALSE=If function pointer is a C-function |
+---------+----------------------+----------------------------------------------------------------------------------------+
| [in]    | pUserParameter       | User parameter pointer that is retrieved for the callback. Can be NULL.                |
+---------+----------------------+----------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_iec_var_access_itf_1ga77b3849fa95b83076ca3a11a34cc523d:

RTS_HANDLE IecVarAccBrowseGetRoot (RTS_HANDLE hInterface, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Browse routine to get the symbolic root branch node (e.g. "Application1")

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+
| [out]   | pResult    | Pointer to error code            |
+---------+------------+----------------------------------+

**Returns:**

Handle to the root node (called hNode)

.. _group___cmp_iec_var_access_itf_1gac83af04253b433db9534ba7f6cdd9ae8:

RTS_HANDLE IecVarAccBrowseGetRoot2 (RTS_HANDLE hInterface, RTS_HANDLE hUser, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Browse routine to get the symbolic root branch node (e.g. "Application1")

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+
| [in]    | hUser      | Handle to current user.          |
+---------+------------+----------------------------------+
| [out]   | pResult    | Pointer to error code            |
+---------+------------+----------------------------------+

**Returns:**

Handle to the root node (called hNode)

.. _group___cmp_iec_var_access_itf_1gaf34865e321ec497113f277eb8162e79e:

RTS_HANDLE IecVarAccBrowseDown (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Browse routine to browse down to the child node (e.g. "Application1.GVL")

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+
| [in]    | hNode      | Handle to the parent node        |
+---------+------------+----------------------------------+

**Returns:**

Handle to the child node (called hNode)

.. _group___cmp_iec_var_access_itf_1ga6efc0067f129d689779d731e29fb5df2:

RTS_HANDLE IecVarAccBrowseDown2 (RTS_HANDLE hInterface, RTS_HANDLE hNode, VariableInformationStruct3 *pVariableInformation, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Browse routine to browse down to the child node (e.g. "Application1.GVL")

**Parameters**

+---------+----------------------+------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface                                 |
+---------+----------------------+------------------------------------------------------------------+
| [in]    | hNode                | Handle to the parent node                                        |
+---------+----------------------+------------------------------------------------------------------+
| [inout] | pVariableInformation | Pointer to the variable information3 to get complete browseinfo! |
+---------+----------------------+------------------------------------------------------------------+

NOTE: Please initialize this structure with :ref:`IecVarAccInitVarInfo() <group___cmp_iec_var_access_itf_1ga722faf6483e1c0cd61756b40902b2391>` the first time calling this function and deinitialize the this structure with :ref:`IecVarAccExitVarInfo() <group___cmp_iec_var_access_itf_1ga97b0fe9ad9fd0abb7adb9011b834165f>` if you finish browsing!

NOTE: You can use this as VariableInformation2 for any other interface function like :ref:`IecVarAccGetValue3() <group___cmp_iec_var_access_itf_1ga790587021297dbc40405a7a22f947f90>` etc.! This is compatible. The only thing is you have to do is to cast explicit: (VariableInformation2)pVariableInformation

**Returns:**

Handle to the child node (called hNode)

.. _group___cmp_iec_var_access_itf_1ga3fb0aa335f1c71392518657b1e9778f2:

RTS_HANDLE IecVarAccBrowseDown3 (RTS_HANDLE hInterface, RTS_HANDLE hNode, VariableInformationStruct2 *pVariableInformation, RTS_BOOL bBrowseComplexTypes, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Browse routine to browse down to the child node (e.g. "Application1.GVL"). This function encapsulates the BrowseDown and BrowseDown2 functions. Pay attention to use IecVarAccInitVarInfo2 to initialize the VariableInformationStruct. This allows proper checking of access rights.

**Parameters**

+---------+----------------------+------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface                                 |
+---------+----------------------+------------------------------------------------------------------+
| [in]    | hNode                | Handle to the parent node                                        |
+---------+----------------------+------------------------------------------------------------------+
| [inout] | pVariableInformation | Pointer to the variable information3 to get complete browseinfo! |
+---------+----------------------+------------------------------------------------------------------+

NOTE: Please initialize this structure with :ref:`IecVarAccInitVarInfo() <group___cmp_iec_var_access_itf_1ga722faf6483e1c0cd61756b40902b2391>` the first time calling this function and deinitialize the this structure with :ref:`IecVarAccExitVarInfo() <group___cmp_iec_var_access_itf_1ga97b0fe9ad9fd0abb7adb9011b834165f>` if you finish browsing!

NOTE: You can use this as VariableInformation2 for any other interface function like :ref:`IecVarAccGetValue3() <group___cmp_iec_var_access_itf_1ga790587021297dbc40405a7a22f947f90>` etc.! This is compatible. The only thing is you have to do is to cast explicit: (VariableInformation2)pVariableInformation

**Parameters**

+---------+---------------------+----------------------------------------------------------------------------------------------+
| [in]    | bBrowseComplexTypes | Parameter to define weather the implementation should behave like BrowseDown or BrowseDown2. |
+---------+---------------------+----------------------------------------------------------------------------------------------+

**Returns:**

Handle to the child node (called hNode)

.. _group___cmp_iec_var_access_itf_1ga22fa16e6bf2d11b5187b1576e669fcda:

RTS_HANDLE IecVarAccBrowseUp (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Browse routine to browse up to the parent node

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+
| [in]    | hNode      | Handle to the child node         |
+---------+------------+----------------------------------+
| [out]   | pResult    | Pointer to error code            |
+---------+------------+----------------------------------+

**Returns:**

Handle to the parent node (called hNode)

.. _group___cmp_iec_var_access_itf_1ga83f59c0af1e78b23afeeb00b1340618a:

RTS_HANDLE IecVarAccBrowseUp2 (RTS_HANDLE hInterface, RTS_HANDLE hNode, VariableInformationStruct3 *pVariableInformation, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Browse routine to browse up to the parent node

**Parameters**

+---------+----------------------+------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface                                 |
+---------+----------------------+------------------------------------------------------------------+
| [in]    | hNode                | Handle to the child node                                         |
+---------+----------------------+------------------------------------------------------------------+
| [inout] | pVariableInformation | Pointer to the variable information3 to get complete browseinfo! |
+---------+----------------------+------------------------------------------------------------------+

NOTE: You can use this as VariableInformation2 for any other interface function like :ref:`IecVarAccGetValue3() <group___cmp_iec_var_access_itf_1ga790587021297dbc40405a7a22f947f90>` etc.! This is compatible. The only thing is you have to do is to cast explicit: (VariableInformation2)pVariableInformation

**Parameters**

+---------+---------+-----------------------+
| [out]   | pResult | Pointer to error code |
+---------+---------+-----------------------+

**Returns:**

Handle to the parent node (called hNode)

.. _group___cmp_iec_var_access_itf_1gac64d2f3228b750df1d247f5455e526a0:

RTS_HANDLE IecVarAccBrowseUp3 (RTS_HANDLE hInterface, RTS_HANDLE hNode, VariableInformationStruct2 *pVariableInformation, RTS_BOOL bBrowseComplexTypes, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Browse routine to browse up to the parent node. Pay attention to use IecVarAccInitVarInfo2 to initialize the VariableInformationStruct. This allows proper checking of access rights.

**Parameters**

+---------+----------------------+------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface                                 |
+---------+----------------------+------------------------------------------------------------------+
| [in]    | hNode                | Handle to the child node                                         |
+---------+----------------------+------------------------------------------------------------------+
| [inout] | pVariableInformation | Pointer to the variable information3 to get complete browseinfo! |
+---------+----------------------+------------------------------------------------------------------+

NOTE: You can use this as VariableInformation2 for any other interface function like :ref:`IecVarAccGetValue3() <group___cmp_iec_var_access_itf_1ga790587021297dbc40405a7a22f947f90>` etc.! This is compatible. The only thing is you have to do is to cast explicit: (VariableInformation2)pVariableInformation

**Parameters**

+---------+---------------------+------------------------------------------------------------------------------------------+
| [in]    | bBrowseComplexTypes | Parameter to define weather the implementation should behave like BrowseUp or BrowseUp2. |
+---------+---------------------+------------------------------------------------------------------------------------------+
| [out]   | pResult             | Pointer to error code                                                                    |
+---------+---------------------+------------------------------------------------------------------------------------------+

**Returns:**

Handle to the parent node (called hNode)

.. _group___cmp_iec_var_access_itf_1ga995df33faec377743519ff3c2ca298fb:

RTS_HANDLE IecVarAccBrowseGetNext (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Browse routine to get the next sibling node

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+
| [in]    | hNode      | Handle to the predecessor node   |
+---------+------------+----------------------------------+
| [out]   | pResult    | Pointer to error code            |
+---------+------------+----------------------------------+

**Returns:**

Handle to the next sibling node (called hNode)

.. _group___cmp_iec_var_access_itf_1gaa4c72362843603b3f0d5407cf6ed1b11:

RTS_HANDLE IecVarAccBrowseGetNext2 (RTS_HANDLE hInterface, RTS_HANDLE hNode, VariableInformationStruct3 *pVariableInformation, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Browse routine to get the next sibling node

**Parameters**

+---------+----------------------+------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface                                 |
+---------+----------------------+------------------------------------------------------------------+
| [in]    | hNode                | Handle to the predecessor node                                   |
+---------+----------------------+------------------------------------------------------------------+
| [inout] | pVariableInformation | Pointer to the variable information3 to get complete browseinfo! |
+---------+----------------------+------------------------------------------------------------------+

NOTE: You can use this as VariableInformation2 for any other interface function like :ref:`IecVarAccGetValue3() <group___cmp_iec_var_access_itf_1ga790587021297dbc40405a7a22f947f90>` etc.! This is compatible. The only thing is you have to do is to cast explicit: (VariableInformation2)pVariableInformation

**Parameters**

+---------+---------+-----------------------+
| [out]   | pResult | Pointer to error code |
+---------+---------+-----------------------+

**Returns:**

Handle to the next sibling node (called hNode)

.. _group___cmp_iec_var_access_itf_1ga79385b3399724319fd1dc3b15c43553e:

RTS_HANDLE IecVarAccBrowseGetNext3 (RTS_HANDLE hInterface, RTS_HANDLE hNode, VariableInformationStruct2 *pVariableInformation, RTS_BOOL bBrowseComplexTypes, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Browse routine to get the next sibling node. Pay attention to use IecVarAccInitVarInfo2 to initialize the VariableInformationStruct. This allows proper checking of access rights.

**Parameters**

+---------+----------------------+------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface                                 |
+---------+----------------------+------------------------------------------------------------------+
| [in]    | hNode                | Handle to the predecessor node                                   |
+---------+----------------------+------------------------------------------------------------------+
| [inout] | pVariableInformation | Pointer to the variable information3 to get complete browseinfo! |
+---------+----------------------+------------------------------------------------------------------+

NOTE: You can use this as VariableInformation2 for any other interface function like :ref:`IecVarAccGetValue3() <group___cmp_iec_var_access_itf_1ga790587021297dbc40405a7a22f947f90>` etc.! This is compatible. The only thing is you have to do is to cast explicit: (VariableInformation2)pVariableInformation

**Parameters**

+---------+---------------------+------------------------------------------------------------------------------------------+
| [in]    | bBrowseComplexTypes | Parameter to define weather the implementation should behave like BrowseUp or BrowseUp2. |
+---------+---------------------+------------------------------------------------------------------------------------------+
| [out]   | pResult             | Pointer to error code                                                                    |
+---------+---------------------+------------------------------------------------------------------------------------------+

**Returns:**

Handle to the next sibling node (called hNode)

.. _group___cmp_iec_var_access_itf_1ga475ea49521cc9b91df42be4c73126140:

RTS_HANDLE IecVarAccBrowseGetChildByIndex (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_UI32 ulIndex, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Browse routine to get a child node by index. Can be used instead of IecVarAccBrowseDown/IecVarAccBrowseGetNext.

**Parameters**

+---------+------------+----------------------------------------+
| [in]    | hInterface | Handle to the symbolic interface       |
+---------+------------+----------------------------------------+
| [in]    | hNode      | Handle to the parent node              |
+---------+------------+----------------------------------------+
| [in]    | ulIndex    | Index of the requested child note node |
+---------+------------+----------------------------------------+
| [out]   | pResult    | Pointer to error code                  |
+---------+------------+----------------------------------------+

**Returns:**

Handle to the requested child node (called hNode)

.. _group___cmp_iec_var_access_itf_1ga1d27cac93f2b795bba01f5910c338e28:

RTS_HANDLE IecVarAccBrowseGetChildByIndex2 (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_UI32 ulIndex, VariableInformationStruct2 *pVariableInformation, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Browse routine to get a child node by index. Can be used instead of IecVarAccBrowseDown/IecVarAccBrowseGetNext.

**Parameters**

+---------+----------------------+------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface                                 |
+---------+----------------------+------------------------------------------------------------------+
| [in]    | hNode                | Handle to the parent node                                        |
+---------+----------------------+------------------------------------------------------------------+
| [in]    | ulIndex              | Index of the requested child note node                           |
+---------+----------------------+------------------------------------------------------------------+
| [inout] | pVariableInformation | Pointer to the variable information3 to get complete browseinfo! |
+---------+----------------------+------------------------------------------------------------------+

NOTE: You can use this as VariableInformation2 for any other interface function like :ref:`IecVarAccGetValue3() <group___cmp_iec_var_access_itf_1ga790587021297dbc40405a7a22f947f90>` etc.! This is compatible. The only thing is you have to do is to cast explicit: (VariableInformation2)pVariableInformation

**Parameters**

+---------+---------+-----------------------+
| [out]   | pResult | Pointer to error code |
+---------+---------+-----------------------+

**Returns:**

Handle to the requested child node (called hNode)

.. _group___cmp_iec_var_access_itf_1ga7b185cab50f947cf607fcc3762d85ea4:

RTS_HANDLE IecVarAccGetNode (char *pszPath, RTS_SIZE *pulOffset, RTS_HANDLE *phInterface, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the leaf node handle of a specified variable

**Parameters**

+---------+-------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pszPath     | Name of the variable including the complete namespace/path                                                                                  |
+---------+-------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pulOffset   | Offset of the variable to the leaf node (e.g. for structure/FB or array access)                                                             |
+---------+-------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| [inout] | phInterface | Pointer to specify or to return the symbolic interface handle. Content must be initialized with RTS_INVALID_HANDLE, if it is not specified! |
+---------+-------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult     | Pointer to error code                                                                                                                       |
+---------+-------------+---------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Handle to the node (called hNode)

.. _group___cmp_iec_var_access_itf_1gab47d5d5b3334338ea9543e62b7c588bc:

RTS_HANDLE IecVarAccGetNode3 (char *pszPath, RTS_HANDLE *phInterface, VariableInformationStruct2 *pVariableInformation, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the leaf node handle of a specified variable

**Parameters**

+---------+----------------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pszPath              | Name of the variable including the complete namespace/path                                                                                  |
+---------+----------------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| [inout] | phInterface          | Pointer to specify or to return the symbolic interface handle. Content must be initialized with RTS_INVALID_HANDLE, if it is not specified! |
+---------+----------------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pVariableInformation | Pointer to the variable information that is retrieved by IecVarAccGetNode3                                                                  |
+---------+----------------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult              | Pointer to error code                                                                                                                       |
+---------+----------------------+---------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Handle to the node (called hNode)

.. _group___cmp_iec_var_access_itf_1ga0cf0feab72cb496b2fa067740952f217:

RTS_HANDLE IecVarAccGetNode4 (char *pszPath, RTS_HANDLE *phInterface, VariableInformationStruct3 *pVariableInformation, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the leaf node handle and varinfo (with browseinfo) of the specified variable. NOTE: This function addtionally adds the browse info to the VariableInformationStruct3 structure! So this is a time consuming process. But with this you can use the following functions with this info:

- IecVarAccBrowseDown2

- IecVarAccBrowseGetNext2

- IecVarAccBrowseUp2

- IecVarAccGetNode4

- IecVarAccGetNodeName4

- IecVarAccGetNodeFullPath4

ATTENTION: If you don't need these functions, you should use :ref:`IecVarAccGetNode3() <group___cmp_iec_var_access_itf_1gab47d5d5b3334338ea9543e62b7c588bc>` instead to increase performance!

**Parameters**

+---------+----------------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pszPath              | Name of the variable including the complete namespace/path                                                                                  |
+---------+----------------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| [inout] | phInterface          | Pointer to specify or to return the symbolic interface handle. Content must be initialized with RTS_INVALID_HANDLE, if it is not specified! |
+---------+----------------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| [inout] | pVariableInformation | Pointer to the variable information3.                                                                                                       |
+---------+----------------------+---------------------------------------------------------------------------------------------------------------------------------------------+

NOTE: Please initialize this structure with :ref:`IecVarAccInitVarInfo() <group___cmp_iec_var_access_itf_1ga722faf6483e1c0cd61756b40902b2391>` before calling this function and deinitialize the this structure with :ref:`IecVarAccExitVarInfo() <group___cmp_iec_var_access_itf_1ga97b0fe9ad9fd0abb7adb9011b834165f>` if you never access the node!

NOTE: You can use this as VariableInformation2 for any other interface function like :ref:`IecVarAccGetValue3() <group___cmp_iec_var_access_itf_1ga790587021297dbc40405a7a22f947f90>` etc.! This is compatible. The only thing is you have to do is to cast explicit: (VariableInformation2)pVariableInformation

**Parameters**

+---------+---------+-----------------------+
| [out]   | pResult | Pointer to error code |
+---------+---------+-----------------------+

**Returns:**

Handle to the node (called hNode)

.. _group___cmp_iec_var_access_itf_1ga5c350ab398fb9ad7ada87b8bbf563371:

int IecVarAccGetNodeFullPath (RTS_HANDLE hInterface, RTS_HANDLE hNode, char *pszPath, int iMaxPath, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get full namespace/path of the specified node (e.g. "Application1.GVL.A"

**Parameters**

+---------+------------+---------------------------------------------------------------------------+
| [in]    | hInterface | Handle to the symbolic interface                                          |
+---------+------------+---------------------------------------------------------------------------+
| [in]    | hNode      | Handle to the node                                                        |
+---------+------------+---------------------------------------------------------------------------+
| [out]   | pszPath    | Pointer to get full path. Can be NULL to retrieve the lenght of the path. |
+---------+------------+---------------------------------------------------------------------------+
| [in]    | iMaxPath   | Max length of pszPath                                                     |
+---------+------------+---------------------------------------------------------------------------+
| [out]   | pResult    | Pointer to error code                                                     |
+---------+------------+---------------------------------------------------------------------------+

**Returns:**

Number of characters copied to pszPath:

- greater 0: Successful

- 0 or -1: Error

.. _group___cmp_iec_var_access_itf_1ga36a0557e1e7a430ffc39f248a7f21242:

int IecVarAccGetNodeFullPath3 (RTS_HANDLE hInterface, RTS_HANDLE hNode, VariableInformationStruct2 *pVariableInformation, char *pszPath, int iMaxPath, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get full namespace/path of the specified node (e.g. "Application1.GVL.A"). NOTE: This works _not_ in Structures/FBs or Arrays!

**Parameters**

+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface                                           |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | hNode                | Handle to the node                                                         |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | pVariableInformation | Pointer to the variable information that is retrieved by IecVarAccGetNode3 |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | pszPath              | Pointer to get full path                                                   |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | iMaxPath             | Max length of pszPath                                                      |
+---------+----------------------+----------------------------------------------------------------------------+
| [out]   | pResult              | Pointer to error code                                                      |
+---------+----------------------+----------------------------------------------------------------------------+

**Returns:**

Number of characters copied to pszPath (not including NUL termination):

- greater 0: Successful

- 0 or -1: Error

.. _group___cmp_iec_var_access_itf_1ga0863e37c60512949b6362b96d89d8a1d:

int IecVarAccGetNodeFullPath4 (RTS_HANDLE hInterface, RTS_HANDLE hNode, VariableInformationStruct3 *pVariableInformation, char *pszPath, int iMaxPath, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get full namespace/path of the specified node (e.g. "Application1.GVL.A"). NOTE: This works in Structures/FBs or Arrays!

**Parameters**

+---------+----------------------+------------------------------------------------------------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface                                                                                       |
+---------+----------------------+------------------------------------------------------------------------------------------------------------------------+
| [in]    | hNode                | Handle to the node                                                                                                     |
+---------+----------------------+------------------------------------------------------------------------------------------------------------------------+
| [in]    | pVariableInformation | Pointer to the variable information that is retrieved by all functions with VariableInformationStruct3 as a parameter! |
+---------+----------------------+------------------------------------------------------------------------------------------------------------------------+
| [in]    | pszPath              | Pointer to get full path                                                                                               |
+---------+----------------------+------------------------------------------------------------------------------------------------------------------------+
| [in]    | iMaxPath             | Max length of pszPath                                                                                                  |
+---------+----------------------+------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult              | Pointer to error code                                                                                                  |
+---------+----------------------+------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Number of characters copied to pszPath (not including NUL termination):

- greater 0: Successful

- 0 or -1: Error

.. _group___cmp_iec_var_access_itf_1gae41411f2114b601a2030a108c1e56248:

char* IecVarAccGetNodeName (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get name of the specified node (e.g. "A")

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+
| [in]    | hNode      | Handle to the node               |
+---------+------------+----------------------------------+
| [out]   | pResult    | Pointer to error code            |
+---------+------------+----------------------------------+

**Returns:**

Pointer to node name

.. _group___cmp_iec_var_access_itf_1gac2d0cf6d0c549665b6caf2c549b7e544:

char* IecVarAccGetNodeName3 (RTS_HANDLE hInterface, RTS_HANDLE hNode, VariableInformationStruct2 *pVariableInformation, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get name of the specified node (e.g. "A")

**Parameters**

+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface                                           |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | hNode                | Handle to the node                                                         |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | pVariableInformation | Pointer to the variable information that is retrieved by IecVarAccGetNode3 |
+---------+----------------------+----------------------------------------------------------------------------+
| [out]   | pResult              | Pointer to error code                                                      |
+---------+----------------------+----------------------------------------------------------------------------+

**Returns:**

Pointer to node name

.. _group___cmp_iec_var_access_itf_1ga0534f71c17820b2ff84de3f3f99e9b31:

RTS_RESULT IecVarAccGetNodeName4 (RTS_HANDLE hInterface, RTS_HANDLE hNode, VariableInformationStruct3 *pVariableInformation, char *pszNodeName, RTS_UI32 nNodeNameLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get name of the specified node (e.g. "A")

**Parameters**

+---------+----------------------+-------------------------------------------------------------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface                                                                                        |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------------+
| [in]    | hNode                | Handle to the node                                                                                                      |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------------+
| [in]    | pVariableInformation | Pointer to the variable information3 that is retrieved by all functions with VariableInformationStruct3 as a parameter! |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------------+
| [in]    | pszNodeName          | Pointer to get nodename                                                                                                 |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------------+
| [in]    | nNodeNameLen         | Max nodename length                                                                                                     |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

.. _group___cmp_iec_var_access_itf_1gafa2ee937409344d46dcb79d1240d0c29:

RTS_IEC_INT IecVarAccGetAccessRights (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get access rights of the specified symbolic node

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+
| [in]    | hNode      | Handle to the node               |
+---------+------------+----------------------------------+
| [out]   | pResult    | Pointer to error code            |
+---------+------------+----------------------------------+

**Returns:**

Access rights

.. _group___cmp_iec_var_access_itf_1gaea162133f4291b74638638e7846fd131:

RTS_IEC_INT IecVarAccGetAccessRights2 (RTS_HANDLE hInterface, RTS_HANDLE hNode, VariableInformationStruct2 *pVariableInformation, RTS_BOOL bGetUserRights, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get access rights of the specified symbolic node

**Parameters**

+---------+----------------------+----------------------------------------------------------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface                                                                                     |
+---------+----------------------+----------------------------------------------------------------------------------------------------------------------+
| [in]    | hNode                | Handle to the node                                                                                                   |
+---------+----------------------+----------------------------------------------------------------------------------------------------------------------+
| [in]    | pVariableInformation | Pointer to the variable information struct. Use IecVarAccInitVarInfo2 for proper access right checks.                |
+---------+----------------------+----------------------------------------------------------------------------------------------------------------------+
| [in]    | bGetUserRights       | Flag wather the maximum access rights (FALSE) or the access rights according to the user (TRUE) should be retrieved. |
+---------+----------------------+----------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult              | Pointer to error code                                                                                                |
+---------+----------------------+----------------------------------------------------------------------------------------------------------------------+

**Returns:**

Access rights

.. _group___cmp_iec_var_access_itf_1gaa1eaf3290d6d024bbd66dad98b1a119d:

void* IecVarAccGetAddress (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get address of the variable value WARNINGS:

- Use this function only for diagnostic usages!

- Don't use it to read/write values of a symbol!!! This can lead to unpredictable effects and can damage your system!

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+
| [in]    | hNode      | Handle to the node               |
+---------+------------+----------------------------------+
| [out]   | pResult    | Pointer to error code            |
+---------+------------+----------------------------------+

**Returns:**

Pointer to address of the variable value

.. _group___cmp_iec_var_access_itf_1ga174228d840c9aba801527fde2675ba80:

void* IecVarAccGetAddress2 (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_SIZE ulOffset, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get address of the variable value (including the offset, e.g. for array elements)

**Parameters**

+---------+------------+-----------------------------------------------------------+
| [in]    | hInterface | Handle to the symbolic interface                          |
+---------+------------+-----------------------------------------------------------+
| [in]    | hNode      | Handle to the node                                        |
+---------+------------+-----------------------------------------------------------+
| [in]    | ulOffset   | Offset of the node, that is retrieved by IecVarAccGetNode |
+---------+------------+-----------------------------------------------------------+
| [out]   | pResult    | Pointer to error code                                     |
+---------+------------+-----------------------------------------------------------+

**Returns:**

Pointer to address of the variable value

.. _group___cmp_iec_var_access_itf_1ga884daf0176d3582cc5cf7a866f60cfdb:

void* IecVarAccGetAddress3 (RTS_HANDLE hInterface, RTS_HANDLE hNode, VariableInformationStruct2 *pVariableInformation, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get address of the variable value (including the offset, e.g. for array elements)

**Parameters**

+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface                                           |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | hNode                | Handle to the node                                                         |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | pVariableInformation | Pointer to the variable information that is retrieved by IecVarAccGetNode3 |
+---------+----------------------+----------------------------------------------------------------------------+
| [out]   | pResult              | Pointer to error code                                                      |
+---------+----------------------+----------------------------------------------------------------------------+

**Returns:**

Pointer to address of the variable value

.. _group___cmp_iec_var_access_itf_1gac9661cb807489559d01e51d5fe4d7471:

RTS_IEC_INT IecVarAccGetNodeType (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get node type of the specified node (leaf or branch node)

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+
| [in]    | hNode      | Handle to the node               |
+---------+------------+----------------------------------+
| [out]   | pResult    | Pointer to error code            |
+---------+------------+----------------------------------+

**Returns:**

Node type

.. _group___cmp_iec_var_access_itf_1ga676e57d6fba66f482521b4d1b52eb651:

RTS_SIZE IecVarAccGetSize (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the value size in bytes of the specified node. If it is an array, it returns the complete size of the array (e.g. "C[5]": Returns 15 if it is a byte array with 15 elements)

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+
| [in]    | hNode      | Handle to the node               |
+---------+------------+----------------------------------+
| [out]   | pResult    | Pointer to error code            |
+---------+------------+----------------------------------+

**Returns:**

Size in bytes of the value

.. _group___cmp_iec_var_access_itf_1ga8a00da17bbafad16137831fd6b7c9cc3:

RTS_SIZE IecVarAccGetSize2 (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_SIZE ulOffset, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the value size in bytes of the specified node. It returns always the real size of the node value (e.g. "C[5]": Returns 1 if it is a byte array)

**Parameters**

+---------+------------+-------------------------------------------------------+
| [in]    | hInterface | Handle to the symbolic interface                      |
+---------+------------+-------------------------------------------------------+
| [in]    | hNode      | Handle to the node                                    |
+---------+------------+-------------------------------------------------------+
| [in]    | ulOffset   | Offset of the node (is retrieved by IecVarAccGetNode) |
+---------+------------+-------------------------------------------------------+
| [out]   | pResult    | Pointer to error code                                 |
+---------+------------+-------------------------------------------------------+

**Returns:**

Size in bytes of the value

.. _group___cmp_iec_var_access_itf_1gaa72c0fd79a6635f9472c30eff1361891:

RTS_SIZE IecVarAccGetSize3 (RTS_HANDLE hInterface, RTS_HANDLE hNode, VariableInformationStruct2 *pVariableInformation, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the value size in bytes of the specified node. It returns always the real size of the node value (e.g. "C[5]": Returns 1 if it is a byte array)

**Parameters**

+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface                                           |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | hNode                | Handle to the node                                                         |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | pVariableInformation | Pointer to the variable information that is retrieved by IecVarAccGetNode3 |
+---------+----------------------+----------------------------------------------------------------------------+
| [out]   | pResult              | Pointer to error code                                                      |
+---------+----------------------+----------------------------------------------------------------------------+

**Returns:**

Size in bytes of the value of the specified node

.. _group___cmp_iec_var_access_itf_1gabe5b217e9ff7363b95863f2e9feb3746:

RTS_SIZE IecVarAccGetSwapSize (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the swap size of the specified node (can be used to change the byte order)

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+
| [in]    | hNode      | Handle to the node               |
+---------+------------+----------------------------------+
| [out]   | pResult    | Pointer to error code            |
+---------+------------+----------------------------------+

**Returns:**

Swap size: 8/4/2/1

.. _group___cmp_iec_var_access_itf_1gaa5bc0641efceaf778958f2510a0636f7:

TypeClass3 IecVarAccGetTypeClass (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the type class of the specified node

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+
| [in]    | hNode      | Handle to the node               |
+---------+------------+----------------------------------+
| [out]   | pResult    | Pointer to error code            |
+---------+------------+----------------------------------+

**Returns:**

Type class

.. _group___cmp_iec_var_access_itf_1gab1432dd0ab4697d17566b52ff3d7cf4e:

TypeClass3 IecVarAccGetTypeClass3 (RTS_HANDLE hInterface, RTS_HANDLE hNode, VariableInformationStruct2 *pVariableInformation, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the type class of the specified node

**Parameters**

+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface                                           |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | hNode                | Handle to the node                                                         |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | pVariableInformation | Pointer to the variable information that is retrieved by IecVarAccGetNode3 |
+---------+----------------------+----------------------------------------------------------------------------+
| [out]   | pResult              | Pointer to error code                                                      |
+---------+----------------------+----------------------------------------------------------------------------+

**Returns:**

Type class

.. _group___cmp_iec_var_access_itf_1ga2141fc2ba3a6666281e2d3010c42b60d:

RTS_SIZE IecVarAccGetValue (RTS_HANDLE hInterface, RTS_HANDLE hNode, void *pDest, RTS_SIZE ulOffset, RTS_SIZE ulSize, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Read the value of the specified node

**Parameters**

+---------+------------+-------------------------------------------------------+
| [in]    | hInterface | Handle to the symbolic interface                      |
+---------+------------+-------------------------------------------------------+
| [in]    | hNode      | Handle to the node                                    |
+---------+------------+-------------------------------------------------------+
| [out]   | pDest      | Pointer to destination buffer to read the value       |
+---------+------------+-------------------------------------------------------+
| [in]    | ulOffset   | Offset of the node (is retrieved by IecVarAccGetNode) |
+---------+------------+-------------------------------------------------------+
| [in]    | ulSize     | Number of bytes to read                               |
+---------+------------+-------------------------------------------------------+
| [out]   | pResult    | Pointer to error code                                 |
+---------+------------+-------------------------------------------------------+

**Returns:**

Number of byte read

.. _group___cmp_iec_var_access_itf_1ga790587021297dbc40405a7a22f947f90:

RTS_SIZE IecVarAccGetValue3 (RTS_HANDLE hInterface, RTS_HANDLE hNode, VariableInformationStruct2 *pVariableInformation, void *pDest, RTS_SIZE ulSize, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Read the value of the specified node

**Parameters**

+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface                                           |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | hNode                | Handle to the node                                                         |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | pVariableInformation | Pointer to the variable information that is retrieved by IecVarAccGetNode3 |
+---------+----------------------+----------------------------------------------------------------------------+
| [out]   | pDest                | Pointer to destination buffer to read the value                            |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | ulSize               | Number of bytes to read                                                    |
+---------+----------------------+----------------------------------------------------------------------------+
| [out]   | pResult              | Pointer to error code                                                      |
+---------+----------------------+----------------------------------------------------------------------------+

**Returns:**

Number of byte read

.. _group___cmp_iec_var_access_itf_1gaee41867702b94ec9a0a0fac61af96197:

RTS_SIZE IecVarAccSetValue (RTS_HANDLE hInterface, RTS_HANDLE hNode, void *pSrc, RTS_SIZE ulOffset, RTS_SIZE ulSize, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Write a value to the specified node

**Parameters**

+---------+------------+-------------------------------------------------------+
| [in]    | hInterface | Handle to the symbolic interface                      |
+---------+------------+-------------------------------------------------------+
| [in]    | hNode      | Handle to the node                                    |
+---------+------------+-------------------------------------------------------+
| [in]    | pSrc       | Pointer to source buffer of value to write            |
+---------+------------+-------------------------------------------------------+
| [in]    | ulOffset   | Offset of the node (is retrieved by IecVarAccGetNode) |
+---------+------------+-------------------------------------------------------+
| [in]    | ulSize     | Number of bytes to write                              |
+---------+------------+-------------------------------------------------------+
| [out]   | pResult    | Pointer to error code                                 |
+---------+------------+-------------------------------------------------------+

**Returns:**

Number of byte written

.. _group___cmp_iec_var_access_itf_1ga0abf53e66a108815f9f945b412bf297d:

RTS_SIZE IecVarAccSetValue3 (RTS_HANDLE hInterface, RTS_HANDLE hNode, VariableInformationStruct2 *pVariableInformation, void *pSrc, RTS_SIZE ulSize, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Write a value to the specified node

**Parameters**

+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface                                           |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | hNode                | Handle to the node                                                         |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | pVariableInformation | Pointer to the variable information that is retrieved by IecVarAccGetNode3 |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | pSrc                 | Pointer to source buffer of value to write                                 |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | ulSize               | Number of bytes to write                                                   |
+---------+----------------------+----------------------------------------------------------------------------+
| [out]   | pResult              | Pointer to error code                                                      |
+---------+----------------------+----------------------------------------------------------------------------+

**Returns:**

Number of byte written

.. _group___cmp_iec_var_access_itf_1ga3f35d3f15c5317c559b4b6b66fb5a799:

RTS_SIZE IecVarAccSwap (RTS_HANDLE hInterface, RTS_HANDLE hNode, void *pData, RTS_SIZE ulSize, int bMotorola, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Swap the byte order of specified node and the specified data buffer

**Parameters**

+---------+------------+----------------------------------------------------------------+
| [in]    | hInterface | Handle to the symbolic interface                               |
+---------+------------+----------------------------------------------------------------+
| [in]    | hNode      | Handle to the node                                             |
+---------+------------+----------------------------------------------------------------+
| [in]    | pData      | Pointer to data buffer to swap                                 |
+---------+------------+----------------------------------------------------------------+
| [in]    | ulSize     | Number of bytes to swap                                        |
+---------+------------+----------------------------------------------------------------+
| [in]    | bMotorola  | 1=Motorola format (big endian), 0=Intel format (little endian) |
+---------+------------+----------------------------------------------------------------+
| [out]   | pResult    | Pointer to error code                                          |
+---------+------------+----------------------------------------------------------------+

**Returns:**

Number of bytes swapped

.. _group___cmp_iec_var_access_itf_1gae9596f6d7b9153e18fc29f16bc8ff8d4:

RTS_SIZE IecVarAccSwap2 (RTS_HANDLE hInterface, RTS_HANDLE hNode, void *pData, RTS_SIZE ulSize, int bMotorola, RTS_SIZE ulOffset, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Swap the byte order of specified node and the specified data buffer

**Parameters**

+---------+------------+----------------------------------------------------------------+
| [in]    | hInterface | Handle to the symbolic interface                               |
+---------+------------+----------------------------------------------------------------+
| [in]    | hNode      | Handle to the node                                             |
+---------+------------+----------------------------------------------------------------+
| [in]    | pData      | Pointer to data buffer to swap                                 |
+---------+------------+----------------------------------------------------------------+
| [in]    | ulSize     | Number of bytes to swap                                        |
+---------+------------+----------------------------------------------------------------+
| [in]    | bMotorola  | 1=Motorola format (big endian), 0=Intel format (little endian) |
+---------+------------+----------------------------------------------------------------+
| [in]    | ulOffset   | Offset of the node (is retrieved by IecVarAccGetNode)          |
+---------+------------+----------------------------------------------------------------+
| [out]   | pResult    | Pointer to error code                                          |
+---------+------------+----------------------------------------------------------------+

**Returns:**

Number of bytes swapped

.. _group___cmp_iec_var_access_itf_1ga276d1d9bc937ea721327368adc39d0e6:

RTS_SIZE IecVarAccSwap3 (RTS_HANDLE hInterface, RTS_HANDLE hNode, VariableInformationStruct2 *pVariableInformation, void *pData, RTS_SIZE ulSize, int bMotorola, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Swap the byte order of specified node and the specified data buffer

**Parameters**

+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface                                           |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | hNode                | Handle to the node                                                         |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | pVariableInformation | Pointer to the variable information that is retrieved by IecVarAccGetNode3 |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | pData                | Pointer to data buffer to swap                                             |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | ulSize               | Number of bytes to swap                                                    |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | bMotorola            | 1=Motorola format (big endian), 0=Intel format (little endian)             |
+---------+----------------------+----------------------------------------------------------------------------+
| [out]   | pResult              | Pointer to error code                                                      |
+---------+----------------------+----------------------------------------------------------------------------+

**Returns:**

Number of bytes swapped

.. _group___cmp_iec_var_access_itf_1ga6dc7fb4f1ce8a1d84395984ada8025dc:

RTS_HANDLE IecVarAccGetTypeNode (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the type node of the specified symbolic node. For arays, only the array type is retrieved!

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+
| [in]    | hNode      | Handle to the node               |
+---------+------------+----------------------------------+
| [out]   | pResult    | Pointer to error code            |
+---------+------------+----------------------------------+

**Returns:**

Handle to the type node (called hTypeNode)

.. _group___cmp_iec_var_access_itf_1ga3eb6e3dd592af9c3c84472d720693d95:

RTS_HANDLE IecVarAccGetTypeNode2 (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_SIZE ulOffset, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the type node of the specified symbolic node (worked for all types of node!)

**Parameters**

+---------+------------+-------------------------------------------------------+
| [in]    | hInterface | Handle to the symbolic interface                      |
+---------+------------+-------------------------------------------------------+
| [in]    | hNode      | Handle to the node                                    |
+---------+------------+-------------------------------------------------------+
| [in]    | ulOffset   | Offset of the node (is retrieved by IecVarAccGetNode) |
+---------+------------+-------------------------------------------------------+
| [out]   | pResult    | Pointer to error code                                 |
+---------+------------+-------------------------------------------------------+

**Returns:**

Handle to the type node (called hTypeNode)

.. _group___cmp_iec_var_access_itf_1ga0caef1ef8ae7573466e32922796adeb1:

RTS_HANDLE IecVarAccGetTypeNode3 (RTS_HANDLE hInterface, RTS_HANDLE hNode, VariableInformationStruct2 *pVariableInformation, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the type node of the specified symbolic node (worked for all types of node!)

**Parameters**

+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface                                           |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | hNode                | Handle to the node                                                         |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | pVariableInformation | Pointer to the variable information that is retrieved by IecVarAccGetNode3 |
+---------+----------------------+----------------------------------------------------------------------------+
| [out]   | pResult              | Pointer to error code                                                      |
+---------+----------------------+----------------------------------------------------------------------------+

**Returns:**

Handle to the type node (called hTypeNode)

.. _group___cmp_iec_var_access_itf_1ga91251974f7900189e40549f77417a983:

RTS_RESULT IecVarAccGetTypeDesc (RTS_HANDLE hInterface, RTS_HANDLE hTypeNode, TypeDescAsUnion *pTypeDesc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the type description as a C-structure from the specified type node

**Parameters**

+---------+------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hInterface | Handle to the symbolic interface|

| [in]    | hTypeNode  | Handle to the type node (is retrieved by IecVarAccGetTypeNode or IecVarAccGetTypeNode|

| [out]   | pTypeDesc  | Pointer to get type description as a C-structure. NOTE: You can call this function the first time by setting all members of pTypeDesc to 0. Then you get for user defined types (structures or functionblocks) the number of the member variables. This is retreived in pTypeDesc->_union._struct._Components. Then you can allocate an array with the number of member elements and can call :ref:`IecVarAccGetTypeDesc() <group___cmp_iec_var_access_itf_1ga91251974f7900189e40549f77417a983>` a second time. Example: TypeDescAsUnion typeDesc; memset(&typeDesc, 0, sizeof(typeDesc)); IecVarAccGetTypeDesc(hInterface, hTypeNode, &typeDesc); if (typeDesc._typeClass == TYPE3_USERDEF && typeDesc._union._struct._iComponents > 0) { typeDesc._union._struct._Components = (IBaseTreeNode)CAL_SysMemAllocData(COMPONENT_NAME, typeDesc._union._struct._iComponentssizeof(IBaseTreeNode), NULL); IecVarAccGetTypeDesc(hInterface, hTypeNode, &typeDesc); ... CAL_SysMemFreeData(COMPONENT_NAME, typeDesc._union._struct._Components); } |


**Returns:**

error code

.. _group___cmp_iec_var_access_itf_1gaa606497474807e8a13598ceabd5a10ac:

RTS_RESULT IecVarAccGetAddressInfo (RTS_HANDLE hInterface, RTS_HANDLE hNode, VariableInformationStruct2 *pVariableInformation, char *pszAdressInfo, int *pnAddressInfoLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the address information of a variable, (if available). This is for all data with direct addresses (M, Q or I)

**Parameters**

+---------+----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface                                                                                                                                                                                                        |
+---------+----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hNode                | Handle to the node                                                                                                                                                                                                                      |
+---------+----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pVariableInformation | Pointer to the variable information that is retrieved by IecVarAccGetNode3                                                                                                                                                              |
+---------+----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pszAdressInfo        | Pointer to the string to get the address info. NOTE:                                                                                                                                                                                    |
|         |                      |                                                                                                                                                                                                                                         |
|         |                      | - All address infos are calclulated out of its physical addresses! So the offset is correct but must not be identical to the declared address as in CoDeSys! Examples: o w AT "%IB2" : WORD ==> "%IW1" o b AT "%IW4" : BYTE ==> "%IB8"  |
|         |                      |                                                                                                                                                                                                                                         |
|         |                      | - Target setting "memory-layout\byte-addressing" is recognized in the address! Example: o w AT "%IB4" : WORD ==> "%IW4"                                                                                                                 |
|         |                      |                                                                                                                                                                                                                                         |
|         |                      | - Target setting "memory-layout\bit-word-addressing" is recognized in the address! Example: o x AT "%IX1.13" : BOOL ==> "%IX1.13"                                                                                                       |
+---------+----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [inout] | pnAddressInfoLen     | Pointer to the max length of the address info string. The real length is returned                                                                                                                                                       |
+---------+----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_iec_var_access_itf_1gaab4b0c1626d8a4e65bedb03a102a531d:

RTS_I32 IecVarAccGetNumOfTypes (RTS_HANDLE hInterface, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the number of defined data types. NOTE: Only supported if OPC UA support is activated in the symbolconfiguration in CODESYS!

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+
| [out]   | pResult    | Pointer to error code            |
+---------+------------+----------------------------------+

**Returns:**

Number of defined data types

.. _group___cmp_iec_var_access_itf_1ga9d75461cd7b83a51b899eabdfa0fa616:

RTS_HANDLE IecVarAccGetTypeNodeByIndex (RTS_HANDLE hInterface, RTS_I32 nIndex, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the type node handle specified by type index. NOTE: Only supported if OPC UA support is activated in the symbolconfiguration in CODESYS!

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+
| [in]    | nIndex     | Type index                       |
+---------+------------+----------------------------------+
| [out]   | pResult    | Pointer to error code            |
+---------+------------+----------------------------------+

**Returns:**

Handle to the type node (called hTypeNode)

.. _group___cmp_iec_var_access_itf_1ga720265ea27770f46180b84b8dc5cdcad:

char* IecVarAccGetTypeName (RTS_HANDLE hInterface, RTS_HANDLE hTypeNode, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the type name, if it is a userdefined type (structure or function block). NOTE: Only supported if OPC UA support is activated in the symbolconfiguration in CODESYS!

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+
| [in]    | hTypeNode  | Handle to the type node          |
+---------+------------+----------------------------------+
| [out]   | pResult    | Pointer to error code            |
+---------+------------+----------------------------------+

**Returns:**

Pointer to type name

.. _group___cmp_iec_var_access_itf_1gafa120fb54bc99900ea9ee5710bab3153:

TypeClass3 IecVarAccGetTypeClassFromType (RTS_HANDLE hInterface, RTS_HANDLE hTypeNode, RTS_IEC_DWORD dwFlags, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the type class of the specified type! NOTE: In the HiWord of the TypeClass, the POU types are encoded (see POUTypeClass).

**Parameters**

+---------+------------+-------------------------------------------------------------------------------+
| [in]    | hInterface | Handle to the symbolic interface                                              |
+---------+------------+-------------------------------------------------------------------------------+
| [in]    | hTypeNode  | Handle to the type node                                                       |
+---------+------------+-------------------------------------------------------------------------------+
| [in]    | dwFlags    | Flags to control the result of the TypeClass. See TypeClassFlags for details. |
+---------+------------+-------------------------------------------------------------------------------+
| [out]   | pResult    | Pointer to error code                                                         |
+---------+------------+-------------------------------------------------------------------------------+

**Returns:**

TypeClass3

.. _group___cmp_iec_var_access_itf_1ga559ffe28b5222970c77b7e5f43b87f93:

POUClass IecVarAccGetPOUClass (RTS_HANDLE hInterface, RTS_HANDLE hTypeNode, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the POU class of the specified type

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+
| [in]    | hTypeNode  | Handle to the type node          |
+---------+------------+----------------------------------+
| [out]   | pResult    | Pointer to error code            |
+---------+------------+----------------------------------+

**Returns:**

POUClass

.. _group___cmp_iec_var_access_itf_1gaed13ac03ee8ccf2194ae77f9c389e7fc:

RTS_UI32 IecVarAccGetNodeFlags (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the node flags of a specified node. Is typically used in memmer node of a struct/functionblock etc. to get the storage class info (VAR_INPUT, VAR_OUTPUT, etc.)

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+
| [in]    | hNode      | Handle to the node               |
+---------+------------+----------------------------------+
| [out]   | pResult    | Pointer to error code            |
+---------+------------+----------------------------------+

**Returns:**

NodeFlags. See NodeFlags for details

.. _group___cmp_iec_var_access_itf_1gad92d11ef8fc40cee078d63a29040101a:

RTS_UI16 IecVarAccGetNumOfAttributes (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the number of attributes defined at this symbolic node. NOTE: An attribute is defined at the declaration part in CODESYS, e.g.: {attribute 'symbol' := 'readwrite'} This can be accessed here the following way, e.g.: "symbol := readwrite"

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+
| [in]    | hNode      | Handle to the node               |
+---------+------------+----------------------------------+
| [out]   | pResult    | Pointer to error code            |
+---------+------------+----------------------------------+

**Returns:**

Number of specified attributes at this symblic node

.. _group___cmp_iec_var_access_itf_1ga5a486ad34bc9f59dee933d615fdfaae9:

char* IecVarAccGetAttributeByIndex (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_UI16 ui16Index, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get access to the defined attributes at this symbolic node. NOTE: An attribute is defined at the declaration part in CODESYS, e.g.: {attribute 'symbol' := 'readwrite'} This can be accessed here the following way, e.g.: "symbol := readwrite"

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+
| [in]    | hNode      | Handle to the node               |
+---------+------------+----------------------------------+
| [in]    | ui16Index  | Index of the attribute           |
+---------+------------+----------------------------------+
| [out]   | pResult    | Pointer to error code            |
+---------+------------+----------------------------------+

**Returns:**

Pointer to the attribute specified by index

.. _group___cmp_iec_var_access_itf_1gae564e9d09383778e8ba8ffc74c34bd37:

EnumValues* IecVarAccGetEnumValues (RTS_HANDLE hInterface, RTS_HANDLE hTypeNode, RTS_I16 *pi16NumOfEnums, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the enum values of an IEC Enum type

**Parameters**

+---------+-----------------+-----------------------------------------------------------------------------------------+
| [in]    | hInterface      | Handle to the symbolic interface                                                        |
+---------+-----------------+-----------------------------------------------------------------------------------------+
| [in]    | hTypeNode       | Handle to the type node (is retrieved by IecVarAccGetTypeNode or IecVarAccGetTypeNode2) |
+---------+-----------------+-----------------------------------------------------------------------------------------+
| [out]   | pui16NumOfEnums | Pointer to the number of enum values in the returned array                              |
+---------+-----------------+-----------------------------------------------------------------------------------------+
| [out]   | pResult         | Pointer to error code                                                                   |
+---------+-----------------+-----------------------------------------------------------------------------------------+

**Returns:**

Pointer to the array of enum values or NULL if it is not supported or this is no enum type

.. _group___cmp_iec_var_access_itf_1ga68c4d859a8609329cecec7ff094e0184:

RTS_HANDLE IecVarAccGetDerivedBaseType (RTS_HANDLE hInterface, RTS_HANDLE hTypeNode, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the base type of a derived FB or structure

**Parameters**

+---------+------------+-----------------------------------------------------------------------------------------+
| [in]    | hInterface | Handle to the symbolic interface                                                        |
+---------+------------+-----------------------------------------------------------------------------------------+
| [in]    | hTypeNode  | Handle to the type node (is retrieved by IecVarAccGetTypeNode or IecVarAccGetTypeNode2) |
+---------+------------+-----------------------------------------------------------------------------------------+
| [out]   | pResult    | Pointer to error code                                                                   |
+---------+------------+-----------------------------------------------------------------------------------------+

**Return values**

+-------------------+--------------------------------------------------+
| ERR_OK            | Derive information available                     |
+-------------------+--------------------------------------------------+
| ERR_PARAMETER     | Invalid parameter (one of the handles invalid)   |
+-------------------+--------------------------------------------------+
| ERR_NO_OBJECT     | No derive information available                  |
+-------------------+--------------------------------------------------+
| ERR_NOT_SUPPORTED | IecVarAccess interface in IEC code not available |
+-------------------+--------------------------------------------------+

**Returns:**

Return a handle to the base type or RTS_INVALID_HANDLE if no base type is available

.. _group___cmp_iec_var_access_itf_1ga49854cbdcb7fa57210f3d9d50b2de70e:

RTS_BOOL IecVarAccIsDerivedType (RTS_HANDLE hInterface, RTS_HANDLE hTypeNode, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Check if the FB or structure is derived from a base type

**Parameters**

+---------+------------+-----------------------------------------------------------------------------------------+
| [in]    | hInterface | Handle to the symbolic interface                                                        |
+---------+------------+-----------------------------------------------------------------------------------------+
| [in]    | hTypeNode  | Handle to the type node (is retrieved by IecVarAccGetTypeNode or IecVarAccGetTypeNode2) |
+---------+------------+-----------------------------------------------------------------------------------------+
| [out]   | pResult    | Pointer to error code                                                                   |
+---------+------------+-----------------------------------------------------------------------------------------+

**Return values**

+-------------------+--------------------------------------------------+
| ERR_OK            | Derive information available                     |
+-------------------+--------------------------------------------------+
| ERR_PARAMETER     | Invalid parameter (one of the handles invalid)   |
+-------------------+--------------------------------------------------+
| ERR_NOT_SUPPORTED | IecVarAccess interface in IEC code not available |
+-------------------+--------------------------------------------------+

**Returns:**

TRUE if it is a derived type or FALSE if not

.. _group___cmp_iec_var_access_itf_1gab541def6dd65399a4f7ba20d1ec69956:

RTS_SIZE IecVarAccGetClientOffset (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Return the client offset of a variable. This can be different to the physical IEC memory offset!

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+
| [in]    | hNode      | Handle to the node               |
+---------+------------+----------------------------------+
| [out]   | pResult    | Pointer to error code            |
+---------+------------+----------------------------------+

**Return values**

+-------------------+--------------------------------------------------+
| ERR_OK            | Client offset available                          |
+-------------------+--------------------------------------------------+
| ERR_PARAMETER     | Invalid parameter (one of the handles invalid)   |
+-------------------+--------------------------------------------------+
| ERR_NOT_SUPPORTED | IecVarAccess interface in IEC code not available |
+-------------------+--------------------------------------------------+

**Returns:**

Return the client offset of the node

.. _group___cmp_iec_var_access_itf_1ga1511d714cba0d65818a128b6a045d2d2:

RTS_IEC_LWORD IecVarAccGetNamespaceNodeFlags (RTS_HANDLE hInterface, RTS_HANDLE hNode, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Return the namespace node flags of a specified node. See "NAMESPACENODEFLAGS_" definitions in :ref:`IecVarAccess_ItfsItf.h <_iec_var_access___itfs_itf_8h>` . NOTE: Please use the appropriate macros defined in "NamespaceNodeFlags macros" in :ref:`IecVarAccess_ItfsItf.h <_iec_var_access___itfs_itf_8h>` to separate Application, GVL, Program, Variable or ExplicitNamespace nodes (e.g. :ref:`IsApplicationNode(namespaceNodeFlags) <group___iec_var_access___itfs_itf___namespace_node_flagsmacros_1ga88b5194285655c20f6d6c7f119ae2718>` to check if it is an application node).

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+
| [in]    | hNode      | Handle to the node               |
+---------+------------+----------------------------------+
| [out]   | pResult    | Pointer to error code            |
+---------+------------+----------------------------------+

**Return values**

+-------------------+--------------------------------------------------+
| ERR_OK            | Namespace node flags available                   |
+-------------------+--------------------------------------------------+
| ERR_PARAMETER     | Invalid parameter (one of the handles invalid)   |
+-------------------+--------------------------------------------------+
| ERR_NOT_SUPPORTED | IecVarAccess interface in IEC code not available |
+-------------------+--------------------------------------------------+

**Returns:**

Return the namespace node flags. Please use the appropriate macros defined in "NamespaceNodeFlags macros" in :ref:`IecVarAccess_ItfsItf.h <_iec_var_access___itfs_itf_8h>` to separate Application, GVL, Program, Variable or *ExplicitNamespace nodes

.. _group___cmp_iec_var_access_itf_1gad4a7527069c60e3bc51b87e150069e6e:

RTS_SIZE IecVarAccGetNativeSize (RTS_HANDLE hInterface, RTS_HANDLE hNode, VariableInformationStruct2 *pVariableInformation, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Return the native size of a node. This is the physical memory size in IEC! WARNINGS:

- Use this function only for diagnostic usages!

- Don't use it to read/write values via address of a symbol!!! This can lead to unpredictable effects and can damage your system!

**Parameters**

+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface                                           |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | hNode                | Handle to the symbolic node                                                |
+---------+----------------------+----------------------------------------------------------------------------+
| [in]    | pVariableInformation | Pointer to the variable information that is retrieved by IecVarAccGetNode3 |
+---------+----------------------+----------------------------------------------------------------------------+
| [out]   | pResult              | Pointer to error code                                                      |
+---------+----------------------+----------------------------------------------------------------------------+

**Return values**

+-------------------+---------------------------------------------------+
| ERR_OK            | Namespace node flags available                    |
+-------------------+---------------------------------------------------+
| ERR_PARAMETER     | Invalid parameter (one of the handles is invalid) |
+-------------------+---------------------------------------------------+
| ERR_NOT_SUPPORTED | IecVarAccess interface in IEC code not available  |
+-------------------+---------------------------------------------------+

**Returns:**

Native/IEC size in bytes of a symbolic node

.. _group___cmp_iec_var_access_itf_1gadaa8713059f58a06b297db54efe3f8c8:

EnumAttributes* IecVarAccGetEnumMemberAttributeList (RTS_HANDLE hInterface, RTS_HANDLE hTypeNode, RTS_I16 *pnNumOfEnumValues, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the attributes of single enum values. Attention: The pAttributes member of the EnumAttributes return value is basically not a charbut a char Use a construct like this to get the attributes: EnumAttributes[i].pAttributes[j]

**Parameters**

+---------+-------------------+-------------------------------------------+
| [in]    | hInterface        | Handle to the symbolic interface          |
+---------+-------------------+-------------------------------------------+
| [in]    | hTypeNode         | Handle to the symbolic type node          |
+---------+-------------------+-------------------------------------------+
| [out]   | pnNumOfEnumValues | Number of elements in the returned array. |
+---------+-------------------+-------------------------------------------+
| [out]   | pResult           | Pointer to error code                     |
+---------+-------------------+-------------------------------------------+

**Return values**

+-------------------+---------------------------------------------------+
| ERR_OK            | Attributes of enum values are available.          |
+-------------------+---------------------------------------------------+
| ERR_PARAMETER     | Invalid parameter (one of the handles is invalid) |
+-------------------+---------------------------------------------------+
| ERR_NOT_SUPPORTED | IecVarAccess interface in IEC code not available  |
+-------------------+---------------------------------------------------+

**Returns:**

Pointer to an array of attributes of enum values.

.. _group___cmp_iec_var_access_itf_1ga5e65112687f8ad7b346df17f9aea77f9:

RTS_UI16 IecVarAccGetNumOfTypeAttributes (RTS_HANDLE hInterface, RTS_HANDLE hTypeNode, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the number of available attributes of a type node

**Parameters**

+---------+------------+----------------------------------+
| [in]    | hInterface | Handle to the symbolic interface |
+---------+------------+----------------------------------+
| [in]    | hTypeNode  | Handle to the symbolic type node |
+---------+------------+----------------------------------+
| [out]   | pResult    | Pointer to error code            |
+---------+------------+----------------------------------+

**Return values**

+-------------------+---------------------------------------------------+
| ERR_OK            | Attributes of enum values are available.          |
+-------------------+---------------------------------------------------+
| ERR_PARAMETER     | Invalid parameter (one of the handles is invalid) |
+-------------------+---------------------------------------------------+
| ERR_NOT_SUPPORTED | IecVarAccess interface in IEC code not available  |
+-------------------+---------------------------------------------------+

**Returns:**

Number of available attributes

.. _group___cmp_iec_var_access_itf_1ga029b7cf3c4b47ea14e826f761e46ba51:

char* IecVarAccGetTypeAttributeByIndex (RTS_HANDLE hInterface, RTS_HANDLE hTypeNode, RTS_UI16 wIndex, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get a specific attribute a type node

**Parameters**

+---------+------------+----------------------------------------------------------------------------------------------+
| [in]    | hInterface | Handle to the symbolic interface                                                             |
+---------+------------+----------------------------------------------------------------------------------------------+
| [in]    | hTypeNode  | Handle to the symbolic type node                                                             |
+---------+------------+----------------------------------------------------------------------------------------------+
| [in]    | wIndex     | Index of the attribute to get. Use IecVarAccGetNumOfTypeAttributes to get the maximum index. |
+---------+------------+----------------------------------------------------------------------------------------------+
| [out]   | pResult    | Pointer to error code                                                                        |
+---------+------------+----------------------------------------------------------------------------------------------+

**Return values**

+-------------------+---------------------------------------------------+
| ERR_OK            | Attributes of enum values are available.          |
+-------------------+---------------------------------------------------+
| ERR_PARAMETER     | Invalid parameter (one of the handles is invalid) |
+-------------------+---------------------------------------------------+
| ERR_NOT_SUPPORTED | IecVarAccess interface in IEC code not available  |
+-------------------+---------------------------------------------------+

**Returns:**

Content of attributes

.. _group___cmp_iec_var_access_itf_1ga1b5d953c7b9933518076de734b4da22c:

RTS_BOOL IecVarAccGetRange (RTS_HANDLE hInterface, RTS_HANDLE hTypeNode, RTS_UI64 *pLower, RTS_UI64 *pUpper, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the upper and lower bounds of a subrange type.

**Parameters**

+---------+------------+----------------------------------------------------+
| [in]    | hInterface | Handle to the symbolic interface                   |
+---------+------------+----------------------------------------------------+
| [in]    | hTypeNode  | Handle to the symbolic type node                   |
+---------+------------+----------------------------------------------------+
| [out]   | pLower     | Pointer where to store the minimum accepted value. |
+---------+------------+----------------------------------------------------+
| [out]   | pUpper     | Pointer where to store the maximum accepted value. |
+---------+------------+----------------------------------------------------+
| [out]   | pResult    | Pointer to error code                              |
+---------+------------+----------------------------------------------------+

**Return values**

+-------------------+---------------------------------------------------+
| ERR_OK            | Attributes of enum values are available.          |
+-------------------+---------------------------------------------------+
| ERR_PARAMETER     | Invalid parameter (one of the handles is invalid) |
+-------------------+---------------------------------------------------+
| ERR_NOT_SUPPORTED | IecVarAccess interface in IEC code not available  |
+-------------------+---------------------------------------------------+

**Returns:**

Content of attributes

.. _group___cmp_iec_var_access_itf_1gaf0bdc4e113c0009e4a0b2fcdb63f984e:

RTS_RESULT IecVarAccGetContentFeatureFlags (RTS_HANDLE hInterface, RTS_IEC_INT *pContentFeatureFlags)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Gets the content feature flags.

**Parameters**

+---------+----------------------+-----------------------------------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface                                                              |
+---------+----------------------+-----------------------------------------------------------------------------------------------+
| [out]   | pContentFeatureFlags | Pointer to the destination variable. May be 0 to just query whether the flags are set or not. |
+---------+----------------------+-----------------------------------------------------------------------------------------------+
| [out]   | pResult              | Pointer to error code                                                                         |
+---------+----------------------+-----------------------------------------------------------------------------------------------+

**Return values**

+--------------------+------------------------------------------------------------------------+
| ERR_OK             | if pContentFeatureFlags is not 0, it will be set to the feature flags. |
+--------------------+------------------------------------------------------------------------+
| ERR_NOTINITIALIZED | The code generator did not set the flag value.                         |
+--------------------+------------------------------------------------------------------------+
| ERR_NOT_SUPPORTED  | IecVarAccess interface in IEC code not available                       |
+--------------------+------------------------------------------------------------------------+

**Returns:**

Content of attributes

.. _group___cmp_iec_var_access_itf_1ga51360c9ec3cb48086ad5ce79f1a15c19:

RTS_RESULT IecVarAccExecuteCall (RTS_HANDLE hInterface, RTS_HANDLE hNode, VariableInformationStruct2 *pVariableInformation, RTS_UI8 *pArgumentBuffer, RTS_SIZE nArgumentBufferSize)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Call a callable node. This can be a Program, FB, method or function.

**Parameters**

+---------+----------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hInterface           | Handle to the symbolic interface                                                                                                                                                                                              |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pVariableInformation | Pointer to the variable information that is retrieved by IecVarAccGetNode3 or IecVarAccGetNode4                                                                                                                               |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pArgumentBuffer      | Pointer to the parameter structure of the object to call. ATTENTION: All values of this parameter structure (even a VAR_OUTPUT) must be initialized with 0 before calling this function to prevent an unpredictable behavior! |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | nArgumentBufferSize  | Size of the parameter structure                                                                                                                                                                                               |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+--------------------+--------------------------------------------------+
| ERR_OK             | Call was successful.                             |
+--------------------+--------------------------------------------------+
| ERR_PARAMETER      | One of the parameters was invalid.               |
+--------------------+--------------------------------------------------+
| ERR_NOTINITIALIZED | Symbolconfiguration not initialized              |
+--------------------+--------------------------------------------------+
| ERR_FAILED         | Internal error.                                  |
+--------------------+--------------------------------------------------+
| ERR_NOT_SUPPORTED  | IecVarAccess interface in IEC code not available |
+--------------------+--------------------------------------------------+

.. _group___cmp_iec_var_access_itf_1ga7d3d550cc0c5f3d7fb5d633d654ed28c:

RTS_HANDLE IecVarAccGetReferenceBaseType (RTS_HANDLE hInterface, RTS_HANDLE hTypeNode, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the base type of a reference.

**Parameters**

+---------+------------+------------------------------------+
| [in]    | hInterface | Handle to the symbolic interface   |
+---------+------------+------------------------------------+
| [in]    | hTypeNode  | Handle to the reference type node. |
+---------+------------+------------------------------------+
| [out]   | pResult    | Pointer to error code              |
+---------+------------+------------------------------------+

**Return values**

+-------------------+--------------------------------------------------+
| ERR_OK            | Derive information available                     |
+-------------------+--------------------------------------------------+
| ERR_PARAMETER     | Invalid parameter (one of the handles invalid)   |
+-------------------+--------------------------------------------------+
| ERR_NO_OBJECT     | No derive information available                  |
+-------------------+--------------------------------------------------+
| ERR_NOT_SUPPORTED | IecVarAccess interface in IEC code not available |
+-------------------+--------------------------------------------------+

**Returns:**

Return a handle to the base type or RTS_INVALID_HANDLE if no base type is available

.. last line of group.rst template
.. last line of composition.rst template


