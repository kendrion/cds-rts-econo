.. first line of composition.rst template

.. first line of group.rst template

.. _group___cmp_x509_cert_itf:

==============
CmpX509CertItf
==============

Interface of CmpX509Cert. :ref:`More... <group___cmp_x509_cert_itf-details>`

Modules
-------

- :ref:`Event parameter <group___cmp_x509_cert_itf___eventparameter>`

- :ref:`Events <group___cmp_x509_cert_itf___events>`

- :ref:`Key Usage <group___cmp_x509_cert_itf___key_usage>`

- :ref:`Object Identifiers <group___cmp_x509_cert_itf___object_identifiers>`

- :ref:`Online service tags <group___cmp_x509_cert_itf___onlineservicetags>`

- :ref:`Online services <group___cmp_x509_cert_itf___onlineservices>`

- :ref:`SecurityIDs <group___cmp_x509_cert_itf___security_i_ds>`

- :ref:`SecuritySettings <group___cmp_x509_cert_itf___security_settings>`

- :ref:`Settings <group___cmp_x509_cert_itf___settings>`

- :ref:`Static defines <group___cmp_x509_cert_itf___staticdefines>`

Data Structures
---------------

- struct :ref:`RtsOIDStore <union_rts_o_i_d_store>`

- struct :ref:`tagRtsOID <structtag_rts_o_i_d>`

- struct :ref:`RtsX509AltNameStore <union_rts_x509_alt_name_store>`

- struct :ref:`tagRtsX509AltName <structtag_rts_x509_alt_name>`

- struct :ref:`tagRtsX509NameEntry <structtag_rts_x509_name_entry>`

- struct :ref:`tagRtsX509CertName <structtag_rts_x509_cert_name>`

- struct :ref:`tagRtsX509ExKeyUsage <structtag_rts_x509_ex_key_usage>`

- struct :ref:`RtsX509CertFilterContent <union_rts_x509_cert_filter_content>`

- struct :ref:`tagRtsX509CertFilter <structtag_rts_x509_cert_filter>`

- struct :ref:`tagRtsX509CertInfo <structtag_rts_x509_cert_info>`

- struct :ref:`tagrtsoidclear_struct <structtagrtsoidclear__struct>`

- struct :ref:`tagrtsoidcreate_struct <structtagrtsoidcreate__struct>`

- struct :ref:`tagrtsoidgetid_struct <structtagrtsoidgetid__struct>`

- struct :ref:`tagrtsoidgetname_struct <structtagrtsoidgetname__struct>`

- struct :ref:`tagx509certclose_struct <structtagx509certclose__struct>`

- struct :ref:`tagx509certcmsdecrypt_struct <structtagx509certcmsdecrypt__struct>`

- struct :ref:`tagx509certcmsverify_struct <structtagx509certcmsverify__struct>`

- struct :ref:`tagx509certcreatecsr_struct <structtagx509certcreatecsr__struct>`

- struct :ref:`tagx509certcreateselfsigned_struct <structtagx509certcreateselfsigned__struct>`

- struct :ref:`tagx509certgetbinary_struct <structtagx509certgetbinary__struct>`

- struct :ref:`tagx509certgetcontent_struct <structtagx509certgetcontent__struct>`

- struct :ref:`tagx509certgetprivatekey_struct <structtagx509certgetprivatekey__struct>`

- struct :ref:`tagx509certgetpublickey_struct <structtagx509certgetpublickey__struct>`

- struct :ref:`tagx509certgetthumbprint_struct <structtagx509certgetthumbprint__struct>`

- struct :ref:`tagx509certinfoexit_struct <structtagx509certinfoexit__struct>`

- struct :ref:`tagx509certinfoinit_struct <structtagx509certinfoinit__struct>`

- struct :ref:`tagx509certkeyclose_struct <structtagx509certkeyclose__struct>`

- struct :ref:`tagx509certstoreaddcert_struct <structtagx509certstoreaddcert__struct>`

- struct :ref:`tagx509certstoreclose_struct <structtagx509certstoreclose__struct>`

- struct :ref:`tagx509certstoregetfirstcert_struct <structtagx509certstoregetfirstcert__struct>`

- struct :ref:`tagx509certstoregetnextcert_struct <structtagx509certstoregetnextcert__struct>`

- struct :ref:`tagx509certstoregetregisteredcert_struct <structtagx509certstoregetregisteredcert__struct>`

- struct :ref:`tagx509certstoreopen_struct <structtagx509certstoreopen__struct>`

- struct :ref:`tagx509certstoreregister_struct <structtagx509certstoreregister__struct>`

- struct :ref:`tagx509certstoreremovecert_struct <structtagx509certstoreremovecert__struct>`

- struct :ref:`tagx509certstoresearchgetfirst_struct <structtagx509certstoresearchgetfirst__struct>`

- struct :ref:`tagx509certstoresearchgetnext_struct <structtagx509certstoresearchgetnext__struct>`

- struct :ref:`tagx509certstoreunregister_struct <structtagx509certstoreunregister__struct>`

- struct :ref:`tagx509certverify_struct <structtagx509certverify__struct>`

- struct :ref:`tagx509parsecertificate_struct <structtagx509parsecertificate__struct>`

- struct :ref:`X509CertCreateSelfSignedAsyncResult <struct_x509_cert_create_self_signed_async_result>`

- struct :ref:`X509CertCreateCSRAsyncResult <struct_x509_cert_create_c_s_r_async_result>`

- struct :ref:`X509AsyncOperationResult <union_x509_async_operation_result>`

- struct :ref:`X509AsyncResult <struct_x509_async_result>`

- struct :ref:`ICmpX509Cert_C <struct_i_cmp_x509_cert___c>`

Macros
------

- #define :ref:`RTSCERTENCODING_ASN1 <group___cmp_x509_cert_itf_1ga991b92ffd3bcb0a4b72b2ceece3002cb>` RTS_IEC_INT_C(0x0)

- #define :ref:`RTSCERTENCODING_BASE64 <group___cmp_x509_cert_itf_1ga553dcf0bf1d0879d38eb9bb3de39dec2>` RTS_IEC_INT_C(0x1)

- #define :ref:`RTSCERTENCODING <group___cmp_x509_cert_itf_1ga2b92ffb2a28f5b1fd9fe9d73bdc1197a>` RTS_IEC_INT

- #define :ref:`RTSCERTTRUSTLEVEL_UNTRUSTED <group___cmp_x509_cert_itf_1ga89f6364a9b9db3f25ab394c220442c8c>` RTS_IEC_INT_C(0x1)

- #define :ref:`RTSCERTTRUSTLEVEL_TRUSTED <group___cmp_x509_cert_itf_1ga49ca7ac8bd6ad56c971887af60dadacb>` RTS_IEC_INT_C(0x2)

- #define :ref:`RTSCERTTRUSTLEVEL_OWN <group___cmp_x509_cert_itf_1ga589f1a935b7f6a1050cbc02059580684>` RTS_IEC_INT_C(0x3)

- #define :ref:`RTSCERTTRUSTLEVEL_QUARANTINE <group___cmp_x509_cert_itf_1ga5a83ed93c6295deb2b74d3a953277ae3>` RTS_IEC_INT_C(0x4)

- #define :ref:`RTSCERTTRUSTLEVEL_UNKNOWN <group___cmp_x509_cert_itf_1gaaef007b2a5f75365176886ffe671e40d>` RTS_IEC_INT_C(0x5)

- #define :ref:`RTSCERTTRUSTLEVEL <group___cmp_x509_cert_itf_1ga86a9f95f0345dc8f100a23d51069e796>` RTS_IEC_INT

- #define :ref:`RTSX509ALTNAMETYPE_OTHERNAME <group___cmp_x509_cert_itf_1ga6710183e103419296c76821bdba6e057>` RTS_IEC_INT_C(0x0)	/* Not supported */

- #define :ref:`RTSX509ALTNAMETYPE_EMAIL <group___cmp_x509_cert_itf_1ga8d82b6e2e1d9ff35eeca6f2bbe32eff2>` RTS_IEC_INT_C(0x1)	/* Supported */

- #define :ref:`RTSX509ALTNAMETYPE_DNSNAME <group___cmp_x509_cert_itf_1gad2a7d7867735308420266add0adc330d>` RTS_IEC_INT_C(0x2)	/* Supported */

- #define :ref:`RTSX509ALTNAMETYPE_X400ADDRESS <group___cmp_x509_cert_itf_1ga0d19b0b3f51f5d3406ee862a78e6d7a6>` RTS_IEC_INT_C(0x3)	/* Not supported */

- #define :ref:`RTSX509ALTNAMETYPE_DIRECTORYNAME <group___cmp_x509_cert_itf_1gaf0c10f43ec7b43c8d77c4af6cea0bf71>` RTS_IEC_INT_C(0x4)	/* Not supported */

- #define :ref:`RTSX509ALTNAMETYPE_EDIPARTYNAME <group___cmp_x509_cert_itf_1ga9f1ece282dfa84aba881472a05374fe8>` RTS_IEC_INT_C(0x5)	/* Not supported */

- #define :ref:`RTSX509ALTNAMETYPE_URI <group___cmp_x509_cert_itf_1ga27786f665fb8286bd1716a5853d876c1>` RTS_IEC_INT_C(0x6)	/* Supported */

- #define :ref:`RTSX509ALTNAMETYPE_IPADDRESS <group___cmp_x509_cert_itf_1gac4e6423a321b539e67c538edd20acaca>` RTS_IEC_INT_C(0x7)	/* Supported */

- #define :ref:`RTSX509ALTNAMETYPE_REGISTERDID <group___cmp_x509_cert_itf_1gaa47105523bad40018be74493c62d9bae>` RTS_IEC_INT_C(0x8)	/* Supported */

- #define :ref:`RTSX509ALTNAMETYPE <group___cmp_x509_cert_itf_1ga34dedaed91e5459fe8b88ae07e5665f0>` RTS_IEC_INT

- #define :ref:`RTSX509CERTFILTERTYPE_TRUST_LEVEL <group___cmp_x509_cert_itf_1ga97ace9c8212fa405162abd5015b2edd1>` RTS_IEC_INT_C(0x0)

- #define :ref:`RTSX509CERTFILTERTYPE_SUBJECT <group___cmp_x509_cert_itf_1ga9a675b3166bd6166596202361bf86649>` RTS_IEC_INT_C(0x1)

- #define :ref:`RTSX509CERTFILTERTYPE_SUBJECT_MATCHALL <group___cmp_x509_cert_itf_1gaa3ff13c9a299e6ccd9f7cbe1afb3e188>` RTS_IEC_INT_C(0x2)

- #define :ref:`RTSX509CERTFILTERTYPE_CERT_DATEVALID <group___cmp_x509_cert_itf_1gac7b31ce4ddfac3ac0e6cc7f5a65666fd>` RTS_IEC_INT_C(0x3)

- #define :ref:`RTSX509CERTFILTERTYPE_CERT_KEYUSAGE <group___cmp_x509_cert_itf_1ga2ea9b2e7c3ad29968a8d0d0a9615d7ee>` RTS_IEC_INT_C(0x4)

- #define :ref:`RTSX509CERTFILTERTYPE_CERT_EXKEYUSAGE <group___cmp_x509_cert_itf_1gaab202d9e5acaac9ef6f1afe50e6cfa3f>` RTS_IEC_INT_C(0x5)

- #define :ref:`RTSX509CERTFILTERTYPE_CERT_THUMBPRINT <group___cmp_x509_cert_itf_1ga397b6bf8f86f99d29b1a3e94b92e66f2>` RTS_IEC_INT_C(0x6)

- #define :ref:`RTSX509CERTFILTERTYPE <group___cmp_x509_cert_itf_1gac0a940a207e99d841b157b5abdacd067>` RTS_IEC_INT

- #define :ref:`CMPX509CERT_ASYNC_FUNCTION_CREATESELFSIGNED <group___cmp_x509_cert_itf_1gab0c3674136331ef3d08683692ebdf477>` 1

- #define :ref:`CMPX509CERT_ASYNC_FUNCTION_CREATECSR <group___cmp_x509_cert_itf_1gae389919c688154c0cbb5452d1507550c>` 2

- #define :ref:`ITF_CmpX509Cert <group___cmp_x509_cert_itf_1gad93ddb1893238f0723892dc36b8f625b>`

- #define :ref:`EXTITF_CmpX509Cert <group___cmp_x509_cert_itf_1ga5269f11379ab294fbbeb0f02c35726cd>`

Typedefs
--------

- typedef struct :ref:`tagRtsOID <structtag_rts_o_i_d>` :ref:`RtsOID <group___cmp_x509_cert_itf_1gafb230e6dc978609d7aed4d3f75777dd4>`

- typedef struct :ref:`tagRtsX509AltName <structtag_rts_x509_alt_name>` :ref:`RtsX509AltName <group___cmp_x509_cert_itf_1ga6757110f5ba82365ade354bef57d2f0e>`

- typedef struct :ref:`tagRtsX509NameEntry <structtag_rts_x509_name_entry>` :ref:`RtsX509NameEntry <group___cmp_x509_cert_itf_1ga949c43a2f0a07ec7103b293f375cfed3>`

- typedef struct :ref:`tagRtsX509CertName <structtag_rts_x509_cert_name>` :ref:`RtsX509CertName <group___cmp_x509_cert_itf_1ga7471487b9fc63f37d2049e302cefeb2e>`

- typedef struct :ref:`tagRtsX509ExKeyUsage <structtag_rts_x509_ex_key_usage>` :ref:`RtsX509ExKeyUsage <group___cmp_x509_cert_itf_1ga31519dff2498615bbe9dc17755351f33>`

- typedef struct :ref:`tagRtsX509CertFilter <structtag_rts_x509_cert_filter>` :ref:`RtsX509CertFilter <group___cmp_x509_cert_itf_1ga72a12c7d19ffabbf04660a3566a8bda2>`

- typedef struct :ref:`tagRtsX509CertInfo <structtag_rts_x509_cert_info>` :ref:`RtsX509CertInfo <group___cmp_x509_cert_itf_1ga96114d4c034d1905d83ce6d9a53c9a16>`

- typedef struct :ref:`tagrtsoidclear_struct <structtagrtsoidclear__struct>` :ref:`rtsoidclear_struct <group___cmp_x509_cert_itf_1gafcc94a09699b2c1d2ee6040b978d951d>`

- typedef struct :ref:`tagrtsoidcreate_struct <structtagrtsoidcreate__struct>` :ref:`rtsoidcreate_struct <group___cmp_x509_cert_itf_1gae8fc99c19e3b1ddcf63bf0947c9be613>`

- typedef struct :ref:`tagrtsoidgetid_struct <structtagrtsoidgetid__struct>` :ref:`rtsoidgetid_struct <group___cmp_x509_cert_itf_1ga1d173a7d842f7f4e432ff0d7cbb6fcae>`

- typedef struct :ref:`tagrtsoidgetname_struct <structtagrtsoidgetname__struct>` :ref:`rtsoidgetname_struct <group___cmp_x509_cert_itf_1ga0133de2e20fc71996c5fbbb5298360e0>`

- typedef struct :ref:`tagx509certclose_struct <structtagx509certclose__struct>` :ref:`x509certclose_struct <group___cmp_x509_cert_itf_1gaa5e901025f321eb85340d7c06421e06b>`

- typedef struct :ref:`tagx509certcmsdecrypt_struct <structtagx509certcmsdecrypt__struct>` :ref:`x509certcmsdecrypt_struct <group___cmp_x509_cert_itf_1gadf1937df8773a0a0b094b224df0fd26e>`

- typedef struct :ref:`tagx509certcmsverify_struct <structtagx509certcmsverify__struct>` :ref:`x509certcmsverify_struct <group___cmp_x509_cert_itf_1gafac39e3b759169fad4221cb3df68d6be>`

- typedef struct :ref:`tagx509certcreatecsr_struct <structtagx509certcreatecsr__struct>` :ref:`x509certcreatecsr_struct <group___cmp_x509_cert_itf_1ga0dadd6dd0c7edecd136a948232478030>`

- typedef struct :ref:`tagx509certcreateselfsigned_struct <structtagx509certcreateselfsigned__struct>` :ref:`x509certcreateselfsigned_struct <group___cmp_x509_cert_itf_1ga5d036b907174889ef244b73dc016635a>`

- typedef struct :ref:`tagx509certgetbinary_struct <structtagx509certgetbinary__struct>` :ref:`x509certgetbinary_struct <group___cmp_x509_cert_itf_1ga26988016ddca0cf250a81220c830185b>`

- typedef struct :ref:`tagx509certgetcontent_struct <structtagx509certgetcontent__struct>` :ref:`x509certgetcontent_struct <group___cmp_x509_cert_itf_1gab8bd0d4e0f482175e3e4f3a80cc63ea9>`

- typedef struct :ref:`tagx509certgetprivatekey_struct <structtagx509certgetprivatekey__struct>` :ref:`x509certgetprivatekey_struct <group___cmp_x509_cert_itf_1ga780ea0b9092f3bda04043b493c6ea9b9>`

- typedef struct :ref:`tagx509certgetpublickey_struct <structtagx509certgetpublickey__struct>` :ref:`x509certgetpublickey_struct <group___cmp_x509_cert_itf_1ga03bf08e33f8d1b105290a75147149d26>`

- typedef struct :ref:`tagx509certgetthumbprint_struct <structtagx509certgetthumbprint__struct>` :ref:`x509certgetthumbprint_struct <group___cmp_x509_cert_itf_1gafecb082e4ad9bdd8315e058ebd02a951>`

- typedef struct :ref:`tagx509certinfoexit_struct <structtagx509certinfoexit__struct>` :ref:`x509certinfoexit_struct <group___cmp_x509_cert_itf_1gac6c9c52d9283560d3f4b4ab19fd68437>`

- typedef struct :ref:`tagx509certinfoinit_struct <structtagx509certinfoinit__struct>` :ref:`x509certinfoinit_struct <group___cmp_x509_cert_itf_1gadd1275e76287d75d6947ef832e5e1d99>`

- typedef struct :ref:`tagx509certkeyclose_struct <structtagx509certkeyclose__struct>` :ref:`x509certkeyclose_struct <group___cmp_x509_cert_itf_1gafe8fd8964fb2c44d5fc93ee77c2db2be>`

- typedef struct :ref:`tagx509certstoreaddcert_struct <structtagx509certstoreaddcert__struct>` :ref:`x509certstoreaddcert_struct <group___cmp_x509_cert_itf_1ga474903b03da8ccf644e2320cace78536>`

- typedef struct :ref:`tagx509certstoreclose_struct <structtagx509certstoreclose__struct>` :ref:`x509certstoreclose_struct <group___cmp_x509_cert_itf_1gaabfc06dc7257c425651d4ee5b178429a>`

- typedef struct :ref:`tagx509certstoregetfirstcert_struct <structtagx509certstoregetfirstcert__struct>` :ref:`x509certstoregetfirstcert_struct <group___cmp_x509_cert_itf_1ga9178369e5850a911fba9b9c35103acbf>`

- typedef struct :ref:`tagx509certstoregetnextcert_struct <structtagx509certstoregetnextcert__struct>` :ref:`x509certstoregetnextcert_struct <group___cmp_x509_cert_itf_1ga9dc17d300dd4982b26af1640e2230bcf>`

- typedef struct :ref:`tagx509certstoregetregisteredcert_struct <structtagx509certstoregetregisteredcert__struct>` :ref:`x509certstoregetregisteredcert_struct <group___cmp_x509_cert_itf_1ga75ecd0f0652a89353ca5b60ec2a1ba0b>`

- typedef struct :ref:`tagx509certstoreopen_struct <structtagx509certstoreopen__struct>` :ref:`x509certstoreopen_struct <group___cmp_x509_cert_itf_1gaeb1cecb322bff68041a6652448ec19a0>`

- typedef struct :ref:`tagx509certstoreregister_struct <structtagx509certstoreregister__struct>` :ref:`x509certstoreregister_struct <group___cmp_x509_cert_itf_1ga4fb20cd1398f5e3bbc040d1958b18382>`

- typedef struct :ref:`tagx509certstoreremovecert_struct <structtagx509certstoreremovecert__struct>` :ref:`x509certstoreremovecert_struct <group___cmp_x509_cert_itf_1ga4c40cb8e3ac31a33efe665f29375405b>`

- typedef struct :ref:`tagx509certstoresearchgetfirst_struct <structtagx509certstoresearchgetfirst__struct>` :ref:`x509certstoresearchgetfirst_struct <group___cmp_x509_cert_itf_1ga9b4d98119ac59209654624b3e05daf90>`

- typedef struct :ref:`tagx509certstoresearchgetnext_struct <structtagx509certstoresearchgetnext__struct>` :ref:`x509certstoresearchgetnext_struct <group___cmp_x509_cert_itf_1ga3238c30257bccb0f5cfd3f6da142aad8>`

- typedef struct :ref:`tagx509certstoreunregister_struct <structtagx509certstoreunregister__struct>` :ref:`x509certstoreunregister_struct <group___cmp_x509_cert_itf_1ga29b992937349e5b0156eae542b0d02e2>`

- typedef struct :ref:`tagx509certverify_struct <structtagx509certverify__struct>` :ref:`x509certverify_struct <group___cmp_x509_cert_itf_1ga4c76f6182de50365fd1343719db96807>`

- typedef struct :ref:`tagx509parsecertificate_struct <structtagx509parsecertificate__struct>` :ref:`x509parsecertificate_struct <group___cmp_x509_cert_itf_1ga0a52e762be835bab4c3428725a6df8e6>`

- typedef void HUGEPTR(* :ref:`PFX509ASYNCCALLBACK <group___cmp_x509_cert_itf_1ga2ae20ef388388cf7cd68cc7faeab6401>`)(X509AsyncResult *pAsyncStruct)

- typedef :ref:`ICmpX509Cert_C <struct_i_cmp_x509_cert___c>` :ref:`ICmpX509Cert <group___cmp_x509_cert_itf_1gaf47ff42ad940ed3f43064a69215725a3>`

Functions
---------

- void :ref:`rtsoidclear <group___cmp_x509_cert_itf_1gace185c5fcf05bd2c3dbc4c2e67b6dce1>` (:ref:`rtsoidclear_struct <group___cmp_x509_cert_itf_1gafcc94a09699b2c1d2ee6040b978d951d>` * p)

- void :ref:`rtsoidcreate <group___cmp_x509_cert_itf_1ga7374233d9aae434d090a745f626aa958>` (:ref:`rtsoidcreate_struct <group___cmp_x509_cert_itf_1gae8fc99c19e3b1ddcf63bf0947c9be613>` * p)

- void :ref:`rtsoidgetid <group___cmp_x509_cert_itf_1ga51a287f5ae86834e5c6c224c33f65946>` (:ref:`rtsoidgetid_struct <group___cmp_x509_cert_itf_1ga1d173a7d842f7f4e432ff0d7cbb6fcae>` * p)

- void :ref:`rtsoidgetname <group___cmp_x509_cert_itf_1gaf1214a265443a014e1181cf12e089977>` (:ref:`rtsoidgetname_struct <group___cmp_x509_cert_itf_1ga0133de2e20fc71996c5fbbb5298360e0>` * p)

- void :ref:`x509certclose <group___cmp_x509_cert_itf_1ga410be71aa936cd20f75acb73cb9b6955>` (:ref:`x509certclose_struct <group___cmp_x509_cert_itf_1gaa5e901025f321eb85340d7c06421e06b>` * p)

- void :ref:`x509certcmsdecrypt <group___cmp_x509_cert_itf_1gad3f4745b05614813656bc26fbbbbcc34>` (:ref:`x509certcmsdecrypt_struct <group___cmp_x509_cert_itf_1gadf1937df8773a0a0b094b224df0fd26e>` * p)

- void :ref:`x509certcmsverify <group___cmp_x509_cert_itf_1gab760d6c7a1ca538ca7491665686430ae>` (:ref:`x509certcmsverify_struct <group___cmp_x509_cert_itf_1gafac39e3b759169fad4221cb3df68d6be>` * p)

- void :ref:`x509certcreatecsr <group___cmp_x509_cert_itf_1ga4f76ce8b895afe74b664ce931e4a784f>` (:ref:`x509certcreatecsr_struct <group___cmp_x509_cert_itf_1ga0dadd6dd0c7edecd136a948232478030>` * p)

- void :ref:`x509certcreateselfsigned <group___cmp_x509_cert_itf_1ga327eff8530bc545390b3020d02af9c55>` (:ref:`x509certcreateselfsigned_struct <group___cmp_x509_cert_itf_1ga5d036b907174889ef244b73dc016635a>` * p)

- void :ref:`x509certgetbinary <group___cmp_x509_cert_itf_1gad4ab36b7790b1bb19d27587a601004ee>` (:ref:`x509certgetbinary_struct <group___cmp_x509_cert_itf_1ga26988016ddca0cf250a81220c830185b>` * p)

- void :ref:`x509certgetcontent <group___cmp_x509_cert_itf_1ga068c1c4ef60a609e3828cf3737bc6ab5>` (:ref:`x509certgetcontent_struct <group___cmp_x509_cert_itf_1gab8bd0d4e0f482175e3e4f3a80cc63ea9>` * p)

- void :ref:`x509certgetprivatekey <group___cmp_x509_cert_itf_1ga2ff276e1876f4425a67c395f00a22bf9>` (:ref:`x509certgetprivatekey_struct <group___cmp_x509_cert_itf_1ga780ea0b9092f3bda04043b493c6ea9b9>` * p)

- void :ref:`x509certgetpublickey <group___cmp_x509_cert_itf_1ga3b219c410e55b5e0e3a2569c472cfb9b>` (:ref:`x509certgetpublickey_struct <group___cmp_x509_cert_itf_1ga03bf08e33f8d1b105290a75147149d26>` * p)

- void :ref:`x509certgetthumbprint <group___cmp_x509_cert_itf_1ga79bb07781fe8a394e88a56e97594a2c6>` (:ref:`x509certgetthumbprint_struct <group___cmp_x509_cert_itf_1gafecb082e4ad9bdd8315e058ebd02a951>` * p)

- void :ref:`x509certinfoexit <group___cmp_x509_cert_itf_1ga824cc1b0775f768175144a5c106aed4f>` (:ref:`x509certinfoexit_struct <group___cmp_x509_cert_itf_1gac6c9c52d9283560d3f4b4ab19fd68437>` * p)

- void :ref:`x509certinfoinit <group___cmp_x509_cert_itf_1ga657fbf87ec47b5067bb9814dd43efc52>` (:ref:`x509certinfoinit_struct <group___cmp_x509_cert_itf_1gadd1275e76287d75d6947ef832e5e1d99>` * p)

- void :ref:`x509certkeyclose <group___cmp_x509_cert_itf_1ga49a5d1b4d4125d96e13bfd26f7927363>` (:ref:`x509certkeyclose_struct <group___cmp_x509_cert_itf_1gafe8fd8964fb2c44d5fc93ee77c2db2be>` * p)

- void :ref:`x509certstoreaddcert <group___cmp_x509_cert_itf_1ga37a6b9a9f4d6976667c5b9ba36ecdbc4>` (:ref:`x509certstoreaddcert_struct <group___cmp_x509_cert_itf_1ga474903b03da8ccf644e2320cace78536>` * p)

- void :ref:`x509certstoreclose <group___cmp_x509_cert_itf_1gabcecbdf91f57fd80d36a0ebcb06d747b>` (:ref:`x509certstoreclose_struct <group___cmp_x509_cert_itf_1gaabfc06dc7257c425651d4ee5b178429a>` * p)

- void :ref:`x509certstoregetfirstcert <group___cmp_x509_cert_itf_1gac14fc5af262d185948ace8263b10733b>` (:ref:`x509certstoregetfirstcert_struct <group___cmp_x509_cert_itf_1ga9178369e5850a911fba9b9c35103acbf>` * p)

- void :ref:`x509certstoregetnextcert <group___cmp_x509_cert_itf_1ga32f7fe3f9239d0d4d4ee63aea7800f26>` (:ref:`x509certstoregetnextcert_struct <group___cmp_x509_cert_itf_1ga9dc17d300dd4982b26af1640e2230bcf>` * p)

- void :ref:`x509certstoregetregisteredcert <group___cmp_x509_cert_itf_1gac2d54f292ae981f158a7604b65eceeba>` (:ref:`x509certstoregetregisteredcert_struct <group___cmp_x509_cert_itf_1ga75ecd0f0652a89353ca5b60ec2a1ba0b>` * p)

- void :ref:`x509certstoreopen <group___cmp_x509_cert_itf_1ga5f443868c7ddcd00562d400ad1933b85>` (:ref:`x509certstoreopen_struct <group___cmp_x509_cert_itf_1gaeb1cecb322bff68041a6652448ec19a0>` * p)

- void :ref:`x509certstoreregister <group___cmp_x509_cert_itf_1ga8b9968db05d6ccf6e20d7f59fb26faf2>` (:ref:`x509certstoreregister_struct <group___cmp_x509_cert_itf_1ga4fb20cd1398f5e3bbc040d1958b18382>` * p)

- void :ref:`x509certstoreremovecert <group___cmp_x509_cert_itf_1ga1d41fa3b474c932b9cc583f9c6534c3d>` (:ref:`x509certstoreremovecert_struct <group___cmp_x509_cert_itf_1ga4c40cb8e3ac31a33efe665f29375405b>` * p)

- void :ref:`x509certstoresearchgetfirst <group___cmp_x509_cert_itf_1ga40201f4447607b6b6e58f5f9583998e3>` (:ref:`x509certstoresearchgetfirst_struct <group___cmp_x509_cert_itf_1ga9b4d98119ac59209654624b3e05daf90>` * p)

- void :ref:`x509certstoresearchgetnext <group___cmp_x509_cert_itf_1ga0af1987f2c15a7f333f8c03edbf55523>` (:ref:`x509certstoresearchgetnext_struct <group___cmp_x509_cert_itf_1ga3238c30257bccb0f5cfd3f6da142aad8>` * p)

- void :ref:`x509certstoreunregister <group___cmp_x509_cert_itf_1gaf562eaba2aa4ae1e41b94b5ea23da577>` (:ref:`x509certstoreunregister_struct <group___cmp_x509_cert_itf_1ga29b992937349e5b0156eae542b0d02e2>` * p)

- void :ref:`x509certverify <group___cmp_x509_cert_itf_1ga3fa95e90733a1e6576a3cacb8cdb0ab8>` (:ref:`x509certverify_struct <group___cmp_x509_cert_itf_1ga4c76f6182de50365fd1343719db96807>` * p)

- void :ref:`x509parsecertificate <group___cmp_x509_cert_itf_1ga3eb1ea6e82283c8d75569bf7e1ef84fb>` (:ref:`x509parsecertificate_struct <group___cmp_x509_cert_itf_1ga0a52e762be835bab4c3428725a6df8e6>` * p)

- RTS_HANDLE :ref:`X509CertStoreOpen <group___cmp_x509_cert_itf_1ga75d8838de2919b5b7db4c88141ace8c0>` (CMPID componentID, RTS_RESULT * pResult)

- RTS_RESULT :ref:`X509CertStoreClose <group___cmp_x509_cert_itf_1ga670dba71e49a37089b53439b45a23064>` (RTS_HANDLE hCertStore)

- RTS_RESULT :ref:`X509CertVerify <group___cmp_x509_cert_itf_1gad3e090ee6285c58ce8ea984b25dd333c>` (RTS_HANDLE hCertStore, RTS_HANDLE hCert)

- RTS_HANDLE :ref:`X509CertStoreSearchGetFirst <group___cmp_x509_cert_itf_1ga14cf964ec8c011bca148bf6a399a5f26>` (RTS_HANDLE hCertStore, :ref:`RtsX509CertFilter <group___cmp_x509_cert_itf_1ga72a12c7d19ffabbf04660a3566a8bda2>` * pFilters, RTS_UI32 ui32NumOfFilters, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`X509CertStoreSearchGetNext <group___cmp_x509_cert_itf_1ga66abcdf7c88f2139ce6388e8572230e4>` (RTS_HANDLE hCertStore, RTS_HANDLE hCert, :ref:`RtsX509CertFilter <group___cmp_x509_cert_itf_1ga72a12c7d19ffabbf04660a3566a8bda2>` * pFilters, RTS_UI32 ui32NumOfFilters, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`X509ParseCertificate <group___cmp_x509_cert_itf_1gadeafc6baa4fecf1fb07343263e76b28d>` (:ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pCert, RTS_IEC_INT encoding, RTS_RESULT * pResult)

- RTS_RESULT :ref:`X509CertGetContent <group___cmp_x509_cert_itf_1ga172a5866f360d2e20a34e96f7983528a>` (RTS_HANDLE hCert, :ref:`RtsX509CertInfo <group___cmp_x509_cert_itf_1ga96114d4c034d1905d83ce6d9a53c9a16>` * pCertContent)

- RTS_RESULT :ref:`X509CertGetBinary <group___cmp_x509_cert_itf_1gaf053757a0a41a49ece6bd519057e2aaa>` (RTS_HANDLE hCert, RTS_IEC_INT encoding, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pCert)

- RTS_RESULT :ref:`X509CertGetPublicKey <group___cmp_x509_cert_itf_1ga5452515ba0aea6615442a218ea5ecd4a>` (RTS_HANDLE hCert, :ref:`RtsCryptoKey <group___cmp_crypto_itf_1ga9eda126f6497b16d886d8c2fae345687>` * pPublicKey)

- RTS_RESULT :ref:`X509CertGetPrivateKey <group___cmp_x509_cert_itf_1gabe3af57c59a534fb6da79f9c82c107c9>` (RTS_HANDLE hCertStore, RTS_HANDLE hCert, :ref:`RtsCryptoKey <group___cmp_crypto_itf_1ga9eda126f6497b16d886d8c2fae345687>` * pPrivateKey)

- RTS_RESULT :ref:`X509CertGetThumbprint <group___cmp_x509_cert_itf_1ga25a47310606b897e9b3e0ddae44711aa>` (RTS_HANDLE hCert, RTS_IEC_UDINT * hashAlgorithm, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pThumbprint)

- RTS_BOOL :ref:`X509CertIsDateValid <group___cmp_x509_cert_itf_1ga57995c547a18717e3961ddd81ed68fb0>` (RTS_HANDLE hCert, RTS_RESULT * pResult)

- RTS_BOOL :ref:`X509CertIsSelfSigned <group___cmp_x509_cert_itf_1gafa046a2b2f200b74e5d7a663e8708b94>` (RTS_HANDLE hCert, RTS_RESULT * pResult)

- RTS_BOOL :ref:`X509CertHasExtendedKeyUsage <group___cmp_x509_cert_itf_1ga1487ed9be97f1b084fc827c0ff465da5>` (RTS_HANDLE hCert, RTS_UI32 numOfExKeyUsages, :ref:`RtsOID <group___cmp_x509_cert_itf_1gafb230e6dc978609d7aed4d3f75777dd4>` * pExKeyUsages, RTS_RESULT * pResult)

- RTS_BOOL :ref:`X509CertCompare <group___cmp_x509_cert_itf_1gab62fd9ded8c386c918f4ae84c1d0bf07>` (RTS_HANDLE hCert1, RTS_HANDLE hCert2)

- RTS_RESULT :ref:`X509CertKeyClose <group___cmp_x509_cert_itf_1ga9c29c73230e4f790ea6563c6df6b925a>` (:ref:`RtsCryptoKey <group___cmp_crypto_itf_1ga9eda126f6497b16d886d8c2fae345687>` * pKey)

- RTS_RESULT :ref:`X509CertClose <group___cmp_x509_cert_itf_1ga073da3edef2ddc44f45739da81f78394>` (RTS_HANDLE hCert)

- RTS_RESULT :ref:`X509CertCmsVerify <group___cmp_x509_cert_itf_1ga6b51c3dc63aea1ca5cb8c2d203cbb396>` (RTS_HANDLE hCertStore, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pCms, RTS_IEC_INT encoding, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pInData, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pOutData)

- RTS_RESULT :ref:`X509CertCmsVerify2 <group___cmp_x509_cert_itf_1gab509b5e8a4e99afa871f6ff22d29b342>` (RTS_HANDLE hCertStore, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pCms, RTS_IEC_INT encoding, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pInData, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pOutData, RTS_HANDLE * phSignerCert)

- RTS_RESULT :ref:`X509CertCmsDecrypt <group___cmp_x509_cert_itf_1gaebc8225f7eb1f386c6e24732d53494ec>` (RTS_HANDLE hCertStore, RTS_HANDLE hRecipientCert, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pCms, RTS_IEC_INT encoding, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pOutData)

- RTS_RESULT :ref:`RtsOIDCreate <group___cmp_x509_cert_itf_1gac62d802c208e5937b00033c2288b0c63>` (char * id, :ref:`RtsOID <group___cmp_x509_cert_itf_1gafb230e6dc978609d7aed4d3f75777dd4>` * oid)

- RTS_RESULT :ref:`RtsOIDGetID <group___cmp_x509_cert_itf_1gaff3a425033e2d1a475c6623f99829d1b>` (:ref:`RtsOID <group___cmp_x509_cert_itf_1gafb230e6dc978609d7aed4d3f75777dd4>` * oid, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pBuffer)

- RTS_RESULT :ref:`RtsOIDGetName <group___cmp_x509_cert_itf_1ga9ba84f61b9c3fe5b6ae35f1c11b1e74a>` (:ref:`RtsOID <group___cmp_x509_cert_itf_1gafb230e6dc978609d7aed4d3f75777dd4>` * oid, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pBuffer)

- RTS_RESULT :ref:`RtsOIDClear <group___cmp_x509_cert_itf_1ga370f2a84924e0202d6f3024d054569f0>` (:ref:`RtsOID <group___cmp_x509_cert_itf_1gafb230e6dc978609d7aed4d3f75777dd4>` * oid)

- RTS_RESULT :ref:`X509CertInfoInit <group___cmp_x509_cert_itf_1gaf9347f6b295ddc43ae39c26b15c0299a>` (:ref:`RtsX509CertInfo <group___cmp_x509_cert_itf_1ga96114d4c034d1905d83ce6d9a53c9a16>` * pCertInfo, RTS_UI32 structSize)

- RTS_RESULT :ref:`X509CertInfoExit <group___cmp_x509_cert_itf_1gaa11dd819381e15b7a5e0b414c728b32f>` (:ref:`RtsX509CertInfo <group___cmp_x509_cert_itf_1ga96114d4c034d1905d83ce6d9a53c9a16>` * pCertInfo)

- RTS_HANDLE :ref:`X509CertStoreGetFirstBackend <group___cmp_x509_cert_itf_1gad0be785fbf9846773eabd0db2b8bc493>` (RTS_HANDLE hCertStore, :ref:`RtsCertBackendInfo <group___cmp_x509_cert_itf___object_identifiers_1ga11dd55c6d85ce9e9bcbf5c54f7eae7be>` * pInfo, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`X509CertStoreGetNextBackend <group___cmp_x509_cert_itf_1gacb16b89ed74609c7fe1afe511e0ea733>` (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, :ref:`RtsCertBackendInfo <group___cmp_x509_cert_itf___object_identifiers_1ga11dd55c6d85ce9e9bcbf5c54f7eae7be>` * pInfo, RTS_RESULT * pResult)

- RTS_RESULT :ref:`X509CertStorGetBackendInfo <group___cmp_x509_cert_itf_1ga8360bf264ada12702cb58854953733c0>` (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, :ref:`RtsCertBackendInfo <group___cmp_x509_cert_itf___object_identifiers_1ga11dd55c6d85ce9e9bcbf5c54f7eae7be>` * pInfo)

- RTS_HANDLE :ref:`X509CertCreateSelfSigned <group___cmp_x509_cert_itf_1gaf0d551e9529268467ac55cd5f244166e>` (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, :ref:`RtsX509CertInfo <group___cmp_x509_cert_itf_1ga96114d4c034d1905d83ce6d9a53c9a16>` * pCertInfo, RTS_UI32 ui32KeySize, RTS_RESULT * pResult)

- RTS_RESULT :ref:`X509CertCreateSelfSignedAsync <group___cmp_x509_cert_itf_1gafa3352932820f31bffb651567d200f5c>` (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, :ref:`RtsX509CertInfo <group___cmp_x509_cert_itf_1ga96114d4c034d1905d83ce6d9a53c9a16>` * pCertInfo, RTS_UI32 ui32KeySize, void * pCallbackParam, :ref:`PFX509ASYNCCALLBACK <group___cmp_x509_cert_itf_1ga2ae20ef388388cf7cd68cc7faeab6401>`  pfCallback)

- RTS_RESULT :ref:`X509CertCreateCSR <group___cmp_x509_cert_itf_1gae352d99fc4f1b840c570aab5d2991caf>` (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, :ref:`RtsX509CertInfo <group___cmp_x509_cert_itf_1ga96114d4c034d1905d83ce6d9a53c9a16>` * pCertInfo, RTS_UI32 ui32KeySize, RTS_IEC_INT encoding, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pCSR)

- RTS_RESULT :ref:`X509CertCreateCSRAsync <group___cmp_x509_cert_itf_1ga11c9602a184532a470c199fe50be7c13>` (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, :ref:`RtsX509CertInfo <group___cmp_x509_cert_itf_1ga96114d4c034d1905d83ce6d9a53c9a16>` * pCertInfo, CMPID cmpID, RTS_UI32 ui32KeySize, RTS_IEC_INT encoding, :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * pCSR, void * pCallbackParam, :ref:`PFX509ASYNCCALLBACK <group___cmp_x509_cert_itf_1ga2ae20ef388388cf7cd68cc7faeab6401>`  pfCallback)

- RTS_RESULT :ref:`X509CertStoreAddCert <group___cmp_x509_cert_itf_1ga01ee2bd1985de5a20ab80cc616d9b6a6>` (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RTS_HANDLE hCert, RTS_IEC_INT trustLevel)

- RTS_RESULT :ref:`X509CertStoreRemoveCert <group___cmp_x509_cert_itf_1ga410f59ca7b7871c9723cc5a82f495382>` (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RTS_HANDLE hCert, RTS_BOOL bRemovePrivateKey)

- RTS_HANDLE :ref:`X509CertStoreGetFirstCert <group___cmp_x509_cert_itf_1gab3f65d84a84e8839f61eefa0763785de>` (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RTS_IEC_INT trustLevel, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`X509CertStoreGetNextCert <group___cmp_x509_cert_itf_1gaa3f612bd6436163892df6ccbf4c3eaf1>` (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RTS_HANDLE hCert, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`X509CertStoreRegister <group___cmp_x509_cert_itf_1ga10a10dfcd08794eb0825b6812eb2bfda>` (RTS_HANDLE hCertStore, CMPID cmpID, :ref:`RtsX509CertInfo <group___cmp_x509_cert_itf_1ga96114d4c034d1905d83ce6d9a53c9a16>` * pCertInfo, RTS_RESULT * pResult)

- RTS_RESULT :ref:`X509CertStoreUnregister <group___cmp_x509_cert_itf_1ga8545f584011c653ac8baa957d1020bc0>` (RTS_HANDLE hCertStore, RTS_HANDLE hRegisteredComponent)

- RTS_HANDLE :ref:`X509CertStoreGetRegisteredCert <group___cmp_x509_cert_itf_1ga1d36aa91065172a577af54736687fb4e>` (RTS_HANDLE hCertStore, RTS_HANDLE hUseCase, RTS_RESULT * pResult)

.. _group___cmp_x509_cert_itf-details:

Detailed Description
--------------------

Interface of CmpX509Cert.

This interface provides functionality to handle and verify X.509 Certificates

**Copyright:**

Copyright (c) 2017-2018 CODESYS GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved.

Macro Definition Documentation
------------------------------
.. _group___cmp_x509_cert_itf_1ga991b92ffd3bcb0a4b72b2ceece3002cb:

#define RTSCERTENCODING_ASN1 RTS_IEC_INT_C(0x0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EXTERN LIB SECTION BEGIN

Enum: RtsCertEncoding

.. _group___cmp_x509_cert_itf_1ga553dcf0bf1d0879d38eb9bb3de39dec2:

#define RTSCERTENCODING_BASE64 RTS_IEC_INT_C(0x1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga2b92ffb2a28f5b1fd9fe9d73bdc1197a:

#define RTSCERTENCODING RTS_IEC_INT
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga89f6364a9b9db3f25ab394c220442c8c:

#define RTSCERTTRUSTLEVEL_UNTRUSTED RTS_IEC_INT_C(0x1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The truste level has two main meanings: 1. In opend certificates it indicates if the certificate is trusted or not 2. If adding or searching certificates in the store it indicates where to add / search the certificate.

.. _group___cmp_x509_cert_itf_1ga49ca7ac8bd6ad56c971887af60dadacb:

#define RTSCERTTRUSTLEVEL_TRUSTED RTS_IEC_INT_C(0x2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga589f1a935b7f6a1050cbc02059580684:

#define RTSCERTTRUSTLEVEL_OWN RTS_IEC_INT_C(0x3)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga5a83ed93c6295deb2b74d3a953277ae3:

#define RTSCERTTRUSTLEVEL_QUARANTINE RTS_IEC_INT_C(0x4)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaaef007b2a5f75365176886ffe671e40d:

#define RTSCERTTRUSTLEVEL_UNKNOWN RTS_IEC_INT_C(0x5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga86a9f95f0345dc8f100a23d51069e796:

#define RTSCERTTRUSTLEVEL RTS_IEC_INT
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga6710183e103419296c76821bdba6e057:

#define RTSX509ALTNAMETYPE_OTHERNAME RTS_IEC_INT_C(0x0)	/* Not supported */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Enum: RtsX509AltNameType

.. _group___cmp_x509_cert_itf_1ga8d82b6e2e1d9ff35eeca6f2bbe32eff2:

#define RTSX509ALTNAMETYPE_EMAIL RTS_IEC_INT_C(0x1)	/* Supported */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gad2a7d7867735308420266add0adc330d:

#define RTSX509ALTNAMETYPE_DNSNAME RTS_IEC_INT_C(0x2)	/* Supported */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga0d19b0b3f51f5d3406ee862a78e6d7a6:

#define RTSX509ALTNAMETYPE_X400ADDRESS RTS_IEC_INT_C(0x3)	/* Not supported */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaf0c10f43ec7b43c8d77c4af6cea0bf71:

#define RTSX509ALTNAMETYPE_DIRECTORYNAME RTS_IEC_INT_C(0x4)	/* Not supported */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga9f1ece282dfa84aba881472a05374fe8:

#define RTSX509ALTNAMETYPE_EDIPARTYNAME RTS_IEC_INT_C(0x5)	/* Not supported */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga27786f665fb8286bd1716a5853d876c1:

#define RTSX509ALTNAMETYPE_URI RTS_IEC_INT_C(0x6)	/* Supported */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gac4e6423a321b539e67c538edd20acaca:

#define RTSX509ALTNAMETYPE_IPADDRESS RTS_IEC_INT_C(0x7)	/* Supported */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaa47105523bad40018be74493c62d9bae:

#define RTSX509ALTNAMETYPE_REGISTERDID RTS_IEC_INT_C(0x8)	/* Supported */
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga34dedaed91e5459fe8b88ae07e5665f0:

#define RTSX509ALTNAMETYPE RTS_IEC_INT
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga97ace9c8212fa405162abd5015b2edd1:

#define RTSX509CERTFILTERTYPE_TRUST_LEVEL RTS_IEC_INT_C(0x0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Enum: RtsX509CertFilterType

.. _group___cmp_x509_cert_itf_1ga9a675b3166bd6166596202361bf86649:

#define RTSX509CERTFILTERTYPE_SUBJECT RTS_IEC_INT_C(0x1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaa3ff13c9a299e6ccd9f7cbe1afb3e188:

#define RTSX509CERTFILTERTYPE_SUBJECT_MATCHALL RTS_IEC_INT_C(0x2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gac7b31ce4ddfac3ac0e6cc7f5a65666fd:

#define RTSX509CERTFILTERTYPE_CERT_DATEVALID RTS_IEC_INT_C(0x3)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga2ea9b2e7c3ad29968a8d0d0a9615d7ee:

#define RTSX509CERTFILTERTYPE_CERT_KEYUSAGE RTS_IEC_INT_C(0x4)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaab202d9e5acaac9ef6f1afe50e6cfa3f:

#define RTSX509CERTFILTERTYPE_CERT_EXKEYUSAGE RTS_IEC_INT_C(0x5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga397b6bf8f86f99d29b1a3e94b92e66f2:

#define RTSX509CERTFILTERTYPE_CERT_THUMBPRINT RTS_IEC_INT_C(0x6)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gac0a940a207e99d841b157b5abdacd067:

#define RTSX509CERTFILTERTYPE RTS_IEC_INT
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gab0c3674136331ef3d08683692ebdf477:

#define CMPX509CERT_ASYNC_FUNCTION_CREATESELFSIGNED 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gae389919c688154c0cbb5452d1507550c:

#define CMPX509CERT_ASYNC_FUNCTION_CREATECSR 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gad93ddb1893238f0723892dc36b8f625b:

#define ITF_CmpX509Cert
^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga5269f11379ab294fbbeb0f02c35726cd:

#define EXTITF_CmpX509Cert
^^^^^^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___cmp_x509_cert_itf_1gafb230e6dc978609d7aed4d3f75777dd4:

typedef struct tagRtsOID  RtsOID
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

RtsOID

.. _group___cmp_x509_cert_itf_1ga6757110f5ba82365ade354bef57d2f0e:

typedef struct tagRtsX509AltName  RtsX509AltName
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Represents an alternative name of a certificate. The alternative name can be selected out of different meanings. E.g. E-Mail address, IP-Address, URI or a DNS name. Use the corresponding fiels of the union to geht the values. The meaning is declared in the valueType field.

.. _group___cmp_x509_cert_itf_1ga949c43a2f0a07ec7103b293f375cfed3:

typedef struct tagRtsX509NameEntry  RtsX509NameEntry
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Represents an entry of the X509 Names used in the subject or issuer fields in the certificate. This sturucter contains the OID to identify the field and the corresponding string as value. Use the RtsOIDGetName function to get the string representations of the field.

.. _group___cmp_x509_cert_itf_1ga7471487b9fc63f37d2049e302cefeb2e:

typedef struct tagRtsX509CertName  RtsX509CertName
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

RtsX509CertName

.. _group___cmp_x509_cert_itf_1ga31519dff2498615bbe9dc17755351f33:

typedef struct tagRtsX509ExKeyUsage  RtsX509ExKeyUsage
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

RtsX509ExKeyUsage

.. _group___cmp_x509_cert_itf_1ga72a12c7d19ffabbf04660a3566a8bda2:

typedef struct tagRtsX509CertFilter  RtsX509CertFilter
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

RtsX509CertFilter

.. _group___cmp_x509_cert_itf_1ga96114d4c034d1905d83ce6d9a53c9a16:

typedef struct tagRtsX509CertInfo  RtsX509CertInfo
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This structuer contains common fiels of an certificate. Most values are stored in textual form if available. The alternative key usages and the signature algorithm are stored as RtsOID. Use the RtsOIDGetName function to get human readable names of this fields. The notBefor and notAfter fiels are in UTC format and high resolution timestam

.. _group___cmp_x509_cert_itf_1gafcc94a09699b2c1d2ee6040b978d951d:

typedef struct tagrtsoidclear_struct  rtsoidclear_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Clear an OID :return: Result of the operation

.. _group___cmp_x509_cert_itf_1gae8fc99c19e3b1ddcf63bf0947c9be613:

typedef struct tagrtsoidcreate_struct  rtsoidcreate_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create an RtsOID based on a given ID. :return: Result of the operation.

.. _group___cmp_x509_cert_itf_1ga1d173a7d842f7f4e432ff0d7cbb6fcae:

typedef struct tagrtsoidgetid_struct  rtsoidgetid_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the ID of an OID in dottet notation. :return: Result of the operation

.. _group___cmp_x509_cert_itf_1ga0133de2e20fc71996c5fbbb5298360e0:

typedef struct tagrtsoidgetname_struct  rtsoidgetname_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the given name of an OID. If the OID is unknown to the system the dottet notation will be returned. :return: Result of the operation.

.. _group___cmp_x509_cert_itf_1gaa5e901025f321eb85340d7c06421e06b:

typedef struct tagx509certclose_struct  x509certclose_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Close the certificate. :return: Result of the operation.

.. _group___cmp_x509_cert_itf_1gadf1937df8773a0a0b094b224df0fd26e:

typedef struct tagx509certcmsdecrypt_struct  x509certcmsdecrypt_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

x509certcmsdecrypt

.. _group___cmp_x509_cert_itf_1gafac39e3b759169fad4221cb3df68d6be:

typedef struct tagx509certcmsverify_struct  x509certcmsverify_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

x509certcmsverify

.. _group___cmp_x509_cert_itf_1ga0dadd6dd0c7edecd136a948232478030:

typedef struct tagx509certcreatecsr_struct  x509certcreatecsr_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

x509certcreatecsr

.. _group___cmp_x509_cert_itf_1ga5d036b907174889ef244b73dc016635a:

typedef struct tagx509certcreateselfsigned_struct  x509certcreateselfsigned_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

x509certcreateselfsigned

.. _group___cmp_x509_cert_itf_1ga26988016ddca0cf250a81220c830185b:

typedef struct tagx509certgetbinary_struct  x509certgetbinary_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the certificate in a binary encoded format. Use the encoding parameter to set the needed format. :return: Result of the operation.

.. _group___cmp_x509_cert_itf_1gab8bd0d4e0f482175e3e4f3a80cc63ea9:

typedef struct tagx509certgetcontent_struct  x509certgetcontent_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get some common content from the certificate. :return: Result of the operation.

.. _group___cmp_x509_cert_itf_1ga780ea0b9092f3bda04043b493c6ea9b9:

typedef struct tagx509certgetprivatekey_struct  x509certgetprivatekey_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

x509certgetprivatekey

.. _group___cmp_x509_cert_itf_1ga03bf08e33f8d1b105290a75147149d26:

typedef struct tagx509certgetpublickey_struct  x509certgetpublickey_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the PUBLIC key FROM the certificate.

The format of this key is an implementation detail and has to match the expected format of the asymmetric functions of the CmpCrpyotItf. The key data is opaque for the user of the keys. If the keys are needed in a defined exchange format use the CryptoKeyExport function of the CmpCryptoItf. :return: Result of the operation.

.. _group___cmp_x509_cert_itf_1gafecb082e4ad9bdd8315e058ebd02a951:

typedef struct tagx509certgetthumbprint_struct  x509certgetthumbprint_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Generate the certificate thumbprint. The thumbprint will be just the plain bytes of the hash. The thumprint can be used to identify certificates of the local store. The thumprint may not be globally unique. :return: Result of the operation.

.. _group___cmp_x509_cert_itf_1gac6c9c52d9283560d3f4b4ab19fd68437:

typedef struct tagx509certinfoexit_struct  x509certinfoexit_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Cleanup an RtsX509CertInfo structure. All allocated memory used by this strucutre will be release. :return: Result of the operation

.. _group___cmp_x509_cert_itf_1gadd1275e76287d75d6947ef832e5e1d99:

typedef struct tagx509certinfoinit_struct  x509certinfoinit_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Initialize the RtsX509CertInfo structure. :return: Result of the operation

.. _group___cmp_x509_cert_itf_1gafe8fd8964fb2c44d5fc93ee77c2db2be:

typedef struct tagx509certkeyclose_struct  x509certkeyclose_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Release a PRIVATE OR PUBLIC key with THIS FUNCTION. THIS FUNCTION indicates that this key is not needed anymore and allows to clean up ressources used by this key :return: Result of the operation

.. _group___cmp_x509_cert_itf_1ga474903b03da8ccf644e2320cace78536:

typedef struct tagx509certstoreaddcert_struct  x509certstoreaddcert_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

x509certstoreaddcert

.. _group___cmp_x509_cert_itf_1gaabfc06dc7257c425651d4ee5b178429a:

typedef struct tagx509certstoreclose_struct  x509certstoreclose_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

x509certstoreclose

.. _group___cmp_x509_cert_itf_1ga9178369e5850a911fba9b9c35103acbf:

typedef struct tagx509certstoregetfirstcert_struct  x509certstoregetfirstcert_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

x509certstoregetfirstcert

.. _group___cmp_x509_cert_itf_1ga9dc17d300dd4982b26af1640e2230bcf:

typedef struct tagx509certstoregetnextcert_struct  x509certstoregetnextcert_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

x509certstoregetnextcert

.. _group___cmp_x509_cert_itf_1ga75ecd0f0652a89353ca5b60ec2a1ba0b:

typedef struct tagx509certstoregetregisteredcert_struct  x509certstoregetregisteredcert_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

x509certstoregetregisteredcert

.. _group___cmp_x509_cert_itf_1gaeb1cecb322bff68041a6652448ec19a0:

typedef struct tagx509certstoreopen_struct  x509certstoreopen_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

x509certstoreopen

.. _group___cmp_x509_cert_itf_1ga4fb20cd1398f5e3bbc040d1958b18382:

typedef struct tagx509certstoreregister_struct  x509certstoreregister_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

x509certstoreregister

.. _group___cmp_x509_cert_itf_1ga4c40cb8e3ac31a33efe665f29375405b:

typedef struct tagx509certstoreremovecert_struct  x509certstoreremovecert_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

x509certstoreremovecert

.. _group___cmp_x509_cert_itf_1ga9b4d98119ac59209654624b3e05daf90:

typedef struct tagx509certstoresearchgetfirst_struct  x509certstoresearchgetfirst_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

x509certstoresearchgetfirst

.. _group___cmp_x509_cert_itf_1ga3238c30257bccb0f5cfd3f6da142aad8:

typedef struct tagx509certstoresearchgetnext_struct  x509certstoresearchgetnext_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

x509certstoresearchgetnext

.. _group___cmp_x509_cert_itf_1ga29b992937349e5b0156eae542b0d02e2:

typedef struct tagx509certstoreunregister_struct  x509certstoreunregister_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

x509certstoreunregister

.. _group___cmp_x509_cert_itf_1ga4c76f6182de50365fd1343719db96807:

typedef struct tagx509certverify_struct  x509certverify_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

x509certverify

.. _group___cmp_x509_cert_itf_1ga0a52e762be835bab4c3428725a6df8e6:

typedef struct tagx509parsecertificate_struct  x509parsecertificate_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Parse a certificate which is located in the memory (e.g received FROM a communication partner). Once parsed the certificate is stored in a temporary store. Use the function X509CertClose to close the certificate. :return: Handle to the parsed certificate.

.. _group___cmp_x509_cert_itf_1ga2ae20ef388388cf7cd68cc7faeab6401:

typedef void HUGEPTR( * PFX509ASYNCCALLBACK)(X509AsyncResult *pAsyncStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaf47ff42ad940ed3f43064a69215725a3:

typedef ICmpX509Cert_C ICmpX509Cert
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function Documentation
----------------------

.. _group___cmp_x509_cert_itf_1gace185c5fcf05bd2c3dbc4c2e67b6dce1:

void rtsoidclear (rtsoidclear_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga7374233d9aae434d090a745f626aa958:

void rtsoidcreate (rtsoidcreate_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga51a287f5ae86834e5c6c224c33f65946:

void rtsoidgetid (rtsoidgetid_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaf1214a265443a014e1181cf12e089977:

void rtsoidgetname (rtsoidgetname_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga410be71aa936cd20f75acb73cb9b6955:

void x509certclose (x509certclose_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gad3f4745b05614813656bc26fbbbbcc34:

void x509certcmsdecrypt (x509certcmsdecrypt_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gab760d6c7a1ca538ca7491665686430ae:

void x509certcmsverify (x509certcmsverify_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga4f76ce8b895afe74b664ce931e4a784f:

void x509certcreatecsr (x509certcreatecsr_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga327eff8530bc545390b3020d02af9c55:

void x509certcreateselfsigned (x509certcreateselfsigned_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gad4ab36b7790b1bb19d27587a601004ee:

void x509certgetbinary (x509certgetbinary_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga068c1c4ef60a609e3828cf3737bc6ab5:

void x509certgetcontent (x509certgetcontent_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga2ff276e1876f4425a67c395f00a22bf9:

void x509certgetprivatekey (x509certgetprivatekey_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga3b219c410e55b5e0e3a2569c472cfb9b:

void x509certgetpublickey (x509certgetpublickey_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga79bb07781fe8a394e88a56e97594a2c6:

void x509certgetthumbprint (x509certgetthumbprint_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga824cc1b0775f768175144a5c106aed4f:

void x509certinfoexit (x509certinfoexit_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga657fbf87ec47b5067bb9814dd43efc52:

void x509certinfoinit (x509certinfoinit_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga49a5d1b4d4125d96e13bfd26f7927363:

void x509certkeyclose (x509certkeyclose_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga37a6b9a9f4d6976667c5b9ba36ecdbc4:

void x509certstoreaddcert (x509certstoreaddcert_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gabcecbdf91f57fd80d36a0ebcb06d747b:

void x509certstoreclose (x509certstoreclose_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gac14fc5af262d185948ace8263b10733b:

void x509certstoregetfirstcert (x509certstoregetfirstcert_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga32f7fe3f9239d0d4d4ee63aea7800f26:

void x509certstoregetnextcert (x509certstoregetnextcert_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gac2d54f292ae981f158a7604b65eceeba:

void x509certstoregetregisteredcert (x509certstoregetregisteredcert_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga5f443868c7ddcd00562d400ad1933b85:

void x509certstoreopen (x509certstoreopen_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga8b9968db05d6ccf6e20d7f59fb26faf2:

void x509certstoreregister (x509certstoreregister_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga1d41fa3b474c932b9cc583f9c6534c3d:

void x509certstoreremovecert (x509certstoreremovecert_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga40201f4447607b6b6e58f5f9583998e3:

void x509certstoresearchgetfirst (x509certstoresearchgetfirst_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga0af1987f2c15a7f333f8c03edbf55523:

void x509certstoresearchgetnext (x509certstoresearchgetnext_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaf562eaba2aa4ae1e41b94b5ea23da577:

void x509certstoreunregister (x509certstoreunregister_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga3fa95e90733a1e6576a3cacb8cdb0ab8:

void x509certverify (x509certverify_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga3eb1ea6e82283c8d75569bf7e1ef84fb:

void x509parsecertificate (x509parsecertificate_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga75d8838de2919b5b7db4c88141ace8c0:

RTS_HANDLE X509CertStoreOpen (CMPID componentID, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Open the certificate store.

**Parameters**

+---------+-------------+----------------------------------------------------+
| [in]    | componentID | ID of the component opening the certificate store. |
+---------+-------------+----------------------------------------------------+
| [out]   | pResult     | Result of the operation.                           |
+---------+-------------+----------------------------------------------------+

**Returns:**

Handle to the certificate store

.. _group___cmp_x509_cert_itf_1ga670dba71e49a37089b53439b45a23064:

RTS_RESULT X509CertStoreClose (RTS_HANDLE hCertStore)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Close the certificate store.

**Parameters**

+---------+------------+---------------------------------+
| [in]    | hCertStore | Handle of to certificate store. |
+---------+------------+---------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1gad3e090ee6285c58ce8ea984b25dd333c:

RTS_RESULT X509CertVerify (RTS_HANDLE hCertStore, RTS_HANDLE hCert)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Verify the given certificate. This verify checks only if the certificate itself is trusted using the certificates in the store. The verify checks if the certificate was added to the untrusted certs list. No subjects, key usages or other fields are verified. This has to be done by the application using this function. If the verify should use CRL to verify the certificates set the setting VerifyUseCRL to 1. This is disabled by default.

**Parameters**

+---------+------------+---------------------------------+
| [in]    | hCertStore | Handle of to certificate store. |
+---------+------------+---------------------------------+
| [in]    | hCert      | Certificate to verify.          |
+---------+------------+---------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1ga14cf964ec8c011bca148bf6a399a5f26:

RTS_HANDLE X509CertStoreSearchGetFirst (RTS_HANDLE hCertStore, RtsX509CertFilter *pFilters, RTS_UI32 ui32NumOfFilters, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Search for the given certificate in the cert store.

**Parameters**

+---------+------------------+--------------------------------------------+
| [in]    | hCertStore       | Handle of to certificate store.            |
+---------+------------------+--------------------------------------------+
| [in]    | pFilters         | Pointer to array of filters to be applied. |
+---------+------------------+--------------------------------------------+
| [in]    | ui32NumOfFilters | Number of applied filters.                 |
+---------+------------------+--------------------------------------------+

**Returns:**

Handle to the first certificate matching the filter criteria.

.. _group___cmp_x509_cert_itf_1ga66abcdf7c88f2139ce6388e8572230e4:

RTS_HANDLE X509CertStoreSearchGetNext (RTS_HANDLE hCertStore, RTS_HANDLE hCert, RtsX509CertFilter *pFilters, RTS_UI32 ui32NumOfFilters, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Search for the given certificate in the cert store.

**Parameters**

+---------+------------------+--------------------------------------------+
| [in]    | hCertStore       | Handle of to certificate store.            |
+---------+------------------+--------------------------------------------+
| [in]    | hCert            | Handle of the last found certificate.      |
+---------+------------------+--------------------------------------------+
| [in]    | pFilters         | Pointer to array of filters to be applied. |
+---------+------------------+--------------------------------------------+
| [in]    | ui32NumOfFilters | Number of applied filters.                 |
+---------+------------------+--------------------------------------------+

**Returns:**

Handle to the first certificate matching the filter criteria.

.. _group___cmp_x509_cert_itf_1gadeafc6baa4fecf1fb07343263e76b28d:

RTS_HANDLE X509ParseCertificate (RtsByteString *pCert, RTS_IEC_INT encoding, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Parse a certificate which is located in the memory (e.g received from a communication partner). Once parsed the certificate is stored in a temporary store. Use the function X509CertClose to close the certificate.

**Parameters**

+---------+----------+------------------------------+
| [in]    | pCert    | Binary encoded certificate.  |
+---------+----------+------------------------------+
| [in]    | encoding | Encoding of the certificate. |
+---------+----------+------------------------------+
| [out]   | pResult  | Result of the operation      |
+---------+----------+------------------------------+

**Returns:**

Handle to the parsed certificate.

.. _group___cmp_x509_cert_itf_1ga172a5866f360d2e20a34e96f7983528a:

RTS_RESULT X509CertGetContent (RTS_HANDLE hCert, RtsX509CertInfo *pCertContent)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get some common content from the certificate.

**Parameters**

+---------+--------------+-----------------------------------------+
| [in]    | hCert        | Handle of the certificate of intrest.   |
+---------+--------------+-----------------------------------------+
| [out]   | pCertContent | Pointer where to store the information. |
+---------+--------------+-----------------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1gaf053757a0a41a49ece6bd519057e2aaa:

RTS_RESULT X509CertGetBinary (RTS_HANDLE hCert, RTS_IEC_INT encoding, RtsByteString *pCert)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the certificate in a binary encoded format. Use the encoding parameter to set the needed format.

**Parameters**

+---------+----------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hCert    | Handle of the certificate of intrest.                                                                                                                                    |
+---------+----------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | encoding | How to encode the certificate.                                                                                                                                           |
+---------+----------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pCert    | Buffer where to store the certificate. If the bytestring contains a NULL memory pointer the function will write the needed bufferlength to the pCert->ui32Length member. |
+---------+----------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1ga5452515ba0aea6615442a218ea5ecd4a:

RTS_RESULT X509CertGetPublicKey (RTS_HANDLE hCert, RtsCryptoKey *pPublicKey)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the public key from the certificate.

The format of this key is an implementation detail and has to match the expected format of the asymmetric functions of the CmpCrpyotItf. The key data is opaque for the user of the keys. If the keys are needed in a defined exchange format use the CryptoKeyExport function of the CmpCryptoItf.

**Parameters**

+---------+------------+---------------------------------------------------+
| [in]    | hCert      | Handle of the certificate of intrest.             |
+---------+------------+---------------------------------------------------+
| [out]   | pPublicKey | Pointer to the crypto key storing the public key. |
+---------+------------+---------------------------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1gabe3af57c59a534fb6da79f9c82c107c9:

RTS_RESULT X509CertGetPrivateKey (RTS_HANDLE hCertStore, RTS_HANDLE hCert, RtsCryptoKey *pPrivateKey)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the private key of the certificate. This is only possible if the private key stored in the certificate store.

The format of this key is an implementation detail and has to match the expected format of the asymmetric functions of the CmpCrpyotItf. The key data is opaque for the user of the keys.

**Parameters**

+---------+------------+---------------------------------------------------+
| [in]    | hCert      | Handle of the certificate of intrest.             |
+---------+------------+---------------------------------------------------+
| [out]   | pPublicKey | Pointer to the crypto key storing the priave key. |
+---------+------------+---------------------------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1ga25a47310606b897e9b3e0ddae44711aa:

RTS_RESULT X509CertGetThumbprint (RTS_HANDLE hCert, RTS_IEC_UDINT *hashAlgorithm, RtsByteString *pThumbprint)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Generate the certificate thumbprint. The thumbprint will be just the plain bytes of the hash. Set the hash algorithm to your needs.

**Parameters**

+---------+---------------+----------------------------------------------------------------------------+
| [in]    | hCert         | Handle of the certificate of intrest.                                      |
+---------+---------------+----------------------------------------------------------------------------+
| [in]    | hashAlgorithm | The hashing algorithmen used to generate the thumbprint.                   |
+---------+---------------+----------------------------------------------------------------------------+
| [out]   | pThumbprint   | Buffer to store the thumbprint. If bytestring is NULL memory ia allocated. |
+---------+---------------+----------------------------------------------------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1ga57995c547a18717e3961ddd81ed68fb0:

RTS_BOOL X509CertIsDateValid (RTS_HANDLE hCert, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Check if a certificate has a valid date (notbefore and notafter is in the current time period)

**Parameters**

+---------+---------+---------------------------+
| [in]    | hCert   | Handle of the certificate |
+---------+---------+---------------------------+
| [out]   | pResult | Pointer to error code     |
+---------+---------+---------------------------+

**Return values**

+---------------+------------------+
| ERR_OK        | hCert is valid   |
+---------------+------------------+
| ERR_PARAMETER | hCert is invalid |
+---------------+------------------+

**Returns:**

Result of the operation

**Return values**

+-------+----------------------------------------------+
| TRUE  | Date of certificate is valid                 |
+-------+----------------------------------------------+
| FALSE | Date of certificate is out of current period |
+-------+----------------------------------------------+

.. _group___cmp_x509_cert_itf_1gafa046a2b2f200b74e5d7a663e8708b94:

RTS_BOOL X509CertIsSelfSigned (RTS_HANDLE hCert, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Check if a certificate is selfsigned of is signed by a CA authority

**Parameters**

+---------+---------+---------------------------+
| [in]    | hCert   | Handle of the certificate |
+---------+---------+---------------------------+
| [out]   | pResult | Pointer to error code     |
+---------+---------+---------------------------+

**Return values**

+---------------+------------------+
| ERR_OK        | hCert is valid   |
+---------------+------------------+
| ERR_PARAMETER | hCert is invalid |
+---------------+------------------+

**Returns:**

Result of the operation

**Return values**

+-------+-----------------------------------------+
| TRUE  | Certificate is selfsigned               |
+-------+-----------------------------------------+
| FALSE | Certificate is signed ba a CA authority |
+-------+-----------------------------------------+

.. _group___cmp_x509_cert_itf_1ga1487ed9be97f1b084fc827c0ff465da5:

RTS_BOOL X509CertHasExtendedKeyUsage (RTS_HANDLE hCert, RTS_UI32 numOfExKeyUsages, RtsOID *pExKeyUsages, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Check if the extended keyusages of the specified certificate has the specified extended keyusages

**Parameters**

+---------+------------------+---------------------------------------+
| [in]    | hCert            | Handle of the certificate             |
+---------+------------------+---------------------------------------+
| [in]    | numOfExKeyUsages | Number of extended keyusages          |
+---------+------------------+---------------------------------------+
| [in]    | pExKeyUsages     | Pointer to list of extended keyusages |
+---------+------------------+---------------------------------------+
| [out]   | pResult          | Pointer to error code                 |
+---------+------------------+---------------------------------------+

**Return values**

+---------------+------------------+
| ERR_OK        | hCert is valid   |
+---------------+------------------+
| ERR_PARAMETER | hCert is invalid |
+---------------+------------------+

**Returns:**

Result of the operation

**Return values**

+-------+--------------------------------------------+
| TRUE  | Extended keyusages identical               |
+-------+--------------------------------------------+
| FALSE | Extended keyusages not identical identical |
+-------+--------------------------------------------+

.. _group___cmp_x509_cert_itf_1gab62fd9ded8c386c918f4ae84c1d0bf07:

RTS_BOOL X509CertCompare (RTS_HANDLE hCert1, RTS_HANDLE hCert2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Compare two certificates if they are identical.

**Parameters**

+---------+--------+------------------------------+
| [in]    | hCert1 | Handle to first certificate  |
+---------+--------+------------------------------+
| [in]    | hCert1 | Handle to second certificate |
+---------+--------+------------------------------+

**Returns:**

TRUE if they are identical, FALSE if not.

.. _group___cmp_x509_cert_itf_1ga9c29c73230e4f790ea6563c6df6b925a:

RTS_RESULT X509CertKeyClose (RtsCryptoKey *pKey)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga073da3edef2ddc44f45739da81f78394:

RTS_RESULT X509CertClose (RTS_HANDLE hCert)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Close the certificate.

**Parameters**

+---------+-------+---------------------------+
| [in]    | hCert | Handle of to certificate. |
+---------+-------+---------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1ga6b51c3dc63aea1ca5cb8c2d203cbb396:

RTS_RESULT X509CertCmsVerify (RTS_HANDLE hCertStore, RtsByteString *pCms, RTS_IEC_INT encoding, RtsByteString *pInData, RtsByteString *pOutData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Verifys a CMS signature. This function can handle both (detached and attached) signatures. The signers certificate has to be located in the CMS container. Otherwhise the verify will fail. The signers certificate is always verified against the trusted certificate store on the PLC.

**Parameters**

+---------+------------+-----------------------------------------------------------------------------------------------------------+
| [in]    | hCertStore | Handle to the certificate store.                                                                          |
+---------+------------+-----------------------------------------------------------------------------------------------------------+
| [in]    | pCms       | Pointer to a bytestring storing the CMS container.                                                        |
+---------+------------+-----------------------------------------------------------------------------------------------------------+
| [in]    | encoding   | Encoding of the CMS container.                                                                            |
+---------+------------+-----------------------------------------------------------------------------------------------------------+
| [in]    | pInData    | Used only if the signature is detached. In this case this bytestring has to store the data to be verified |
+---------+------------+-----------------------------------------------------------------------------------------------------------+
| [in]    | pOutData   | Pointer to a bytestring where to store the extraced data.                                                 |
+---------+------------+-----------------------------------------------------------------------------------------------------------+

**Returns:**

ERR_OK if the signature is valid and the signer was trustworthy. *ERR_SIGNATURE_MISMATCH if the signature is invalid and / or the signer was not trustworthy. *ERR_PARAMETER if the given parameters are not consistent.

.. _group___cmp_x509_cert_itf_1gab509b5e8a4e99afa871f6ff22d29b342:

RTS_RESULT X509CertCmsVerify2 (RTS_HANDLE hCertStore, RtsByteString *pCms, RTS_IEC_INT encoding, RtsByteString *pInData, RtsByteString *pOutData, RTS_HANDLE *phSignerCert)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The description of X509CertCmsVerify applies here too. Additional this interface returns a handle to the signers certificate.

**Parameters**

+---------+--------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hCertStore   | Handle to the certificate store.                                                                                                                                                                                                       |
+---------+--------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pCms         | Pointer to a bytestring storing the CMS container.                                                                                                                                                                                     |
+---------+--------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | encoding     | Encoding of the CMS container.                                                                                                                                                                                                         |
+---------+--------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pInData      | Used only if the signature is detached. In this case this bytestring has to store the data to be verified                                                                                                                              |
+---------+--------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pOutData     | Pointer to a bytestring where to store the extraced data.                                                                                                                                                                              |
+---------+--------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | phSignerCert | Pointer to a handle where to store the signers certificate. This handle is only returned if the verification was successful. If the container was signed multiple times this handle contains the first valid certificate. Can be NULL. |
+---------+--------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

ERR_OK if the signature is valid and the signer was trustworthy. *ERR_SIGNATURE_MISMATCH if the signature is invalid and / or the signer was not trustworthy. *ERR_PARAMETER if the given parameters are not consistent.

.. _group___cmp_x509_cert_itf_1gaebc8225f7eb1f386c6e24732d53494ec:

RTS_RESULT X509CertCmsDecrypt (RTS_HANDLE hCertStore, RTS_HANDLE hRecipientCert, RtsByteString *pCms, RTS_IEC_INT encoding, RtsByteString *pOutData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Decrypt a CMS container.

**Parameters**

+---------+----------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hCertStore     | Handle to the certificate store.                                                                                                                        |
+---------+----------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hRecipientCert | Handle to the recipients certificat. A private key of the certificate has to be available. Though the certificate has to be located in the "own" store. |
+---------+----------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pCms           | Pointer to a bytestring storing the CMS container.                                                                                                      |
+---------+----------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | encoding       | Encoding of the CMS container.                                                                                                                          |
+---------+----------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pOutData       | Pointer to a bytestring where to store the extraced data.                                                                                               |
+---------+----------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

ERR_OK if the container was successfully decrypted. *ERR_PARAMETER if the given parameters are not consistent.

.. _group___cmp_x509_cert_itf_1gac62d802c208e5937b00033c2288b0c63:

RTS_RESULT RtsOIDCreate (char *id, RtsOID *oid)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create an RtsOID based on a given ID.

**Parameters**

+---------+-----+------------------------------------------------------------+
| [in]    | id  | OID as string in dottet format. E.g. (1.2.3.4.5.6.7.8.9.0) |
+---------+-----+------------------------------------------------------------+
| [out]   | oid | Pointer to an OID to fill up.                              |
+---------+-----+------------------------------------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1gaff3a425033e2d1a475c6623f99829d1b:

RTS_RESULT RtsOIDGetID (RtsOID *oid, RtsByteString *pBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the ID of an OID in dottet notation.

**Parameters**

+---------+---------+---------------------------------+
| [in]    | oid     | OID to print.                   |
+---------+---------+---------------------------------+
| [out]   | pBuffer | Buffer where to store the name. |
+---------+---------+---------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1ga9ba84f61b9c3fe5b6ae35f1c11b1e74a:

RTS_RESULT RtsOIDGetName (RtsOID *oid, RtsByteString *pBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the given name of an OID. If the OID is unknown to the system the number.number.number... notation will be returned.

**Parameters**

+---------+---------+---------------------------------+
| [in]    | oid     | OID to print.                   |
+---------+---------+---------------------------------+
| [out]   | pBuffer | Buffer where to store the name. |
+---------+---------+---------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1ga370f2a84924e0202d6f3024d054569f0:

RTS_RESULT RtsOIDClear (RtsOID *oid)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Clear an OID
**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1gaf9347f6b295ddc43ae39c26b15c0299a:

RTS_RESULT X509CertInfoInit (RtsX509CertInfo *pCertInfo, RTS_UI32 structSize)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Initialize the RtsX509CertInfo structure.

**Parameters**

+---------+------------+---------------------------+
| [in]    | pCertInfo  | Pointer to the structure. |
+---------+------------+---------------------------+
| [in]    | structSize | Size of the structure.    |
+---------+------------+---------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1gaa11dd819381e15b7a5e0b414c728b32f:

RTS_RESULT X509CertInfoExit (RtsX509CertInfo *pCertInfo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Cleanup an RtsX509CertInfo structure. All allocated memory used by this strucutre will be release.

**Parameters**

+---------+-------+------------------------------------+
| [in]    | hCert | Pointer to the object to clean up. |
+---------+-------+------------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1gad0be785fbf9846773eabd0db2b8bc493:

RTS_HANDLE X509CertStoreGetFirstBackend (RTS_HANDLE hCertStore, RtsCertBackendInfo *pInfo, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the first registerd backend of the certificate store.

**Parameters**

+---------+------------+-----------------------------------------------------+
| [in]    | hCertStore | Handle to the certificate store                     |
+---------+------------+-----------------------------------------------------+
| [out]   | pInfo      | Pointer to backend info. Filled up by the function. |
+---------+------------+-----------------------------------------------------+
| [out]   | pResult    | Result of the operation.                            |
+---------+------------+-----------------------------------------------------+

**Returns:**

Handle of the first backend.

.. _group___cmp_x509_cert_itf_1gacb16b89ed74609c7fe1afe511e0ea733:

RTS_HANDLE X509CertStoreGetNextBackend (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RtsCertBackendInfo *pInfo, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the next registerd backend of the certificate store.

**Parameters**

+---------+------------+-----------------------------------------------------+
| [in]    | hCertStore | Handle to the certificate store                     |
+---------+------------+-----------------------------------------------------+
| [in]    | hBackend   | Handle to the preverios backend.                    |
+---------+------------+-----------------------------------------------------+
| [out]   | pInfo      | Pointer to backend info. Filled up by the function. |
+---------+------------+-----------------------------------------------------+
| [out]   | pResult    | Result of the operation.                            |
+---------+------------+-----------------------------------------------------+

**Returns:**

Handle of the next Backend. RTS_INVALID_HANDLE if no more backend is available.

.. _group___cmp_x509_cert_itf_1ga8360bf264ada12702cb58854953733c0:

RTS_RESULT X509CertStorGetBackendInfo (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RtsCertBackendInfo *pInfo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The the information of a specific certificate backend.

**Parameters**

+---------+------------+-----------------------------------------------------+
| [in]    | hCertStore | Handle to the certificate store                     |
+---------+------------+-----------------------------------------------------+
| [in]    | hBackend   | Handle to the preverios backend.                    |
+---------+------------+-----------------------------------------------------+
| [out]   | pInfo      | Pointer to backend info. Filled up by the function. |
+---------+------------+-----------------------------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1gaf0d551e9529268467ac55cd5f244166e:

RTS_HANDLE X509CertCreateSelfSigned (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RtsX509CertInfo *pCertInfo, RTS_UI32 ui32KeySize, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create a new self signed certificate. A private key is generated and automatically stored.

**Parameters**

+---------+-------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hCertStore  | Handle to the certificate store                                                                                               |
+---------+-------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hBackend    | Handle to the backend where to store the generated certificate. RTS_INVALID_HANDLE should be used if no backend is specified. |
+---------+-------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pCertInfo   | Information of the certificate to be generated.                                                                               |
+---------+-------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ui32KeySize | Size in bits of the private key.                                                                                              |
+---------+-------------+-------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult     | Result of the operation.                                                                                                      |
|         |             |                                                                                                                               |
|         |             | - ERR_OK: Everything went fine.                                                                                               |
|         |             |                                                                                                                               |
|         |             | - ERR_INVALID_HANDLE: Some input handle is invalid.                                                                           |
|         |             |                                                                                                                               |
|         |             | - ERR_PARAMETER: Some input parameter is invalid.                                                                             |
|         |             |                                                                                                                               |
|         |             | - ERR_OVERFLOW: The timestamps of the certificate would overflow.                                                             |
|         |             |                                                                                                                               |
|         |             | - ERR_NOMEMORY: Not enough memory to perform this operation.                                                                  |
|         |             |                                                                                                                               |
|         |             | - ERR_FAILED: Creation of self signed certificate failed. failed                                                              |
+---------+-------------+-------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Handle to the created selfsigned certificate

.. _group___cmp_x509_cert_itf_1gafa3352932820f31bffb651567d200f5c:

RTS_RESULT X509CertCreateSelfSignedAsync (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RtsX509CertInfo *pCertInfo, RTS_UI32 ui32KeySize, void *pCallbackParam, PFX509ASYNCCALLBACK pfCallback)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create a new self signed certificate, asynchronously. A private key is generated and automatically stored.

**Parameters**

+---------+----------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hCertStore     | Handle to the certificate store                                                                                               |
+---------+----------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hBackend       | Handle to the backend where to store the generated certificate. RTS_INVALID_HANDLE should be used if no backend is specified. |
+---------+----------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pCertInfo      | Information of the certificate to be generated.                                                                               |
+---------+----------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ui32KeySize    | Size in bits of the private key.                                                                                              |
+---------+----------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ui32KeySize    | Size in bits of the private key.                                                                                              |
+---------+----------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pCallbackParam | Parameter used when the callback is called when the operation has finished.                                                   |
+---------+----------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pfCallback     | Callback function that is called at the end of the operation                                                                  |
+---------+----------------+-------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Result of the operation

.. _group___cmp_x509_cert_itf_1gae352d99fc4f1b840c570aab5d2991caf:

RTS_RESULT X509CertCreateCSR (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RtsX509CertInfo *pCertInfo, RTS_UI32 ui32KeySize, RTS_IEC_INT encoding, RtsByteString *pCSR)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create a new certificate request. A new private key will be generated and automatically stored in the key store. The certificate request can be sent to an offical CA to get a signed certificate.

**Parameters**

+---------+-------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hCertStore  | Handle to the certificate store                                                                                               |
+---------+-------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hBackend    | Handle to the backend where to store the generated certificate. RTS_INVALID_HANDLE should be used if no backend is specified. |
+---------+-------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pCertInfo   | Information of the certificate to be generated.                                                                               |
+---------+-------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ui32KeySize | Size in bits of the private key.                                                                                              |
+---------+-------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | encoding    | Encoding of the generated CSR.                                                                                                |
+---------+-------------+-------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pCSR        | The signing request in binary form.                                                                                           |
+---------+-------------+-------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Result of the operation

.. _group___cmp_x509_cert_itf_1ga11c9602a184532a470c199fe50be7c13:

RTS_RESULT X509CertCreateCSRAsync (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RtsX509CertInfo *pCertInfo, CMPID cmpID, RTS_UI32 ui32KeySize, RTS_IEC_INT encoding, RtsByteString *pCSR, void *pCallbackParam, PFX509ASYNCCALLBACK pfCallback)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create a new certificate request. A new private key will be generated and automatically stored in the key store. The certificate request can be sent to an offical CA to get a signed certificate.

**Parameters**

+---------+----------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hCertStore     | Handle to the certificate store                                                                                               |
+---------+----------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hBackend       | Handle to the backend where to store the generated certificate. RTS_INVALID_HANDLE should be used if no backend is specified. |
+---------+----------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pCertInfo      | Information of the certificate to be generated.                                                                               |
+---------+----------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | cmpID          | Component ID of the component for which the CSR is created.                                                                   |
+---------+----------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ui32KeySize    | Size in bits of the private key.                                                                                              |
+---------+----------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | encoding       | Encoding of the generated CSR.                                                                                                |
+---------+----------------+-------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pCSR           | The signing request in binary form.                                                                                           |
+---------+----------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pCallbackParam | Parameter used when the callback is called when the operation has finished.                                                   |
+---------+----------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pfCallback     | Callback function that is called at the end of the operation                                                                  |
+---------+----------------+-------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Result of the operation

.. _group___cmp_x509_cert_itf_1ga01ee2bd1985de5a20ab80cc616d9b6a6:

RTS_RESULT X509CertStoreAddCert (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RTS_HANDLE hCert, RTS_IEC_INT trustLevel)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Add the given certificate to the Certificate store

**Parameters**

+---------+------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hCertStore | Handle of to certificate store.                                                                                               |
+---------+------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hBackend   | Handle to the backend where to store the generated certificate. RTS_INVALID_HANDLE should be used if no backend is specified. |
+---------+------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hCert      | Handle of the certificate to be imported.                                                                                     |
+---------+------------+-------------------------------------------------------------------------------------------------------------------------------+
| [in]    | trustLevel | The category where to store the certificate. Note: RtsTrustLevel_Own ist not selectable.  Result of the operation.            |
+---------+------------+-------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Handle to the imported certificate.

.. _group___cmp_x509_cert_itf_1ga410f59ca7b7871c9723cc5a82f495382:

RTS_RESULT X509CertStoreRemoveCert (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RTS_HANDLE hCert, RTS_BOOL bRemovePrivateKey)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Remove the certificate from the store.

**Parameters**

+---------+-------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hCertStore        | Handle of to certificate store.                                                                                                                      |
+---------+-------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hBackend          | Handle to the backend where to store the generated certificate. RTS_INVALID_HANDLE should be used if no backend is specified.                        |
+---------+-------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hCert             | Handle of the certificate to remove.                                                                                                                 |
+---------+-------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | bRemovePrivateKey | Select if the private key of the certificate should be deleted too. If the certificate is renewed the same private key the key shouldn't be deleted. |
+---------+-------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Result of the operation.

.. _group___cmp_x509_cert_itf_1gab3f65d84a84e8839f61eefa0763785de:

RTS_HANDLE X509CertStoreGetFirstCert (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RTS_IEC_INT trustLevel, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1gaa3f612bd6436163892df6ccbf4c3eaf1:

RTS_HANDLE X509CertStoreGetNextCert (RTS_HANDLE hCertStore, RTS_HANDLE hBackend, RTS_HANDLE hCert, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_x509_cert_itf_1ga10a10dfcd08794eb0825b6812eb2bfda:

RTS_HANDLE X509CertStoreRegister (RTS_HANDLE hCertStore, CMPID cmpID, RtsX509CertInfo *pCertInfo, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Register your certificate at the certificate store. This has to be done in order to allow the user the view the different configured certificates and to generate missing certificates or to renew outdated certificates. Register the same information you are using in the X509CertStoreSearch function.

**Parameters**

+---------+------------+----------------------------------------------------------------------------------------------------------+
| [in]    | hCertStore | Handle of to certificate store.                                                                          |
+---------+------------+----------------------------------------------------------------------------------------------------------+
| [in]    | CmpID      | Component ID which registerd the certificate                                                             |
+---------+------------+----------------------------------------------------------------------------------------------------------+
| [in]    | pCertInfo  | Certificate information to be registerd. Should match the information needed to use the Search function. |
+---------+------------+----------------------------------------------------------------------------------------------------------+
| [out]   | pResult    | Pointer to error code                                                                                    |
+---------+------------+----------------------------------------------------------------------------------------------------------+

**Returns:**

Handle to the entry

.. _group___cmp_x509_cert_itf_1ga8545f584011c653ac8baa957d1020bc0:

RTS_RESULT X509CertStoreUnregister (RTS_HANDLE hCertStore, RTS_HANDLE hRegisteredComponent)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Parameters**

+---------+----------------------+--------------------------------------------------------+
| [in]    | hCertStore           | Handle of to certificate store                         |
+---------+----------------------+--------------------------------------------------------+
| [in]    | hRegisteredComponent | Handle to the entry retrieved by X509CertStoreRegister |
+---------+----------------------+--------------------------------------------------------+

**Returns:**

Result of the operation

.. _group___cmp_x509_cert_itf_1ga1d36aa91065172a577af54736687fb4e:

RTS_HANDLE X509CertStoreGetRegisteredCert (RTS_HANDLE hCertStore, RTS_HANDLE hUseCase, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the certificate available for a registered use case. If not certificate is available RTS_INVALID_HANDLE will be returned. The following rules apply for selecting the certificate:

- Check if a certificate is configured by the user. (The thumbprint is pinned for component and index). Use this one if available, return error if not available.

- If no certificate is configured filter the available certificates by subject, key usage, extended key usage and a valid timestamp. Return error if list is empty.

- Split the available certificates by signed and self signed certificates. Prefer the signed certificates over the self signed certificates:

- Select the certificate with the longest period of validity.

- If some certificates have the same period of validity select the one with the strongest key.

**Parameters**

+---------+------------+---------------------------------------------------------------------------+
| [in]    | hCertStore | Handle of to certificate store.                                           |
+---------+------------+---------------------------------------------------------------------------+
| [in]    | hUseCase   | Handle to the registered use case. Retrieved using X509CertStoreRegister. |
+---------+------------+---------------------------------------------------------------------------+
| [out]   | pResult    | Pointer to error code                                                     |
+---------+------------+---------------------------------------------------------------------------+

**Returns:**

Handle to the certificate. Use X509CertClose to close the certificat.

.. last line of group.rst template
.. last line of composition.rst template


