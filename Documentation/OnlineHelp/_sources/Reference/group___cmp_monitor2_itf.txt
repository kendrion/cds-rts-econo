.. first line of composition.rst template

.. first line of group.rst template

.. _group___cmp_monitor2_itf:

==============
CmpMonitor2Itf
==============

Interface of CmpMonitor2. :ref:`More... <group___cmp_monitor2_itf-details>`

Modules
-------

- :ref:`Event parameter <group___cmp_monitor2_itf___eventparameter>`

- :ref:`Events <group___cmp_monitor2_itf___events>`

- :ref:`Features <group___cmp_monitor2_itf___features>`

- :ref:`Online services <group___cmp_monitor2_itf___onlineservices>`

- :ref:`Settings <group___cmp_monitor2_itf___settings>`

Data Structures
---------------

- struct :ref:`ICmpMonitor2_C <struct_i_cmp_monitor2___c>`

Macros
------

- #define :ref:`ITF_CmpMonitor2 <group___cmp_monitor2_itf_1gaa19cbf77798a425fe57d17016199441d>`

- #define :ref:`EXTITF_CmpMonitor2 <group___cmp_monitor2_itf_1ga5ab357dac0dc8c6a74ec8a4242c67c0a>`

Typedefs
--------

- typedef :ref:`ICmpMonitor2_C <struct_i_cmp_monitor2___c>` :ref:`ICmpMonitor2 <group___cmp_monitor2_itf_1gad97b5c9e7f77ee5285b0f66b5f392b71>`

Functions
---------

- RTS_RESULT :ref:`Monitoring2HasFeature <group___cmp_monitor2_itf_1ga0bb98b0ac8e9a989a37497e20b44e7df>` (RTS_UI32 ulFeatures)

- RTS_RESULT :ref:`Monitoring2ReadValue <group___cmp_monitor2_itf_1gaa571014a7704c0b8a464d2ce9c57610e>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp, RTS_UI16 usSizeCodeBytes, const RTS_UI8 * pCode, RTS_UI8 * pbyValue, RTS_UI32 ulSizeValueBytes, RTS_UI32 * pMonError)

- RTS_RESULT :ref:`Monitoring2ReadValue2 <group___cmp_monitor2_itf_1ga323f5349d2d57e9a0fdba39e32edb723>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp, RTS_SIZE szStackElems, RTS_UINTPTR * pStack, RTS_UI16 usSizeCodeBytes, const RTS_UI8 * pCode, RTS_UI8 * pbyValue, RTS_UI32 ulSizeValueBytes, RTS_UI32 * pMonError)

- RTS_RESULT :ref:`Monitoring2ExecuteCode <group___cmp_monitor2_itf_1ga115a74548e674b27fcf113028a79639b>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp, RTS_SIZE szStackElems, RTS_UINTPTR * pStack, RTS_UI16 usSizeCodeBytes, const RTS_UI8 * pCode, RTS_UI32 * pMonError)

- RTS_RESULT :ref:`Monitoring2WriteValue <group___cmp_monitor2_itf_1ga983ce0c24b89aed70423a63fb49cec1c>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp, RTS_UI16 usSizeCodeBytes, const RTS_UI8 * pCode, const RTS_UI8 * pbyValue, RTS_UI32 ulSizeValueBytes, RTS_UI32 * pMonError)

- RTS_RESULT :ref:`Monitoring2WriteValue2 <group___cmp_monitor2_itf_1ga247dbe54bee04e5f1f7ecfc80fa1d4d1>` (:ref:`APPLICATION <group___cmp_app_itf___applicationdescription_1gac7bd19d792c2ff88bf331821dd1978b7>` * pApp, RTS_SIZE szStackElems, RTS_UINTPTR * pStack, RTS_UI16 usSizeCodeBytes, const RTS_UI8 * pCode, const RTS_UI8 * pbyValue, RTS_UI32 ulSizeValueBytes, RTS_UI32 * pMonError)

.. _group___cmp_monitor2_itf-details:

Detailed Description
--------------------

Interface of CmpMonitor2.

Interface of the new monitoring component, that provides monitoring of IEC variables.

Main advantages of this component against CmpMonitor:

- Minimal stack usage (no recursive function calls) so it is more useful for embedded devices

- Less code and data usage

- All variable access mechanisms are available by default

- Address checking is done for each access layer

- Structured exception handling is fully integrated So the new monitoring component is recommended for all newer runtime systems and especially for targets with low resources. CODESYS higher or equal v3.5.0.0 automatically adapts the monitoring, if this new component is integrated in the runtime.

Disadvantage:

- Not compatible with older version of CODESYS (before v3.5.0.0). To support older versions the CmpMonitor must be integrated in parallel.

**Copyright:**

Copyright (c) 2017-2018 CODESYS GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved.

Macro Definition Documentation
------------------------------
.. _group___cmp_monitor2_itf_1gaa19cbf77798a425fe57d17016199441d:

#define ITF_CmpMonitor2
^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_monitor2_itf_1ga5ab357dac0dc8c6a74ec8a4242c67c0a:

#define EXTITF_CmpMonitor2
^^^^^^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___cmp_monitor2_itf_1gad97b5c9e7f77ee5285b0f66b5f392b71:

typedef ICmpMonitor2_C ICmpMonitor2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function Documentation
----------------------

.. _group___cmp_monitor2_itf_1ga0bb98b0ac8e9a989a37497e20b44e7df:

RTS_RESULT Monitoring2HasFeature (RTS_UI32 ulFeatures)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Routine to check whether the new monitoring component has the specified feature.

**Parameters**

+---------+------------+-------------------------------------------------------+
| [in]    | ulFeatures | Feature flags, See corresponding category "Features". |
+---------+------------+-------------------------------------------------------+

**Returns:**

ERR_OK if the flags are supported, an error code otherwise

.. _group___cmp_monitor2_itf_1gaa571014a7704c0b8a464d2ce9c57610e:

RTS_RESULT Monitoring2ReadValue (APPLICATION *pApp, RTS_UI16 usSizeCodeBytes, const RTS_UI8 *pCode, RTS_UI8 *pbyValue, RTS_UI32 ulSizeValueBytes, RTS_UI32 *pMonError)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Obsolete: the use of this function is only safe when called from the context of the communication task. Use Monitoring2ReadValue2 instead.

Routine to read a monitoring expression given as a byte-code program to be executed in the byte-code interpreter of CmpMonitor2.

Note: this function may only be called if the user does have access right USERDB_RIGHT_VIEW.

The byte-code program expects no inputs and, after successful execution, must have the address of the data to read on the top of the interpreter stack.

**Parameters**

+---------+------------------+------------------------------------------------------------------------------------------------+
| [in]    | pApp             | Pointer to the application. May be null if an IO config paramters is read.                     |
+---------+------------------+------------------------------------------------------------------------------------------------+
| [in]    | usSizeCodeBytes  | The size of the byte code in bytes.                                                            |
+---------+------------------+------------------------------------------------------------------------------------------------+
| [in]    | pCode            | Pointer th the byte-code program.                                                              |
+---------+------------------+------------------------------------------------------------------------------------------------+
| [in]    | pbyValue         | pointer to the destination address were the retrieved value is written.                        |
+---------+------------------+------------------------------------------------------------------------------------------------+
| [in]    | ulSizeValueBytes | size of value to read, in bytes.                                                               |
+---------+------------------+------------------------------------------------------------------------------------------------+
| [out]   | pMonError        | The detailed error value if the return value is ERR_FAILED, see MONITORING_ERR_in CmpErrors.h. |
+---------+------------------+------------------------------------------------------------------------------------------------+

**Returns:**

ERR_OK if the value could be written successfully

ERR_PARAMETER if pCode, pbyValue, or pMonError is NULL

ERR_FAILED if the value could not be written successfully,pMonError will hold a *detailed error.

.. _group___cmp_monitor2_itf_1ga323f5349d2d57e9a0fdba39e32edb723:

RTS_RESULT Monitoring2ReadValue2 (APPLICATION *pApp, RTS_SIZE szStackElems, RTS_UINTPTR *pStack, RTS_UI16 usSizeCodeBytes, const RTS_UI8 *pCode, RTS_UI8 *pbyValue, RTS_UI32 ulSizeValueBytes, RTS_UI32 *pMonError)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Routine to read a monitoring expression given as a byte-code program to be executed in the byte-code interpreter of CmpMonitor2.

Note: this function may only be called if the user does have access right USERDB_RIGHT_VIEW.

The byte-code program expects no inputs and, after successful execution, must have the address of the data to read on the top of the interpreter stack.

The stack for the byte-code interpreter is passed in by the caller. This is done to make the function thread-safe by not sharing any data between threads. The size of the stack depends on the kind of byte-code programs to be executed. For example, if strings are to be read, the entire string must fit onto the stack. Apart from that, it depends on the "nesting depth" of the program. For most reasonable expressions of numeric type, a stack size of 32 elements should be enough.

**Parameters**

+---------+------------------+------------------------------------------------------------------------------------------------+
| [in]    | pApp             | Pointer to the application. May be null if an IO config paramters is read.                     |
+---------+------------------+------------------------------------------------------------------------------------------------+
| [in]    | szStackElems     | The size of the interpreter stack pStack in elements.                                          |
+---------+------------------+------------------------------------------------------------------------------------------------+
| [in]    | pStack           | The pointer to the interpreter stack.                                                          |
+---------+------------------+------------------------------------------------------------------------------------------------+
| [in]    | usSizeCodeBytes  | The size of the byte code in bytes.                                                            |
+---------+------------------+------------------------------------------------------------------------------------------------+
| [in]    | pCode            | Pointer th the byte-code program.                                                              |
+---------+------------------+------------------------------------------------------------------------------------------------+
| [in]    | pbyValue         | pointer to the destination address were the retrieved value is written.                        |
+---------+------------------+------------------------------------------------------------------------------------------------+
| [in]    | ulSizeValueBytes | size of value to read, in bytes.                                                               |
+---------+------------------+------------------------------------------------------------------------------------------------+
| [out]   | pMonError        | The detailed error value if the return value is ERR_FAILED, see MONITORING_ERR_in CmpErrors.h. |
+---------+------------------+------------------------------------------------------------------------------------------------+

**Returns:**

ERR_OK if the value could be written successfully

ERR_PARAMETER if pStack pCode, pbyValue, or pMonError is NULL, or if szStackElems is 0

ERR_FAILED if the value could not be written successfully,pMonError will hold a *detailed error.

.. _group___cmp_monitor2_itf_1ga115a74548e674b27fcf113028a79639b:

RTS_RESULT Monitoring2ExecuteCode (APPLICATION *pApp, RTS_SIZE szStackElems, RTS_UINTPTR *pStack, RTS_UI16 usSizeCodeBytes, const RTS_UI8 *pCode, RTS_UI32 *pMonError)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Routine to execute IEC expressions given as a byte-code program to be executed in the byte-code interpreter of CmpMonitor2.

Note: this function may only be called if the user does have access right USERDB_RIGHT_VIEW.

The stack for the byte-code interpreter is passed in by the caller. This is done to make the function thread-safe by not sharing any data between threads. The size of the stack depends on the kind of byte-code programs to be executed. For example, if strings are to be read, the entire string must fit onto the stack. Apart from that, it depends on the "nesting depth" of the program.

**Parameters**

+---------+-----------------+------------------------------------------------------------------------------------------------+
| [in]    | pApp            | Pointer to the application. May be null if an IO config paramters is read.                     |
+---------+-----------------+------------------------------------------------------------------------------------------------+
| [in]    | szStackElems    | The size of the interpreter stack pStack in elements.                                          |
+---------+-----------------+------------------------------------------------------------------------------------------------+
| [in]    | pStack          | The pointer to the interpreter stack.                                                          |
+---------+-----------------+------------------------------------------------------------------------------------------------+
| [in]    | usSizeCodeBytes | The size of the byte code in bytes.                                                            |
+---------+-----------------+------------------------------------------------------------------------------------------------+
| [in]    | pCode           | Pointer th the byte-code program.                                                              |
+---------+-----------------+------------------------------------------------------------------------------------------------+
| [out]   | pMonError       | The detailed error value if the return value is ERR_FAILED, see MONITORING_ERR_in CmpErrors.h. |
+---------+-----------------+------------------------------------------------------------------------------------------------+

**Returns:**

ERR_OK if the value could be written successfully

ERR_PARAMETER if pStack pCode, pbyValue, or pMonError is NULL, or if szStackElems is 0

ERR_FAILED if the value could not be written successfully,pMonError will hold a *detailed error.

.. _group___cmp_monitor2_itf_1ga983ce0c24b89aed70423a63fb49cec1c:

RTS_RESULT Monitoring2WriteValue (APPLICATION *pApp, RTS_UI16 usSizeCodeBytes, const RTS_UI8 *pCode, const RTS_UI8 *pbyValue, RTS_UI32 ulSizeValueBytes, RTS_UI32 *pMonError)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Obsolete: the use of this function is only safe when called from the context of the communication task. Use Monitoring2WriteValue2 instead.

Routine to write a monitoring expression given as a byte-code program to be executed in the byte-code interpreter of CmpMonitor2.

Before the value is written, the event EVT_CmpMonitor2_PrepareWrite is raised, which can lead to an abortion of the write. After a successful write, the event EVT_CmpMonitor2_WriteDone is raised.

If the operation OP_APP_WRITE_VARIABLES is disabled for the application, the function returns with an error.

Note: this function may only be called if the user does have access right USERDB_RIGHT_MODIFY.

The byte-code program expects three arguments on the F-Stack: the address of the data to write (type void), the length of the data to write in chars (type RTS_UI32), and the mode of operation (type RTS_UI32) which is either MODE_ADDR (0) or MODE_WRITE (1). For the detailed explanation of these inputs see FS_CmpMonitor2.doc, section 3.3. Note: the byte-code programs created by the OnlineManager in CODESYS behave as described above.

**Parameters**

+---------+------------------+------------------------------------------------------------------------------------------------+
| [in]    | pApp             | Pointer to application. May be null if an IO config paramters is written.                      |
+---------+------------------+------------------------------------------------------------------------------------------------+
| [in]    | usSizeCodeBytes  | The size of the byte code in bytes.                                                            |
+---------+------------------+------------------------------------------------------------------------------------------------+
| [in]    | pCode            | Pointer th the byte-code program.                                                              |
+---------+------------------+------------------------------------------------------------------------------------------------+
| [in]    | pbyValue         | pointer to the source address of the value to write.                                           |
+---------+------------------+------------------------------------------------------------------------------------------------+
| [in]    | ulSizeValueBytes | size of the value to write.                                                                    |
+---------+------------------+------------------------------------------------------------------------------------------------+
| [out]   | pMonError        | The detailed error value if the return value is ERR_FAILED, see MONITORING_ERR_in CmpErrors.h. |
+---------+------------------+------------------------------------------------------------------------------------------------+

**Returns:**

ERR_OK if the value could be written successfully

ERR_PARAMETER if pCode, pbyValue, or pMonError is NULL

ERR_FAILED if the value could not be written successfully,pMonError will hold a *detailed error.

.. _group___cmp_monitor2_itf_1ga247dbe54bee04e5f1f7ecfc80fa1d4d1:

RTS_RESULT Monitoring2WriteValue2 (APPLICATION *pApp, RTS_SIZE szStackElems, RTS_UINTPTR *pStack, RTS_UI16 usSizeCodeBytes, const RTS_UI8 *pCode, const RTS_UI8 *pbyValue, RTS_UI32 ulSizeValueBytes, RTS_UI32 *pMonError)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Routine to write a monitoring expression given as a byte-code program to be executed in the byte-code interpreter of CmpMonitor2.

Before the value is written, the event EVT_CmpMonitor2_PrepareWrite is raised, which can lead to an abortion of the write. After a successful write, the event EVT_CmpMonitor2_WriteDone is raised.

If the operation OP_APP_WRITE_VARIABLES is disabled for the application, the function returns with an error.

Note: this function may only be called if the user does have access right USERDB_RIGHT_MODIFY.

The stack for the byte-code interpreter is passed in by the caller. This is done to make the function thread-safe by not sharing any data between threads. The size of the stack depends on the kind of byte-code programs to be executed. For most reasonable expressions of numeric type, a stack size of 32 elements should be enough.

The byte-code program expects three arguments on the F-Stack: the address of the data to write (type void), the length of the data to write in chars (type RTS_UI32), and the mode of operation (type RTS_UI32) which is either MODE_ADDR (0) or MODE_WRITE (1). For the detailed explanation of these inputs see FS_CmpMonitor2.doc, section 3.3. Note: the byte-code programs created by the OnlineManager in CODESYS behave as described above.

**Parameters**

+---------+------------------+------------------------------------------------------------------------------------------------+
| [in]    | pApp             | Pointer to application. May be null if an IO config paramters is written.                      |
+---------+------------------+------------------------------------------------------------------------------------------------+
| [in]    | szStackElems     | The size of the interpreter stack pStack in elements.                                          |
+---------+------------------+------------------------------------------------------------------------------------------------+
| [in]    | pStack           | The pointer to the interpreter stack.                                                          |
+---------+------------------+------------------------------------------------------------------------------------------------+
| [in]    | usSizeCodeBytes  | The size of the byte code in bytes.                                                            |
+---------+------------------+------------------------------------------------------------------------------------------------+
| [in]    | pCode            | Pointer th the byte-code program.                                                              |
+---------+------------------+------------------------------------------------------------------------------------------------+
| [in]    | pbyValue         | pointer to the source address of the value to write.                                           |
+---------+------------------+------------------------------------------------------------------------------------------------+
| [in]    | ulSizeValueBytes | size of the value to write.                                                                    |
+---------+------------------+------------------------------------------------------------------------------------------------+
| [out]   | pMonError        | The detailed error value if the return value is ERR_FAILED, see MONITORING_ERR_in CmpErrors.h. |
+---------+------------------+------------------------------------------------------------------------------------------------+

**Returns:**

ERR_OK if the value could be written successfully

ERR_PARAMETER if pStack, pCode, pbyValue, or pMonError is NULL or if szStackElems is 0

ERR_FAILED if the value could not be written successfully,pMonError will hold a *detailed error.

.. last line of group.rst template
.. last line of composition.rst template


