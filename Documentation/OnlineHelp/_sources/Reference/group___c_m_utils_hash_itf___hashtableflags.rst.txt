.. first line of composition.rst template

:orphan:

.. first line of group.rst template

.. _group___c_m_utils_hash_itf___hashtableflags:

================
Hash table flags
================

.. contents::
    :local:
    :depth: 1



Detailed Description
--------------------



Macros
------

- #define :ref:`CMUTLHASHTABLE_FLAG_ALLOC_TABLE <group___c_m_utils_hash_itf___hashtableflags_1ga0c08419833347ac98fea10a33b0e8443>` 0x00000001

- #define :ref:`CMUTLHASHTABLE_FLAG_INTERRUPT_SAFE <group___c_m_utils_hash_itf___hashtableflags_1gac7122a6ee4bd38cce51d38b06df0b813>` 0x00000002

- #define :ref:`CMUTLHASHTABLE_FLAG_NO_SYNC <group___c_m_utils_hash_itf___hashtableflags_1gabdb3d2f07c2c6acce271ce7173fbf5c4>` 0x00000004

Macro Definition Documentation
------------------------------
.. _group___c_m_utils_hash_itf___hashtableflags_1ga0c08419833347ac98fea10a33b0e8443:

#define CMUTLHASHTABLE_FLAG_ALLOC_TABLE 0x00000001
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

INTERNAL USAGE: Table is dynamically allocated from heap

.. _group___c_m_utils_hash_itf___hashtableflags_1gac7122a6ee4bd38cce51d38b06df0b813:

#define CMUTLHASHTABLE_FLAG_INTERRUPT_SAFE 0x00000002
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Can be set by the caller after creating the hash table to specify, that the hash table should be interrupt safe/used from an interrupt handler!

.. _group___c_m_utils_hash_itf___hashtableflags_1gabdb3d2f07c2c6acce271ce7173fbf5c4:

#define CMUTLHASHTABLE_FLAG_NO_SYNC 0x00000004
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Can be set to specify, that the hash table should not create a synchronization object. In this case the hash table should only be called from a single task context!

.. last line of group.rst template
.. last line of composition.rst template


