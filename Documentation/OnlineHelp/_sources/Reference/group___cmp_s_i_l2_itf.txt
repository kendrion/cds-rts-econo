.. first line of composition.rst template

.. first line of group.rst template

.. _group___cmp_s_i_l2_itf:

==========
CmpSIL2Itf
==========

Interface of CmpSIL2. :ref:`More... <group___cmp_s_i_l2_itf-details>`

Modules
-------

- :ref:`Buffer sizes <group___cmp_s_i_l2_itf___buffersizes>`

- :ref:`Exceptions <group___cmp_s_i_l2_itf___exceptions>`

- :ref:`Typedef <group___cmp_s_i_l2_itf___typedef>`

Data Structures
---------------

- struct :ref:`tagsil2checkcallercontext_struct <structtagsil2checkcallercontext__struct>`

- struct :ref:`tagsil2copycodeguid_struct <structtagsil2copycodeguid__struct>`

- struct :ref:`tagsil2copydataguid_struct <structtagsil2copydataguid__struct>`

- struct :ref:`tagsil2oemexception_struct <structtagsil2oemexception__struct>`

- struct :ref:`tagsil2addlog_struct <structtagsil2addlog__struct>`

- struct :ref:`tagsil2oemgetoperationmode_struct <structtagsil2oemgetoperationmode__struct>`

- struct :ref:`tagsil2oemgetcallercontext_struct <structtagsil2oemgetcallercontext__struct>`

- struct :ref:`tagsil2oemgetmemorystate_struct <structtagsil2oemgetmemorystate__struct>`

- struct :ref:`tagsil2oemstackisvalid_struct <structtagsil2oemstackisvalid__struct>`

- struct :ref:`tagsil2executenonsafetyjob_struct <structtagsil2executenonsafetyjob__struct>`

- struct :ref:`ICmpSIL2_C <struct_i_cmp_s_i_l2___c>`

Macros
------

- #define :ref:`ITF_CmpSIL2 <group___cmp_s_i_l2_itf_1gacbb2abee3cdc282355427b83dbe0f1b1>`

- #define :ref:`EXTITF_CmpSIL2 <group___cmp_s_i_l2_itf_1gae7a193f13df22d8b25f28d4b467dabef>`

Typedefs
--------

- typedef RTS_UI32 :ref:`RTS_SIL2_EXCEPTION <group___cmp_s_i_l2_itf_1ga098d3dc4b940bfe744ca4ddf62030ba4>`

- typedef RTS_UI32 :ref:`RTS_SIL2_OPMODE <group___cmp_s_i_l2_itf_1ga8ec0d1beda77d67a16f176efc93f82ff>`

- typedef RTS_UI32 :ref:`RTS_SIL2_ADDRESSSTATE <group___cmp_s_i_l2_itf_1ga7c42f135fc3d77984fe85ab00867964d>`

- typedef struct :ref:`tagsil2checkcallercontext_struct <structtagsil2checkcallercontext__struct>` :ref:`sil2checkcallercontext_struct <group___cmp_s_i_l2_itf_1ga6930a286f5ce0a7fd755d30685e8bf01>`

- typedef struct :ref:`tagsil2copycodeguid_struct <structtagsil2copycodeguid__struct>` :ref:`sil2copycodeguid_struct <group___cmp_s_i_l2_itf_1gac221eea67a0e3e178f3b24fd47e7445e>`

- typedef struct :ref:`tagsil2copydataguid_struct <structtagsil2copydataguid__struct>` :ref:`sil2copydataguid_struct <group___cmp_s_i_l2_itf_1ga84e6aa1fc9ed4aaf32f5dce090aac9c2>`

- typedef struct :ref:`tagsil2oemexception_struct <structtagsil2oemexception__struct>` :ref:`sil2oemexception_struct <group___cmp_s_i_l2_itf_1ga004979c693756139d3dd40cc6bb4a4f2>`

- typedef struct :ref:`tagsil2addlog_struct <structtagsil2addlog__struct>` :ref:`sil2addlog_struct <group___cmp_s_i_l2_itf_1gafb55a0585024ff62223068638f5ddae5>`

- typedef struct :ref:`tagsil2oemgetoperationmode_struct <structtagsil2oemgetoperationmode__struct>` :ref:`sil2oemgetoperationmode_struct <group___cmp_s_i_l2_itf_1gaec5ca53d349f0ef78b1418c8eb39a038>`

- typedef struct :ref:`tagsil2oemgetcallercontext_struct <structtagsil2oemgetcallercontext__struct>` :ref:`sil2oemgetcallercontext_struct <group___cmp_s_i_l2_itf_1gadac65b6cbdf425a2ca9adfe4a5739f54>`

- typedef struct :ref:`tagsil2oemgetmemorystate_struct <structtagsil2oemgetmemorystate__struct>` :ref:`sil2oemgetmemorystate_struct <group___cmp_s_i_l2_itf_1ga5831096105e4dea679c5f815c586b571>`

- typedef struct :ref:`tagsil2oemstackisvalid_struct <structtagsil2oemstackisvalid__struct>` :ref:`sil2oemstackisvalid_struct <group___cmp_s_i_l2_itf_1gacb3ec2a1fea7432ae15bf315f5cf7f2c>`

- typedef struct :ref:`tagsil2executenonsafetyjob_struct <structtagsil2executenonsafetyjob__struct>` :ref:`sil2executenonsafetyjob_struct <group___cmp_s_i_l2_itf_1ga1f91d834f29f4032e422738171ea7cdb>`

- typedef :ref:`ICmpSIL2_C <struct_i_cmp_s_i_l2___c>` :ref:`ICmpSIL2 <group___cmp_s_i_l2_itf_1gadaf7d8c1f3474d7c29f66ffeb1065ee9>`

Functions
---------

- RTS_RESULT :ref:`SIL2AppBoot <group___cmp_s_i_l2_itf_1gad9316cce5790b2528afef1d6a4ecf0ac>` (void)

- RTS_RESULT :ref:`SIL2CheckCallerContext <group___cmp_s_i_l2_itf_1gadfab76ab0d96e0384b79b59a6e52d1a5>` (RTS_UI32 ulCallerContextExpected)

- void :ref:`sil2checkcallercontext <group___cmp_s_i_l2_itf_1ga4d1664aa0eb2634f7aeffcf2c1a5187a>` (:ref:`sil2checkcallercontext_struct <group___cmp_s_i_l2_itf_1ga6930a286f5ce0a7fd755d30685e8bf01>` * p)

- void :ref:`sil2copycodeguid <group___cmp_s_i_l2_itf_1ga91f7dcfcbc0f78d10bb89b7c881ac5f5>` (:ref:`sil2copycodeguid_struct <group___cmp_s_i_l2_itf_1gac221eea67a0e3e178f3b24fd47e7445e>` * p)

- void :ref:`sil2copydataguid <group___cmp_s_i_l2_itf_1ga25b16f1d0d03c5b686a8834e8da7ea5f>` (:ref:`sil2copydataguid_struct <group___cmp_s_i_l2_itf_1ga84e6aa1fc9ed4aaf32f5dce090aac9c2>` * p)

- RTS_RESULT :ref:`SIL2OEMEnterDebugMode <group___cmp_s_i_l2_itf_1ga62576d17b76bd27547fddc0f0f7f5665>` (void)

- void :ref:`SIL2OEMException <group___cmp_s_i_l2_itf_1ga18773ad5b541c2d47a6b9c6321379f77>` (:ref:`RTS_SIL2_EXCEPTION <group___cmp_s_i_l2_itf_1ga098d3dc4b940bfe744ca4ddf62030ba4>`  Exception)

- void :ref:`sil2oemexception <group___cmp_s_i_l2_itf_1gadf1587656481bdac7afb3f2f5ba571b0>` (:ref:`sil2oemexception_struct <group___cmp_s_i_l2_itf_1ga004979c693756139d3dd40cc6bb4a4f2>` * p)

- RTS_RESULT :ref:`SIL2AddLog <group___cmp_s_i_l2_itf_1ga5f306b85e84cd1cb52c10f077489967f>` (char * pszMessage, RTS_UI32 ulLogId)

- void :ref:`sil2addlog <group___cmp_s_i_l2_itf_1ga58dd0a10a47331ec3e336ffdcc6864cb>` (:ref:`sil2addlog_struct <group___cmp_s_i_l2_itf_1gafb55a0585024ff62223068638f5ddae5>` * p)

- :ref:`RTS_SIL2_OPMODE <group___cmp_s_i_l2_itf_1ga8ec0d1beda77d67a16f176efc93f82ff>` :ref:`SIL2OEMGetOperationMode <group___cmp_s_i_l2_itf_1gadf5a291c36c5b17da4958b7f32710d7b>` (void)

- void :ref:`sil2oemgetoperationmode <group___cmp_s_i_l2_itf_1ga88779429f4950703112f5e8621a0e90a>` (:ref:`sil2oemgetoperationmode_struct <group___cmp_s_i_l2_itf_1gaec5ca53d349f0ef78b1418c8eb39a038>` * p)

- RTS_UI32 :ref:`SIL2OEMGetCallerContext <group___cmp_s_i_l2_itf_1ga7430aa78af60c412d55bbda4af49bae1>` (void)

- void :ref:`sil2oemgetcallercontext <group___cmp_s_i_l2_itf_1ga565da012eaba510c94321df0c231b388>` (:ref:`sil2oemgetcallercontext_struct <group___cmp_s_i_l2_itf_1gadac65b6cbdf425a2ca9adfe4a5739f54>` * p)

- :ref:`RTS_SIL2_ADDRESSSTATE <group___cmp_s_i_l2_itf_1ga7c42f135fc3d77984fe85ab00867964d>` :ref:`SIL2OEMGetMemoryState <group___cmp_s_i_l2_itf_1ga12c8a7ab6630ef4eb56b0e12947abec9>` (RTS_UI8 * pAddress, RTS_UI32 ulLength)

- void :ref:`sil2oemgetmemorystate <group___cmp_s_i_l2_itf_1ga389453b9ba1ef8fa37b6b0f0d8c6e3db>` (:ref:`sil2oemgetmemorystate_struct <group___cmp_s_i_l2_itf_1ga5831096105e4dea679c5f815c586b571>` * p)

- RTS_RESULT :ref:`SIL2OEMStackIsValid <group___cmp_s_i_l2_itf_1ga255fd372de5d2411332f0ba94bc8cc41>` (void)

- void :ref:`sil2oemstackisvalid <group___cmp_s_i_l2_itf_1ga8695b89346da1c066f61b361fe120167>` (:ref:`sil2oemstackisvalid_struct <group___cmp_s_i_l2_itf_1gacb3ec2a1fea7432ae15bf315f5cf7f2c>` * p)

- RTS_RESULT :ref:`SIL2OEMExecuteNonSafetyJob <group___cmp_s_i_l2_itf_1gaa56ac50fb0426a44a8691acb560d6b31>` (void(*)(void *pParam) pfNonSafetyJob, void * pParam)

- RTS_RESULT :ref:`SIL2OEMExecuteNonSafetyJob2 <group___cmp_s_i_l2_itf_1ga28aabdcbbe7f639607257f717d8f21a4>` (void(*)(void *pParam) pfNonSafetyJob, void * pParam, RTS_SIZE iSize)

- void :ref:`sil2executenonsafetyjob <group___cmp_s_i_l2_itf_1gae02f2394cc394e0d4c125df523cf10c7>` (:ref:`sil2executenonsafetyjob_struct <group___cmp_s_i_l2_itf_1ga1f91d834f29f4032e422738171ea7cdb>` * p)

- RTS_RESULT :ref:`SIL2ControlFlowLog <group___cmp_s_i_l2_itf_1gac3c32bd11a71214ccc8890229375eff0>` (:ref:`SIL2_CONTROLFLOW <struct_s_i_l2___c_o_n_t_r_o_l_f_l_o_w>` * pControlFlow, RTS_UI8 uiCurrID)

- RTS_RESULT :ref:`SIL2ControlFlowCheck <group___cmp_s_i_l2_itf_1gaf37d65396d1dd8280b55256036da7599>` (:ref:`SIL2_CONTROLFLOW <struct_s_i_l2___c_o_n_t_r_o_l_f_l_o_w>` * pControlFlow, RTS_UI8 uiTotalNr)

.. _group___cmp_s_i_l2_itf-details:

Detailed Description
--------------------

Interface of CmpSIL2.

This is the interface of the SIL2 component. The CmpSIL2 is used to implement several savety related feates, which are (in this form) only necessary in safety PLCs, following the Safety SIL2 concept of 3S.

These features include the following:

- Safe loading of a bootproject

- Selftest Hooks

- Switch between safe- and unsafe contexts

- Safe logger interface

- Check functions, to determine the current context and operation mode

- Control Flow

1) Bootproject

In CoDeSys Control SIL2, the bootproject is always loaded from flash, and from there, only in the "compact download format", as it is used by CmpAppEmbedded. In a standard CoDeSys Control Runtime, the bootproject is implicitely loaded, by CmpApp/CmpAppEmbedded within an init hook, that is executed during the call of :ref:`CMInit() <group___c_m_itf_1gaf05b74542b88e19cba42aaf6048429a4>` at startup.

In CoDeSys Control SIL2, this implicite loading is deactivated. Instead, the OEM customer has to call :ref:`SIL2AppBoot() <group___cmp_s_i_l2_itf_1gad9316cce5790b2528afef1d6a4ecf0ac>` after :ref:`CMInit() <group___c_m_itf_1gaf05b74542b88e19cba42aaf6048429a4>` .

The reason for this constraint is, that the function :ref:`SIL2AppBoot() <group___cmp_s_i_l2_itf_1gad9316cce5790b2528afef1d6a4ecf0ac>` can make sure that the application is loaded with the constraints that are defined for a CoDeSys Control SIL2 system. Additionally, it is more safe to load the application after system startup is completed, because no unsafe init code is executed anymore after the application is loaded.

2) Selftest Hooks

Virtually every safety system needs some kind of self tests, which are either executed in every Safety Process Cycle, or within a specific time frame in the background.

While the selftests in the background need to be seperated into small chunks, which are executed in the COMM-Cycle (= Super Loop), the selftests at startup need to be executed at once, to prohibit the execution of the application when there is an error in the hardware or firmware.

3) Switches between safe, unsafe and system contexts

The current execution context is managed by the OEM customer. But, to have a clear interface to switch between the contexts in a higher level, and to be able to execute unsafe code when coming from a safe context.

4) Safe logger interface

The standard monitoring of CoDeSys as well as the standard logger are not safe. Therefore, they may not be usable for the Endcustomer in some circumstances.

To have a safe interface to transport messages and data from the CoDeSys Control Runtiem to the programming and debugging system, the component CmpSIL2 provides it's own logger interface, which secures the data from unintended modifications with a checksum.

4) Check functions

The CmpSIL2 interface specifies a few functions, which need to be implemented by the OEM customer to determine the current context or operation mode. This is mainly necessary to restrict the execution of several functions, but there might also be other use-cases in which those functions migth be helpful for the OEM himself.

5) Control Flow

The component CmpSIL2, provides a control flow logging mechanism, that is used for diagnostic purposes, to check the control flow of the IEC tasks, before they are passing their outputs to the I/O drivers.

This interface is generically designed, and may therefore also be used by the OEM customer, to log and check his own control flow of his subsystems.
::
    *				 Example usage:
    *				 SIL2_CONTROLFLOW s_IoMgrControlFlow[3];
    *				 SIL2ControlFlowLog(s_IoMgrControlFlow, 0);
    *				 SIL2ControlFlowLog(s_IoMgrControlFlow, 1);
    *				 SIL2ControlFlowLog(s_IoMgrControlFlow, 2);
    *				 SIL2ControlFlowCheck(s_IoMgrControlFlow, 3);
    *

**Copyright:**

Copyright (c) 2017-2018 CODESYS GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved.

Macro Definition Documentation
------------------------------
.. _group___cmp_s_i_l2_itf_1gacbb2abee3cdc282355427b83dbe0f1b1:

#define ITF_CmpSIL2
^^^^^^^^^^^^^^^^^^^

.. _group___cmp_s_i_l2_itf_1gae7a193f13df22d8b25f28d4b467dabef:

#define EXTITF_CmpSIL2
^^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___cmp_s_i_l2_itf_1ga098d3dc4b940bfe744ca4ddf62030ba4:

typedef RTS_UI32 RTS_SIL2_EXCEPTION
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_s_i_l2_itf_1ga8ec0d1beda77d67a16f176efc93f82ff:

typedef RTS_UI32 RTS_SIL2_OPMODE
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_s_i_l2_itf_1ga7c42f135fc3d77984fe85ab00867964d:

typedef RTS_UI32 RTS_SIL2_ADDRESSSTATE
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_s_i_l2_itf_1ga6930a286f5ce0a7fd755d30685e8bf01:

typedef struct tagsil2checkcallercontext_struct  sil2checkcallercontext_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

<SIL2>

sil2checkcallercontext

.. _group___cmp_s_i_l2_itf_1gac221eea67a0e3e178f3b24fd47e7445e:

typedef struct tagsil2copycodeguid_struct  sil2copycodeguid_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

<SIL2>

Function to copy the current CodeGuid to a given location (by Pointer)

Size is always 16 BYTES! The caller must provided this much space.

**Parameters**

+---------+--------------+-----------------------------------------------------------------------------+
| [in]    | pDstCodeGuid | Pointer where the guid should be copied to. RANGE=[NULL,VALID_PDSTCODEGUID] |
+---------+--------------+-----------------------------------------------------------------------------+

**Return values**

+---------------+-------------------------------+
| ERR_OK        | Copy was ok                   |
+---------------+-------------------------------+
| ERR_FAILED    | Could not get requested Guid. |
+---------------+-------------------------------+
| ERR_PARAMETER | Pointer invalid               |
+---------------+-------------------------------+

.. _group___cmp_s_i_l2_itf_1ga84e6aa1fc9ed4aaf32f5dce090aac9c2:

typedef struct tagsil2copydataguid_struct  sil2copydataguid_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

<SIL2>

Function to copy the current DataGuid to a given location (by Pointer)

Size is always 16 BYTES! The caller must provided this much space.

**Parameters**

+---------+--------------+-----------------------------------------------------------------------------+
| [in]    | pDstCodeGuid | Pointer where the guid should be copied to. RANGE=[NULL,VALID_PDSTDATAGUID] |
+---------+--------------+-----------------------------------------------------------------------------+

**Return values**

+---------------+-------------------------------+
| ERR_OK        | Copy was ok                   |
+---------------+-------------------------------+
| ERR_FAILED    | Could not get requested Guid. |
+---------------+-------------------------------+
| ERR_PARAMETER | Pointer invalid               |
+---------------+-------------------------------+

.. _group___cmp_s_i_l2_itf_1ga004979c693756139d3dd40cc6bb4a4f2:

typedef struct tagsil2oemexception_struct  sil2oemexception_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

<SIL2>

sil2oemexception

.. _group___cmp_s_i_l2_itf_1gafb55a0585024ff62223068638f5ddae5:

typedef struct tagsil2addlog_struct  sil2addlog_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

<SIL2>

sil2addlog

.. _group___cmp_s_i_l2_itf_1gaec5ca53d349f0ef78b1418c8eb39a038:

typedef struct tagsil2oemgetoperationmode_struct  sil2oemgetoperationmode_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

<SIL2>

sil2oemgetoperationmode

.. _group___cmp_s_i_l2_itf_1gadac65b6cbdf425a2ca9adfe4a5739f54:

typedef struct tagsil2oemgetcallercontext_struct  sil2oemgetcallercontext_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

<SIL2>

sil2oemgetcallercontext

.. _group___cmp_s_i_l2_itf_1ga5831096105e4dea679c5f815c586b571:

typedef struct tagsil2oemgetmemorystate_struct  sil2oemgetmemorystate_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

<SIL2>

sil2oemgetmemorystate

.. _group___cmp_s_i_l2_itf_1gacb3ec2a1fea7432ae15bf315f5cf7f2c:

typedef struct tagsil2oemstackisvalid_struct  sil2oemstackisvalid_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

<SIL2>

sil2oemstackisvalid

.. _group___cmp_s_i_l2_itf_1ga1f91d834f29f4032e422738171ea7cdb:

typedef struct tagsil2executenonsafetyjob_struct  sil2executenonsafetyjob_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

<SIL2>

sil2executenonsafetyjob

.. _group___cmp_s_i_l2_itf_1gadaf7d8c1f3474d7c29f66ffeb1065ee9:

typedef ICmpSIL2_C ICmpSIL2
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function Documentation
----------------------

.. _group___cmp_s_i_l2_itf_1gad9316cce5790b2528afef1d6a4ecf0ac:

RTS_RESULT SIL2AppBoot (void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to load and start a Bootproject from Flash

Application Note: The caller must ensure that this function is called only within a safe context!

The SIL2 Component only loads bootprojects, which are in the "compact download format" format, and those only from flash. This format includes an checksum to check the consistency of that bootproject. Before loading the bootproject the CmpSIL2 checks this CRC to make sure that the bootproject was not corrupted after CoDeSys Programming System created it. As the data-initialization is done from bootproject-code, the CRC also covers the data in the bootproject. The main steps of loading the bootproject are:

- Create an application with the given name

- Get the Startaddress of the Bootproject in Flash

- Allocate Application Areas (Code - Flash, Data - :ref:`SysMemAllocArea() <group___cmp_iec_var_access_dep_1ga9011b292f77f55482598e12b778fd462>` )

- Check the Bootproject (Bootproject Type, Target ID, Type, Version) and create GUIDs

- Call the Data-Initialization-Code from the bootproject (Relocation, Code Init, Download POU, Global Init, Global Exit)

- Set the Application State to loaded

- If everything is correct, start the Application

Function has no function parameter, but behavior is also dependant on state of bootproject

**Parameters**

+---------+------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | bExtFuncsAreValid      | ***PSEUDO*** Specifies if the application references an unsafe or non-existent external function. RANGE=[TRUE,FALSE]                                                                                                                                                                                                                                                                    |
+---------+------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | bAreaIsValid           | ***PSEUDO*** Specifies if the Areas of the bootapplication are valid or not. RANGE=[TRUE,FALSE]                                                                                                                                                                                                                                                                                         |
+---------+------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | Bootproject.CRC        | ***PSEUDO*** Bootproject in flash, States: valid CRC, invalid CRC RANGE=[BOOTP_NO_PROJECT,BOOTP_VALID_CRC,BOOTP_INVALID_CRC]                                                                                                                                                                                                                                                            |
+---------+------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | Bootproject.Code       | ***PSEUDO*** valid Code, idle Code (harmless), invalid Code producing Exception RANGE=[INVALID_AREA,INVALID_DEV_VERSION,RELOC_VALID,RELOC_IDLE,RELOC_EXCEPTION,CODEINIT_VALID,CODEINIT_IDLE,CODEINIT_EXCEPTION,GLOBALINIT_VALID,GLOBALINIT_IDLE,GLOBALINIT_EXCEPTION,DOWNLOAD_POU_VALID,DOWNLOAD_POU_IDLE,DOWNLOAD_POU_EXCEPTION,GLOBALEXIT_VALID,GLOBALEXIT_IDLE,GLOBALEXIT_EXCEPTION] |
+---------+------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | Bootproject.TargetType | ***PSEUDO*** Target Type RANGE=[INVALID_TARGET_TYPE,VALID_TARGET_TYPE]                                                                                                                                                                                                                                                                                                                  |
+---------+------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | Bootproject.TargetID   | ***PSEUDO*** Target ID RANGE=[INVALID_TARGET_ID,VALID_TARGET_ID]                                                                                                                                                                                                                                                                                                                        |
+---------+------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | bExceptionGenerated    | ***PSEUDO*** TRUE, when an exception occured, during execution RANGE=[FALSE,TRUE]                                                                                                                                                                                                                                                                                                       |
+---------+------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ERR_OK               | Load Bootproject successful                                                                                                                                                                      |
+----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ERR_NO_OBJECT        | No Bootproject in Flash                                                                                                                                                                          |
+----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ERR_FAILED           | Error while loading Bootapp (memory area could not be allocated, CRC was invalid, or an external function, which was referenced by the application, is not listed in the list of safe functions) |
+----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ERR_TYPE_MISMATCH    | wrong DeviceType in Bootproject                                                                                                                                                                  |
+----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ERR_ID_MISMATCH      | wrong DeviceId in Bootproject                                                                                                                                                                    |
+----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ERR_VERSION_MISMATCH | wrong DeviceVersion in Bootproject                                                                                                                                                               |
+----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Result of loading bootproject

.. _group___cmp_s_i_l2_itf_1gadfab76ab0d96e0384b79b59a6e52d1a5:

RTS_RESULT SIL2CheckCallerContext (RTS_UI32 ulCallerContextExpected)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to check the current Caller Context of the Runtime

Expected Context is checked vs the current context, and an exception is thrown if they are different.

**Parameters**

+---------+-------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ulCallerContextExpected | Expected Context, that is checked against current context. RANGE=[RTS_SIL2_CALLERCTX_SAFE,RTS_SIL2_CALLERCTX_UNSAFE,RTS_SIL2_CALLERCTX_ERROR] |
+---------+-------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | bSafeContext            | ***PSEUDO*** Specifies if the context is safe or unsafe. RANGE=[TRUE,FALSE]                                                                   |
+---------+-------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+-----------------------------------------------------------------------+
| ERR_OK        | Context is ok                                                         |
+---------------+-----------------------------------------------------------------------+
| ERR_FAILED    | Context could not be checked successfully, an internal error occured. |
+---------------+-----------------------------------------------------------------------+
| ERR_EXCEPTION | Contexts are different                                                |
+---------------+-----------------------------------------------------------------------+

**Returns:**

Returns if comparision was ok or not, or if problem occured.

.. _group___cmp_s_i_l2_itf_1ga4d1664aa0eb2634f7aeffcf2c1a5187a:

void sil2checkcallercontext (sil2checkcallercontext_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_s_i_l2_itf_1ga91f7dcfcbc0f78d10bb89b7c881ac5f5:

void sil2copycodeguid (sil2copycodeguid_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_s_i_l2_itf_1ga25b16f1d0d03c5b686a8834e8da7ea5f:

void sil2copydataguid (sil2copydataguid_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_s_i_l2_itf_1ga62576d17b76bd27547fddc0f0f7f5665:

RTS_RESULT SIL2OEMEnterDebugMode (void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

<SIL2>

Function to set Runtime to DebugMode

This function is called from save context after receiving an "EnterDebugMode" online service to set runtime to debug mode

As this function is only called from within save context no further check is required

**Parameters**

+---------+-----------------------+-----------------------------------------------------------------------------------------------------------------+
| [in]    | SIL2OpMode            | ***PSEUDO*** Specifies the current operation mode of the PLC RANGE=[RTS_SIL2_OPMODE_SAFE,RTS_SIL2_OPMODE_DEBUG] |
+---------+-----------------------+-----------------------------------------------------------------------------------------------------------------+
| [in]    | SIL2PollOnlineService | ***PSEUDO*** Specifies if the function PollOnlineServices is called or not RANGE=[TRUE,FALSE]                   |
+---------+-----------------------+-----------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+---------------------------------------+
| ERR_OK        | Runtime could be set to Debugmode     |
+---------------+---------------------------------------+
| ERR_NO_CHANGE | Runtime was already set to Debugmode  |
+---------------+---------------------------------------+
| ERR_FAILED    | Runtime could not be set to Debugmode |
+---------------+---------------------------------------+

**Returns:**

Result of Setting Mode

.. _group___cmp_s_i_l2_itf_1ga18773ad5b541c2d47a6b9c6321379f77:

void SIL2OEMException (RTS_SIL2_EXCEPTION Exception)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to set Runtime into Exception-Mode

Whenever the runtime detects invalid behaviour, values or states, it calls this function with a specific Exception Code.

Depending on the implementation this function may not return!

**Parameters**


| [in]    | Exception           | Exception Code RANGE=[RTS_SIL2_EXCEPTION_LOADBOOTPROJECT,RTS_SIL2_EXCEPTION_BOOTPROJECT_INVALID,RTS_SIL2_EXCEPTION_COMPACTPREPARECODE,RTS_SIL2_EXCEPTION_COMPACTFINISH,RTS_SIL2_EXCEPTION_EXTREFS,RTS_SIL2_EXCEPTION_RUNAFTERDOWNLOAD,RTS_SIL2_EXCEPTION_MEMORY,RTS_SIL2_EXCEPTION_RUNTIME_INIT,RTS_SIL2_EXCEPTION_SCHED_WD,RTS_SIL2_EXCEPTION_CRC_CYCLIC,RTS_SIL2_EXCEPTION_CRC_COMPLETE,RTS_SIL2_EXCEPTION_CRC_INIT,RTS_SIL2_EXCEPTION_LIFE_COUNTER,RTS_SIL2_EXCEPTION_CALLERCONTEXT] |

| [out]   | bExceptionGenerated | ***PSEUDO*** TRUE, when an exception occured, during execution RANGE=[FALSE,TRUE]                                                                                                                                                                                                                                                                                                                                                                                                       |


.. _group___cmp_s_i_l2_itf_1gadf1587656481bdac7afb3f2f5ba571b0:

void sil2oemexception (sil2oemexception_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_s_i_l2_itf_1ga5f306b85e84cd1cb52c10f077489967f:

RTS_RESULT SIL2AddLog (char *pszMessage, RTS_UI32 ulLogId)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to add a secure Logentry

These secure logentries don't use the standard Logging mechanism! With this function it is possible to add secure messages to a Messagequeue within CmpSIL2. This Messagequeue can be fetched by an Onlineservice from the SIL2 Programmingsystemplugin. The messages are stored and transmitted with a CRC to provide a secure logging. The maximal length of the string is restricted (CMPSIL2_LOGADD_MAX_STRLEN).

**Return values**

+---------------+--------------------------------------------------------------------------------+
| ERR_FAILED    | Entry could not be added to log                                                |
+---------------+--------------------------------------------------------------------------------+
| ERR_PARAMETER | Message pointer was NULL, or message was longer than CMPSIL2_LOGADD_MAX_STRLEN |
+---------------+--------------------------------------------------------------------------------+
| ERR_OK        | Entry could be added to log correctly                                          |
+---------------+--------------------------------------------------------------------------------+

**Parameters**

+---------+------------+------------------------------------------------------------------------------------------------------------------------+
| [in]    | pszMessage | String containing the message, must not be longer than CMPSIL2_LOGADD_MAX_STRLEN RANGE=[NULL,VALID_STRING,LONG_STRING] |
+---------+------------+------------------------------------------------------------------------------------------------------------------------+
| [in]    | ulLogId    | Id for own Identification purposes RANGE=[RTS_RANGE_OF_ULONG]                                                          |
+---------+------------+------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Result of adding secure Logentry

.. _group___cmp_s_i_l2_itf_1ga58dd0a10a47331ec3e336ffdcc6864cb:

void sil2addlog (sil2addlog_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_s_i_l2_itf_1gadf5a291c36c5b17da4958b7f32710d7b:

RTS_SIL2_OPMODE SIL2OEMGetOperationMode (void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to get the Operationmode of the Runtime

Returns RTS_SIL2_OPMODE_DEBUG or RTS_SIL2_OPMODE_SAFE depending on Operationmode, returns RTS_SIL2_OPMODE_ERROR if error occured or if in unknown state

**Parameters**

+---------+------------+-----------------------------------------------------------------------------------------------------------------+
| [in]    | SIL2OpMode | ***PSEUDO*** Specifies the current operation mode of the PLC RANGE=[RTS_SIL2_OPMODE_SAFE,RTS_SIL2_OPMODE_DEBUG] |
+---------+------------+-----------------------------------------------------------------------------------------------------------------+

**Returns:**

Returns SIL2 Operation Mode: RTS_SIL2_OPMODE_DEBUG or RTS_SIL2_OPMODE_SAFE if operation was successful, RTS_SIL2_OPMODE_ERROR if error occured or if in unknown state!

.. _group___cmp_s_i_l2_itf_1ga88779429f4950703112f5e8621a0e90a:

void sil2oemgetoperationmode (sil2oemgetoperationmode_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_s_i_l2_itf_1ga7430aa78af60c412d55bbda4af49bae1:

RTS_UI32 SIL2OEMGetCallerContext (void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to get the current Caller Context of the Runtime

Expected return the current context, and an exception is thrown if they are different.

**Parameters**

+---------+------------+------------------------------------------------------------------------+
| [in]    | bDebugMode | ***PSEUDO*** Specifies if run in debug mode or not. RANGE=[TRUE,FALSE] |
+---------+------------+------------------------------------------------------------------------+

**Return values**

+------------+-----------------------------------------------------------------------+
| ERR_OK     | Context is ok                                                         |
+------------+-----------------------------------------------------------------------+
| ERR_FAILED | Context could not be checked successfully, an internal error occured. |
+------------+-----------------------------------------------------------------------+

**Returns:**

Returns if comparision was ok or not.

.. _group___cmp_s_i_l2_itf_1ga565da012eaba510c94321df0c231b388:

void sil2oemgetcallercontext (sil2oemgetcallercontext_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_s_i_l2_itf_1ga12c8a7ab6630ef4eb56b0e12947abec9:

RTS_SIL2_ADDRESSSTATE SIL2OEMGetMemoryState (RTS_UI8 *pAddress, RTS_UI32 ulLength)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to get the MemoryState (safe/unsafe) for a specific Memoryrange

The Addressrange where pAddress points to with the length of ulLength is checked and the corresponding RTS_SIL2_ADDRESSSTATE is returned: RTS_SIL2_ADDRESS_SAFE or RTS_SIL2_ADDRESS_UNSAFE

**Parameters**

+---------+----------+--------------------------------------------------------------------------------------------+
| [in]    | pAddress | Pointer to Addressrange to check for Addressstate RANGE=[NULL,SAFE_POINTER,UNSAFE_POINTER] |
+---------+----------+--------------------------------------------------------------------------------------------+
| [in]    | ulLength | Length of Addressrange to check for Addressstate RANGE=[0,VALID_POINTER_SIZE,ULONG_MAX]    |
+---------+----------+--------------------------------------------------------------------------------------------+

**Return values**

+-------------------------+--------------------------------------+
| RTS_SIL2_ADDRESS_SAFE   | This Addressrange is in Safe Range   |
+-------------------------+--------------------------------------+
| RTS_SIL2_ADDRESS_UNSAFE | This Addressrange is in Unsafe Range |
+-------------------------+--------------------------------------+

**Returns:**

Result for Memoryaddress check

.. _group___cmp_s_i_l2_itf_1ga389453b9ba1ef8fa37b6b0f0d8c6e3db:

void sil2oemgetmemorystate (sil2oemgetmemorystate_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_s_i_l2_itf_1ga255fd372de5d2411332f0ba94bc8cc41:

RTS_RESULT SIL2OEMStackIsValid (void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to check if Stack is Valid

This function is called before entering the Safemode, it returns ERR_OK if the stack is valid, and ERR_FAILED if an error occured or was detected!

**Parameters**

+---------+---------------+-----------------------------------------------------------------------+
| [in]    | bStackIsValid | ***PSEUDO*** Define if the current stack is valid. RANGE=[FALSE,TRUE] |
+---------+---------------+-----------------------------------------------------------------------+

**Return values**

+------------+--------------------------------+
| ERR_OK     | Check stack was successful     |
+------------+--------------------------------+
| ERR_FAILED | Check stack was not successful |
+------------+--------------------------------+

**Returns:**

Result of Stackcheck

.. _group___cmp_s_i_l2_itf_1ga8695b89346da1c066f61b361fe120167:

void sil2oemstackisvalid (sil2oemstackisvalid_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_s_i_l2_itf_1gaa56ac50fb0426a44a8691acb560d6b31:

RTS_RESULT SIL2OEMExecuteNonSafetyJob (void(*pfNonSafetyJob)(void *pParam), void *pParam)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to delegate a Non-Safety Job

This function can be used to delegate a non-safety job from within the safe-context to be executed from the Unsafe context

The function pfNonSafetyJob has to be called from Unsafe Context with pParam as argument

**Parameters**

+---------+----------------+------------------------------------------------------------------------------------------------------------+
| [in]    | pfNonSafetyJob | Function Pointer to NonSafety Job RANGE=[NULL,VALID_NONSAFETY_FUNCTION]                                    |
+---------+----------------+------------------------------------------------------------------------------------------------------------+
| [in]    | pParam         | Pointer to Parameter for NonSafety Job RANGE=[NULL,VALID_POINTER]                                          |
+---------+----------------+------------------------------------------------------------------------------------------------------------+
| [in]    | uiCallerCtx    | ***PSEUDO*** Specifies the context of the caller RANGE=[RTS_SIL2_CALLERCTX_SAFE,RTS_SIL2_CALLERCTX_UNSAFE] |
+---------+----------------+------------------------------------------------------------------------------------------------------------+

**Return values**

+------------+------------------------+
| ERR_OK     | Job was done correctly |
+------------+------------------------+
| ERR_FAILED | Job could not be done  |
+------------+------------------------+

**Returns:**

Result of delegating a Non-Safety Job

.. _group___cmp_s_i_l2_itf_1ga28aabdcbbe7f639607257f717d8f21a4:

RTS_RESULT SIL2OEMExecuteNonSafetyJob2 (void(*pfNonSafetyJob)(void *pParam), void *pParam, RTS_SIZE iSize)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to delegate a Non-Safety Job

This function behaves the exact same way as :ref:`SIL2OEMExecuteNonSafetyJob() <group___cmp_s_i_l2_itf_1gaa56ac50fb0426a44a8691acb560d6b31>` , but it provides also the size of the parameter to the function. This way, the OEM customer is able to copy the parameter temporarily to a shared memory, message box or a different stack.

**Parameters**

+---------+----------------+------------------------------------------------------------------------------------------------------------+
| [in]    | pfNonSafetyJob | Function Pointer to NonSafety Job RANGE=[NULL,VALID_NONSAFETY_FUNCTION]                                    |
+---------+----------------+------------------------------------------------------------------------------------------------------------+
| [in]    | pParam         | Pointer to Parameter for NonSafety Job RANGE=[NULL,VALID_POINTER]                                          |
+---------+----------------+------------------------------------------------------------------------------------------------------------+
| [in]    | iSize          | Size of Parameter for NonSafety Job RANGE=[0..VALID_PARAM_SIZE]                                            |
+---------+----------------+------------------------------------------------------------------------------------------------------------+
| [in]    | uiCallerCtx    | ***PSEUDO*** Specifies the context of the caller RANGE=[RTS_SIL2_CALLERCTX_SAFE,RTS_SIL2_CALLERCTX_UNSAFE] |
+---------+----------------+------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+-----------------------------------------------------------------------------+
| ERR_OK        | Job was done correctly                                                      |
+---------------+-----------------------------------------------------------------------------+
| ERR_PARAMETER | A parameter was passed, but the size is 0 or parameter is NULL and size > 0 |
+---------------+-----------------------------------------------------------------------------+
| ERR_FAILED    | Job could not be done                                                       |
+---------------+-----------------------------------------------------------------------------+

**Returns:**

Result of delegating a Non-Safety Job

.. _group___cmp_s_i_l2_itf_1gae02f2394cc394e0d4c125df523cf10c7:

void sil2executenonsafetyjob (sil2executenonsafetyjob_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_s_i_l2_itf_1gac3c32bd11a71214ccc8890229375eff0:

RTS_RESULT SIL2ControlFlowLog (SIL2_CONTROLFLOW *pControlFlow, RTS_UI8 uiCurrID)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to log the program flow

The caller is responsible for providing buffer for storing the control flow data. After having logged, the function SIL2ControlFlowCheck can be used to check if all control positions have been logged in the correct order.

The Log IDs may not be out of range of the specified log buffer.

**Parameters**

+---------+--------------+----------------------------------------------------------------------------+
| [in]    | pControlFlow | Buffer to store control flow data in RANGE=[NULL,VALID_CONTROLFLOW_BUFFER] |
+---------+--------------+----------------------------------------------------------------------------+
| [in]    | uiCurrID     | Current Log Nr RANGE=[0..NUM_OF_CONTROLFLOW_LOGENTRIES]                    |
+---------+--------------+----------------------------------------------------------------------------+

**Return values**

+--------------+---------------------------------------------+
| ERR_OK       | successfully added logentry to control flow |
+--------------+---------------------------------------------+
| ERR_NOBUFFER | pControlFlow was NULL                       |
+--------------+---------------------------------------------+

**Returns:**

Result of Log to control-flow

.. _group___cmp_s_i_l2_itf_1gaf37d65396d1dd8280b55256036da7599:

RTS_RESULT SIL2ControlFlowCheck (SIL2_CONTROLFLOW *pControlFlow, RTS_UI8 uiTotalNr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to check the previously logged program flow

The caller is responsible for providing buffer for storing the control flow data. After having logged, the function SIL2ControlFlowCheck can be used to check if all control positions have been logged in the correct order.

The number of IDs may not be out of range of the specified log buffer.

**Parameters**

+---------+--------------+-------------------------------------------------------------------------------------------------------+
| [in]    | pControlFlow | Buffer to store control flow data in RANGE=[NULL,VALID_CONTROLFLOW_BUFFER,INVALID_CONTROLFLOW_BUFFER] |
+---------+--------------+-------------------------------------------------------------------------------------------------------+
| [in]    | uiTotalNr    | Nr of Logs expected or to check RANGE=[0,NUM_OF_CONTROLFLOW_LOGENTRIES]                               |
+---------+--------------+-------------------------------------------------------------------------------------------------------+

**Return values**

+-------------------+-------------------------------------------------------------------+
| ERR_OK            | all logentries were added in the correct order, check successfull |
+-------------------+-------------------------------------------------------------------+
| ERR_OUT_OF_LIMITS | uiTotalNr exceeds buffersize                                      |
+-------------------+-------------------------------------------------------------------+
| ERR_NOBUFFER      | pControlFlow is NULL                                              |
+-------------------+-------------------------------------------------------------------+
| ERR_FAILED        | check failed, order wrong or not all logentries correct           |
+-------------------+-------------------------------------------------------------------+

**Returns:**

Result of control-flow check

.. last line of group.rst template
.. last line of composition.rst template


