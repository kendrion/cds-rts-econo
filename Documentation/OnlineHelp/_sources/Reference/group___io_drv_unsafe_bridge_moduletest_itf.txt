.. first line of composition.rst template

.. first line of group.rst template

.. _group___io_drv_unsafe_bridge_moduletest_itf:

==============================
IoDrvUnsafeBridgeModuletestItf
==============================

Interface of IoDrvUnsafeBridgeModuletest. :ref:`More... <group___io_drv_unsafe_bridge_moduletest_itf-details>`

Data Structures
---------------

- struct :ref:`IIoDrvUnsafeBridgeModuletest_C <struct_i_io_drv_unsafe_bridge_moduletest___c>`

Macros
------

- #define :ref:`ITF_IoDrvUnsafeBridgeModuletest <group___io_drv_unsafe_bridge_moduletest_itf_1ga33577801f04168ce9c765c0150f0080e>`

- #define :ref:`EXTITF_IoDrvUnsafeBridgeModuletest <group___io_drv_unsafe_bridge_moduletest_itf_1ga1ffd1b3704afc2270e3a2b7327bd59ad>`

Typedefs
--------

- typedef :ref:`IIoDrvUnsafeBridgeModuletest_C <struct_i_io_drv_unsafe_bridge_moduletest___c>` :ref:`IIoDrvUnsafeBridgeModuletest <group___io_drv_unsafe_bridge_moduletest_itf_1gad8272e7ba55496b7af814051279059fe>`

Functions
---------

- STATICITF_DEF RTS_HANDLE :ref:`IoDrvCreate <group___io_drv_unsafe_bridge_moduletest_itf_1ga47ade8ad65e79bc0200f687e84196fb6>` (RTS_HANDLE hIIoDrv, CLASSID ClassId, int iId, RTS_RESULT * pResult)

- STATICITF_DEF RTS_RESULT :ref:`IoDrvDelete <group___io_drv_unsafe_bridge_moduletest_itf_1ga52b68304d7f829d8f27b3260c5c7abb2>` (RTS_HANDLE hIoDrv, RTS_HANDLE hIIoDrv)

- STATICITF_DEF RTS_RESULT :ref:`IoDrvGetInfo <group___io_drv_unsafe_bridge_moduletest_itf_1ga1fa333efd972b151d113b26a9fbf7bfa>` (RTS_HANDLE hIoDrv, :ref:`IoDrvInfo <group___cmp_io_drv_itf___channel_map_list_swapping_information_1gac069193c4451dbf1c092751626ad262a>` ** ppInfo)

- STATICITF_DEF RTS_RESULT :ref:`IoDrvGetModuleDiagnosis <group___io_drv_unsafe_bridge_moduletest_itf_1gaca801830078ea9485613f2491e35575d>` (RTS_HANDLE hIoDrv, :ref:`IoConfigConnector <group___cmp_io_mgr_itf_1ga1c9f05476fb9e57a5583f645a12956be>` * pConnector)

- STATICITF_DEF RTS_RESULT :ref:`IoDrvIdentify <group___io_drv_unsafe_bridge_moduletest_itf_1ga9edcf3040059d39a18629fd4633fd650>` (RTS_HANDLE hIoDrv, :ref:`IoConfigConnector <group___cmp_io_mgr_itf_1ga1c9f05476fb9e57a5583f645a12956be>` * pConnector)

- STATICITF_DEF RTS_RESULT :ref:`IoDrvReadInputs <group___io_drv_unsafe_bridge_moduletest_itf_1ga48f414affb4bb84e803e08b48eaa1ea1>` (RTS_HANDLE hIoDrv, :ref:`IoConfigConnectorMap <group___cmp_io_mgr_itf_1ga17d944e4f292a8b9c38e44328f586e33>` * pConnectorMapList, int nCount)

- STATICITF_DEF RTS_RESULT :ref:`IoDrvScanModules <group___io_drv_unsafe_bridge_moduletest_itf_1ga5f1ba7a16dc1fa5b8f588f1978a47503>` (RTS_HANDLE hIoDrv, :ref:`IoConfigConnector <group___cmp_io_mgr_itf_1ga1c9f05476fb9e57a5583f645a12956be>` * pConnector, :ref:`IoConfigConnector <group___cmp_io_mgr_itf_1ga1c9f05476fb9e57a5583f645a12956be>` ** ppConnectorList, int * pnCount)

- STATICITF_DEF RTS_RESULT :ref:`IoDrvStartBusCycle <group___io_drv_unsafe_bridge_moduletest_itf_1ga7712716bf87ce241c22958db3aa19bcc>` (RTS_HANDLE hIoDrv, :ref:`IoConfigConnector <group___cmp_io_mgr_itf_1ga1c9f05476fb9e57a5583f645a12956be>` * pConnector)

- STATICITF_DEF RTS_RESULT :ref:`IoDrvUpdateConfiguration <group___io_drv_unsafe_bridge_moduletest_itf_1ga56a1f59dfd7963c606c8289edc2c3b8b>` (RTS_HANDLE hIoDrv, :ref:`IoConfigConnector <group___cmp_io_mgr_itf_1ga1c9f05476fb9e57a5583f645a12956be>` * pConnectorList, int nCount)

- STATICITF_DEF RTS_RESULT :ref:`IoDrvUpdateMapping <group___io_drv_unsafe_bridge_moduletest_itf_1ga39e0e4790272987e84b31f6b5fb5d99f>` (RTS_HANDLE hIoDrv, :ref:`IoConfigTaskMap <group___cmp_io_mgr_itf_1ga24e1b19811629d55c3187dd61411df95>` * pTaskMapList, int nCount)

- STATICITF_DEF RTS_RESULT :ref:`IoDrvWatchdogTrigger <group___io_drv_unsafe_bridge_moduletest_itf_1ga7abe6c7aa98b08694b5676deb5ff79ab>` (RTS_HANDLE hIoDrv, :ref:`IoConfigConnector <group___cmp_io_mgr_itf_1ga1c9f05476fb9e57a5583f645a12956be>` * pConnector)

- STATICITF_DEF RTS_RESULT :ref:`IoDrvWriteOutputs <group___io_drv_unsafe_bridge_moduletest_itf_1gae25ad6b1f53f6935b17125d9757aad45>` (RTS_HANDLE hIoDrv, :ref:`IoConfigConnectorMap <group___cmp_io_mgr_itf_1ga17d944e4f292a8b9c38e44328f586e33>` * pConnectorMapList, int nCount)

- STATICITF_DEF RTS_RESULT :ref:`IoDrvReadParameter <group___io_drv_unsafe_bridge_moduletest_itf_1ga9c410decb95bdf9ae25ae1bad958cc72>` (RTS_HANDLE hDevice, :ref:`IoConfigConnector <group___cmp_io_mgr_itf_1ga1c9f05476fb9e57a5583f645a12956be>` * pConnector, :ref:`IoConfigParameter <group___cmp_io_mgr_itf_1gaa43db625c1bf83b11bac9f91dbf72a38>` * pParameter, void * pData, RTS_SIZE ulBitSize, RTS_SIZE ulBitOffset)

- STATICITF_DEF RTS_RESULT :ref:`IoDrvWriteParameter <group___io_drv_unsafe_bridge_moduletest_itf_1ga761ab3dfea1fc68bedba1d2949e9ebea>` (RTS_HANDLE hDevice, :ref:`IoConfigConnector <group___cmp_io_mgr_itf_1ga1c9f05476fb9e57a5583f645a12956be>` * pConnector, :ref:`IoConfigParameter <group___cmp_io_mgr_itf_1gaa43db625c1bf83b11bac9f91dbf72a38>` * pParameter, void * pData, RTS_SIZE ulBitSize, RTS_SIZE ulBitOffset)

.. _group___io_drv_unsafe_bridge_moduletest_itf-details:

Detailed Description
--------------------

Interface of IoDrvUnsafeBridgeModuletest.

IO-driver interface implementation for unsafe IO drivers.

This interface file is only used to create module tests for the IoDrvUnsafeBridge implementation.

The IoDrvUnsafeBridge is used for usafe I/O drivers written in C as well as unsafe I/O drivers written in IEC.

**Copyright:**

Copyright (c) 2017-2018 CODESYS GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved.

Macro Definition Documentation
------------------------------
.. _group___io_drv_unsafe_bridge_moduletest_itf_1ga33577801f04168ce9c765c0150f0080e:

#define ITF_IoDrvUnsafeBridgeModuletest
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___io_drv_unsafe_bridge_moduletest_itf_1ga1ffd1b3704afc2270e3a2b7327bd59ad:

#define EXTITF_IoDrvUnsafeBridgeModuletest
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___io_drv_unsafe_bridge_moduletest_itf_1gad8272e7ba55496b7af814051279059fe:

typedef IIoDrvUnsafeBridgeModuletest_C IIoDrvUnsafeBridgeModuletest
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function Documentation
----------------------

.. _group___io_drv_unsafe_bridge_moduletest_itf_1ga47ade8ad65e79bc0200f687e84196fb6:

STATICITF_DEF RTS_HANDLE IoDrvCreate (RTS_HANDLE hIIoDrv, CLASSID ClassId, int iId, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create a new I/O driver instance.

This function is obsolete, because the instance has to be created by the caller before he registers the I/O driver in the I/O Manager.

**Parameters**

+---------+---------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hIIoDrv | Handle to the IO-driver interface. Must be 0 and is filled automatically by calling the CAL_IoDrvCreate() macro! RANGE=[RTS_INVALID_HANDLE,VALID_IIODRIVER_HANDLE] |
+---------+---------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ClassId | ClassID of the driver. See "Class IDs" section in CmpItf.h or in the Dep.h file of the IO-driver. RANGE=[RTS_RANGE_OF_RTS_UI32]                                    |
+---------+---------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | iId     | Instance number of the IO-driver RANGE=[RTS_I16_MIN,RTS_I16_MIN+1,0,RTS_I16_MAX/2,RTS_I16_MAX]                                                                     |
+---------+---------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult | Pointer to error code                                                                                                                                              |
+---------+---------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Should return RTS_INVALID_HANDLE

**Return values**

+--------------------+----------------------------+
| ERR_NOTIMPLEMENTED | Not provided by the driver |
+--------------------+----------------------------+

.. _group___io_drv_unsafe_bridge_moduletest_itf_1ga52b68304d7f829d8f27b3260c5c7abb2:

STATICITF_DEF RTS_RESULT IoDrvDelete (RTS_HANDLE hIoDrv, RTS_HANDLE hIIoDrv)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Delete an I/O driver instance.

This function is obsolete, because the instance has to be deleted by the caller after he unregisters the I/O driver from the I/O Manager.

Delete an IO-driver instance

**Parameters**

+---------+---------+-------------------------------------------------------------------------------------------+
| [in]    | hIoDrv  | Handle to the IO-driver instance RANGE=[RTS_INVALID_HANDLE,VALID_IODRIVER_HANDLE]         |
+---------+---------+-------------------------------------------------------------------------------------------+
| [in]    | hIIoDrv | Handle of the ITFID_ICmpIoDrv interface RANGE=[RTS_INVALID_HANDLE,VALID_IIODRIVER_HANDLE] |
+---------+---------+-------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+--------------------+----------------------------+
| ERR_NOTIMPLEMENTED | Not provided by the driver |
+--------------------+----------------------------+

.. _group___io_drv_unsafe_bridge_moduletest_itf_1ga1fa333efd972b151d113b26a9fbf7bfa:

STATICITF_DEF RTS_RESULT IoDrvGetInfo (RTS_HANDLE hIoDrv, IoDrvInfo **ppInfo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get a driver specific info structure.

This structure contains IDs and names of the driver.

In the IoDrvUnsafeBridge implementation, the info structure of the IoDrvUnsafeBridge is returned.

**Parameters**

+---------+--------+-------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hIoDrv | Handle to the IO-driver instance RANGE=[RTS_INVALID_HANDLE,VALID_IODRIVER_HANDLE]                                                               |
+---------+--------+-------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | ppInfo | Pointer to pointer to the driver info. Pointer must be set by the driver to its internal driver info structure! RANGE=[NULL,VALID_IODRVIERINFO] |
+---------+--------+-------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+----------------------------------------------+
| ERR_OK        | The info structure was returned successfully |
+---------------+----------------------------------------------+
| ERR_PARAMETER | hIoDrv was invalid orppInfo was NULL         |
+---------------+----------------------------------------------+

.. _group___io_drv_unsafe_bridge_moduletest_itf_1gaca801830078ea9485613f2491e35575d:

STATICITF_DEF RTS_RESULT IoDrvGetModuleDiagnosis (RTS_HANDLE hIoDrv, IoConfigConnector *pConnector)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Update Connector Flags in the device tree.

The driver should write the current diagnostic information (available, no driver, bus error,...) with the function IoDrvSetModuleDiagnosis() to the I/O connector.

This function can be used by other components or from the IEC application to update the diagnostic flags of the connector. To update the status from the driver, it has to call this function manually.

The IoDrvUnsafeBridge implementation calls the corresponding unsafe IO driver, which is responsible for the given connector, with the corresponding copied IO configuration via SIL2OEMExecuteNonSafetyJob function and copies the updated flags to the original configuration afterwards.

**Parameters**

+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | hIoDrv               | Handle to the IO-driver instance RANGE=[RTS_INVALID_HANDLE,VALID_IODRIVER_HANDLE]                                 |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | pConnector           | Pointer to the connector, that the diagostic information is requested RANGE=[NULL,VALID_CONNECTOR]                |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | bConnectorCopied     | ***PSEUDO*** Given connector was copied before. RANGE=[TRUE,FALSE]                                                |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | bIoDrvStubRegistered | ***PSEUDO*** Is IoDrvStub registered for this connector in the corresponding copied connector. RANGE=[TRUE,FALSE] |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [out]   | IoDrvReturnValue     | ***PSEUDO*** Return value, which should be returned by called IoDrvStub                                           |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | bRealIODrvFctFailed  | ***PSEUDO*** The IoDrvGetModuleDiagnosis function of the real IO driver returned error. RANGE=[TRUE,FALSE]        |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+-------------------------------------------+
| ERR_OK        | The flags have been updated               |
+---------------+-------------------------------------------+
| ERR_PARAMETER | hIoDrv was invalid or pConnector was NULL |
+---------------+-------------------------------------------+
| ERR_FAILED    | Internal Error                            |
+---------------+-------------------------------------------+

.. _group___io_drv_unsafe_bridge_moduletest_itf_1ga9edcf3040059d39a18629fd4633fd650:

STATICITF_DEF RTS_RESULT IoDrvIdentify (RTS_HANDLE hIoDrv, IoConfigConnector *pConnector)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Identify plugable I/O card or slave.

If the configurator supports scanning of modules, this function can be used our of a communication service to identify a module on the bus or locally on the PLC. This This might be done by a blinking LED or whatever the hardware supports.

This function is not implemented in the IoDrvUnsafeBridge implementation and ERR_NOTIMPLEMENTED is returned.

**Parameters**

+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | hIoDrv               | Handle to the IO-driver instance RANGE=[RTS_INVALID_HANDLE,VALID_IODRIVER_HANDLE]                                 |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | pConnector           | Pointer to the connector, that should identify itself physically RANGE=[NULL,VALID_CONNECTOR]                     |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | bConnectorCopied     | ***PSEUDO*** Given connector was copied before. RANGE=[TRUE,FALSE]                                                |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | bIoDrvStubRegistered | ***PSEUDO*** Is IoDrvStub registered for this connector in the corresponding copied connector. RANGE=[TRUE,FALSE] |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+--------------------+----------------------------+
| ERR_NOTIMPLEMENTED | Not provided by the driver |
+--------------------+----------------------------+

.. _group___io_drv_unsafe_bridge_moduletest_itf_1ga48f414affb4bb84e803e08b48eaa1ea1:

STATICITF_DEF RTS_RESULT IoDrvReadInputs (RTS_HANDLE hIoDrv, IoConfigConnectorMap *pConnectorMapList, int nCount)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Read inputs for one task

This function is called cyclically from every task that is using inputs. A part of the task map list, which contains only the data of one connector are passed to the driver (called connector map list).

If a driver has registered one instance to more than one connector, it might get more than one call with a different subset of the task map list.

The I/O driver should read the data from the local hardware or a buffer and write them to the corresponding IEC variables.

The IoDrvUnsafeBridgeImplementation passes this call to the corresponding unsafe io driver with the copied connector list. The inputs are copied to the original configuration afterwards.

**Parameters**

+---------+------------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | hIoDrv                 | Handle to the IO-driver instance RANGE=[RTS_INVALID_HANDLE,VALID_IODRIVER_HANDLE]                                 |
+---------+------------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | pConnectorMapList      | Pointer to the connector map list RANGE=[NULL,VALID_CONNECTORMAPLIST]                                             |
+---------+------------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | nCount                 | Number of entries in the connector map list RANGE=[0..CONNECTORMAPLIST_LEN-1]                                     |
+---------+------------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | bConnectorCopied       | ***PSEUDO*** Given connector in connector map list was copied before. RANGE=[TRUE,FALSE]                          |
+---------+------------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | bIoDrvStubRegistered   | ***PSEUDO*** Is IoDrvStub registered for this connector in the corresponding copied connector. RANGE=[TRUE,FALSE] |
+---------+------------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | nContinuousConnectorsA | ***PSEUDO*** Number of connectors for stub driver A RANGE=[1,2]                                                   |
+---------+------------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | nContinuousConnectorsB | ***PSEUDO*** Number of connectors for stub driver B RANGE=[0,2]                                                   |
+---------+------------------------+-------------------------------------------------------------------------------------------------------------------+
| [out]   | bDriverBCalled         | ***PSEUDO*** Driver B called. RANGE=[TRUE,FALSE]                                                                  |
+---------+------------------------+-------------------------------------------------------------------------------------------------------------------+
| [out]   | IoDrvReturnValue       | ***PSEUDO*** Return value, which should be returned by called IoDrvStub RANGE=[ERR_OK,ERR_FAILED]                 |
+---------+------------------------+-------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+---------------------------------------------------+
| ERR_OK        | ReadInputs was executed successfully.             |
+---------------+---------------------------------------------------+
| ERR_PARAMETER | hIoDrv was invalid or pConnectorMapList was NULL. |
+---------------+---------------------------------------------------+
| ERR_FAILED    | Internal error                                    |
+---------------+---------------------------------------------------+

.. _group___io_drv_unsafe_bridge_moduletest_itf_1ga5f1ba7a16dc1fa5b8f588f1978a47503:

STATICITF_DEF RTS_RESULT IoDrvScanModules (RTS_HANDLE hIoDrv, IoConfigConnector *pConnector, IoConfigConnector **ppConnectorList, int *pnCount)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Scan for submodules of a connector.

This function is executed when the driver is downloaded. It is called over a communication service.

The I/O driver should search for connected subumodules and return them via ppConnectorList.

NOTE: This interface is called synchronously and the buffer for the connector list has to be allocated by the driver.

The buffer might be freed at the next scan or at the next UpdateConfiguration.

The IoDrvUnsafeBridge only forwards the call to the corresponding unsafe IODriver.

**Parameters**

+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | hIoDrv               | Handle to the IO-driver instance RANGE=[RTS_INVALID_HANDLE,VALID_IODRIVER_HANDLE]                                 |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | pConnector           | Pointer to the connector, which layout should be scanned RANGE=[NULL,VALID_CONNECTOR]                             |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [out]   | ppConnectorList      | Pointer to the scanned connectors (devices) to return RANGE=[NULL,VALID_SCAN_CONNECTORLIST]                       |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [out]   | pnCount              | Pointer to the number of entries in the connector list to return RANGE=[0,SIZE_OF_VALID_SCAN_CONNECTORLIST]       |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | bConnectorCopied     | ***PSEUDO*** Given connector was copied before. RANGE=[TRUE,FALSE]                                                |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | bIoDrvStubRegistered | ***PSEUDO*** Is IoDrvStub registered for this connector in the corresponding copied connector. RANGE=[TRUE,FALSE] |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | bScanSuccessful      | ***PSEUDO*** IoDrvStub return value for the scan. RANGE=[TRUE,FALSE]                                              |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+-------------------------------------------------------------+
| ERR_OK        | Scan was executed successfully.                             |
+---------------+-------------------------------------------------------------+
| ERR_PARAMETER | hIoDrv was invalid or one of the other parameters was NULL. |
+---------------+-------------------------------------------------------------+
| ERR_FAILED    | Internal error                                              |
+---------------+-------------------------------------------------------------+

.. _group___io_drv_unsafe_bridge_moduletest_itf_1ga7712716bf87ce241c22958db3aa19bcc:

STATICITF_DEF RTS_RESULT IoDrvStartBusCycle (RTS_HANDLE hIoDrv, IoConfigConnector *pConnector)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Start bus cycle for a specific connector.

The bus cycle task is defined globally for the whole PLC or locally for a specific I/O connector in the CoDeSys project. This call can be used by the I/O driver to flush the I/O data if it was cached before.

This way we can get a better and consistent timing on the bus. d

Note: This function is called for every connector which has a registered I/O driver and "needsbuscycle" set in the device description (this means that it might also be called for children of the connector).

Depending on the device description, this function might be executed at the beginning or at the end of the task cycle.

The IoDrvUnsafeBridgeImplementation passes this call to the corresponding unsafe io driver with the copied connector list.

**Parameters**

+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | hIoDrv               | Handle to the IO-driver instance RANGE=[RTS_INVALID_HANDLE,VALID_IODRIVER_HANDLE]                                 |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | pConnector           | Pointer to the connector, on which the buscycle must be triggered RANGE=[NULL,VALID_CONNECTOR]                    |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | bConnectorCopied     | ***PSEUDO*** Given connector was copied before. RANGE=[TRUE,FALSE]                                                |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | bIoDrvStubRegistered | ***PSEUDO*** Is IoDrvStub registered for this connector in the corresponding copied connector. RANGE=[TRUE,FALSE] |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [out]   | IoDrvReturnValue     | ***PSEUDO*** Return value, which should be returned by called IoDrvStub                                           |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | bRealIODrvFctFailed  | ***PSEUDO*** The IoDrvStartBusCycle function of the real IO driver returned error. RANGE=[TRUE,FALSE]             |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+---------------------------------------+
| ERR_OK        | Bus cycle was triggered               |
+---------------+---------------------------------------+
| ERR_PARAMETER | hIoDrv was invalid or pConnector NULL |
+---------------+---------------------------------------+
| ERR_FAILED    | Internal Error                        |
+---------------+---------------------------------------+

.. _group___io_drv_unsafe_bridge_moduletest_itf_1ga56a1f59dfd7963c606c8289edc2c3b8b:

STATICITF_DEF RTS_RESULT IoDrvUpdateConfiguration (RTS_HANDLE hIoDrv, IoConfigConnector *pConnectorList, int nCount)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Propagate I/O configuration to the drivers.

This call passes the I/O configuration (based on the configuration tree in the CoDeSys programming system) to all registered I/O drivers. Every driver has the chance to pass this tree and to register itself for a specific connector.

The driver can use the I/O Manager Interface to iterate over the I/O Connectors and to read the I/O Parameters. If it decides to handle the I/Os of one of those connectors, it can register it's driver handle (IBase) to the connector in the member hIoDrv.

This function is called when the application is initialized as well as when it is de- or reinitialized. In this case it is called with pConnectorList = NULL.

The implementation of the IoDrvUnsafeBridge copies the io configuration to unsafe memory, unregisteres supported IO drivers from IoMgr and puts them to local administration and calls the IoDrvUpdateConfiguration functions of the supported IO drivers.

**Parameters**

+---------+---------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hIoDrv              | Handle to the IO-driver instance RANGE=[RTS_INVALID_HANDLE,VALID_IODRIVER_HANDLE]                                                                                                                         |
+---------+---------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pConnectorList      | Pointer to the complete connector list RANGE=[NULL,CONNECTORLIST_HUGE,CONNECTORLIST_HUGE_PARAMETERLIST,CONNECTORLIST_HUGE_PARAMETERVALUES,CONNECTORLIST_VALID_UNSAFE_PARAMETERVALUES,CONNECTORLIST_VALID] |
+---------+---------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | nCount              | Number of entries in the connector list RANGE=[0,CONNECTORLIST_LEN]                                                                                                                                       |
+---------+---------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | bFirstIoDrv         | ***PSEUDO*** Is IoDrvUnsafeBridge the first registered IO driver RANGE=[TRUE,FALSE]                                                                                                                       |
+---------+---------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | bInitialized        | ***PSEUDO*** UpdateConfiguration initialized and connector and parameter lists copied before RANGE=[TRUE,FALSE]                                                                                           |
+---------+---------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | nIoDrvStub          | ***PSEUDO*** Is IoDrvStub registered for this connector in the corresponding copied connector and is a C or IEC driver. RANGE=[NOIODRVSTUB,CIODRVSTUB,IECIODRVSTUB]                                       |
+---------+---------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | bRealIODrvFctFailed | ***PSEUDO*** The IoDrvUpdateConfiguration function of the real IO driver returned error. RANGE=[TRUE,FALSE]                                                                                               |
+---------+---------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | IoDrvReturnValue    | ***PSEUDO*** Return value, which should be returned by called IoDriver RANGE=[ERR_OK,ERR_FAILED]                                                                                                          |
+---------+---------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | bParamValuesCopied  | ***PSEUDO*** Return value, which should be returned by called IoDriver RANGE=[TRUE,FALSE]                                                                                                                 |
+---------+---------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+--------------------------------------------------------+
| ERR_OK        | UpdateConfiguration was successfull and found a driver |
+---------------+--------------------------------------------------------+
| ERR_PARAMETER | hIoDrv was invalid or pConnector NULL                  |
+---------------+--------------------------------------------------------+
| ERR_NOMEMORY  | Not enought space to copy configuration                |
+---------------+--------------------------------------------------------+
| ERR_FAILED    | Internal Error                                         |
+---------------+--------------------------------------------------------+

.. _group___io_drv_unsafe_bridge_moduletest_itf_1ga39e0e4790272987e84b31f6b5fb5d99f:

STATICITF_DEF RTS_RESULT IoDrvUpdateMapping (RTS_HANDLE hIoDrv, IoConfigTaskMap *pTaskMapList, int nCount)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Propagate the task map lists to the drivers.

This functions gives the drivers a chance to optimize their internal data structures based on the real task map lists. The function is called on every initialization of the application (download, bootproject,...).

**Parameters**

+---------+----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hIoDrv               | Handle to the IO-driver instance RANGE=[RTS_INVALID_HANDLE,VALID_IODRIVER_HANDLE]                                                                                                 |
+---------+----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pTaskMapList         | Pointer to the task map list of one task RANGE=[NULL,TASKMAPLIST_HUGE,TASKMAPLIST_HUGE_CONNECTORMAPLIST,TASKMAPLIST_HUGE_CHANNELMAPLIST,TASKMAPLIST_HUGE_IOMEM,TASKMAPLIST_VALID] |
+---------+----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | nCount               | Number of entries in the map list RANGE=[0,TASKMAPLIST_LEN]                                                                                                                       |
+---------+----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | bInitialized         | ***PSEUDO*** UpdateConfiguration initialized and connector and parameter lists copied before RANGE=[TRUE,FALSE]                                                                   |
+---------+----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | bIoDrvStubRegistered | ***PSEUDO*** Is IoDrvStub registered for this connector in the corresponding copied connector. RANGE=[TRUE,FALSE]                                                                 |
+---------+----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | bRealIODrvFctFailed  | ***PSEUDO*** The IoDrvUpdateMapping function of the real IO driver returned error. RANGE=[TRUE,FALSE]                                                                             |
+---------+----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | IoDrvReturnValue     | ***PSEUDO*** Return value, which should be returned by called IoDriver RANGE=[ERR_OK,ERR_FAILED]                                                                                  |
+---------+----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+-----------------------------------------+
| ERR_OK        | UpdateMapping successful                |
+---------------+-----------------------------------------+
| ERR_PARAMETER | hIoDrv was invalid                      |
+---------------+-----------------------------------------+
| ERR_NOMEMORY  | Not enought space to copy configuration |
+---------------+-----------------------------------------+
| ERR_FAILED    | Internal Error                          |
+---------------+-----------------------------------------+

.. _group___io_drv_unsafe_bridge_moduletest_itf_1ga7abe6c7aa98b08694b5676deb5ff79ab:

STATICITF_DEF RTS_RESULT IoDrvWatchdogTrigger (RTS_HANDLE hIoDrv, IoConfigConnector *pConnector)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Trigger the hardware watchdog of a driver.

This function is depricated and not used anymore.

This function is not implemented in the IoDrvUnsafeBridge implementation and ERR_NOTIMPLEMENTED is returned.

**Parameters**

+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | hIoDrv               | Handle to the IO-driver instance RANGE=[RTS_INVALID_HANDLE,VALID_IODRIVER_HANDLE]                                 |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | pConnector           | Pointer to the connector, on which the watchdog should be retriggered RANGE=[NULL,VALID_CONNECTOR]                |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | bConnectorCopied     | ***PSEUDO*** Given connector was copied before. RANGE=[TRUE,FALSE]                                                |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | bIoDrvStubRegistered | ***PSEUDO*** Is IoDrvStub registered for this connector in the corresponding copied connector. RANGE=[TRUE,FALSE] |
+---------+----------------------+-------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+--------------------+----------------------------+
| ERR_NOTIMPLEMENTED | Not provided by the driver |
+--------------------+----------------------------+

.. _group___io_drv_unsafe_bridge_moduletest_itf_1gae25ad6b1f53f6935b17125d9757aad45:

STATICITF_DEF RTS_RESULT IoDrvWriteOutputs (RTS_HANDLE hIoDrv, IoConfigConnectorMap *pConnectorMapList, int nCount)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Write outputs for one task

This function is called cyclically from every task that is using outputs. A part of the task map list, which contains only the data of one connector are passed to the driver (called connector map list).

If a driver has registered one instance to more than one connector, it might get more than one call with a different subset of the task map list.

The I/O driver should write out the data to the local hardware, a buffer or a fieldbus.

The IoDrvUnsafeBridgeImplementation copies the output values to unsafe memory and passes this call to the corresponding unsafe io driver with the copied connector list.

**Parameters**

+---------+------------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | hIoDrv                 | Handle to the IO-driver instance RANGE=[RTS_INVALID_HANDLE,VALID_IODRIVER_HANDLE]                                 |
+---------+------------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | pConnectorMapList      | Pointer to the connector map list RANGE=[NULL,VALID_CONNECTORMAPLIST]                                             |
+---------+------------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | nCount                 | Number of entries in the connector map list RANGE=[0..CONNECTORMAPLIST_LEN-1]                                     |
+---------+------------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | bConnectorCopied       | ***PSEUDO*** Given connector was copied before. RANGE=[TRUE,FALSE]                                                |
+---------+------------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | bIoDrvStubRegistered   | ***PSEUDO*** Is IoDrvStub registered for this connector in the corresponding copied connector. RANGE=[TRUE,FALSE] |
+---------+------------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | nContinuousConnectorsA | ***PSEUDO*** Number of connectors for stub driver A RANGE=[1,2]                                                   |
+---------+------------------------+-------------------------------------------------------------------------------------------------------------------+
| [in]    | nContinuousConnectorsB | ***PSEUDO*** Number of connectors for stub driver B RANGE=[0,2]                                                   |
+---------+------------------------+-------------------------------------------------------------------------------------------------------------------+
| [out]   | bDriverBCalled         | ***PSEUDO*** Driver B called. RANGE=[TRUE,FALSE]                                                                  |
+---------+------------------------+-------------------------------------------------------------------------------------------------------------------+
| [out]   | IoDrvReturnValue       | ***PSEUDO*** Return value, which should be returned by called IoDrvStub RANGE=[ERR_OK,ERR_FAILED]                 |
+---------+------------------------+-------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+----------------------------------------------+
| ERR_OK        | Outputs successfully written                 |
+---------------+----------------------------------------------+
| ERR_PARAMETER | hIoDrv was invalid or pConnectorMapList NULL |
+---------------+----------------------------------------------+
| ERR_FAILED    | Internal Error                               |
+---------------+----------------------------------------------+

.. _group___io_drv_unsafe_bridge_moduletest_itf_1ga9c410decb95bdf9ae25ae1bad958cc72:

STATICITF_DEF RTS_RESULT IoDrvReadParameter (RTS_HANDLE hDevice, IoConfigConnector *pConnector, IoConfigParameter *pParameter, void *pData, RTS_SIZE ulBitSize, RTS_SIZE ulBitOffset)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Read a driver specific parameters.

These parameters can be read by the application, as well as, by an online service, which is triggered from the device configurator plugin in the CoDeSys programming system.

Note: If the I/O driver returns an error, the I/O Manager may try to read the parameter himself

Note2: On SIL2 runtimes, this interface is not supported.

**Parameters**

+---------+-------------+-----------------------------------------------------------------------------------------------------------+
| [in]    | hDevice     | Handle to the IO-driver instance RANGE=[RTS_INVALID_HANDLE,VALID_IODRIVER_HANDLE]                         |
+---------+-------------+-----------------------------------------------------------------------------------------------------------+
| [in]    | pConnector  | Pointer to the connector (might be determined with IoMgrConfigGetConnector). RANGE=[NULL,VALID_CONNECTOR] |
+---------+-------------+-----------------------------------------------------------------------------------------------------------+
| [in]    | pParameter  | Pointer to the parameter (might be determined with IoMgrConfigGetParameter) RANGE=[NULL,VALID_PARAMETER]  |
+---------+-------------+-----------------------------------------------------------------------------------------------------------+
| [in]    | pData       | Buffer where the read data is stored RANGE=[NULL,VALID_DATABUFFER]                                        |
+---------+-------------+-----------------------------------------------------------------------------------------------------------+
| [in]    | ulBitSize   | Size of the part of the parameter data, that should be read RANGE=[0..PARAM_SIZE-1]                       |
+---------+-------------+-----------------------------------------------------------------------------------------------------------+
| [in]    | ulBitOffset | Offset of the part of the parameter, that should be read RANGE=[0..PARAM_SIZE-1]                          |
+---------+-------------+-----------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+--------------------+----------------------------+
| ERR_NOTIMPLEMENTED | Not provided by the driver |
+--------------------+----------------------------+

.. _group___io_drv_unsafe_bridge_moduletest_itf_1ga761ab3dfea1fc68bedba1d2949e9ebea:

STATICITF_DEF RTS_RESULT IoDrvWriteParameter (RTS_HANDLE hDevice, IoConfigConnector *pConnector, IoConfigParameter *pParameter, void *pData, RTS_SIZE ulBitSize, RTS_SIZE ulBitOffset)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Write a driver specific parameters.

These parameters can be written by the application, as well as, by an online service, which is triggered from the device configurator plugin in the CoDeSys programming system.

Note: On SIL2 runtimes, this interface is not supported.

**Parameters**

+---------+-------------+-----------------------------------------------------------------------------------------------------------+
| [in]    | hDevice     | Handle to the IO-driver instance RANGE=[RTS_INVALID_HANDLE,VALID_IODRIVER_HANDLE]                         |
+---------+-------------+-----------------------------------------------------------------------------------------------------------+
| [in]    | pConnector  | Pointer to the connector (might be determined with IoMgrConfigGetConnector). RANGE=[NULL,VALID_CONNECTOR] |
+---------+-------------+-----------------------------------------------------------------------------------------------------------+
| [in]    | pParameter  | Pointer to the parameter (might be determined with IoMgrConfigGetParameter) RANGE=[NULL,VALID_PARAMETER]  |
+---------+-------------+-----------------------------------------------------------------------------------------------------------+
| [in]    | pData       | Buffer where the read data is stored RANGE=[NULL,VALID_DATABUFFER]                                        |
+---------+-------------+-----------------------------------------------------------------------------------------------------------+
| [in]    | ulBitSize   | Size of the part of the parameter data, that should be written RANGE=[0..PARAM_SIZE-1]                    |
+---------+-------------+-----------------------------------------------------------------------------------------------------------+
| [in]    | ulBitOffset | Offset of the part of the parameter, that should be written RANGE=[0..PARAM_SIZE-1]                       |
+---------+-------------+-----------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+--------------------+----------------------------+
| ERR_NOTIMPLEMENTED | Not provided by the driver |
+--------------------+----------------------------+

.. last line of group.rst template
.. last line of composition.rst template


