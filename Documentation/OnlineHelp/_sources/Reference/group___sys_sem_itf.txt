.. first line of composition.rst template

.. first line of group.rst template

.. _group___sys_sem_itf:

=========
SysSemItf
=========

Interface of SysSem. :ref:`More... <group___sys_sem_itf-details>`

Data Structures
---------------

- struct :ref:`tagsyssemcreate_struct <structtagsyssemcreate__struct>`

- struct :ref:`tagsyssemdelete_struct <structtagsyssemdelete__struct>`

- struct :ref:`tagsyssementer_struct <structtagsyssementer__struct>`

- struct :ref:`tagsyssemleave_struct <structtagsyssemleave__struct>`

- struct :ref:`tagsyssemtry_struct <structtagsyssemtry__struct>`

- struct :ref:`ISysSem_C <struct_i_sys_sem___c>`

Macros
------

- #define :ref:`ITF_SysSem <group___sys_sem_itf_1gac01bf9a91369e72706c48b4183928df7>`

- #define :ref:`EXTITF_SysSem <group___sys_sem_itf_1ga0a4f458bbd9f1e7aed63f31865834dc5>`

Typedefs
--------

- typedef struct :ref:`tagsyssemcreate_struct <structtagsyssemcreate__struct>` :ref:`syssemcreate_struct <group___sys_sem_itf_1gaf319c5d95ecf1a406fd55a4a3d0c5e16>`

- typedef struct :ref:`tagsyssemdelete_struct <structtagsyssemdelete__struct>` :ref:`syssemdelete_struct <group___sys_sem_itf_1ga2addf87486dc1a4b39b739b418b48809>`

- typedef struct :ref:`tagsyssementer_struct <structtagsyssementer__struct>` :ref:`syssementer_struct <group___sys_sem_itf_1ga8ed33c95eb4a6af3824f17eb5f7749a8>`

- typedef struct :ref:`tagsyssemleave_struct <structtagsyssemleave__struct>` :ref:`syssemleave_struct <group___sys_sem_itf_1ga0ff1a70d7342167941c7fe5ef932bf41>`

- typedef struct :ref:`tagsyssemtry_struct <structtagsyssemtry__struct>` :ref:`syssemtry_struct <group___sys_sem_itf_1gaaf69bfa088bdd7f3511d2a6cd6281920>`

- typedef :ref:`ISysSem_C <struct_i_sys_sem___c>` :ref:`ISysSem <group___sys_sem_itf_1ga27275656c98473a3084c91d66ef62d4f>`

Functions
---------

- void :ref:`syssemcreate <group___sys_sem_itf_1gafa7b49352d0a18646a3cfd6e0004c5db>` (:ref:`syssemcreate_struct <group___sys_sem_itf_1gaf319c5d95ecf1a406fd55a4a3d0c5e16>` * p)

- void :ref:`syssemdelete <group___sys_sem_itf_1gad0ae3a5b0fea854bdb933ec27685ca33>` (:ref:`syssemdelete_struct <group___sys_sem_itf_1ga2addf87486dc1a4b39b739b418b48809>` * p)

- void :ref:`syssementer <group___sys_sem_itf_1gadb218365cf52c4ff6e3b79411f42f775>` (:ref:`syssementer_struct <group___sys_sem_itf_1ga8ed33c95eb4a6af3824f17eb5f7749a8>` * p)

- void :ref:`syssemleave <group___sys_sem_itf_1gaa724c2ed2da6d6570b9582fb7e1677e6>` (:ref:`syssemleave_struct <group___sys_sem_itf_1ga0ff1a70d7342167941c7fe5ef932bf41>` * p)

- void :ref:`syssemtry <group___sys_sem_itf_1gaacb1287537fc6c9824b147a0b4ed794f>` (:ref:`syssemtry_struct <group___sys_sem_itf_1gaaf69bfa088bdd7f3511d2a6cd6281920>` * p)

- RTS_RESULT :ref:`SysSemOSInit <group___sys_sem_itf_1ga77dd7bc0769636c37f0f4077b851daf9>` (INIT_STRUCT * pInit)

- RTS_RESULT :ref:`SysSemOSHookFunction <group___sys_sem_itf_1ga3d8fc57e4d21b99081fc824ac71bff50>` (RTS_UI32 ulHook, RTS_UINTPTR ulParam1, RTS_UINTPTR ulParam2)

- RTS_HANDLE :ref:`SysSemCreate <group___sys_sem_itf_1gacd9a47c93a9dbc35a1968ebc4b4b1e30>` (RTS_RESULT * pResult)

- RTS_RESULT :ref:`SysSemDelete <group___sys_sem_itf_1gac8104f0dd5d3c6b1feacb9fe5e79dc9d>` (RTS_HANDLE hSem)

- RTS_RESULT :ref:`SysSemTry <group___sys_sem_itf_1gae8fee564d2c532d981a99ca83c23da76>` (RTS_HANDLE hSem)

- RTS_RESULT :ref:`SysSemEnter <group___sys_sem_itf_1gabd085fe0837dffcd3a6b3248015e8377>` (RTS_HANDLE hSem)

- RTS_RESULT :ref:`SysSemLeave <group___sys_sem_itf_1gabfa8bac50383f867e91954ee4d301868>` (RTS_HANDLE hSem)

.. _group___sys_sem_itf-details:

Detailed Description
--------------------

Interface of SysSem.

The SysSem interface is projected to handle synchonization objects for tasks and threads. The synchronization objects are called semaphores to synchronize concurrent access to single data resources.

For example:

Task1: ... SysSemEnter(hSem); [Here you can accessed the protected data] SysSemLeave(hSem); [After :ref:`SysSemLeave() <group___cmp_blk_drv_usb_dep___task_1gaba4e64394542b1835d2defca112616a5>` you must not access the protected data] ....

IMPLEMENTATION NOTE: The semaphores must work recursive! That means, that a multiple call out of one task must not block the execution! For each :ref:`SysSemEnter() <group___cmp_blk_drv_usb_dep___task_1ga55b0ed2715359ff17f23c9248328ebaa>` call, a corresponding :ref:`SysSemLeave() <group___cmp_blk_drv_usb_dep___task_1gaba4e64394542b1835d2defca112616a5>` must be used! For this feature, binary sempahores are typically used.

**Copyright:**

Copyright (c) 2017-2018 CODESYS GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved.

Macro Definition Documentation
------------------------------
.. _group___sys_sem_itf_1gac01bf9a91369e72706c48b4183928df7:

#define ITF_SysSem
^^^^^^^^^^^^^^^^^^

.. _group___sys_sem_itf_1ga0a4f458bbd9f1e7aed63f31865834dc5:

#define EXTITF_SysSem
^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___sys_sem_itf_1gaf319c5d95ecf1a406fd55a4a3d0c5e16:

typedef struct tagsyssemcreate_struct  syssemcreate_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EXTERN LIB SECTION BEGIN

This function can be used to create a semaphore (synchronization object) RETURN: Handle to the semaphore or RTS_INVALID_HANDLE if failed

.. _group___sys_sem_itf_1ga2addf87486dc1a4b39b739b418b48809:

typedef struct tagsyssemdelete_struct  syssemdelete_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function deletes the semaphore which is identified by its handle RETURN: Returns the runtime system error code (see CmpErrors.library)

.. _group___sys_sem_itf_1ga8ed33c95eb4a6af3824f17eb5f7749a8:

typedef struct tagsyssementer_struct  syssementer_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_sem_itf_1ga0ff1a70d7342167941c7fe5ef932bf41:

typedef struct tagsyssemleave_struct  syssemleave_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_sem_itf_1gaaf69bfa088bdd7f3511d2a6cd6281920:

typedef struct tagsyssemtry_struct  syssemtry_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_sem_itf_1ga27275656c98473a3084c91d66ef62d4f:

typedef ISysSem_C ISysSem
^^^^^^^^^^^^^^^^^^^^^^^^^

Function Documentation
----------------------

.. _group___sys_sem_itf_1gafa7b49352d0a18646a3cfd6e0004c5db:

void syssemcreate (syssemcreate_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_sem_itf_1gad0ae3a5b0fea854bdb933ec27685ca33:

void syssemdelete (syssemdelete_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_sem_itf_1gadb218365cf52c4ff6e3b79411f42f775:

void syssementer (syssementer_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_sem_itf_1gaa724c2ed2da6d6570b9582fb7e1677e6:

void syssemleave (syssemleave_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_sem_itf_1gaacb1287537fc6c9824b147a0b4ed794f:

void syssemtry (syssemtry_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_sem_itf_1ga77dd7bc0769636c37f0f4077b851daf9:

RTS_RESULT SysSemOSInit (INIT_STRUCT *pInit)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EXTERN LIB SECTION END

.. _group___sys_sem_itf_1ga3d8fc57e4d21b99081fc824ac71bff50:

RTS_RESULT SysSemOSHookFunction (RTS_UI32 ulHook, RTS_UINTPTR ulParam1, RTS_UINTPTR ulParam2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_sem_itf_1gacd9a47c93a9dbc35a1968ebc4b4b1e30:

RTS_HANDLE SysSemCreate (RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create a new semaphore object

**Parameters**

+---------+---------+-----------------------+
| [out]   | pResult | Pointer to error code |
+---------+---------+-----------------------+

**Returns:**

Handle to the semaphore

.. _group___sys_sem_itf_1gac8104f0dd5d3c6b1feacb9fe5e79dc9d:

RTS_RESULT SysSemDelete (RTS_HANDLE hSem)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Delete a semaphore object

**Parameters**

+---------+------+-----------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hSem | Handle to the semaphore that is provided from :ref:`SysSemCreate() <group___cmp_c_a_a_storage_dep_1ga3731e779c59139c583ea3a63b40577c0>` |
+---------+------+-----------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___sys_sem_itf_1gae8fee564d2c532d981a99ca83c23da76:

RTS_RESULT SysSemTry (RTS_HANDLE hSem)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Try to enter the semaphore. If semaphore is available, the function entered the semaphore and returned ERR_OK. If semaphore is not available, ERR_FAILED is returned.

**Parameters**

+---------+------+-----------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hSem | Handle to the semaphore that is provided from :ref:`SysSemCreate() <group___cmp_c_a_a_storage_dep_1ga3731e779c59139c583ea3a63b40577c0>` |
+---------+------+-----------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___sys_sem_itf_1gabd085fe0837dffcd3a6b3248015e8377:

RTS_RESULT SysSemEnter (RTS_HANDLE hSem)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Enter the given semaphore. If the semahore is still entered by another task1, the actual task2 will be blocked, until the task1 has called :ref:`SysSemLeave() <group___cmp_blk_drv_usb_dep___task_1gaba4e64394542b1835d2defca112616a5>` .

IMPLEMENTATION NOTE: The semaphores must work recursive! That means, that a multiple call out of one task must not block the execution! For each :ref:`SysSemEnter() <group___cmp_blk_drv_usb_dep___task_1ga55b0ed2715359ff17f23c9248328ebaa>` call, a corresponding :ref:`SysSemLeave() <group___cmp_blk_drv_usb_dep___task_1gaba4e64394542b1835d2defca112616a5>` must be used!

**Parameters**

+---------+------+-----------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hSem | Handle to the semaphore that is provided from :ref:`SysSemCreate() <group___cmp_c_a_a_storage_dep_1ga3731e779c59139c583ea3a63b40577c0>` |
+---------+------+-----------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___sys_sem_itf_1gabfa8bac50383f867e91954ee4d301868:

RTS_RESULT SysSemLeave (RTS_HANDLE hSem)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Leave the given semaphore.

**Parameters**

+---------+------+-----------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hSem | Handle to the semaphore that is provided from :ref:`SysSemCreate() <group___cmp_c_a_a_storage_dep_1ga3731e779c59139c583ea3a63b40577c0>` |
+---------+------+-----------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

error code

.. last line of group.rst template
.. last line of composition.rst template


