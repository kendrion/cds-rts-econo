.. first line of composition.rst template

.. first line of group.rst template

.. _group___cmp_channel_server_itf:

===================
CmpChannelServerItf
===================

 :ref:`More... <group___cmp_channel_server_itf-details>`

Modules
-------

- :ref:`Event parameter <group___cmp_channel_server_itf___eventparameter>`

- :ref:`Events <group___cmp_channel_server_itf___events>`

- :ref:`Settings <group___cmp_channel_server_itf___settings>`

- :ref:`Static defines <group___cmp_channel_server_itf___staticdefines>`

Data Structures
---------------

- struct :ref:`ICmpChannelServer_C <struct_i_cmp_channel_server___c>`

Macros
------

- #define :ref:`ITF_CmpChannelServer <group___cmp_channel_server_itf_1ga5af6297baff82b348ed308edcef925d3>`

- #define :ref:`EXTITF_CmpChannelServer <group___cmp_channel_server_itf_1gadcdcf6d61f34f733160ec53a17b1e385>`

Typedefs
--------

- typedef :ref:`ICmpChannelServer_C <struct_i_cmp_channel_server___c>` :ref:`ICmpChannelServer <group___cmp_channel_server_itf_1ga210c4c13ac2920d84670061a6a4804d0>`

Functions
---------

- RTS_RESULT :ref:`NetServerGetMaxChannels <group___cmp_channel_server_itf_1gaa61219249349fff27e8d5026984d69eb>` (RTS_UI16 * pwMaxChannels)

- RTS_RESULT :ref:`NetServerGetMaxChannelBufferSize <group___cmp_channel_server_itf_1ga70303eac042a808bc04909757b4879d3>` (RTS_I32 * pi32MaxChannelBufferSize)

- RTS_RESULT :ref:`NetServerGetChannelInfoByIndex <group___cmp_channel_server_itf_1gaf77f99a0acb88ef37188f4eb44ada1b7>` (RTS_UI16 ui16ChannelIndex, RTS_UI32 * pui32ServerState, :ref:`CHANNELBUFFER <struct_c_h_a_n_n_e_l_b_u_f_f_e_r>` * pChInfoBuffer, RTS_SIZE * psiBufferLen)

- RTS_RESULT :ref:`NetServerGetChannelInfoByIndex2 <group___cmp_channel_server_itf_1ga1b88d27b187b18b540ab30c0ab6013de>` (RTS_UI16 ui16ChannelIndex, RTS_UI32 * pui32ServerState, :ref:`CHANNELINFO <struct_c_h_a_n_n_e_l_i_n_f_o>` * pChInfoBuffer, RTS_SIZE * psiBufferLen)

- RTS_RESULT :ref:`NetServerGetStatus <group___cmp_channel_server_itf_1gaf050a401e94cd38d1aaa2d3aaf2c91ae>` (RTS_UI32 ulChannelHandle, RTS_UI16 * pusStatus, RTS_UI8 * pbyScalingFactor, RTS_I32 * pnItemsComplete, RTS_I32 * pnTotalItems)

- RTS_RESULT :ref:`NetServerGetRequest <group___cmp_channel_server_itf_1ga40fb91f88755597d5b6eda05c9a28697>` (RTS_UI32 ulChannelHandle, :ref:`PROTOCOL_DATA_UNIT <struct_p_r_o_t_o_c_o_l___d_a_t_a___u_n_i_t>` * ppduRequest, :ref:`PROTOCOL_DATA_UNIT <struct_p_r_o_t_o_c_o_l___d_a_t_a___u_n_i_t>` * ppduReplyBuffer)

- RTS_RESULT :ref:`NetServerFinishRequest <group___cmp_channel_server_itf_1ga340718f90a7eca4b17b75ce83b5bf30f>` (RTS_UI32 ulChannelHandle, :ref:`PROTOCOL_DATA_UNIT <struct_p_r_o_t_o_c_o_l___d_a_t_a___u_n_i_t>`  pduData)

- RTS_RESULT :ref:`NetServerSetSessionId <group___cmp_channel_server_itf_1gac137e47c3a5fdd01150edf34f6e066e5>` (RTS_UI32 ulChannelHandle, RTS_UI32 ulSessionId)

- RTS_RESULT :ref:`NetServerGetSessionId <group___cmp_channel_server_itf_1ga7c130fed4dc66eee53fbeff1bf6295fc>` (RTS_UI32 ulChannelHandle, RTS_UI32 * pulSessionId)

- int :ref:`NetServerGetChannel <group___cmp_channel_server_itf_1gab766ff65e706c26c830d7a25b260927d>` (:ref:`PEERADDRESS <struct_p_e_e_r_a_d_d_r_e_s_s>`  addrPeer, unsigned short wChannelId, :ref:`CHANNELBUFFER <struct_c_h_a_n_n_e_l_b_u_f_f_e_r>` ** ppChBuffer)

- int :ref:`NetServerReleaseChannel <group___cmp_channel_server_itf_1ga50119c1e88fa896c1577e6f6ba59f655>` (:ref:`CHANNELBUFFER <struct_c_h_a_n_n_e_l_b_u_f_f_e_r>` * pChBuffer)

- int :ref:`NetServerHandleMetaRequest <group___cmp_channel_server_itf_1gaf52e870aa5161b58734a8eae3d028dfc>` (RTS_HANDLE hRouter, :ref:`PEERADDRESS <struct_p_e_e_r_a_d_d_r_e_s_s>`  addrSender, :ref:`PROTOCOL_DATA_UNIT <struct_p_r_o_t_o_c_o_l___d_a_t_a___u_n_i_t>`  pduData)

- void :ref:`NetServerForEachChannel <group___cmp_channel_server_itf_1ga4fec7786feefac8319ede3e8cb06b86e>` (:ref:`PFCHANNELHANDLER <group___cmp_channel_mgr_itf_1gaa6bb7106c459aa8702f58da0df9919c2>`  pfChannelHandler, void * pParam)

- int :ref:`NetServerMessageReceived <group___cmp_channel_server_itf_1gad1721a0b7624dd70db7a4060e3a08abf>` (:ref:`CHANNELBUFFER <struct_c_h_a_n_n_e_l_b_u_f_f_e_r>` * pChBuffer, :ref:`PROTOCOL_DATA_UNIT <struct_p_r_o_t_o_c_o_l___d_a_t_a___u_n_i_t>`  pduData)

- int :ref:`NetServerMessageReceived2 <group___cmp_channel_server_itf_1gac15631c2e30feea02ce34caab494c52b>` (RTS_HANDLE hRouter, :ref:`CHANNELBUFFER <struct_c_h_a_n_n_e_l_b_u_f_f_e_r>` * pChBuffer, :ref:`PROTOCOL_DATA_UNIT <struct_p_r_o_t_o_c_o_l___d_a_t_a___u_n_i_t>`  pduData)

- RTS_RESULT :ref:`NetServerMessageReceived3 <group___cmp_channel_server_itf_1gae75efe79619be304817299704f536ff1>` (:ref:`CHANNELBUFFER <struct_c_h_a_n_n_e_l_b_u_f_f_e_r>` * pChBuffer, :ref:`PROTOCOL_DATA_UNIT <struct_p_r_o_t_o_c_o_l___d_a_t_a___u_n_i_t>`  pduData, RTS_UI32 bFirstCall)

- int :ref:`NetServerChannelError <group___cmp_channel_server_itf_1gac1428a568b4f07be79b180d12e23fa5c>` (:ref:`CHANNELBUFFER <struct_c_h_a_n_n_e_l_b_u_f_f_e_r>` * pChBuffer, int nError)

.. _group___cmp_channel_server_itf-details:

Detailed Description
--------------------





Macro Definition Documentation
------------------------------
.. _group___cmp_channel_server_itf_1ga5af6297baff82b348ed308edcef925d3:

#define ITF_CmpChannelServer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_channel_server_itf_1gadcdcf6d61f34f733160ec53a17b1e385:

#define EXTITF_CmpChannelServer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___cmp_channel_server_itf_1ga210c4c13ac2920d84670061a6a4804d0:

typedef ICmpChannelServer_C ICmpChannelServer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function Documentation
----------------------

.. _group___cmp_channel_server_itf_1gaa61219249349fff27e8d5026984d69eb:

RTS_RESULT NetServerGetMaxChannels (RTS_UI16 *pwMaxChannels)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Retrieves the number of available server channels. This is equal to the max. number of clients, which can be connected at the same time.

**Parameters**

+---------+---------------+------------------------+
| [out]   | pwMaxChannels | Number of of channels. |
+---------+---------------+------------------------+

**Returns:**

error code

.. _group___cmp_channel_server_itf_1ga70303eac042a808bc04909757b4879d3:

RTS_RESULT NetServerGetMaxChannelBufferSize (RTS_I32 *pi32MaxChannelBufferSize)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Retrieves the max. size of the send and receive buffer of the communication channels. This size cannot be exceeded by any online service or service reply.

**Parameters**

+---------+--------------------------+-----------------------------------------+
| [out]   | pi32MaxChannelBufferSize | Max. size of each communication buffer. |
+---------+--------------------------+-----------------------------------------+

**Returns:**

error code

.. _group___cmp_channel_server_itf_1gaf77f99a0acb88ef37188f4eb44ada1b7:

RTS_RESULT NetServerGetChannelInfoByIndex (RTS_UI16 ui16ChannelIndex, RTS_UI32 *pui32ServerState, CHANNELBUFFER *pChInfoBuffer, RTS_SIZE *psiBufferLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

OBSOLETE: Function will be removed in future versions!!! Use NetServerGetChannelInfoByIndex2 instead. Retrieves general information for the specified server channel. This function is intended for information purpoeses only.

**Parameters**

+---------+------------------+-----------------------------------------------------------------------------------------------------------------+
| [in]    | ui16ChannelIndex | Index of the channel. Allowed range: 0..MaxChannels-1.                                                          |
+---------+------------------+-----------------------------------------------------------------------------------------------------------------+
| [out]   | pui32ServerState | State of the server channel, see category "channel server state" for CSSTATE_ values in CmpCommunicationLibItf. |
+---------+------------------+-----------------------------------------------------------------------------------------------------------------+
| [inout] | pChInfoBuffer    | Caller allocated buffer, to which the content of the internal channel buffer structure is copied to.            |
+---------+------------------+-----------------------------------------------------------------------------------------------------------------+
| [inout] | psiBufferLen     | Pointer to the size of the buffer in bytes, returns the number of copied bytes.                                 |
+---------+------------------+-----------------------------------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_channel_server_itf_1ga1b88d27b187b18b540ab30c0ab6013de:

RTS_RESULT NetServerGetChannelInfoByIndex2 (RTS_UI16 ui16ChannelIndex, RTS_UI32 *pui32ServerState, CHANNELINFO *pChInfoBuffer, RTS_SIZE *psiBufferLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Retrieves general information for the specified server channel. This function is intended for information purpoeses only.

**Parameters**

+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ui16ChannelIndex | Index of the channel. Allowed range: 0..MaxChannels-1.                                                                                                                   |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pui32ServerState | State of the server channel, see category "channel server state" for CSSTATE_ values in CmpCommunicationLibItf.                                                          |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [inout] | pChInfoBuffer    | Caller allocated buffer, which is filled by the :ref:`CHANNELINFO <struct_c_h_a_n_n_e_l_i_n_f_o>` structure. If the the state is CSSTATE_FREE, no structure is returned. |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [inout] | psiBufferLen     | Pointer to the size of the buffer in bytes, returns the number of copied bytes.                                                                                          |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_channel_server_itf_1gaf050a401e94cd38d1aaa2d3aaf2c91ae:

RTS_RESULT NetServerGetStatus (RTS_UI32 ulChannelHandle, RTS_UI16 *pusStatus, RTS_UI8 *pbyScalingFactor, RTS_I32 *pnItemsComplete, RTS_I32 *pnTotalItems)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the current status of an active channel.

**Parameters**

+---------+------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | wChannelHandle   | Id of the channel                                                                                                                                                                                        |
+---------+------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pusStatus        | Is set to the current progress state. The PROGRESS_xxx constants define valied values.                                                                                                                   |
+---------+------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pbyScalingFactor | Provides the scaling factor for pnItemsComplete and pnTotalItems. These values have been scaled down by dividing them through 2^ScalingFactor (i.e. they have been right shifted by ScalingFactor bits). |
+---------+------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pnItemsComplete  | Number of items completed (eg. the number of bytes transfered).                                                                                                                                          |
+---------+------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pnTotalItems     | Total number of item. Is set to -1 if unknown.                                                                                                                                                           |
+---------+------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_channel_server_itf_1ga40fb91f88755597d5b6eda05c9a28697:

RTS_RESULT NetServerGetRequest (RTS_UI32 ulChannelHandle, PROTOCOL_DATA_UNIT *ppduRequest, PROTOCOL_DATA_UNIT *ppduReplyBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Retrieves the current request and reply buffer.

**Parameters**

+---------+-----------------+------------------------------------------------------------------------------------+
| [in]    | ulChannelHandle | Id of the channel for which the session id should be read.                         |
+---------+-----------------+------------------------------------------------------------------------------------+
| [inout] | ppduRequest     | Caller allocated PDU to be filled with pointer and length of the received request. |
+---------+-----------------+------------------------------------------------------------------------------------+
| [inout] | ppduReplyBuffer | Caller allocated PDU to be filled with pointer and length of the reply.            |
+---------+-----------------+------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_channel_server_itf_1ga340718f90a7eca4b17b75ce83b5bf30f:

RTS_RESULT NetServerFinishRequest (RTS_UI32 ulChannelHandle, PROTOCOL_DATA_UNIT pduData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Commits the filled reply buffer to the channel and triggers sending the reply.

**Parameters**

+---------+-----------------+------------------------------------------------------------+
| [in]    | ulChannelHandle | Id of the channel for which the session id should be read. |
+---------+-----------------+------------------------------------------------------------+
| [in]    | pduData         | Pointer to the reply buffer                                |
+---------+-----------------+------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_channel_server_itf_1gac137e47c3a5fdd01150edf34f6e066e5:

RTS_RESULT NetServerSetSessionId (RTS_UI32 ulChannelHandle, RTS_UI32 ulSessionId)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Stores the session id in the channel server status structure.

**Parameters**

+---------+-----------------+-----------------------------------------------------------+
| [in]    | ulChannelHandle | Id of the channel for which the session id should be set. |
+---------+-----------------+-----------------------------------------------------------+
| [in]    | ulSessionId     | New session id fo the channel.                            |
+---------+-----------------+-----------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_channel_server_itf_1ga7c130fed4dc66eee53fbeff1bf6295fc:

RTS_RESULT NetServerGetSessionId (RTS_UI32 ulChannelHandle, RTS_UI32 *pulSessionId)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Retrieves the stored session id from the channel server status structure.

**Parameters**

+---------+-----------------+------------------------------------------------------------+
| [in]    | ulChannelHandle | Id of the channel for which the session id should be read. |
+---------+-----------------+------------------------------------------------------------+
| [out]   | pulSessionId    | Pointer to return the session id.                          |
+---------+-----------------+------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_channel_server_itf_1gab766ff65e706c26c830d7a25b260927d:

int NetServerGetChannel (PEERADDRESS addrPeer, unsigned short wChannelId, CHANNELBUFFER **ppChBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the buffer for the specified channel id.

NOTE: After usage the channelbuffer MUST be released by calling NetServerReleaseChannel. Failing to do so will prevent the channel from being closed and the server will eventually run out of channels. Nevertheless, this function DOES NOT provide exclusive access to the channel. The L4Base component must use appropriate semaphores to ensure exclusive access.

**Parameters**

+---------+------------+-----------------------------------------------------+
| [in]    | addrPeer   | The second endpoint of the channel                  |
+---------+------------+-----------------------------------------------------+
| [in]    | wChannelId | The id of the channel.                              |
+---------+------------+-----------------------------------------------------+
| [out]   | ppChBuffer | Is set to the channelbuffer, if the channel exists. |
+---------+------------+-----------------------------------------------------+

.. _group___cmp_channel_server_itf_1ga50119c1e88fa896c1577e6f6ba59f655:

int NetServerReleaseChannel (CHANNELBUFFER *pChBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Release a channel buffer returned by NetServerGetChannel. This buffer may not be used after calling this function. Use NetServerGetChannel to acquire access to this channel again.

**Parameters**

+---------+-----------+-------------------------------+
| [in]    | pChBuffer | The channel buffer to release |
+---------+-----------+-------------------------------+

.. _group___cmp_channel_server_itf_1gaf52e870aa5161b58734a8eae3d028dfc:

int NetServerHandleMetaRequest (RTS_HANDLE hRouter, PEERADDRESS addrSender, PROTOCOL_DATA_UNIT pduData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_channel_server_itf_1ga4fec7786feefac8319ede3e8cb06b86e:

void NetServerForEachChannel (PFCHANNELHANDLER pfChannelHandler, void *pParam)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_channel_server_itf_1gad1721a0b7624dd70db7a4060e3a08abf:

int NetServerMessageReceived (CHANNELBUFFER *pChBuffer, PROTOCOL_DATA_UNIT pduData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Obsolete: Use NetServerMessageReceived3 instead. Will be removed in future versions!

.. _group___cmp_channel_server_itf_1gac15631c2e30feea02ce34caab494c52b:

int NetServerMessageReceived2 (RTS_HANDLE hRouter, CHANNELBUFFER *pChBuffer, PROTOCOL_DATA_UNIT pduData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Obsolete: Use NetServerMessageReceived3 instead. Will be removed in future versions!

.. _group___cmp_channel_server_itf_1gae75efe79619be304817299704f536ff1:

RTS_RESULT NetServerMessageReceived3 (CHANNELBUFFER *pChBuffer, PROTOCOL_DATA_UNIT pduData, RTS_UI32 bFirstCall)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Called by the L4Base component whenever a complete L7 message arrived on a server channel

**Parameters**

+---------+------------+------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pChBuffer  | Pointer to the channel buffer                                                                                                                  |
+---------+------------+------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pduData    | Content of the message. The data pointed to by will be valid only until the reply has been passed to channel manager or the channel is closed. |
+---------+------------+------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | bFirstCall | 0: Tells the function, if it was already called for the same request before (0) or not (1).                                                    |
+---------+------------+------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| ERR_OK         | Received service was completely handeled.                                                                                                                |
+----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| ERR_PENDING    | Received service will be handled asynchronously by the higher layers, but the caller has not to take care about this.                                    |
+----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| ERR_CALL_AGAIN | Received service will be handled asynchronously. To progress this function have to be called again for the same received service data with bFirstCall=0. |
+----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| ERR_FAILED     | Error occured, channel close has been triggered.                                                                                                         |
+----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_channel_server_itf_1gac1428a568b4f07be79b180d12e23fa5c:

int NetServerChannelError (CHANNELBUFFER *pChBuffer, int nError)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. last line of group.rst template
.. last line of composition.rst template


