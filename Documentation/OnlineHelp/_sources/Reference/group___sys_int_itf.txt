.. first line of composition.rst template

.. first line of group.rst template

.. _group___sys_int_itf:

=========
SysIntItf
=========

Interface of SysInt. :ref:`More... <group___sys_int_itf-details>`

Modules
-------

- :ref:`Bus specific <group___sys_int_itf___busspecific>`

- :ref:`Bus types <group___sys_int_itf___bustypes>`

- :ref:`Event parameter <group___sys_int_itf___eventparameter>`

- :ref:`Events <group___sys_int_itf___events>`

- :ref:`Interrupt description <group___sys_int_itf___interruptdescription>`

- :ref:`Interrupt handler <group___sys_int_itf___interrupthandler>`

- :ref:`Interrupt handler type <group___sys_int_itf___interrupthandlertype>`

- :ref:`Interrupt modes <group___sys_int_itf___interruptmodes>`

- :ref:`Isa interrupt <group___sys_int_itf___isainterrupt>`

- :ref:`Pci interrupt <group___sys_int_itf___pciinterrupt>`

- :ref:`Settings <group___sys_int_itf___settings>`

- :ref:`Static defines <group___sys_int_itf___staticdefines>`

Data Structures
---------------

- struct :ref:`SYS_INT_CALLBACK_INFO <struct_s_y_s___i_n_t___c_a_l_l_b_a_c_k___i_n_f_o>`

- struct :ref:`SYS_INT_INFO <struct_s_y_s___i_n_t___i_n_f_o>`

- struct :ref:`tagsysintclose_struct <structtagsysintclose__struct>`

- struct :ref:`tagsysintdisable_struct <structtagsysintdisable__struct>`

- struct :ref:`tagsysintdisableall_struct <structtagsysintdisableall__struct>`

- struct :ref:`tagsysintenable_struct <structtagsysintenable__struct>`

- struct :ref:`tagsysintenableall_struct <structtagsysintenableall__struct>`

- struct :ref:`tagsysintlevel_struct <structtagsysintlevel__struct>`

- struct :ref:`tagsysintopen_struct <structtagsysintopen__struct>`

- struct :ref:`tagsysintopenbyname_struct <structtagsysintopenbyname__struct>`

- struct :ref:`tagsysintregister_struct <structtagsysintregister__struct>`

- struct :ref:`tagsysintregisterinstance_struct <structtagsysintregisterinstance__struct>`

- struct :ref:`tagsysintunregister_struct <structtagsysintunregister__struct>`

- struct :ref:`tagsysintunregisterinstance_struct <structtagsysintunregisterinstance__struct>`

- struct :ref:`ISysInt_C <struct_i_sys_int___c>`

Macros
------

- #define :ref:`ITF_SysInt <group___sys_int_itf_1ga471e19df9104f6d2783183f328d3ed9c>`

- #define :ref:`EXTITF_SysInt <group___sys_int_itf_1ga33f1771f5396840fd66138bc5f4b540f>`

Typedefs
--------

- typedef struct :ref:`tagsysintclose_struct <structtagsysintclose__struct>` :ref:`sysintclose_struct <group___sys_int_itf_1ga8f5d99120e38c14848f62142eefba450>`

- typedef struct :ref:`tagsysintdisable_struct <structtagsysintdisable__struct>` :ref:`sysintdisable_struct <group___sys_int_itf_1ga026983969287a1a95f6fbcc0ea6317c9>`

- typedef struct :ref:`tagsysintdisableall_struct <structtagsysintdisableall__struct>` :ref:`sysintdisableall_struct <group___sys_int_itf_1ga81ede26145ca817517ecedd4efa607c4>`

- typedef struct :ref:`tagsysintenable_struct <structtagsysintenable__struct>` :ref:`sysintenable_struct <group___sys_int_itf_1gac8024050582a7b0e9922d4f08c3ce179>`

- typedef struct :ref:`tagsysintenableall_struct <structtagsysintenableall__struct>` :ref:`sysintenableall_struct <group___sys_int_itf_1gae12e4eedaa9133ec8e3b9925cc950cd7>`

- typedef struct :ref:`tagsysintlevel_struct <structtagsysintlevel__struct>` :ref:`sysintlevel_struct <group___sys_int_itf_1gafbd86fe0f9c2af1931c236dce96ef80f>`

- typedef struct :ref:`tagsysintopen_struct <structtagsysintopen__struct>` :ref:`sysintopen_struct <group___sys_int_itf_1gadebb9c6a2a5fd3f1ed283b35a4a9d265>`

- typedef struct :ref:`tagsysintopenbyname_struct <structtagsysintopenbyname__struct>` :ref:`sysintopenbyname_struct <group___sys_int_itf_1gac9b71f3b2d83e75f01af1c57b768331c>`

- typedef struct :ref:`tagsysintregister_struct <structtagsysintregister__struct>` :ref:`sysintregister_struct <group___sys_int_itf_1ga6dea7fb96556e4c76797385a19466bd0>`

- typedef struct :ref:`tagsysintregisterinstance_struct <structtagsysintregisterinstance__struct>` :ref:`sysintregisterinstance_struct <group___sys_int_itf_1ga0bc215975fe5e99c0cbdb9f701ef8446>`

- typedef struct :ref:`tagsysintunregister_struct <structtagsysintunregister__struct>` :ref:`sysintunregister_struct <group___sys_int_itf_1gae4b61006716c5cdb0b489d39e56f6319>`

- typedef struct :ref:`tagsysintunregisterinstance_struct <structtagsysintunregisterinstance__struct>` :ref:`sysintunregisterinstance_struct <group___sys_int_itf_1gaa14c7fd643dfeb95025d71d2050f27fb>`

- typedef :ref:`ISysInt_C <struct_i_sys_int___c>` :ref:`ISysInt <group___sys_int_itf_1gad93c1ec0d33b9cfee8819835bd409749>`

Functions
---------

- void :ref:`sysintclose <group___sys_int_itf_1ga93bda4d467fc1b8902813c122a804aa3>` (:ref:`sysintclose_struct <group___sys_int_itf_1ga8f5d99120e38c14848f62142eefba450>` * p)

- void :ref:`sysintdisable <group___sys_int_itf_1ga18a9e94f4b3b6dc59580f1abb8a47d84>` (:ref:`sysintdisable_struct <group___sys_int_itf_1ga026983969287a1a95f6fbcc0ea6317c9>` * p)

- void :ref:`sysintdisableall <group___sys_int_itf_1ga0376da63c0dcdeefd54ba5b939cf1b09>` (:ref:`sysintdisableall_struct <group___sys_int_itf_1ga81ede26145ca817517ecedd4efa607c4>` * p)

- void :ref:`sysintenable <group___sys_int_itf_1ga6608da804ef6070db93c3418e421e833>` (:ref:`sysintenable_struct <group___sys_int_itf_1gac8024050582a7b0e9922d4f08c3ce179>` * p)

- void :ref:`sysintenableall <group___sys_int_itf_1gaa7f3dffec2c06b748d363c9116b1a1a2>` (:ref:`sysintenableall_struct <group___sys_int_itf_1gae12e4eedaa9133ec8e3b9925cc950cd7>` * p)

- void :ref:`sysintlevel <group___sys_int_itf_1gac231038f55b1d3368ec934050b8ed27e>` (:ref:`sysintlevel_struct <group___sys_int_itf_1gafbd86fe0f9c2af1931c236dce96ef80f>` * p)

- void :ref:`sysintopen <group___sys_int_itf_1ga0dcc8f143697e0c6cd639a296384d2ac>` (:ref:`sysintopen_struct <group___sys_int_itf_1gadebb9c6a2a5fd3f1ed283b35a4a9d265>` * p)

- void :ref:`sysintopenbyname <group___sys_int_itf_1ga25c70b4078428222c79016e6aaf1a378>` (:ref:`sysintopenbyname_struct <group___sys_int_itf_1gac9b71f3b2d83e75f01af1c57b768331c>` * p)

- void :ref:`sysintregister <group___sys_int_itf_1gaa90f586cc1bd76a164582d00bfde602a>` (:ref:`sysintregister_struct <group___sys_int_itf_1ga6dea7fb96556e4c76797385a19466bd0>` * p)

- void :ref:`sysintregisterinstance <group___sys_int_itf_1ga69be356a5ce86044850ed62d0e6ea0b4>` (:ref:`sysintregisterinstance_struct <group___sys_int_itf_1ga0bc215975fe5e99c0cbdb9f701ef8446>` * p)

- void :ref:`sysintunregister <group___sys_int_itf_1ga80b2e372167b00927a4148f58e3b1ef0>` (:ref:`sysintunregister_struct <group___sys_int_itf_1gae4b61006716c5cdb0b489d39e56f6319>` * p)

- void :ref:`sysintunregisterinstance <group___sys_int_itf_1gad29d9d8c5cb48fdf6c10f9a06fc2eb12>` (:ref:`sysintunregisterinstance_struct <group___sys_int_itf_1gaa14c7fd643dfeb95025d71d2050f27fb>` * p)

- RTS_HANDLE :ref:`SysIntOpen <group___sys_int_itf_1ga3afe47f9882c9f6685a71ff66a888536>` (unsigned long ulInterrupt, :ref:`SYS_INT_DESCRIPTION <group___sys_int_itf___interruptdescription_1ga9489ef3e465ecbe098ef1ad5d33e1228>` * pIntDescription, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`SysIntOpenByName <group___sys_int_itf_1ga22c1d1f1555da8d6bfdb0c869004930e>` (char * pszIntName, RTS_RESULT * pResult)

- RTS_RESULT :ref:`SysIntClose <group___sys_int_itf_1ga0ab998b4a0c53977608bd25b37953877>` (RTS_HANDLE hInt)

- RTS_RESULT :ref:`SysIntEnable <group___sys_int_itf_1gac5bf2b2cb995288f2b9ed5390230150e>` (RTS_HANDLE hInt)

- RTS_RESULT :ref:`SysIntDisable <group___sys_int_itf_1ga7436ec89781d4db899772c29cfaf0e49>` (RTS_HANDLE hInt)

- RTS_RESULT :ref:`SysIntRegister <group___sys_int_itf_1gadab3d192f67159aa71953a6335b38f81>` (RTS_HANDLE hInt, unsigned long ulType, :ref:`SYS_INT_INTHANDLER <group___sys_int_itf___interrupthandler_1ga774e147c42741c2f590ff20d1bfb2e54>`  pHandler, RTS_UINTPTR ulAdditionalInfo)

- RTS_RESULT :ref:`SysIntUnregister <group___sys_int_itf_1ga9a14d8cb4a530275ad77c578af5bef77>` (RTS_HANDLE hInt, :ref:`SYS_INT_INTHANDLER <group___sys_int_itf___interrupthandler_1ga774e147c42741c2f590ff20d1bfb2e54>`  pHandler)

- RTS_RESULT :ref:`SysIntEnableAll <group___sys_int_itf_1ga0b8176d1ae912edfc4441da6cfd563a0>` (RTS_UINTPTR * pulParam)

- RTS_RESULT :ref:`SysIntDisableAll <group___sys_int_itf_1ga943f7aa7b27a7860c4c7d5c227c5cbb6>` (RTS_UINTPTR * pulParam)

- RTS_RESULT :ref:`SysIntLevel <group___sys_int_itf_1gaea7e2a1e6ec297b1ec5eec00dcde8438>` (void)

.. _group___sys_int_itf-details:

Detailed Description
--------------------

Interface of SysInt.

The SysInt interface is projected to get access to the hardware interrupts of the system.

**Copyright:**

Copyright (c) 2017-2018 CODESYS GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved.

Macro Definition Documentation
------------------------------
.. _group___sys_int_itf_1ga471e19df9104f6d2783183f328d3ed9c:

#define ITF_SysInt
^^^^^^^^^^^^^^^^^^

.. _group___sys_int_itf_1ga33f1771f5396840fd66138bc5f4b540f:

#define EXTITF_SysInt
^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___sys_int_itf_1ga8f5d99120e38c14848f62142eefba450:

typedef struct tagsysintclose_struct  sysintclose_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Close an interrupt
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_int_itf_1ga026983969287a1a95f6fbcc0ea6317c9:

typedef struct tagsysintdisable_struct  sysintdisable_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to disable an interrupt. By use of this function the interrupt specified by its handle gets deactivated (masked).
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_int_itf_1ga81ede26145ca817517ecedd4efa607c4:

typedef struct tagsysintdisableall_struct  sysintdisableall_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to disable all interrupts. By use of this functions all interrupts are deactivated (masked). A call of SysIntDisableAll has to be succeeded by a call to SysIntEnableAll!
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_int_itf_1gac8024050582a7b0e9922d4f08c3ce179:

typedef struct tagsysintenable_struct  sysintenable_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to enable an interrupt. By use of this function the interrupt specified by its handle is activated.
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_int_itf_1gae12e4eedaa9133ec8e3b9925cc950cd7:

typedef struct tagsysintenableall_struct  sysintenableall_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A call to this function will be done after a call of function SysIntDisableAll and will restore the situation preceding the execution of SysIntDisableAll. That means, all interrupts, having been activated before the call to SysIntDisableAll are activated again.

**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_int_itf_1gafbd86fe0f9c2af1931c236dce96ef80f:

typedef struct tagsysintlevel_struct  sysintlevel_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function checks if the processor is actually executing an ISR. This information is necessary, as some functions of an operating system must not be called within the interrupt level.

**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library):

- ERR_OK: We are still in an interrupt handler

- ERR_FAILED: not in interrupt context

.. _group___sys_int_itf_1gadebb9c6a2a5fd3f1ed283b35a4a9d265:

typedef struct tagsysintopen_struct  sysintopen_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Open a valid interrupt
**Returns:**

*RESULT: Handle to the interrupt or RTS_INVALID_HANDLE if failed.

.. _group___sys_int_itf_1gac9b71f3b2d83e75f01af1c57b768331c:

typedef struct tagsysintopenbyname_struct  sysintopenbyname_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Open a valid interrupt specified by name
**Returns:**

*RESULT: Handle to the interrupt or RTS_INVALID_HANDLE if failed.

.. _group___sys_int_itf_1ga6dea7fb96556e4c76797385a19466bd0:

typedef struct tagsysintregister_struct  sysintregister_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to register an interrupt handler. By use of this function an interrupt handler (Interrupt Service Routine, ISR) for the interrupt specified by its handle gets registered. During registration, the start address of the function to be executed in case of the associated interrupt request is filled into the vector table on the target.
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_int_itf_1ga0bc215975fe5e99c0cbdb9f701ef8446:

typedef struct tagsysintregisterinstance_struct  sysintregisterinstance_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Still unsupported function!

.. _group___sys_int_itf_1gae4b61006716c5cdb0b489d39e56f6319:

typedef struct tagsysintunregister_struct  sysintunregister_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to unregister an interrupt handler
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_int_itf_1gaa14c7fd643dfeb95025d71d2050f27fb:

typedef struct tagsysintunregisterinstance_struct  sysintunregisterinstance_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Still unsupported function!

.. _group___sys_int_itf_1gad93c1ec0d33b9cfee8819835bd409749:

typedef ISysInt_C ISysInt
^^^^^^^^^^^^^^^^^^^^^^^^^

Function Documentation
----------------------

.. _group___sys_int_itf_1ga93bda4d467fc1b8902813c122a804aa3:

void sysintclose (sysintclose_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_int_itf_1ga18a9e94f4b3b6dc59580f1abb8a47d84:

void sysintdisable (sysintdisable_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_int_itf_1ga0376da63c0dcdeefd54ba5b939cf1b09:

void sysintdisableall (sysintdisableall_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_int_itf_1ga6608da804ef6070db93c3418e421e833:

void sysintenable (sysintenable_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_int_itf_1gaa7f3dffec2c06b748d363c9116b1a1a2:

void sysintenableall (sysintenableall_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_int_itf_1gac231038f55b1d3368ec934050b8ed27e:

void sysintlevel (sysintlevel_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_int_itf_1ga0dcc8f143697e0c6cd639a296384d2ac:

void sysintopen (sysintopen_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_int_itf_1ga25c70b4078428222c79016e6aaf1a378:

void sysintopenbyname (sysintopenbyname_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_int_itf_1gaa90f586cc1bd76a164582d00bfde602a:

void sysintregister (sysintregister_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_int_itf_1ga69be356a5ce86044850ed62d0e6ea0b4:

void sysintregisterinstance (sysintregisterinstance_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_int_itf_1ga80b2e372167b00927a4148f58e3b1ef0:

void sysintunregister (sysintunregister_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_int_itf_1gad29d9d8c5cb48fdf6c10f9a06fc2eb12:

void sysintunregisterinstance (sysintunregisterinstance_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_int_itf_1ga3afe47f9882c9f6685a71ff66a888536:

RTS_HANDLE SysIntOpen (unsigned long ulInterrupt, SYS_INT_DESCRIPTION *pIntDescription, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EXTERN LIB SECTION END

Open a valid interrupt

**Parameters**

+---------+-----------------+---------------------------------------------------------------------------------------+
| [in]    | ulInterrupt     | Interrupt number RANGE=[0,VALID_INT_NR,INVALID_INT_NR]                                |
+---------+-----------------+---------------------------------------------------------------------------------------+
| [in]    | pIntDescription | Pointer to optional interrupt description RANGE=[0,VALID_INT_DESCR,INVALID_INT_DESCR] |
+---------+-----------------+---------------------------------------------------------------------------------------+
| [out]   | pResult         | Pointer to result                                                                     |
+---------+-----------------+---------------------------------------------------------------------------------------+

**Return values**

+---------------+--------------------------------------------------------------+
| ERR_OK        | Interrupt could be opened, a valid Handle is returned        |
+---------------+--------------------------------------------------------------+
| ERR_FAILED    | Interrupt could not be opened, an invalid Handle is returned |
+---------------+--------------------------------------------------------------+
| ERR_PARAMETER | Invalid ulInterrupt Parameter                                |
+---------------+--------------------------------------------------------------+

**Returns:**

Handle to interrupt, is RTS_INVALID_HANDLE if error occured, see Errorcodes.

.. _group___sys_int_itf_1ga22c1d1f1555da8d6bfdb0c869004930e:

RTS_HANDLE SysIntOpenByName (char *pszIntName, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Open a valid interrupt specified by name

**Parameters**

+---------+------------+--------------------------------------------------------------------------------------------+
| [in]    | pszIntName | Interrupt name defined in the settings component RANGE=[0,VALID_INT_NAMR,INVALID_INT_NAME] |
+---------+------------+--------------------------------------------------------------------------------------------+

**Return values**

+---------------+--------------------------------------------------------------+
| ERR_OK        | Interrupt could be opened, a valid Handle is returned        |
+---------------+--------------------------------------------------------------+
| ERR_FAILED    | Interrupt could not be opened, an invalid Handle is returned |
+---------------+--------------------------------------------------------------+
| ERR_PARAMETER | Parameter wrong, an invalid Handle is returned               |
+---------------+--------------------------------------------------------------+
| ERR_NO_OBJECT | No Interrupt found for given Name                            |
+---------------+--------------------------------------------------------------+

**Parameters**

+---------+---------+-------------------+
| [out]   | pResult | Pointer to result |
+---------+---------+-------------------+

**Returns:**

Handle to interrupt

.. _group___sys_int_itf_1ga0ab998b4a0c53977608bd25b37953877:

RTS_RESULT SysIntClose (RTS_HANDLE hInt)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Close an interrupt

**Parameters**

+---------+------+----------------------------------------------------------------+
| [in]    | hInt | Interrupt handle RANGE=[RTS_INVALID_HANDLE,0,VALID_INT_HANDLE] |
+---------+------+----------------------------------------------------------------+

**Return values**

+---------------+----------------------------------+
| ERR_OK        | Interrupt could be closed        |
+---------------+----------------------------------+
| ERR_FAILED    | Interrupt could not be closed    |
+---------------+----------------------------------+
| ERR_NO_OBJECT | No Interrupt found for Parameter |
+---------------+----------------------------------+

**Returns:**

error code

.. _group___sys_int_itf_1gac5bf2b2cb995288f2b9ed5390230150e:

RTS_RESULT SysIntEnable (RTS_HANDLE hInt)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to enable an interrupt

**Parameters**

+---------+------+-----------------------------------------------------------------------+
| [in]    | hInt | Handle to the interrupt RANGE=[RTS_INVALID_HANDLE,0,VALID_INT_HANDLE] |
+---------+------+-----------------------------------------------------------------------+

**Return values**

+---------------+----------------------------------+
| ERR_OK        | Interrupt could be enabled       |
+---------------+----------------------------------+
| ERR_FAILED    | Interrupt could not be enabled   |
+---------------+----------------------------------+
| ERR_NO_OBJECT | No Interrupt found for Parameter |
+---------------+----------------------------------+

**Returns:**

error code

.. _group___sys_int_itf_1ga7436ec89781d4db899772c29cfaf0e49:

RTS_RESULT SysIntDisable (RTS_HANDLE hInt)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to disable an interrupt

**Parameters**

+---------+------+-----------------------------------------------------------------------+
| [in]    | hInt | Handle to the interrupt RANGE=[RTS_INVALID_HANDLE,0,VALID_INT_HANDLE] |
+---------+------+-----------------------------------------------------------------------+

**Return values**

+---------------+----------------------------------+
| ERR_OK        | Interrupt could be disabled      |
+---------------+----------------------------------+
| ERR_FAILED    | Interrupt could not be disabled  |
+---------------+----------------------------------+
| ERR_NO_OBJECT | No Interrupt found for Parameter |
+---------------+----------------------------------+

**Returns:**

error code

.. _group___sys_int_itf_1gadab3d192f67159aa71953a6335b38f81:

RTS_RESULT SysIntRegister (RTS_HANDLE hInt, unsigned long ulType, SYS_INT_INTHANDLER pHandler, RTS_UINTPTR ulAdditionalInfo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to register an interrupt handler

**Parameters**

+---------+------------------+----------------------------------------------------------------------------------------------------------------------------+
| [in]    | hInt             | Handle to the interrupt RANGE=[RTS_INVALID_HANDLE,0,VALID_INT_HANDLE]                                                      |
+---------+------------------+----------------------------------------------------------------------------------------------------------------------------+
| [in]    | ulType           | Type of interrupt handler. See category Interrupt handler type RANGE=[SYS_INT_NONE,SYS_INT_IEC,SYS_INT_C,INVALID_INT_TYPE] |
+---------+------------------+----------------------------------------------------------------------------------------------------------------------------+
| [in]    | pHandler         | Interrupt handler RANGE=[0,VALID_INT_HANDLER,INVALID_INT_HANDLER]                                                          |
+---------+------------------+----------------------------------------------------------------------------------------------------------------------------+
| [in]    | ulAdditionalInfo | Info value that is transmitted to the interrupt handler RANGE=[0,VALID_INT_ADDINFO,INVALID_INT_ADDINFO]                    |
+---------+------------------+----------------------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+----------------------------------------------+
| ERR_OK        | Interrupt Handler could be registered        |
+---------------+----------------------------------------------+
| ERR_FAILED    | Interrupt Handler could not be registered    |
+---------------+----------------------------------------------+
| ERR_NO_OBJECT | No Interrupt found for Parameter, Wrong Type |
+---------------+----------------------------------------------+
| ERR_PARAMETER | pHandler may not be null                     |
+---------------+----------------------------------------------+

**Returns:**

error code

.. _group___sys_int_itf_1ga9a14d8cb4a530275ad77c578af5bef77:

RTS_RESULT SysIntUnregister (RTS_HANDLE hInt, SYS_INT_INTHANDLER pHandler)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to unregister an interrupt handler

**Parameters**

+---------+----------+-----------------------------------------------------------------------+
| [in]    | hInt     | Handle to the interrupt RANGE=[RTS_INVALID_HANDLE,0,VALID_INT_HANDLE] |
+---------+----------+-----------------------------------------------------------------------+
| [in]    | pHandler | Interrupt handler RANGE=[0,VALID_INT_HANDLER,INVALID_INT_HANDLER]     |
+---------+----------+-----------------------------------------------------------------------+

**Return values**

+---------------+---------------------------------------------+
| ERR_OK        | Interrupt Handler could be unregistered     |
+---------------+---------------------------------------------+
| ERR_FAILED    | Interrupt Handler could not be unregistered |
+---------------+---------------------------------------------+
| ERR_NO_OBJECT | No Interrupt found for hInt                 |
+---------------+---------------------------------------------+
| ERR_PARAMETER | pHandler may not be null                    |
+---------------+---------------------------------------------+

**Returns:**

error code

.. _group___sys_int_itf_1ga0b8176d1ae912edfc4441da6cfd563a0:

RTS_RESULT SysIntEnableAll (RTS_UINTPTR *pulParam)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to enable all interrupts

**Parameters**

+---------+------------------+-------------------------------------------------------------------------------------------------------------+
| [in]    | pulParam         | Parameter for enabling all interrupts RANGE=[NULL,VALID_PARAM,INVALID_PARAM_NONE,INVALID_PARAM_FULL]        |
+---------+------------------+-------------------------------------------------------------------------------------------------------------+
| [out]   | bTimerOccured    | ***PSEUDO*** Specifies, if a timer was able to run, during the lock, or not RANGE=[TRUE,FALSE]              |
+---------+------------------+-------------------------------------------------------------------------------------------------------------+
| [out]   | bWatchdogOccured | ***PSEUDO*** Specifies, if the watchdog handler was able to run, during the lock, or not RANGE=[TRUE,FALSE] |
+---------+------------------+-------------------------------------------------------------------------------------------------------------+

**Return values**

+--------------------+-----------------------------------------+
| ERR_OK             | Interrupts could be enabled             |
+--------------------+-----------------------------------------+
| ERR_NOTIMPLEMENTED | Function is not supported by the system |
+--------------------+-----------------------------------------+

**Returns:**

error code

.. _group___sys_int_itf_1ga943f7aa7b27a7860c4c7d5c227c5cbb6:

RTS_RESULT SysIntDisableAll (RTS_UINTPTR *pulParam)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to disable all interrupts

**Parameters**

+---------+------------------+-------------------------------------------------------------------------------------------------------------+
| [inout] | pulParam         | Parameter for disabling all interrupts RANGE=[NULL,VALID_PARAM]                                             |
+---------+------------------+-------------------------------------------------------------------------------------------------------------+
| [out]   | bTimerOccured    | ***PSEUDO*** Specifies, if a timer was able to run, during the lock, or not RANGE=[TRUE,FALSE]              |
+---------+------------------+-------------------------------------------------------------------------------------------------------------+
| [out]   | bWatchdogOccured | ***PSEUDO*** Specifies, if the watchdog handler was able to run, during the lock, or not RANGE=[TRUE,FALSE] |
+---------+------------------+-------------------------------------------------------------------------------------------------------------+

**Return values**

+--------------------+-----------------------------------------+
| ERR_OK             | Interrupts could be disabled            |
+--------------------+-----------------------------------------+
| ERR_NOTIMPLEMENTED | Function is not supported by the system |
+--------------------+-----------------------------------------+

**Returns:**

error code

.. _group___sys_int_itf_1gaea7e2a1e6ec297b1ec5eec00dcde8438:

RTS_RESULT SysIntLevel (void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to check, if we are running actual in an interrupt context

**Return values**

+------------+--------------------------------------+
| ERR_OK     | We are still in an interrupt handler |
+------------+--------------------------------------+
| ERR_FAILED | not in interrupt context             |
+------------+--------------------------------------+

**Returns:**

Returns ERR_OK if running in an interrupt handler, ERR_FAILED if not

.. last line of group.rst template
.. last line of composition.rst template


