.. first line of composition.rst template

.. first line of group.rst template

.. _group___sys_timer_itf:

===========
SysTimerItf
===========

Interface of SysTimer. :ref:`More... <group___sys_timer_itf-details>`

Modules
-------

- :ref:`Settings <group___sys_timer_itf___settings>`

- :ref:`Static defines <group___sys_timer_itf___staticdefines>`

- :ref:`Timer error codes <group___sys_timer_itf___timererrorcodes>`

- :ref:`Timer info structure <group___sys_timer_itf___timerinfostructure>`

- :ref:`Timer type <group___sys_timer_itf___timertype>`

Data Structures
---------------

- struct :ref:`systimercallback_struct <structsystimercallback__struct>`

- struct :ref:`tagsystimercreatecallback_struct <structtagsystimercreatecallback__struct>`

- struct :ref:`tagsystimercreatecallback2_struct <structtagsystimercreatecallback2__struct>`

- struct :ref:`tagsystimercreateevent_struct <structtagsystimercreateevent__struct>`

- struct :ref:`tagsystimerdelete_struct <structtagsystimerdelete__struct>`

- struct :ref:`tagsystimergetinterval_struct <structtagsystimergetinterval__struct>`

- struct :ref:`tagsystimergettimestamp_struct <structtagsystimergettimestamp__struct>`

- struct :ref:`tagsystimermaxtimer_struct <structtagsystimermaxtimer__struct>`

- struct :ref:`tagsystimersetinterval_struct <structtagsystimersetinterval__struct>`

- struct :ref:`tagsystimerstart_struct <structtagsystimerstart__struct>`

- struct :ref:`tagsystimerstop_struct <structtagsystimerstop__struct>`

- struct :ref:`ISysTimer_C <struct_i_sys_timer___c>`

Macros
------

- #define :ref:`ITF_SysTimer <group___sys_timer_itf_1gac007bda410aeef6d00f57006fb17720a>`

- #define :ref:`EXTITF_SysTimer <group___sys_timer_itf_1gaca004b138610dcf60ab80b938a299194>`

Typedefs
--------

- typedef void HUGEPTR(* :ref:`PFTIMERCALLBACK <group___sys_timer_itf_1ga6c0e09a03b5aac7aeb73c12ae73a1a08>`)(RTS_HANDLE hParam)

- typedef RTS_RESULT(* :ref:`PFTIMEREXCEPTIONHANDLER <group___sys_timer_itf_1ga7b20637e8c2755956fe3b58973be5fbd>`)(RTS_HANDLE hTimerHandle, RTS_UI32 ulException, RegContext Context)

- typedef struct :ref:`tagsystimercreatecallback_struct <structtagsystimercreatecallback__struct>` :ref:`systimercreatecallback_struct <group___sys_timer_itf_1ga299065b5a711c22b2d332b5e0bfb8561>`

- typedef struct :ref:`tagsystimercreatecallback2_struct <structtagsystimercreatecallback2__struct>` :ref:`systimercreatecallback2_struct <group___sys_timer_itf_1ga1c2f1ddafced9b1d1a23265a3f63dbc7>`

- typedef struct :ref:`tagsystimercreateevent_struct <structtagsystimercreateevent__struct>` :ref:`systimercreateevent_struct <group___sys_timer_itf_1ga04930ee508302e86be3c34824a97bcfb>`

- typedef struct :ref:`tagsystimerdelete_struct <structtagsystimerdelete__struct>` :ref:`systimerdelete_struct <group___sys_timer_itf_1ga2097aea5dc7382ed3620f2db1de27709>`

- typedef struct :ref:`tagsystimergetinterval_struct <structtagsystimergetinterval__struct>` :ref:`systimergetinterval_struct <group___sys_timer_itf_1ga5eb01d53972d8d029a07776967085d7c>`

- typedef struct :ref:`tagsystimergettimestamp_struct <structtagsystimergettimestamp__struct>` :ref:`systimergettimestamp_struct <group___sys_timer_itf_1ga43f35fc1ccbddbd787478a8f87d6be87>`

- typedef struct :ref:`tagsystimermaxtimer_struct <structtagsystimermaxtimer__struct>` :ref:`systimermaxtimer_struct <group___sys_timer_itf_1ga024303d370ba06786797b427d203bce0>`

- typedef struct :ref:`tagsystimersetinterval_struct <structtagsystimersetinterval__struct>` :ref:`systimersetinterval_struct <group___sys_timer_itf_1gaed89997b85893f4faddb5a035bb54869>`

- typedef struct :ref:`tagsystimerstart_struct <structtagsystimerstart__struct>` :ref:`systimerstart_struct <group___sys_timer_itf_1ga24211b0db8a33e07fe6e95a1cee48da1>`

- typedef struct :ref:`tagsystimerstop_struct <structtagsystimerstop__struct>` :ref:`systimerstop_struct <group___sys_timer_itf_1ga76bcf0390256147083789efbf1a5dfda>`

- typedef :ref:`ISysTimer_C <struct_i_sys_timer___c>` :ref:`ISysTimer <group___sys_timer_itf_1ga2936e5147fb23d8106c8701c7db21f96>`

Functions
---------

- void :ref:`systimercreatecallback <group___sys_timer_itf_1ga68ee3666c8dcb0ed66401c36f18be08e>` (:ref:`systimercreatecallback_struct <group___sys_timer_itf_1ga299065b5a711c22b2d332b5e0bfb8561>` * p)

- void :ref:`systimercreatecallback2 <group___sys_timer_itf_1gae115324f61d2148ec229cb2f2df1ff70>` (:ref:`systimercreatecallback2_struct <group___sys_timer_itf_1ga1c2f1ddafced9b1d1a23265a3f63dbc7>` * p)

- void :ref:`systimercreateevent <group___sys_timer_itf_1ga1bfa5fdd8b70cf7a9d30618e4cc97ff1>` (:ref:`systimercreateevent_struct <group___sys_timer_itf_1ga04930ee508302e86be3c34824a97bcfb>` * p)

- void :ref:`systimerdelete <group___sys_timer_itf_1ga7fb2351b18c91e8638e4acf5e98d345b>` (:ref:`systimerdelete_struct <group___sys_timer_itf_1ga2097aea5dc7382ed3620f2db1de27709>` * p)

- void :ref:`systimergetinterval <group___sys_timer_itf_1gab35d8f01b522f83479fb07b6bf86ad43>` (:ref:`systimergetinterval_struct <group___sys_timer_itf_1ga5eb01d53972d8d029a07776967085d7c>` * p)

- void :ref:`systimergettimestamp <group___sys_timer_itf_1ga140844d918f4bc2c69135b6f9acc2500>` (:ref:`systimergettimestamp_struct <group___sys_timer_itf_1ga43f35fc1ccbddbd787478a8f87d6be87>` * p)

- void :ref:`systimermaxtimer <group___sys_timer_itf_1ga3ecbc34238f0050e858954da0ef7e9dd>` (:ref:`systimermaxtimer_struct <group___sys_timer_itf_1ga024303d370ba06786797b427d203bce0>` * p)

- void :ref:`systimersetinterval <group___sys_timer_itf_1gaceead3f5bc13daff7557677f99ff763c>` (:ref:`systimersetinterval_struct <group___sys_timer_itf_1gaed89997b85893f4faddb5a035bb54869>` * p)

- void :ref:`systimerstart <group___sys_timer_itf_1gacb5f5da3a0c1f2ff54c7b7d1cc0b8617>` (:ref:`systimerstart_struct <group___sys_timer_itf_1ga24211b0db8a33e07fe6e95a1cee48da1>` * p)

- void :ref:`systimerstop <group___sys_timer_itf_1gafc80299b68323395049698ea4ec084cb>` (:ref:`systimerstop_struct <group___sys_timer_itf_1ga76bcf0390256147083789efbf1a5dfda>` * p)

- RTS_RESULT :ref:`SysTimerOSInit <group___sys_timer_itf_1ga4b88c19e3cb50e4fb404b9840b3f4818>` (INIT_STRUCT * pInit)

- RTS_RESULT :ref:`SysTimerOSHookFunction <group___sys_timer_itf_1gae41bca895d3668f705513c37ff58f360>` (RTS_UI32 ulHook, RTS_UINTPTR ulParam1, RTS_UINTPTR ulParam2)

- RTS_HANDLE :ref:`SysTimerCreateEvent <group___sys_timer_itf_1ga72448a0047df2952bde603c6f9e3836c>` (RTS_HANDLE hEvent, :ref:`RTS_SYSTIME <group___sys_time_itf_1ga10c9d9a4c57129d83432fb02923858bf>`  tIntervalNs, unsigned long ulPriority, :ref:`PFTIMEREXCEPTIONHANDLER <group___sys_timer_itf_1ga7b20637e8c2755956fe3b58973be5fbd>`  pfExceptionHandler, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`SysTimerCreateCallback <group___sys_timer_itf_1ga7bd0c7b2667c9e120d678bc77aa530ee>` (:ref:`PFTIMERCALLBACK <group___sys_timer_itf_1ga6c0e09a03b5aac7aeb73c12ae73a1a08>`  pfTimerCallback, RTS_HANDLE hParam, int bIECFunction, :ref:`RTS_SYSTIME <group___sys_time_itf_1ga10c9d9a4c57129d83432fb02923858bf>`  tIntervalNs, unsigned long ulPriority, :ref:`PFTIMEREXCEPTIONHANDLER <group___sys_timer_itf_1ga7b20637e8c2755956fe3b58973be5fbd>`  pfExceptionHandler, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`SysTimerCreateCallback2 <group___sys_timer_itf_1gac13e0205d37e969d4a01a53ae7464e39>` (:ref:`PFTIMERCALLBACK <group___sys_timer_itf_1ga6c0e09a03b5aac7aeb73c12ae73a1a08>`  pfTimerCallback, RTS_HANDLE hParam, int bIECFunction, :ref:`RTS_SYSTIME <group___sys_time_itf_1ga10c9d9a4c57129d83432fb02923858bf>`  tIntervalNs, unsigned long ulPriority, unsigned long ulType, :ref:`PFTIMEREXCEPTIONHANDLER <group___sys_timer_itf_1ga7b20637e8c2755956fe3b58973be5fbd>`  pfExceptionHandler, RTS_RESULT * pResult)

- RTS_RESULT :ref:`SysTimerDelete <group___sys_timer_itf_1ga82ba4944fb348a0fc3147e0ad225e941>` (RTS_HANDLE hTimer)

- RTS_HANDLE :ref:`SysTimerOpen <group___sys_timer_itf_1ga81a4bda452cea19feeba1b8383cafcee>` (:ref:`SYS_TIMER_INFO <struct_s_y_s___t_i_m_e_r___i_n_f_o>` * pTimerInfo, RTS_RESULT * pResult)

- RTS_RESULT :ref:`SysTimerClose <group___sys_timer_itf_1gaa9dc02593fd99db07c4db7eca43cf2ab>` (RTS_HANDLE hTimer)

- RTS_RESULT :ref:`SysTimerStart <group___sys_timer_itf_1gaab0e60e94bc15215f8cc59f0925d8111>` (RTS_HANDLE hTimer, unsigned long ulType)

- RTS_RESULT :ref:`SysTimerStop <group___sys_timer_itf_1gae4193bd2879f8f1aa9a6b799069e1759>` (RTS_HANDLE hTimer)

- RTS_RESULT :ref:`SysTimerGetInterval <group___sys_timer_itf_1ga536aaa19cb9a505f566d1c8afb598124>` (RTS_HANDLE hTimer, :ref:`RTS_SYSTIME <group___sys_time_itf_1ga10c9d9a4c57129d83432fb02923858bf>` * ptIntervalNs)

- RTS_RESULT :ref:`SysTimerSetInterval <group___sys_timer_itf_1gaec21d923ed57b06f68b032563b2af243>` (RTS_HANDLE hTimer, :ref:`RTS_SYSTIME <group___sys_time_itf_1ga10c9d9a4c57129d83432fb02923858bf>`  tIntervalNs)

- RTS_RESULT :ref:`SysTimerGetTimeStamp <group___sys_timer_itf_1ga921a7ac15d2223a29952722c2159aeaf>` (RTS_HANDLE hTimer, :ref:`RTS_SYSTIME <group___sys_time_itf_1ga10c9d9a4c57129d83432fb02923858bf>` * ptTimestampNs)

- RTS_RESULT :ref:`SysTimerMaxTimer <group___sys_timer_itf_1ga1ac691c3724ffeb1de2add6f9891fe92>` (RTS_UI32 * pulMaxTimers)

- RTS_HANDLE :ref:`SysTimerExistsTimer <group___sys_timer_itf_1ga760278302712fe1313233f313309df2c>` (unsigned long ulPriority, :ref:`RTS_SYSTIME <group___sys_time_itf_1ga10c9d9a4c57129d83432fb02923858bf>`  tInterval, RTS_RESULT * pResult)

- unsigned int :ref:`SysTimerFitTimer <group___sys_timer_itf_1gac2815f89df55182c4bcb1572d9426e48>` (RTS_HANDLE hTimer, unsigned long ulPriority, :ref:`RTS_SYSTIME <group___sys_time_itf_1ga10c9d9a4c57129d83432fb02923858bf>`  tInterval, RTS_RESULT * pResult)

- RTS_RESULT :ref:`SysTimerGetMinResolution <group___sys_timer_itf_1gaf4319db131dab4fd0e26c159e3b112db>` (RTS_HANDLE hTimer, :ref:`RTS_SYSTIME <group___sys_time_itf_1ga10c9d9a4c57129d83432fb02923858bf>` * ptMinResolutionNs)

- RTS_RESULT :ref:`SysTimerGetContext <group___sys_timer_itf_1ga1cf6549e1b5201bbf7914c9678ccfa09>` (RTS_HANDLE hTimer, :ref:`RegContext <group___sys_except_itf___exceptioncontext_1gab00884ef66266dc256618d479aade118>` * pContext)

- RTS_RESULT :ref:`SysTimerGenerateException <group___sys_timer_itf_1ga3c20cc89d81ed444dccf47b1cedbd248>` (RTS_HANDLE hTimerHandle, RTS_UI32 ulException, :ref:`RegContext <group___sys_except_itf___exceptioncontext_1gab00884ef66266dc256618d479aade118>`  Context)

- RTS_RESULT :ref:`SysTimerSetCallbackParameter <group___sys_timer_itf_1gade90871c9e2feac4245496edbbd09147>` (RTS_HANDLE hTimer, RTS_HANDLE hParam)

- RTS_RESULT :ref:`SysTimerSetResetFollowing <group___sys_timer_itf_1ga97e2e65ab002ecda68472bea31976d67>` (RTS_HANDLE hTimer)

- RTS_RESULT :ref:`SysTimerRegisterBasePointer <group___sys_timer_itf_1gab11b25e015573472d6b997d9e1b3b81b>` (RTS_UINTPTR ulBP)

- void :ref:`SysTimerCallCallback <group___sys_timer_itf_1ga5b2f8285bf4efc778d302ded6eed1815>` (:ref:`SYS_TIMER_INFO <struct_s_y_s___t_i_m_e_r___i_n_f_o>` * pTimer)

- RTS_HANDLE :ref:`SysTimerGetCurrent <group___sys_timer_itf_1ga806e51d55aa81bc515d93f14014b160f>` (RTS_RESULT * pResult)

- :ref:`SYS_TIMER_INFO <struct_s_y_s___t_i_m_e_r___i_n_f_o>` * :ref:`SysTimerGetInfo <group___sys_timer_itf_1ga6e2d67e9e3d87116cabc7a2892ceaa28>` (RTS_HANDLE hTimer, RTS_RESULT * pResult)

.. _group___sys_timer_itf-details:

Detailed Description
--------------------

Interface of SysTimer.

The SysTimer interface is projected to access timer devices on target.

**Copyright:**

Copyright (c) 2017-2018 CODESYS GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved.

Macro Definition Documentation
------------------------------
.. _group___sys_timer_itf_1gac007bda410aeef6d00f57006fb17720a:

#define ITF_SysTimer
^^^^^^^^^^^^^^^^^^^^

.. _group___sys_timer_itf_1gaca004b138610dcf60ab80b938a299194:

#define EXTITF_SysTimer
^^^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___sys_timer_itf_1ga6c0e09a03b5aac7aeb73c12ae73a1a08:

typedef void HUGEPTR( * PFTIMERCALLBACK)(RTS_HANDLE hParam)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Timer callback interface

**Parameters**

+---------+--------+----------------------------------------------------------+
| [in]    | hParam | Parameter handle RANGE=[RTS_INVALID_HANDLE,VALID_HPARAM] |
+---------+--------+----------------------------------------------------------+

.. _group___sys_timer_itf_1ga7b20637e8c2755956fe3b58973be5fbd:

typedef RTS_RESULT( * PFTIMEREXCEPTIONHANDLER)(RTS_HANDLE hTimerHandle, RTS_UI32 ulException, RegContext Context)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Timer exception callback interface

**Parameters**

+---------+--------------+---------------------------------------------------------------------------------+
| [in]    | hTimerHandle | Handle of the assigned timer RANGE=[RTS_INVALID_HANDLE,NULL,VALID_TIMERHANDLE]  |
+---------+--------------+---------------------------------------------------------------------------------+
| [in]    | ulException  | Exception number RANGE=[RTS_RANGE_OF_ULONG]                                     |
+---------+--------------+---------------------------------------------------------------------------------+
| [in]    | Context      | Register context of the exception RANGE=[RTS_INVALID_HANDLE,NULL,VALID_CONTEXT] |
+---------+--------------+---------------------------------------------------------------------------------+

.. _group___sys_timer_itf_1ga299065b5a711c22b2d332b5e0bfb8561:

typedef struct tagsystimercreatecallback_struct  systimercreatecallback_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EXTERN LIB SECTION BEGIN

This function creates a new timer and calls a callback function.
**Returns:**

*RESULT: Handle of the timer or RTS_INVALID_HANDLE if failed

.. _group___sys_timer_itf_1ga1c2f1ddafced9b1d1a23265a3f63dbc7:

typedef struct tagsystimercreatecallback2_struct  systimercreatecallback2_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function creates a timer and calls a callback function.
**Returns:**

*RESULT: Handle of the timer or RTS_INVALID_HANDLE if failed

.. _group___sys_timer_itf_1ga04930ee508302e86be3c34824a97bcfb:

typedef struct tagsystimercreateevent_struct  systimercreateevent_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function creates a new timer and sets an event at timer elapsed.
**Returns:**

Handle of the timer or RTS_INVALID_HANDLE

.. _group___sys_timer_itf_1ga2097aea5dc7382ed3620f2db1de27709:

typedef struct tagsystimerdelete_struct  systimerdelete_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function deletes a timer
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_timer_itf_1ga5eb01d53972d8d029a07776967085d7c:

typedef struct tagsystimergetinterval_struct  systimergetinterval_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns the interval of a timer
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_timer_itf_1ga43f35fc1ccbddbd787478a8f87d6be87:

typedef struct tagsystimergettimestamp_struct  systimergettimestamp_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function returns the timestamp in ticks since timer start
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_timer_itf_1ga024303d370ba06786797b427d203bce0:

typedef struct tagsystimermaxtimer_struct  systimermaxtimer_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function returns the maximal number of timers
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_timer_itf_1gaed89997b85893f4faddb5a035bb54869:

typedef struct tagsystimersetinterval_struct  systimersetinterval_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function returns the interval of a timer
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_timer_itf_1ga24211b0db8a33e07fe6e95a1cee48da1:

typedef struct tagsystimerstart_struct  systimerstart_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function starts a timer
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_timer_itf_1ga76bcf0390256147083789efbf1a5dfda:

typedef struct tagsystimerstop_struct  systimerstop_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function stops a timer
**Returns:**

*RESULT: Returns the runtime system error code (see CmpErrors.library).

.. _group___sys_timer_itf_1ga2936e5147fb23d8106c8701c7db21f96:

typedef ISysTimer_C ISysTimer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function Documentation
----------------------

.. _group___sys_timer_itf_1ga68ee3666c8dcb0ed66401c36f18be08e:

void systimercreatecallback (systimercreatecallback_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_timer_itf_1gae115324f61d2148ec229cb2f2df1ff70:

void systimercreatecallback2 (systimercreatecallback2_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_timer_itf_1ga1bfa5fdd8b70cf7a9d30618e4cc97ff1:

void systimercreateevent (systimercreateevent_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_timer_itf_1ga7fb2351b18c91e8638e4acf5e98d345b:

void systimerdelete (systimerdelete_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_timer_itf_1gab35d8f01b522f83479fb07b6bf86ad43:

void systimergetinterval (systimergetinterval_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_timer_itf_1ga140844d918f4bc2c69135b6f9acc2500:

void systimergettimestamp (systimergettimestamp_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_timer_itf_1ga3ecbc34238f0050e858954da0ef7e9dd:

void systimermaxtimer (systimermaxtimer_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_timer_itf_1gaceead3f5bc13daff7557677f99ff763c:

void systimersetinterval (systimersetinterval_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_timer_itf_1gacb5f5da3a0c1f2ff54c7b7d1cc0b8617:

void systimerstart (systimerstart_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_timer_itf_1gafc80299b68323395049698ea4ec084cb:

void systimerstop (systimerstop_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_timer_itf_1ga4b88c19e3cb50e4fb404b9840b3f4818:

RTS_RESULT SysTimerOSInit (INIT_STRUCT *pInit)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EXTERN LIB SECTION END

.. _group___sys_timer_itf_1gae41bca895d3668f705513c37ff58f360:

RTS_RESULT SysTimerOSHookFunction (RTS_UI32 ulHook, RTS_UINTPTR ulParam1, RTS_UINTPTR ulParam2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___sys_timer_itf_1ga72448a0047df2952bde603c6f9e3836c:

RTS_HANDLE SysTimerCreateEvent (RTS_HANDLE hEvent, RTS_SYSTIME tIntervalNs, unsigned long ulPriority, PFTIMEREXCEPTIONHANDLER pfExceptionHandler, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function creates a timer and sets an event

**Parameters**

+---------+--------------------+---------------------------------------------------------------------------------------------------------------+
| [in]    | hEvent             | Handle to the event that is sent after the interval expires RANGE=[RTS_INVALID_HANDLE,NULL,VALID_EVENTHANDLE] |
+---------+--------------------+---------------------------------------------------------------------------------------------------------------+
| [in]    | tIntervalNs        | Period of the timer (timebase = 1 ns) RANGE=[0,MIN_INTERVAL,MAX_INTERVAL,1000000]                             |
+---------+--------------------+---------------------------------------------------------------------------------------------------------------+
| [in]    | ulPriority         | Priority of the timer object RANGE=[0..(SYSTIMER_NUM_OF_TIMER_PRIOS - 1),SYSTIMER_NUM_OF_TIMER_PRIOS]         |
+---------+--------------------+---------------------------------------------------------------------------------------------------------------+
| [in]    | pfExceptionHandler | Pointer to an optional exception handler. Can be NULL. RANGE=[NULL,VALID_PFEXCEPTIONHANDLER]                  |
+---------+--------------------+---------------------------------------------------------------------------------------------------------------+
| [out]   | pResult            | Result pointer containing the error code. Might be NULL.                                                      |
+---------+--------------------+---------------------------------------------------------------------------------------------------------------+

**Return values**

+--------------------+---------------------------------------------------------------+
| ERR_NOTIMPLEMENTED | Functionality not implemented, RTS_INVALID_HANDLE is returned |
+--------------------+---------------------------------------------------------------+
| ERR_OK             | Event was created, a valid Handle is returned                 |
+--------------------+---------------------------------------------------------------+

**Returns:**

Handle of the timer or RTS_INVALID_HANDLE

.. _group___sys_timer_itf_1ga7bd0c7b2667c9e120d678bc77aa530ee:

RTS_HANDLE SysTimerCreateCallback (PFTIMERCALLBACK pfTimerCallback, RTS_HANDLE hParam, int bIECFunction, RTS_SYSTIME tIntervalNs, unsigned long ulPriority, PFTIMEREXCEPTIONHANDLER pfExceptionHandler, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function creates a system timer, which cyclically calls the callback function that is passed with the parameter pfTimerCallback.

This callback has to be of type PFTIMERCALLBACK and gets a the handle which is specified by hParam passed on every call.

The supported timer intervals may be limited by the hardware and/or underlying operating systems.

**Parameters**

+---------+--------------------+-------------------------------------------------------------------------------------------------------+
| [in]    | pfTimerCallback    | Pointer to a callback function RANGE=[RTS_INVALID_HANDLE,NULL,VALID_PFTIMERCALLBACK]                  |
+---------+--------------------+-------------------------------------------------------------------------------------------------------+
| [in]    | hParam             | Parameter for callback routine RANGE=[RTS_INVALID_HANDLE,VALID_HPARAM]                                |
+---------+--------------------+-------------------------------------------------------------------------------------------------------+
| [in]    | bIECFunction       | Is IEC function RANGE=[0,1]                                                                           |
+---------+--------------------+-------------------------------------------------------------------------------------------------------+
| [in]    | tIntervalNs        | Interval of the timer (timebase = 1 ns) RANGE=[0,MIN_INTERVAL,MAX_INTERVAL,1000000]                   |
+---------+--------------------+-------------------------------------------------------------------------------------------------------+
| [in]    | ulPriority         | Priority of the timer object RANGE=[0..(SYSTIMER_NUM_OF_TIMER_PRIOS - 1),SYSTIMER_NUM_OF_TIMER_PRIOS] |
+---------+--------------------+-------------------------------------------------------------------------------------------------------+
| [in]    | pfExceptionHandler | Pointer to an optional exception handler. Can be NULL. RANGE=[NULL,VALID_PFEXCEPTIONHANDLER]          |
+---------+--------------------+-------------------------------------------------------------------------------------------------------+
| [out]   | pResult            | Result pointer containing the error code. Might be NULL.                                              |
+---------+--------------------+-------------------------------------------------------------------------------------------------------+

**Return values**

+-------------------+-----------------------------------------------------------------------------------------------------+
| ERR_OK            | Callback was created successfully                                                                   |
+-------------------+-----------------------------------------------------------------------------------------------------+
| ERR_FAILED        | Timer could not be opened, SysTimerOpen returned not ERR_OK, RTS_INVALID_HANDLE is returned         |
+-------------------+-----------------------------------------------------------------------------------------------------+
| ERR_PARAMETER     | pfTimerCallback was invalid, RTS_INVALID_HANDLE is returned                                         |
+-------------------+-----------------------------------------------------------------------------------------------------+
| ERR_OUT_OF_LIMITS | Number of static timers exceeds Limit: SYSTIMER_NUM_OF_STATIC_TIMER, RTS_INVALID_HANDLE is returned |
+-------------------+-----------------------------------------------------------------------------------------------------+
| ERR_NO_MEMORY     | Could not get Timerinfo from MemPool, RTS_INVALID_HANDLE is returned                                |
+-------------------+-----------------------------------------------------------------------------------------------------+

**Returns:**

Handle of the timer or RTS_INVALID_HANDLE

.. _group___sys_timer_itf_1gac13e0205d37e969d4a01a53ae7464e39:

RTS_HANDLE SysTimerCreateCallback2 (PFTIMERCALLBACK pfTimerCallback, RTS_HANDLE hParam, int bIECFunction, RTS_SYSTIME tIntervalNs, unsigned long ulPriority, unsigned long ulType, PFTIMEREXCEPTIONHANDLER pfExceptionHandler, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

<SIL2>

This function creates a system timer, which calls the callback function that is passed with the parameter pfTimerCallback.

This callback has to be of type PFTIMERCALLBACK and gets a the handle which is specified by hParam passed on every call.

Supported are timers with a different behavior (e.g. cyclic timers and one-shot timers). They are specified in the categorie "Timer type"

The supported timer intervals may be limited by the hardware and/or underlying operating systems. For one-shot timers, the interval just specifies the time for the next shot.

For the case, that the underlying operating system supports only exception handling based on tasks, you can pass a task as an exception handler with the parameter pfExceptionHandler.

Timers are priorized like IEC Tasks. There may be 256 Priorities, but this number is in fact limited by the system adaptation.

**Parameters**

+---------+--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pfTimerCallback    | Pointer for the Timer callback. This callback is called when ever the timer event occured. RANGE=[NULL,VALID_PFTIMERCALLBACK]                                                         |
+---------+--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hParam             | Parameter that is passed to the timer callback. RANGE=[NULL,VALID_HPARAM]                                                                                                             |
+---------+--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | bIECFunction       | Specify if the Callback is an IEC Function or a C Function. This parameter is only used internally and may be 0 in most cases. RANGE=[0,1]                                            |
+---------+--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | tIntervalNs        | Interval of the timer (timebase = 1 ns). The resolution may vary because of limitations from the hardware or underlying operating system. RANGE=[0,MIN_INTERVAL,MAX_INTERVAL,1000000] |
+---------+--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ulPriority         | Priority of the timer object RANGE=[0..(SYSTIMER_NUM_OF_TIMER_PRIOS - 1),SYSTIMER_NUM_OF_TIMER_PRIOS]                                                                                 |
+---------+--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ulType             | Not all timers from the category "Timer type" might be supported by the system. The only relyable timer is the periodic timer. RANGE=[RTS_TIMER_NONE,RTS_TIMER_PERIODIC]              |
+---------+--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pfExceptionHandler | Pointer to an optional exception handler. Can be NULL. RANGE=[NULL,VALID_PFEXCEPTIONHANDLER]                                                                                          |
+---------+--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult            | Result pointer containing the error code. Might be NULL.                                                                                                                              |
+---------+--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | bFullMemPool       | ***PSEUDO*** Indicates whether the internal used MemPool is full. RANGE=[TRUE,FALSE]                                                                                                  |
+---------+--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | _bIECFunction      | ***PSEUDO*** if bIECFunction Input is set, IEC Func is called with SysCpuCallIECFuncWithParams, else directly                                                                         |
+---------+--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | _hParam            | ***PSEUDO*** hParam from pfTimerCallback must be same value as INPUT hParam                                                                                                           |
+---------+--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | _tIntervalNs       | ***PSEUDO*** Interval in which pfTimerCallback is called must be equal to INPUT tIntervalNs                                                                                           |
+---------+--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | bFullTimer         | ***PSEUDO*** Indicates whether all timer used. RANGE=[TRUE,FALSE]                                                                                                                     |
+---------+--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+-------------------+-----------------------------------------------------------------------------------------------------+
| ERR_OK            | Callback was created successfully                                                                   |
+-------------------+-----------------------------------------------------------------------------------------------------+
| ERR_FAILED        | Timer could not be opened, SysTimerOpen returned not ERR_OK, RTS_INVALID_HANDLE is returned         |
+-------------------+-----------------------------------------------------------------------------------------------------+
| ERR_PARAMETER     | pfTimerCallback was invalid, RTS_INVALID_HANDLE is returned                                         |
+-------------------+-----------------------------------------------------------------------------------------------------+
| ERR_OUT_OF_LIMITS | Number of static timers exceeds Limit: SYSTIMER_NUM_OF_STATIC_TIMER, RTS_INVALID_HANDLE is returned |
+-------------------+-----------------------------------------------------------------------------------------------------+
| ERR_NO_MEMORY     | Could not get Timerinfo from MemPool, RTS_INVALID_HANDLE is returned                                |
+-------------------+-----------------------------------------------------------------------------------------------------+

**Returns:**

*Handle of the timer or RTS_INVALID_HANDLE if there was an error.

.. _group___sys_timer_itf_1ga82ba4944fb348a0fc3147e0ad225e941:

RTS_RESULT SysTimerDelete (RTS_HANDLE hTimer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function deletes a timer

**Parameters**

+---------+--------+-----------------------------------------------------------------------+
| [in]    | hTimer | Handle of the timer RANGE=[RTS_INVALID_HANDLE,NULL,VALID_TIMERHANDLE] |
+---------+--------+-----------------------------------------------------------------------+

**Return values**

+---------------+-------------------------+
| ERR_PARAMETER | hTimer is invalid       |
+---------------+-------------------------+
| ERR_OK        | hTimer could be deleted |
+---------------+-------------------------+

**Returns:**

Error code

.. _group___sys_timer_itf_1ga81a4bda452cea19feeba1b8383cafcee:

RTS_HANDLE SysTimerOpen (SYS_TIMER_INFO *pTimerInfo, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function creates a system specific timer. IMPLEMENTATION NOTE: The timer must be disabled (in stop state) after returning this routine! The timer must be started explicitly with SysTimerStart.

**Parameters**

+---------+------------+---------------------------------------------------------------------------+
| [in]    | pTimerInfo | Parameter for timer RANGE=[RTS_INVALID_HANDLE,NULL,VALID_TIMERINFOHANDLE] |
+---------+------------+---------------------------------------------------------------------------+
| [out]   | pResult    | Result pointer containing the error code. Might be NULL.                  |
+---------+------------+---------------------------------------------------------------------------+

**Return values**

+---------------+-----------------------+
| ERR_PARAMETER | pTimerInfo is invalid |
+---------------+-----------------------+
| ERR_OK        | Timer was opened      |
+---------------+-----------------------+

**Returns:**

Handle of the timerinfo or RTS_INVALID_HANDLE

.. _group___sys_timer_itf_1gaa9dc02593fd99db07c4db7eca43cf2ab:

RTS_RESULT SysTimerClose (RTS_HANDLE hTimer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function closes a timer

**Parameters**

+---------+--------+-----------------------------------------------------------------------+
| [in]    | hTimer | Handle of the timer RANGE=[RTS_INVALID_HANDLE,NULL,VALID_TIMERHANDLE] |
+---------+--------+-----------------------------------------------------------------------+

**Return values**

+---------------+-------------------+
| ERR_PARAMETER | hTimer is invalid |
+---------------+-------------------+
| ERR_OK        | Timer was closed  |
+---------------+-------------------+

**Returns:**

Error code

.. _group___sys_timer_itf_1gaab0e60e94bc15215f8cc59f0925d8111:

RTS_RESULT SysTimerStart (RTS_HANDLE hTimer, unsigned long ulType)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function starts a timer

**Parameters**

+---------+----------+-----------------------------------------------------------------------------------+
| [in]    | hTimer   | Handle of the timer RANGE=[RTS_INVALID_HANDLE,VALID_TIMERHANDLE]                  |
+---------+----------+-----------------------------------------------------------------------------------+
| [in]    | ulType   | Timer type. See corresponding category. RANGE=[RTS_TIMER_NONE,RTS_TIMER_PERIODIC] |
+---------+----------+-----------------------------------------------------------------------------------+
| [out]   | bRunning | ***PSEUDO*** Timer is running successfully                                        |
+---------+----------+-----------------------------------------------------------------------------------+

**Return values**

+--------------------+--------------------------------------------+
| ERR_PARAMETER      | hTimer is invalid or Type is not supported |
+--------------------+--------------------------------------------+
| ERR_OK             | Timer was started                          |
+--------------------+--------------------------------------------+
| ERR_FAILED         | Timer could not be started                 |
+--------------------+--------------------------------------------+
| ERR_NOTIMPLEMENTED | Feature is not implemented                 |
+--------------------+--------------------------------------------+

**Returns:**

Error Code

.. _group___sys_timer_itf_1gae4193bd2879f8f1aa9a6b799069e1759:

RTS_RESULT SysTimerStop (RTS_HANDLE hTimer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function stops a timer

**Parameters**

+---------+--------+-----------------------------------------------------------------------+
| [in]    | hTimer | Handle of the timer RANGE=[RTS_INVALID_HANDLE,NULL,VALID_TIMERHANDLE] |
+---------+--------+-----------------------------------------------------------------------+

**Return values**

+--------------------+----------------------------+
| ERR_PARAMETER      | hTimer is invalid          |
+--------------------+----------------------------+
| ERR_OK             | Timer was stopped          |
+--------------------+----------------------------+
| ERR_FAILED         | Timer could not be stopped |
+--------------------+----------------------------+
| ERR_NOTIMPLEMENTED | Feature is not implemented |
+--------------------+----------------------------+

**Returns:**

Error Code

.. _group___sys_timer_itf_1ga536aaa19cb9a505f566d1c8afb598124:

RTS_RESULT SysTimerGetInterval (RTS_HANDLE hTimer, RTS_SYSTIME *ptIntervalNs)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns the interval of a timer

**Parameters**

+---------+--------------+-----------------------------------------------------------------------+
| [in]    | hTimer       | Handle of the timer RANGE=[RTS_INVALID_HANDLE,NULL,VALID_TIMERHANDLE] |
+---------+--------------+-----------------------------------------------------------------------+
| [out]   | ptIntervalNs | Pointer to Interval of the timer in nanoseconds                       |
+---------+--------------+-----------------------------------------------------------------------+
| [out]   | ptIntervalNs | ***PSEUDO*** Interval of the timer in nanoseconds                     |
+---------+--------------+-----------------------------------------------------------------------+

**Return values**

+--------------------+----------------------------------------------+
| ERR_PARAMETER      | hTimer is invalid or ptIntervalNs is invalid |
+--------------------+----------------------------------------------+
| ERR_OK             | Interval could be read successfully          |
+--------------------+----------------------------------------------+
| ERR_FAILED         | Interval could not be read                   |
+--------------------+----------------------------------------------+
| ERR_NOTIMPLEMENTED | Feature is not implemented                   |
+--------------------+----------------------------------------------+

**Returns:**

Error code

.. _group___sys_timer_itf_1gaec21d923ed57b06f68b032563b2af243:

RTS_RESULT SysTimerSetInterval (RTS_HANDLE hTimer, RTS_SYSTIME tIntervalNs)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function set the interval of a timer

**Parameters**

+---------+-------------+-----------------------------------------------------------------------------------------+
| [in]    | hTimer      | Handle of the timer RANGE=[RTS_INVALID_HANDLE,NULL,VALID_TIMERHANDLE]                   |
+---------+-------------+-----------------------------------------------------------------------------------------+
| [in]    | tIntervalNs | Interval of the timer in nanoseconds to set RANGE=[0,MIN_INTERVAL,MAX_INTERVAL,1000000] |
+---------+-------------+-----------------------------------------------------------------------------------------+

**Return values**

+--------------------+-----------------------------------+
| ERR_PARAMETER      | hTimer is invalid                 |
+--------------------+-----------------------------------+
| ERR_OK             | Interval was set successfully     |
+--------------------+-----------------------------------+
| ERR_FAILED         | Interval was not set successfully |
+--------------------+-----------------------------------+
| ERR_NOTIMPLEMENTED | Feature is not implemented        |
+--------------------+-----------------------------------+

**Returns:**

Error code

.. _group___sys_timer_itf_1ga921a7ac15d2223a29952722c2159aeaf:

RTS_RESULT SysTimerGetTimeStamp (RTS_HANDLE hTimer, RTS_SYSTIME *ptTimestampNs)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function returns the timestamp in ticks since timer start

**Parameters**

+---------+---------------+-----------------------------------------------------------------------+
| [in]    | hTimer        | Handle of the timer RANGE=[RTS_INVALID_HANDLE,NULL,VALID_TIMERHANDLE] |
+---------+---------------+-----------------------------------------------------------------------+
| [out]   | ptTimestampNs | Timestamp in nanoseconds                                              |
+---------+---------------+-----------------------------------------------------------------------+

**Return values**

+--------------------+------------------------------------+
| ERR_PARAMETER      | hTimer or ptTimestampNs is invalid |
+--------------------+------------------------------------+
| ERR_OK             | Timestap returned successfully     |
+--------------------+------------------------------------+
| ERR_FAILED         | Timestamp could not be returned    |
+--------------------+------------------------------------+
| ERR_OVERFLOW       | Overflow detected since Timerstart |
+--------------------+------------------------------------+
| ERR_NOTIMPLEMENTED | Feature is not implemented         |
+--------------------+------------------------------------+

**Returns:**

Error code

.. _group___sys_timer_itf_1ga1ac691c3724ffeb1de2add6f9891fe92:

RTS_RESULT SysTimerMaxTimer (RTS_UI32 *pulMaxTimers)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function returns the maximal number of timers

**Parameters**

+---------+-------------+------------------+
| [out]   | pulMaxTimer | Number of Timers |
+---------+-------------+------------------+

**Return values**

+--------------------+-----------------------------------+
| ERR_PARAMETER      | pulMaxTimer is invalid            |
+--------------------+-----------------------------------+
| ERR_OK             | pulMaxTimer returned successfully |
+--------------------+-----------------------------------+
| ERR_FAILED         | pulMaxTimer could not be returned |
+--------------------+-----------------------------------+
| ERR_NOTIMPLEMENTED | Feature is not implemented        |
+--------------------+-----------------------------------+

**Returns:**

Error code

.. _group___sys_timer_itf_1ga760278302712fe1313233f313309df2c:

RTS_HANDLE SysTimerExistsTimer (unsigned long ulPriority, RTS_SYSTIME tInterval, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function looks for timers with the given properties

**Parameters**

+---------+------------+------------------------------------------------------------------------------------------------+
| [in]    | ulPriority | Priority of the timer RANGE=[0..(SYSTIMER_NUM_OF_TIMER_PRIOS - 1),SYSTIMER_NUM_OF_TIMER_PRIOS] |
+---------+------------+------------------------------------------------------------------------------------------------+
| [in]    | tInterval  | Interval of the timer RANGE=[RTS_RANGE_OF_UINT64]                                              |
+---------+------------+------------------------------------------------------------------------------------------------+
| [out]   | pResult    | Result pointer containing the error code. Might be NULL.                                       |
+---------+------------+------------------------------------------------------------------------------------------------+

**Return values**

+---------------+----------------------+
| ERR_OK        | Found existing Timer |
+---------------+----------------------+
| ERR_NO_OBJECT | Found no Timer       |
+---------------+----------------------+

**Returns:**

Handle to the searched timer or RTS_INVALID_HANDLE

.. _group___sys_timer_itf_1gac2815f89df55182c4bcb1572d9426e48:

unsigned int SysTimerFitTimer (RTS_HANDLE hTimer, unsigned long ulPriority, RTS_SYSTIME tInterval, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function checks a given timer

**Parameters**

+---------+------------+--------------------------------------------------------------------------------------------+
| [in]    | hTimer     | Timer to check RANGE=[RTS_INVALID_HANDLE,NULL,VALID_TIMERHANDLE]                           |
+---------+------------+--------------------------------------------------------------------------------------------+
| [in]    | ulPriority | Priority to check RANGE=[0..(SYSTIMER_NUM_OF_TIMER_PRIOS - 1),SYSTIMER_NUM_OF_TIMER_PRIOS] |
+---------+------------+--------------------------------------------------------------------------------------------+
| [in]    | tInterval  | Interval to check RANGE=[RTS_RANGE_OF_UINT64]                                              |
+---------+------------+--------------------------------------------------------------------------------------------+
| [out]   | pResult    | Result pointer containing the error code. Might be NULL.                                   |
+---------+------------+--------------------------------------------------------------------------------------------+

**Return values**

+---------------+-------------------+
| ERR_PARAMETER | hTimer is invalid |
+---------------+-------------------+
| ERR_OK        | Found fit Timer   |
+---------------+-------------------+
| ERR_NO_OBJECT | Found no Timer    |
+---------------+-------------------+

**Returns:**

Returns if Timer fits

.. _group___sys_timer_itf_1gaf4319db131dab4fd0e26c159e3b112db:

RTS_RESULT SysTimerGetMinResolution (RTS_HANDLE hTimer, RTS_SYSTIME *ptMinResolutionNs)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the minimum resolution of the timer

**Parameters**

+---------+-------------------+-----------------------------------------------------------------------+
| [in]    | hTimer            | Handle of the timer RANGE=[RTS_INVALID_HANDLE,NULL,VALID_TIMERHANDLE] |
+---------+-------------------+-----------------------------------------------------------------------+
| [out]   | ptMinResolutionNs | Minimum timer resolution in nanoseconds                               |
+---------+-------------------+-----------------------------------------------------------------------+

**Return values**

+---------------+----------------------------------------+
| ERR_PARAMETER | hTimer or ptMinResolutionNs is invalid |
+---------------+----------------------------------------+
| ERR_OK        | Could get min resolution               |
+---------------+----------------------------------------+
| ERR_FAILED    | Could not get min resolution           |
+---------------+----------------------------------------+

**Returns:**

Error code

.. _group___sys_timer_itf_1ga1cf6549e1b5201bbf7914c9678ccfa09:

RTS_RESULT SysTimerGetContext (RTS_HANDLE hTimer, RegContext *pContext)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function returns the context of the current timer handling

**Parameters**

+---------+----------+-----------------------------------------------------------------------+
| [in]    | hTimer   | Handle of the Timer RANGE=[RTS_INVALID_HANDLE,NULL,VALID_TIMERHANDLE] |
+---------+----------+-----------------------------------------------------------------------+
| [out]   | pContext | Pointer to Timer Context                                              |
+---------+----------+-----------------------------------------------------------------------+

**Return values**

+--------------------+-------------------------------+
| ERR_PARAMETER      | hTimer or pContext is invalid |
+--------------------+-------------------------------+
| ERR_OK             | GetContext was successful     |
+--------------------+-------------------------------+
| ERR_FAILED         | Could not get Context         |
+--------------------+-------------------------------+
| ERR_NOTIMPLEMENTED | Feature is not implemented    |
+--------------------+-------------------------------+

**Returns:**

error code

.. _group___sys_timer_itf_1ga3c20cc89d81ed444dccf47b1cedbd248:

RTS_RESULT SysTimerGenerateException (RTS_HANDLE hTimerHandle, RTS_UI32 ulException, RegContext Context)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Calls the corresponding exception handler of the timer.

**Parameters**

+---------+--------------+----------------------------------------------------------------------------------------------------------------+
| [in]    | hTimerHandle | Handle to timer RANGE=[RTS_INVALID_HANDLE,NULL,VALID_TIMERHANDLE]                                              |
+---------+--------------+----------------------------------------------------------------------------------------------------------------+
| [in]    | ulException  | Rts standard exception RANGE=[RTS_RANGE_OF_ULONG]                                                              |
+---------+--------------+----------------------------------------------------------------------------------------------------------------+
| [in]    | Context      | Context to detect the code location where the exception occurred RANGE=[RTS_INVALID_HANDLE,NULL,VALID_CONTEXT] |
+---------+--------------+----------------------------------------------------------------------------------------------------------------+

**Return values**

+------------+---------------------------------------------------------+
| ERR_OK     | Exception was successfully handled                      |
+------------+---------------------------------------------------------+
| ERR_FAILED | No Timer found or Exception Handler returned ERR_FAILED |
+------------+---------------------------------------------------------+

**Returns:**

ERR_OK

.. _group___sys_timer_itf_1gade90871c9e2feac4245496edbbd09147:

RTS_RESULT SysTimerSetCallbackParameter (RTS_HANDLE hTimer, RTS_HANDLE hParam)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Sets the Callback Parameter

**Parameters**

+---------+--------+------------------------------------------------------------------------+
| [in]    | hTimer | Handle of the timer RANGE=[RTS_INVALID_HANDLE,NULL,VALID_TIMERHANDLE]  |
+---------+--------+------------------------------------------------------------------------+
| [in]    | hParam | Parameter for callback routine RANGE=[RTS_INVALID_HANDLE,VALID_HPARAM] |
+---------+--------+------------------------------------------------------------------------+

**Return values**

+---------------+---------------------------------------------+
| ERR_OK        | Callback Parameter was successfully handled |
+---------------+---------------------------------------------+
| ERR_PARAMETER | hTimer invalid                              |
+---------------+---------------------------------------------+

**Returns:**

Error code

.. _group___sys_timer_itf_1ga97e2e65ab002ecda68472bea31976d67:

RTS_RESULT SysTimerSetResetFollowing (RTS_HANDLE hTimer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

With this function the specified function is reseted (Needed for CmpScheduleTimer)

**Parameters**

+---------+--------+--------------------------------------------------------------------------------+
| [in]    | hTimer | Handle of the timer to reset RANGE=[RTS_INVALID_HANDLE,NULL,VALID_TIMERHANDLE] |
+---------+--------+--------------------------------------------------------------------------------+

**Return values**

+---------------+-------------------------+
| ERR_OK        | No error occured        |
+---------------+-------------------------+
| ERR_FAILED    | Setting Priority failed |
+---------------+-------------------------+
| ERR_PARAMETER | hTimer invalid          |
+---------------+-------------------------+

**Returns:**

Error code

.. _group___sys_timer_itf_1gab11b25e015573472d6b997d9e1b3b81b:

RTS_RESULT SysTimerRegisterBasePointer (RTS_UINTPTR ulBP)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Register the base pointer of the main routine.

**Parameters**

+---------+-------+------------------------------------------------------------------------+
| [in]    | pulBP | base pointer of main RANGE=[RTS_INVALID_HANDLE,NULL,VALID_BASEPOINTER] |
+---------+-------+------------------------------------------------------------------------+

**Return values**

+--------------------+---------------------------------+
| ERR_PARAMETER      | pulBP is invalid                |
+--------------------+---------------------------------+
| ERR_OK             | pulBP was successful registered |
+--------------------+---------------------------------+
| ERR_FAILED         | pulBP could not be registered   |
+--------------------+---------------------------------+
| ERR_NOTIMPLEMENTED | Feature is not implemented      |
+--------------------+---------------------------------+

**Returns:**

ERR_OK

.. _group___sys_timer_itf_1ga5b2f8285bf4efc778d302ded6eed1815:

void SysTimerCallCallback (SYS_TIMER_INFO *pTimer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get first registered timer object

**Parameters**

+---------+---------+----------------------------------------------------------+
| [out]   | pResult | Result pointer containing the error code. Might be NULL. |
+---------+---------+----------------------------------------------------------+

**Return values**

+---------------+--------------------------------+
| ERR_OK        | Successfully found first Timer |
+---------------+--------------------------------+
| ERR_NO_OBJECT | No Timer found                 |
+---------------+--------------------------------+

**Returns:**

Handle to first timer object
Get next registered timer object

**Parameters**

+---------+------------+---------------------------------------------------------------------------------------+
| [in]    | hTimerPrev | Handle to previous timer object RANGE=[RTS_INVALID_HANDLE,NULL,VALID_TIMERINFOHANDLE] |
+---------+------------+---------------------------------------------------------------------------------------+
| [out]   | pResult    | Result pointer containing the error code. Might be NULL.                              |
+---------+------------+---------------------------------------------------------------------------------------+

**Return values**

+---------------+-------------------------------+
| ERR_OK        | Successfully found next Timer |
+---------------+-------------------------------+
| ERR_NO_OBJECT | No Timer found                |
+---------------+-------------------------------+

**Returns:**

Handle to next timer object
Call the registered callback handler with the corresponding hParam. IEC- and C-handlers are supported.

**Parameters**

+---------+----------------------+-------------------------------------------------------------------------+
| [in]    | hTimer               | Secified timer object RANGE=[RTS_INVALID_HANDLE,NULL,VALID_TIMERHANDLE] |
+---------+----------------------+-------------------------------------------------------------------------+
| [in]    | pTimer->bIECFunction | ***PSEUDO*** Secified timer object RANGE=[RTS_RANGE_OF_INT]             |
+---------+----------------------+-------------------------------------------------------------------------+
| [out]   | bFuncCalled          | ***PSEUDO*** Function call expected                                     |
+---------+----------------------+-------------------------------------------------------------------------+

.. _group___sys_timer_itf_1ga806e51d55aa81bc515d93f14014b160f:

RTS_HANDLE SysTimerGetCurrent (RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns the handle of the currently active timer, or RTS_INVALID_HANDLE if we are outside of a timer context.

For SIL2 systems, this function is not implemented and returns always RTS_INVALID_HANDLE.

**Parameters**

+---------+--------------+---------------------------------------------------------------------------------+
| [out]   | pResult      | Result pointer containing the error code. Might be NULL.                        |
+---------+--------------+---------------------------------------------------------------------------------+
| [in]    | bSIL2Runtime | ***PSEUDO*** Result pointer containing the error code. Might be NULL. RANGE=[1] |
+---------+--------------+---------------------------------------------------------------------------------+

**Returns:**

Handle of the currently active timer or RTS_INVALID_HANDLE

.. _group___sys_timer_itf_1ga6e2d67e9e3d87116cabc7a2892ceaa28:

SYS_TIMER_INFO* SysTimerGetInfo (RTS_HANDLE hTimer, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returns the timer info of the specified timer

**Parameters**

+---------+---------+-------------------------------------------------------------------------+
| [in]    | hTimer  | Secified timer object RANGE=[RTS_INVALID_HANDLE,NULL,VALID_TIMERHANDLE] |
+---------+---------+-------------------------------------------------------------------------+
| [out]   | pResult | Result pointer containing the error code. Might be NULL.                |
+---------+---------+-------------------------------------------------------------------------+

**Returns:**

Pointer to the :ref:`SYS_TIMER_INFO <struct_s_y_s___t_i_m_e_r___i_n_f_o>` structure or NULL if failed

.. last line of group.rst template
.. last line of composition.rst template


