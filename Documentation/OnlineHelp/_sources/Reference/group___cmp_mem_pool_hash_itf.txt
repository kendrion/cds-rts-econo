.. first line of composition.rst template

.. first line of group.rst template

.. _group___cmp_mem_pool_hash_itf:

=================
CmpMemPoolHashItf
=================

Interface of CmpMemPoolHash. :ref:`More... <group___cmp_mem_pool_hash_itf-details>`

Data Structures
---------------

- struct :ref:`ICmpMemPoolHash_C <struct_i_cmp_mem_pool_hash___c>`

Macros
------

- #define :ref:`MemPoolHashEntry <group___cmp_mem_pool_hash_itf_1ga34f3d729ce095e761b20c0d2add85d27>` :ref:`CMUtlHashEntry <group___c_m_utils_hash_itf___hashentry_1gadd57a73c7ff3d9e8bfb558347e689613>`

- #define :ref:`MEMPOOLHASH_GET_HASHTABLE_LEN <group___cmp_mem_pool_hash_itf_1ga9f60c91c693921a70376127b86f1388b>` ((numOfHashEntries) * sizeof( :ref:`MemPoolHashEntry <group___cmp_mem_pool_hash_itf_1ga34f3d729ce095e761b20c0d2add85d27>` **))

- #define :ref:`ITF_CmpMemPoolHash <group___cmp_mem_pool_hash_itf_1gab2bbfe28de30f02b00c58a82b3c13d8e>`

- #define :ref:`EXTITF_CmpMemPoolHash <group___cmp_mem_pool_hash_itf_1ga1cb28bed9cdb06d1432b10dab59300ec>`

Typedefs
--------

- typedef :ref:`ICmpMemPoolHash_C <struct_i_cmp_mem_pool_hash___c>` :ref:`ICmpMemPoolHash <group___cmp_mem_pool_hash_itf_1ga487d300c803f3416bd3fe0fc2c4f13bf>`

Functions
---------

- RTS_HANDLE :ref:`MemPoolCreateHashTable <group___cmp_mem_pool_hash_itf_1ga3b317bb71ce6376db3453696d2574e41>` (RTS_HANDLE hMemPool, RTS_SIZE sNumHashEntries, char * pszComponentName, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`MemPoolCreateHashTable2 <group___cmp_mem_pool_hash_itf_1ga9a93c94ef2df1c1eeedb08abaf74bde3>` (RTS_HANDLE hMemPool, RTS_SIZE sNumHashEntries, RTS_UI8 * pHashTableBuffer, char * pszComponentName, RTS_RESULT * pResult)

- RTS_RESULT :ref:`MemPoolDeleteHashTable <group___cmp_mem_pool_hash_itf_1ga38c979d04bc49b5b5e31c699353a6c23>` (RTS_HANDLE hMemPoolHashTable)

- RTS_HANDLE :ref:`MemPoolGetBlockHashed <group___cmp_mem_pool_hash_itf_1ga2118fb08d8d41a80aa6d2a3bb5bbacaa>` (RTS_HANDLE hMemPoolHashTable, RTS_UI32 nNumOfNewElements, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`MemPoolGetBlockHashed2 <group___cmp_mem_pool_hash_itf_1gaca02b30c82f5ef3660f20edf00506294>` (RTS_HANDLE hMemPoolHashTable, RTS_UI32 nNumOfNewElements, RTS_UI32 offsetHashEntry, RTS_RESULT * pResult)

- RTS_RESULT :ref:`MemPoolRemoveBlockHashed <group___cmp_mem_pool_hash_itf_1gace9fd61d9783e887e4a66503ded1eea4>` (RTS_HANDLE hMemPoolHashTable, RTS_HANDLE hHash)

- void * :ref:`MemPoolGetBlockByHash <group___cmp_mem_pool_hash_itf_1ga2420b362acd00b482fb60802f2ce0c54>` (RTS_HANDLE hMemPoolHashTable, RTS_HANDLE hHash, RTS_RESULT * pResult)

.. _group___cmp_mem_pool_hash_itf-details:

Detailed Description
--------------------

Interface of CmpMemPoolHash.

Interface to get a hash table around a MemPool. Because of this, you can use a unique handle to a MemPool object instead of the pointer to the MemPool object! This is because is you release a MemPool object, reuse it for a new MemPool operation and release the old one a second time

Usage: 1. Creating a mempool hash table using static memory [recommended]:

#define MY_NUM_OF_HASHENTRIES 10 RTS_UI8 s_hashTableBuffer[ :ref:`MEMPOOLHASH_GET_HASHTABLE_LEN( MY_NUM_OF_HASHENTRIES ) <group___cmp_mem_pool_hash_itf_1ga9f60c91c693921a70376127b86f1388b>` ];

// Create mempool hash table RTS_RESULT result RTS_HANDLE hMemPool = CAL_MemPoolCreateStatic(...); RTS_HANDLE hMemPoolHashTable = CAL_MemPoolCreateHashTable2(hMemPool, 10, s_hashTableBuffer, COMPONENT_NAME, &result);

2. Creating a mempool hash table using dynamic memory:

// Create mempool hash table RTS_RESULT result RTS_HANDLE hMemPool = CAL_MemPoolCreateStatic(...); RTS_HANDLE hMemPoolHashTable = CAL_MemPoolCreateHashTable(hMemPool, 10, COMPONENT_NAME, &result);

// Delete hash table CAL_MemPoolDeleteHashTable(hMemPoolHashTable);

// Alloc a new MemPool block must be done in 2 steps: // Step1: Get handle/alloc new block out of the MemPool (instead of CAL_MemPoolGetBlock())! RTS_HANDLE hNewMemPoolBlock = CAL_MemPoolGetBlockHashed(hMemPoolHashTable, 1, &result);

// Step2: Get pointer MemPoolBlock (which is retrieved typically by CAL_MemPoolGetBlock()) voidpMemPoolBlock = CAL_MemPoolGetBlockByHash(hMemPoolHashTable, hNewMemPoolBlock, &result)

// Release a MemPool block must be done in 2 steps: // Step1: Remove a block from hash table and the MemPool iterator CAL_MemPoolRemoveBlockHashed(hMemPoolHashTable, hNewMemPoolBlock);

// Step2: Release a MemPool block and put it back in the MemPool CAL_MemPoolPutBlock(hMemPoolHashTable, pMemPoolBlock)

**Copyright:**

Copyright (c) 2017-2018 CODESYS GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved.

Macro Definition Documentation
------------------------------
.. _group___cmp_mem_pool_hash_itf_1ga34f3d729ce095e761b20c0d2add85d27:

#define MemPoolHashEntry :ref:`CMUtlHashEntry <group___c_m_utils_hash_itf___hashentry_1gadd57a73c7ff3d9e8bfb558347e689613>`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_mem_pool_hash_itf_1ga9f60c91c693921a70376127b86f1388b:

#define MEMPOOLHASH_GET_HASHTABLE_LEN ((numOfHashEntries) * sizeof( :ref:`MemPoolHashEntry <group___cmp_mem_pool_hash_itf_1ga34f3d729ce095e761b20c0d2add85d27>` **))
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_mem_pool_hash_itf_1gab2bbfe28de30f02b00c58a82b3c13d8e:

#define ITF_CmpMemPoolHash
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_mem_pool_hash_itf_1ga1cb28bed9cdb06d1432b10dab59300ec:

#define EXTITF_CmpMemPoolHash
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___cmp_mem_pool_hash_itf_1ga487d300c803f3416bd3fe0fc2c4f13bf:

typedef ICmpMemPoolHash_C ICmpMemPoolHash
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function Documentation
----------------------

.. _group___cmp_mem_pool_hash_itf_1ga3b317bb71ce6376db3453696d2574e41:

RTS_HANDLE MemPoolCreateHashTable (RTS_HANDLE hMemPool, RTS_SIZE sNumHashEntries, char *pszComponentName, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Must be called _after_ MemPoolCreateDynamic / MemPoolCreateStatic to create a hash table on top of a memory pool

**Parameters**

+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hMemPool         | Handle to the mem pool created by MemPoolCreateDynamic / MemPoolCreateStatic                                                                                                                                                                                                                                                                                                                                                                                       |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | sNumHashEntries  | Lenght of the hash table respectively the number of elements that can be stored in the hash table without any collision. NOTE: Hash table is allocated on heap via :ref:`SysMemAllocData() <group___cmp_app_b_p_dep_1gaf16c5f270b2eb0d85f1019b07a3c8c87>` within this function. If you would like to provide a static memory for the hash table. Use :ref:`MemPoolCreateHashTable2() <group___cmp_mem_pool_hash_itf_1ga9a93c94ef2df1c1eeedb08abaf74bde3>` instead! |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pszComponentName | Pointer to the component name of the caller                                                                                                                                                                                                                                                                                                                                                                                                                        |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult          | Pointer to error code                                                                                                                                                                                                                                                                                                                                                                                                                                              |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+--------------+------------------------------------+
| ERR_OK       | Hash table could be created        |
+--------------+------------------------------------+
| ERR_NOMEMORY | No memory to create the hash table |
+--------------+------------------------------------+
| ERR_FAILED   | Hash table failed to create        |
+--------------+------------------------------------+

**Returns:**

Handle to the create hash table around the mempool specified by hMemPool

.. _group___cmp_mem_pool_hash_itf_1ga9a93c94ef2df1c1eeedb08abaf74bde3:

RTS_HANDLE MemPoolCreateHashTable2 (RTS_HANDLE hMemPool, RTS_SIZE sNumHashEntries, RTS_UI8 *pHashTableBuffer, char *pszComponentName, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Must be called _after_ MemPoolCreateDynamic / MemPoolCreateStatic to create a hash table on top of a memory pool

**Parameters**

+---------+------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hMemPool         | Handle to the mem pool created by MemPoolCreateDynamic / MemPoolCreateStatic                                                                                                                                                                                                                    |
+---------+------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | sNumHashEntries  | Num of blocks that are managed in the hash table                                                                                                                                                                                                                                                |
+---------+------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pHashTableBuffer | Pointer to the hash table (can be static memory). Length must be (sNumHashEntriessizeof(RTS_UI8))!. NOTE: If pHashTableBuffer = NULL. the hash table will be allocated on heap via :ref:`SysMemAllocData() <group___cmp_app_b_p_dep_1gaf16c5f270b2eb0d85f1019b07a3c8c87>` within this function. |
+---------+------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pszComponentName | Pointer to the component name of the caller                                                                                                                                                                                                                                                     |
+---------+------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult          | Pointer to error code                                                                                                                                                                                                                                                                           |
+---------+------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+--------------+------------------------------------+
| ERR_OK       | Hash table could be created        |
+--------------+------------------------------------+
| ERR_NOMEMORY | No memory to create the hash table |
+--------------+------------------------------------+
| ERR_FAILED   | Hash table failed to create        |
+--------------+------------------------------------+

**Returns:**

Handle to the create hash table around the mempool specified by hMemPool

.. _group___cmp_mem_pool_hash_itf_1ga38c979d04bc49b5b5e31c699353a6c23:

RTS_RESULT MemPoolDeleteHashTable (RTS_HANDLE hMemPoolHashTable)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Must be called _before_ MemPoolDelete to release a hash table on top of a memory pool

**Parameters**

+---------+-------------------+-----------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hMemPoolHashTable | Handle to the hash table created by :ref:`MemPoolCreateHashTable() <group___cmp_mem_pool_hash_itf_1ga3b317bb71ce6376db3453696d2574e41>` |
+---------+-------------------+-----------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+------------------------------+
| ERR_OK        | Hash table could be released |
+---------------+------------------------------+
| ERR_PARAMETER | Invalid hash table handle    |
+---------------+------------------------------+
| ERR_FAILED    | Hash table failed to release |
+---------------+------------------------------+

**Returns:**

error code

.. _group___cmp_mem_pool_hash_itf_1ga2118fb08d8d41a80aa6d2a3bb5bbacaa:

RTS_HANDLE MemPoolGetBlockHashed (RTS_HANDLE hMemPoolHashTable, RTS_UI32 nNumOfNewElements, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Must be called instead of MemPoolGetBlock2! Returned the hash handle, that must be used instead of the MemPool handle directly!

**Parameters**

+---------+-------------------+-----------------------------------------------------------------------------------------+
| [in]    | hMemPool          | Handle to the mem pool created by MemPoolCreateDynamic / MemPoolCreateStatic            |
+---------+-------------------+-----------------------------------------------------------------------------------------+
| [in]    | nNumOfNewElements | Number of new elements to extend in the underlying mem pool to get the new memory block |
+---------+-------------------+-----------------------------------------------------------------------------------------+
| [out]   | pResult           | Pointer to error code                                                                   |
+---------+-------------------+-----------------------------------------------------------------------------------------+

**Return values**

+---------------+--------------------------------------------------------------+
| ERR_OK        | New hashed mempool block can be retrieved                    |
+---------------+--------------------------------------------------------------+
| ERR_PARAMETER | Invalid hash table handle                                    |
+---------------+--------------------------------------------------------------+
| ERR_NOMEMORY  | There is no more memory left to get the hashed mempool block |
+---------------+--------------------------------------------------------------+

**Returns:**

Handle to the new mempool block

.. _group___cmp_mem_pool_hash_itf_1gaca02b30c82f5ef3660f20edf00506294:

RTS_HANDLE MemPoolGetBlockHashed2 (RTS_HANDLE hMemPoolHashTable, RTS_UI32 nNumOfNewElements, RTS_UI32 offsetHashEntry, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Must be called instead of MemPoolGetBlock2! Returned the hash handle, that must be used instead of the MemPool handle directly! NOTE: Instead of using :ref:`MemPoolGetBlockHashed() <group___cmp_mem_pool_hash_itf_1ga2118fb08d8d41a80aa6d2a3bb5bbacaa>` you can specify the new hash entry outside by the caller (MemPoolHashEntry)! So we don't need to allocated new memory on the heap for a hash entry.

**Parameters**

+---------+-------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hMemPool          | Handle to the mem pool created by MemPoolCreateDynamic / MemPoolCreateStatic                                                                                                                                                                                  |
+---------+-------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | nNumOfNewElements | Number of new elements to extend in the underlying mem pool to get the new memory block                                                                                                                                                                       |
+---------+-------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | offsetHashEntry   | Offset within the MemPoolBlock, where the member of MemPoolHashEntry is located NOTE: If offsetHashEntry = RTS_UI32_MAX, a new hash entry is allocated from heap via :ref:`SysMemAllocData() <group___cmp_app_b_p_dep_1gaf16c5f270b2eb0d85f1019b07a3c8c87>` ! |
+---------+-------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult           | Pointer to error code                                                                                                                                                                                                                                         |
+---------+-------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+--------------------------------------------------------------+
| ERR_OK        | New hashed mempool block can be retrieved                    |
+---------------+--------------------------------------------------------------+
| ERR_PARAMETER | Invalid hash table handle                                    |
+---------------+--------------------------------------------------------------+
| ERR_NOMEMORY  | There is no more memory left to get the hashed mempool block |
+---------------+--------------------------------------------------------------+

**Returns:**

Handle to the new mempool block

.. _group___cmp_mem_pool_hash_itf_1gace9fd61d9783e887e4a66503ded1eea4:

RTS_RESULT MemPoolRemoveBlockHashed (RTS_HANDLE hMemPoolHashTable, RTS_HANDLE hHash)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Must be called instead of MemPoolRemoveUsedBlock to remove a hashed memory block from hash table! :ref:`MemPoolPutBlock() <group___cmp_app_b_p_dep_1gaf18b4c3f9a2003cfb4ad90eb300c681c>` must be called as is.

**Parameters**

+---------+----------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hMemPool | Handle to the mem pool created by MemPoolCreateDynamic / MemPoolCreateStatic                                                                                                                                                                               |
+---------+----------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hHash    | Handle to the hashed mempool object retrieved by :ref:`MemPoolGetBlockHashed() <group___cmp_mem_pool_hash_itf_1ga2118fb08d8d41a80aa6d2a3bb5bbacaa>` or :ref:`MemPoolGetBlockHashed2() <group___cmp_mem_pool_hash_itf_1gaca02b30c82f5ef3660f20edf00506294>` |
+---------+----------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+--------------------------------------------------+
| ERR_OK        | Hashed mempool object could be removed           |
+---------------+--------------------------------------------------+
| ERR_PARAMETER | Invalid hash table handle or hash mempool object |
+---------------+--------------------------------------------------+
| ERR_FAILED    | Hashed mempool object failed to remove           |
+---------------+--------------------------------------------------+

**Returns:**

error code

.. _group___cmp_mem_pool_hash_itf_1ga2420b362acd00b482fb60802f2ce0c54:

void* MemPoolGetBlockByHash (RTS_HANDLE hMemPoolHashTable, RTS_HANDLE hHash, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Can be used to get the mempool data pointer specified by ith hash.

**Parameters**

+---------+----------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hMemPool | Handle to the mem pool created by MemPoolCreateDynamic / MemPoolCreateStatic                                                                                                                                                                               |
+---------+----------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hHash    | Handle to the hashed mempool object retrieved by :ref:`MemPoolGetBlockHashed() <group___cmp_mem_pool_hash_itf_1ga2118fb08d8d41a80aa6d2a3bb5bbacaa>` or :ref:`MemPoolGetBlockHashed2() <group___cmp_mem_pool_hash_itf_1gaca02b30c82f5ef3660f20edf00506294>` |
+---------+----------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult  | Pointer to error code                                                                                                                                                                                                                                      |
+---------+----------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+-----------------------------------------------------+
| ERR_OK        | Data pointer could be retrieved because of its hash |
+---------------+-----------------------------------------------------+
| ERR_PARAMETER | Invalid hash table handle or hash mempool object    |
+---------------+-----------------------------------------------------+
| ERR_NO_OBJECT | No data pointer found for this hash                 |
+---------------+-----------------------------------------------------+

**Returns:**

Pointer to the data of the hashed mempool object

.. last line of group.rst template
.. last line of composition.rst template


