.. first line of composition.rst template

.. first line of group.rst template

.. _group___cmp_o_p_c_u_a_server_itf:

=================
CmpOPCUAServerItf
=================

Interface of CmpOPCUAServer
**Copyright:**

Copyright (c) 2017-2018 CODESYS GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved. :ref:`More... <group___cmp_o_p_c_u_a_server_itf-details>`

Modules
-------

- :ref:`Event parameter <group___cmp_o_p_c_u_a_server_itf___eventparameter>`

- :ref:`Events <group___cmp_o_p_c_u_a_server_itf___events>`

- :ref:`SecuritySettings <group___cmp_o_p_c_u_a_server_itf___security_settings>`

- :ref:`Settings <group___cmp_o_p_c_u_a_server_itf___settings>`

- :ref:`Static defines <group___cmp_o_p_c_u_a_server_itf___staticdefines>`

Data Structures
---------------

- struct :ref:`_OpcUaObjectDescription <struct___opc_ua_object_description>`

- struct :ref:`_OpcUaVariableDescription <struct___opc_ua_variable_description>`

- struct :ref:`_OpcUaMethodDescription <struct___opc_ua_method_description>`

- struct :ref:`_OpcUaObjectTypeDescription <struct___opc_ua_object_type_description>`

- struct :ref:`_OpcUaVariableTypeDescription <struct___opc_ua_variable_type_description>`

- struct :ref:`_OpcUaReferenceTypeDescription <struct___opc_ua_reference_type_description>`

- struct :ref:`_OpcUaDataTypeDescription <struct___opc_ua_data_type_description>`

- struct :ref:`_OpcUaViewDescription <struct___opc_ua_view_description>`

- struct :ref:`_OpcUaElementDescription <union___opc_ua_element_description>`

- struct :ref:`_OpcUaServerNodeDescription <struct___opc_ua_server_node_description>`

- struct :ref:`_OpcUaServerReferenceDescription <struct___opc_ua_server_reference_description>`

- struct :ref:`tagOpcUaServer_Session_Information <structtag_opc_ua_server___session___information>`

- struct :ref:`tagopcuaservergetfirstsession_struct <structtagopcuaservergetfirstsession__struct>`

- struct :ref:`tagopcuaservergetnextsession_struct <structtagopcuaservergetnextsession__struct>`

- struct :ref:`tagopcuaservergetsessioninfo_struct <structtagopcuaservergetsessioninfo__struct>`

- struct :ref:`_NumericRange <struct___numeric_range>`

- struct :ref:`_OpcUaServer_SimpleBrowsePath <struct___opc_ua_server___simple_browse_path>`

- struct :ref:`ICmpOPCUAServer_C <struct_i_cmp_o_p_c_u_a_server___c>`

Macros
------

- #define :ref:`OPCUASERVER_MESSAGESECURITYMODE_INVALID <group___cmp_o_p_c_u_a_server_itf_1ga9797a7b6a16a07d7fbfb37c3cb8741f3>` RTS_IEC_DWORD_C(0x0)

- #define :ref:`OPCUASERVER_MESSAGESECURITYMODE_NONE <group___cmp_o_p_c_u_a_server_itf_1gafef4c2881a2eb576440c9176643acc98>` RTS_IEC_DWORD_C(0x1)

- #define :ref:`OPCUASERVER_MESSAGESECURITYMODE_SIGN <group___cmp_o_p_c_u_a_server_itf_1gad208806ee2f7e96c13fef2dcf6f22b7f>` RTS_IEC_DWORD_C(0x2)

- #define :ref:`OPCUASERVER_MESSAGESECURITYMODE_SIGNANDENCRYPT <group___cmp_o_p_c_u_a_server_itf_1ga8421fb752fa9f40ee514a7d3d033c906>` RTS_IEC_DWORD_C(0x3)

- #define :ref:`OPCUASERVER_MESSAGESECURITYMODE <group___cmp_o_p_c_u_a_server_itf_1ga564b36698bb09df3b2541ce473c20c7d>` RTS_IEC_DWORD

- #define :ref:`OPCUASERVER_SESSIONEVENTS_SESSION_ADDED <group___cmp_o_p_c_u_a_server_itf_1ga9ce63bef31e0bcbedf4569ff1b866a69>` RTS_IEC_DWORD_C(0x1)

- #define :ref:`OPCUASERVER_SESSIONEVENTS_SESSION_CHANGED <group___cmp_o_p_c_u_a_server_itf_1ga105a84a4ffc1077a96d3143ccedfd6d7>` RTS_IEC_DWORD_C(0x2)

- #define :ref:`OPCUASERVER_SESSIONEVENTS_SESSION_REMOVED <group___cmp_o_p_c_u_a_server_itf_1ga24d2a5fae2bc11bb9ac84617ada45887>` RTS_IEC_DWORD_C(0x3)

- #define :ref:`OPCUASERVER_SESSIONEVENTS <group___cmp_o_p_c_u_a_server_itf_1ga19c316f0ced390dba5e25822c10f20c7>` RTS_IEC_DWORD

- #define :ref:`Max_NumericRanges <group___cmp_o_p_c_u_a_server_itf_1ga4d29339be835e75beb3aa606ce6d81aa>` 5

- #define :ref:`ITF_CmpOPCUAServer <group___cmp_o_p_c_u_a_server_itf_1gab6f843069ebf7f93626d55fc0cb98e8c>`

- #define :ref:`EXTITF_CmpOPCUAServer <group___cmp_o_p_c_u_a_server_itf_1gaaf4dc48c7edb5c3b0465bf159a437ea5>`

Typedefs
--------

- typedef struct :ref:`_OpcUaObjectDescription <struct___opc_ua_object_description>` :ref:`OpcUaObjectDescription <group___cmp_o_p_c_u_a_server_itf_1ga110d85df928078c400d4e625fecd096d>`

- typedef struct :ref:`_OpcUaVariableDescription <struct___opc_ua_variable_description>` :ref:`OpcUaVariableDescription <group___cmp_o_p_c_u_a_server_itf_1ga0e85cead952df0dde2d082f2d4c91ba6>`

- typedef struct :ref:`_OpcUaMethodDescription <struct___opc_ua_method_description>` :ref:`OpcUaMethodDescription <group___cmp_o_p_c_u_a_server_itf_1ga24e29be85932f06fe63f214ae847972d>`

- typedef struct :ref:`_OpcUaObjectTypeDescription <struct___opc_ua_object_type_description>` :ref:`OpcUaObjectTypeDescription <group___cmp_o_p_c_u_a_server_itf_1ga0546fc6bd8e114653a25084303e1c9de>`

- typedef struct :ref:`_OpcUaVariableTypeDescription <struct___opc_ua_variable_type_description>` :ref:`OpcUaVariableTypeDescription <group___cmp_o_p_c_u_a_server_itf_1gabae880898cdfe0425d8f6f9c0f26508e>`

- typedef struct :ref:`_OpcUaReferenceTypeDescription <struct___opc_ua_reference_type_description>` :ref:`OpcUaReferenceTypeDescription <group___cmp_o_p_c_u_a_server_itf_1ga64bc9e7b7e4c7c60a6aad45cc25f2ae1>`

- typedef struct :ref:`_OpcUaDataTypeDescription <struct___opc_ua_data_type_description>` :ref:`OpcUaDataTypeDescription <group___cmp_o_p_c_u_a_server_itf_1ga87d8ea5b3dcd0a1d9e3855f88c701d9c>`

- typedef struct :ref:`_OpcUaViewDescription <struct___opc_ua_view_description>` :ref:`OpcUaViewDescription <group___cmp_o_p_c_u_a_server_itf_1ga2c04de11ae77b58697286c32f32f369f>`

- typedef union :ref:`_OpcUaElementDescription <union___opc_ua_element_description>` :ref:`OpcUaElementDescription <group___cmp_o_p_c_u_a_server_itf_1ga3943461372ebc33c5c1ab56b834f03ba>`

- typedef struct :ref:`_OpcUaServerNodeDescription <struct___opc_ua_server_node_description>` :ref:`OpcUaServerNodeDescription <group___cmp_o_p_c_u_a_server_itf_1ga968e0a1636c6375fd12eb1c9ce8e561e>`

- typedef struct :ref:`_OpcUaServerReferenceDescription <struct___opc_ua_server_reference_description>` :ref:`OpcUaServerReferenceDescription <group___cmp_o_p_c_u_a_server_itf_1ga2f2a16973d2a83efa6bf044cf2b0094b>`

- typedef struct :ref:`tagOpcUaServer_Session_Information <structtag_opc_ua_server___session___information>` :ref:`OpcUaServer_Session_Information <group___cmp_o_p_c_u_a_server_itf_1ga7833119fb18e46c173d5f1c30c8ac612>`

- typedef struct :ref:`tagopcuaservergetfirstsession_struct <structtagopcuaservergetfirstsession__struct>` :ref:`opcuaservergetfirstsession_struct <group___cmp_o_p_c_u_a_server_itf_1ga9aef0ca5764eba7c33b30f10ef873e60>`

- typedef struct :ref:`tagopcuaservergetnextsession_struct <structtagopcuaservergetnextsession__struct>` :ref:`opcuaservergetnextsession_struct <group___cmp_o_p_c_u_a_server_itf_1gafff29acee8aede9af7fae3df4267e23e>`

- typedef struct :ref:`tagopcuaservergetsessioninfo_struct <structtagopcuaservergetsessioninfo__struct>` :ref:`opcuaservergetsessioninfo_struct <group___cmp_o_p_c_u_a_server_itf_1ga0a421a6094ed8ecd5a2ef643a9908fc2>`

- typedef enum :ref:`_NumericRangeType <group___cmp_o_p_c_u_a_server_itf_1gab0c6cdf303b542aca54d491e7d45e078>` :ref:`NumericRangeType <group___cmp_o_p_c_u_a_server_itf_1gaa0fa3b8d06074a2be9b2a5c4b3f6ea9b>`

- typedef struct :ref:`_NumericRange <struct___numeric_range>` :ref:`NumericRange <group___cmp_o_p_c_u_a_server_itf_1gac23f984fd0708176ec4c74208a50a934>`

- typedef struct :ref:`_OpcUaServer_SimpleBrowsePath <struct___opc_ua_server___simple_browse_path>` :ref:`OpcUaServer_BrowsePath <group___cmp_o_p_c_u_a_server_itf_1ga44fcb7e167b616e196c8be375d8e292b>`

- typedef :ref:`ICmpOPCUAServer_C <struct_i_cmp_o_p_c_u_a_server___c>` :ref:`ICmpOPCUAServer <group___cmp_o_p_c_u_a_server_itf_1ga0ea32d6ccb89865686129ee11a6b6d7f>`

Enumerations
------------

- enum :ref:`_NumericRangeType <group___cmp_o_p_c_u_a_server_itf_1gab0c6cdf303b542aca54d491e7d45e078>` { :ref:`RangeType_Index <group___cmp_o_p_c_u_a_server_itf_1ggab0c6cdf303b542aca54d491e7d45e078aac68b38d0ef101b97885fb4bc720b9ff>`, :ref:`RangeType_Range <group___cmp_o_p_c_u_a_server_itf_1ggab0c6cdf303b542aca54d491e7d45e078aa3e2a541d44c3b528149d7a0ba16880f>` }

Functions
---------

- void :ref:`opcuaservergetfirstsession <group___cmp_o_p_c_u_a_server_itf_1ga0d04523fe213118c3e70ee52769a968e>` (:ref:`opcuaservergetfirstsession_struct <group___cmp_o_p_c_u_a_server_itf_1ga9aef0ca5764eba7c33b30f10ef873e60>` * p)

- void :ref:`opcuaservergetnextsession <group___cmp_o_p_c_u_a_server_itf_1ga778433dfdaa0c00e851a724b44818121>` (:ref:`opcuaservergetnextsession_struct <group___cmp_o_p_c_u_a_server_itf_1gafff29acee8aede9af7fae3df4267e23e>` * p)

- void :ref:`opcuaservergetsessioninfo <group___cmp_o_p_c_u_a_server_itf_1ga95f49471ef5e7c32ca228a7f71d7cef1>` (:ref:`opcuaservergetsessioninfo_struct <group___cmp_o_p_c_u_a_server_itf_1ga0a421a6094ed8ecd5a2ef643a9908fc2>` * p)

- RTS_RESULT :ref:`OpcUaServerRegisterProvider <group___cmp_o_p_c_u_a_server_itf_1ga0cb793c031bcea3bc9bb11cda784a4e7>` (:ref:`OpcUaProvider_Info <group___cmp_o_p_c_u_a_provider_itf__attributeservices_1gaffb1f020f6cd2951b7ca3d81abed4e75>` * providerInterface)

- RTS_RESULT :ref:`OpcUaServerUnRegisterProvider <group___cmp_o_p_c_u_a_server_itf_1gaf4c5e0a98384d6dccf9d897ddbdc8329>` (:ref:`OpcUaProvider_Info <group___cmp_o_p_c_u_a_provider_itf__attributeservices_1gaffb1f020f6cd2951b7ca3d81abed4e75>` * providerInterface)

- OpcUa_Boolean :ref:`OpcUaServerCheckReferenceRecursive <group___cmp_o_p_c_u_a_server_itf_1gafc6ae84c876865bf97dd57b2df6e3b22>` (const OpcUa_NodeId * pRequestedReference, OpcUa_Boolean bIncludeSubtypes, const OpcUa_NodeId * pReferenceToCheck)

- OpcUa_StatusCode :ref:`OpcUaServerCheckIfReferenceIsValid <group___cmp_o_p_c_u_a_server_itf_1ga3578151788386611686c858999b7cbbf>` (const OpcUa_NodeId * pRefTypeId)

- OpcUa_Int16 :ref:`OpcUaServerGetNamespaceIndex <group___cmp_o_p_c_u_a_server_itf_1ga79b878aa715b751d83a1c121e93c07a1>` (OpcUa_String * pNamespace)

- OpcUa_Int16 :ref:`OpcUaServerRegisterNamespace <group___cmp_o_p_c_u_a_server_itf_1ga59bd82a3f2e58427e82d3b7116053b83>` (OpcUa_String * pNamespace)

- OpcUa_StatusCode :ref:`OpcUaServerParseIndexRange <group___cmp_o_p_c_u_a_server_itf_1gaa1395d40ae1c961c9a3220530856b1e7>` (const OpcUa_String * pString, :ref:`NumericRange <group___cmp_o_p_c_u_a_server_itf_1gac23f984fd0708176ec4c74208a50a934>` * pRangeArray, OpcUa_UInt32 * pMaxRanges)

- OpcUa_Double :ref:`OpcUaServerGetMinimumSamplingRate <group___cmp_o_p_c_u_a_server_itf_1ga6682590cbc123062e581915b2816f657>` (void)

- RTS_RESULT :ref:`OpcUaServerAddNodes <group___cmp_o_p_c_u_a_server_itf_1gae04722050790333dfa6aeec15389a524>` (:ref:`OpcUaProvider_Info <group___cmp_o_p_c_u_a_provider_itf__attributeservices_1gaffb1f020f6cd2951b7ca3d81abed4e75>` * providerInterface, :ref:`OpcUaServerNodeDescription <group___cmp_o_p_c_u_a_server_itf_1ga968e0a1636c6375fd12eb1c9ce8e561e>` * pNodes, RTS_UI32 numNodes)

- RTS_RESULT :ref:`OpcUaServerAddReferences <group___cmp_o_p_c_u_a_server_itf_1gac1ae80ee7046a1f948dcc819376ec703>` (:ref:`OpcUaServerReferenceDescription <group___cmp_o_p_c_u_a_server_itf_1ga2f2a16973d2a83efa6bf044cf2b0094b>` * pReferences, RTS_UI32 numReferences)

- RTS_RESULT :ref:`OpcUaServerRemoveNodes <group___cmp_o_p_c_u_a_server_itf_1ga1e5c07785779ef4012f95af696fb61ed>` (:ref:`OpcUaProvider_Info <group___cmp_o_p_c_u_a_provider_itf__attributeservices_1gaffb1f020f6cd2951b7ca3d81abed4e75>` * providerInterface)

- RTS_HANDLE :ref:`OpcUaServerRegisterEventNotifier <group___cmp_o_p_c_u_a_server_itf_1ga8a10a4a1c433fe7f52eb1c003adbdce2>` (OpcUa_NodeId * pNode, OpcUa_NodeId * pParentNotifier, RTS_RESULT * pResult)

- RTS_RESULT :ref:`OpcUaServerUnregisterEventNotifier <group___cmp_o_p_c_u_a_server_itf_1gaee3d73ba6b90b724a5444c28e7706352>` (RTS_HANDLE hNotifier)

- RTS_HANDLE :ref:`OpcUaServerRegisterEvent <group___cmp_o_p_c_u_a_server_itf_1gaabcc9898c5592f7959d5c5f2ca1cc980>` (:ref:`OpcUaProvider_Info <group___cmp_o_p_c_u_a_provider_itf__attributeservices_1gaffb1f020f6cd2951b7ca3d81abed4e75>` * providerInterface, OpcUa_NodeId * pEventTypeId, OpcUa_UInt32 ui32NumOfFields, :ref:`OpcUaServer_BrowsePath <group___cmp_o_p_c_u_a_server_itf_1ga44fcb7e167b616e196c8be375d8e292b>` * pEventFields, RTS_RESULT * pResult)

- RTS_RESULT :ref:`OpcUaServerUnregisterEvent <group___cmp_o_p_c_u_a_server_itf_1gabd3047a67d53d317d32e56821dd5bef6>` (RTS_HANDLE hEvent)

- RTS_RESULT :ref:`OpcUaServerFireEvent <group___cmp_o_p_c_u_a_server_itf_1ga298dec569335db7a6fecf8ebb53e8789>` (RTS_HANDLE hNotifier, RTS_HANDLE hEvent, OpcUa_Variant * pValues)

- RTS_RESULT :ref:`OpcUaServerIndicateAddressSpaceChange <group___cmp_o_p_c_u_a_server_itf_1ga49ea11ce90b9f615326dcdb2847ff7db>` (void)

- RTS_UI32 :ref:`OpcUaServerGetFirstSession <group___cmp_o_p_c_u_a_server_itf_1ga40d715d4cd287f1b33cb8ead90a97631>` (RTS_RESULT * pResult)

- RTS_UI32 :ref:`OpcUaServerGetNextSession <group___cmp_o_p_c_u_a_server_itf_1ga8ba493b8b4f1f2b73106a766113366f3>` (RTS_UI32 ui32LastSessionId, RTS_RESULT * pResult)

- RTS_RESULT :ref:`OpcUaServerGetSessionInfo <group___cmp_o_p_c_u_a_server_itf_1ga2c8e7df1a6e2492fbf16a91e16e3f088>` (RTS_UI32 ui32SessionId, :ref:`OpcUaServer_Session_Information <group___cmp_o_p_c_u_a_server_itf_1ga7833119fb18e46c173d5f1c30c8ac612>` * pInformation)

- RTS_RESULT :ref:`OpcUaServerCheckAccessRights <group___cmp_o_p_c_u_a_server_itf_1ga5fe9ced8e8b9e4b7940485e8afdae306>` (RTS_UI32 ui32SessionId, char * pszObject, RTS_UI32 ui32RequestedRights)

- RTS_HANDLE :ref:`OpcUaServerGetUserHandle <group___cmp_o_p_c_u_a_server_itf_1gaf0d157d196ea6dd5b9fab621ce98b2a6>` (RTS_UI32 ui32SessionId, RTS_RESULT * pResult)

.. _group___cmp_o_p_c_u_a_server_itf-details:

Detailed Description
--------------------

Interface of CmpOPCUAServer
**Copyright:**

Copyright (c) 2017-2018 CODESYS GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved.



Macro Definition Documentation
------------------------------
.. _group___cmp_o_p_c_u_a_server_itf_1ga9797a7b6a16a07d7fbfb37c3cb8741f3:

#define OPCUASERVER_MESSAGESECURITYMODE_INVALID RTS_IEC_DWORD_C(0x0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EXTERN LIB SECTION BEGIN

Enum: OpcUaServer_MessageSecurityMode

.. _group___cmp_o_p_c_u_a_server_itf_1gafef4c2881a2eb576440c9176643acc98:

#define OPCUASERVER_MESSAGESECURITYMODE_NONE RTS_IEC_DWORD_C(0x1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1gad208806ee2f7e96c13fef2dcf6f22b7f:

#define OPCUASERVER_MESSAGESECURITYMODE_SIGN RTS_IEC_DWORD_C(0x2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1ga8421fb752fa9f40ee514a7d3d033c906:

#define OPCUASERVER_MESSAGESECURITYMODE_SIGNANDENCRYPT RTS_IEC_DWORD_C(0x3)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1ga564b36698bb09df3b2541ce473c20c7d:

#define OPCUASERVER_MESSAGESECURITYMODE RTS_IEC_DWORD
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1ga9ce63bef31e0bcbedf4569ff1b866a69:

#define OPCUASERVER_SESSIONEVENTS_SESSION_ADDED RTS_IEC_DWORD_C(0x1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Enum: OpcUaServer_SessionEvents

.. _group___cmp_o_p_c_u_a_server_itf_1ga105a84a4ffc1077a96d3143ccedfd6d7:

#define OPCUASERVER_SESSIONEVENTS_SESSION_CHANGED RTS_IEC_DWORD_C(0x2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1ga24d2a5fae2bc11bb9ac84617ada45887:

#define OPCUASERVER_SESSIONEVENTS_SESSION_REMOVED RTS_IEC_DWORD_C(0x3)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1ga19c316f0ced390dba5e25822c10f20c7:

#define OPCUASERVER_SESSIONEVENTS RTS_IEC_DWORD
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1ga4d29339be835e75beb3aa606ce6d81aa:

#define Max_NumericRanges 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^

EXTERN LIB SECTION END

.. _group___cmp_o_p_c_u_a_server_itf_1gab6f843069ebf7f93626d55fc0cb98e8c:

#define ITF_CmpOPCUAServer
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1gaaf4dc48c7edb5c3b0465bf159a437ea5:

#define EXTITF_CmpOPCUAServer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___cmp_o_p_c_u_a_server_itf_1ga110d85df928078c400d4e625fecd096d:

typedef struct _OpcUaObjectDescription OpcUaObjectDescription
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1ga0e85cead952df0dde2d082f2d4c91ba6:

typedef struct _OpcUaVariableDescription OpcUaVariableDescription
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1ga24e29be85932f06fe63f214ae847972d:

typedef struct _OpcUaMethodDescription OpcUaMethodDescription
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1ga0546fc6bd8e114653a25084303e1c9de:

typedef struct _OpcUaObjectTypeDescription OpcUaObjectTypeDescription
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1gabae880898cdfe0425d8f6f9c0f26508e:

typedef struct _OpcUaVariableTypeDescription OpcUaVariableTypeDescription
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1ga64bc9e7b7e4c7c60a6aad45cc25f2ae1:

typedef struct _OpcUaReferenceTypeDescription OpcUaReferenceTypeDescription
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1ga87d8ea5b3dcd0a1d9e3855f88c701d9c:

typedef struct _OpcUaDataTypeDescription OpcUaDataTypeDescription
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1ga2c04de11ae77b58697286c32f32f369f:

typedef struct _OpcUaViewDescription OpcUaViewDescription
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1ga3943461372ebc33c5c1ab56b834f03ba:

typedef union _OpcUaElementDescription OpcUaElementDescription
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1ga968e0a1636c6375fd12eb1c9ce8e561e:

typedef struct _OpcUaServerNodeDescription OpcUaServerNodeDescription
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1ga2f2a16973d2a83efa6bf044cf2b0094b:

typedef struct _OpcUaServerReferenceDescription OpcUaServerReferenceDescription
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1ga7833119fb18e46c173d5f1c30c8ac612:

typedef struct tagOpcUaServer_Session_Information  OpcUaServer_Session_Information
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

OpcUaServer_Session_Information

.. _group___cmp_o_p_c_u_a_server_itf_1ga9aef0ca5764eba7c33b30f10ef873e60:

typedef struct tagopcuaservergetfirstsession_struct  opcuaservergetfirstsession_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1gafff29acee8aede9af7fae3df4267e23e:

typedef struct tagopcuaservergetnextsession_struct  opcuaservergetnextsession_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1ga0a421a6094ed8ecd5a2ef643a9908fc2:

typedef struct tagopcuaservergetsessioninfo_struct  opcuaservergetsessioninfo_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function returns details about a specific session.

:return: Result of the operation. ERR_NOT_OBJECT if the sessions is available. ERR_OK if everything went fine.

.. _group___cmp_o_p_c_u_a_server_itf_1gaa0fa3b8d06074a2be9b2a5c4b3f6ea9b:

typedef enum _NumericRangeType  NumericRangeType
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1gac23f984fd0708176ec4c74208a50a934:

typedef struct _NumericRange  NumericRange
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1ga44fcb7e167b616e196c8be375d8e292b:

typedef struct _OpcUaServer_SimpleBrowsePath OpcUaServer_BrowsePath
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1ga0ea32d6ccb89865686129ee11a6b6d7f:

typedef ICmpOPCUAServer_C ICmpOPCUAServer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Enumeration Type Documentation
------------------------------

.. _group___cmp_o_p_c_u_a_server_itf_1gab0c6cdf303b542aca54d491e7d45e078:

enum _NumericRangeType
^^^^^^^^^^^^^^^^^^^^^^


**Enumerator:**

+-----------------+
| RangeType_Index |
+-----------------+
| RangeType_Range |
+-----------------+

Function Documentation
----------------------

.. _group___cmp_o_p_c_u_a_server_itf_1ga0d04523fe213118c3e70ee52769a968e:

void opcuaservergetfirstsession (opcuaservergetfirstsession_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1ga778433dfdaa0c00e851a724b44818121:

void opcuaservergetnextsession (opcuaservergetnextsession_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1ga95f49471ef5e7c32ca228a7f71d7cef1:

void opcuaservergetsessioninfo (opcuaservergetsessioninfo_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1ga0cb793c031bcea3bc9bb11cda784a4e7:

RTS_RESULT OpcUaServerRegisterProvider (OpcUaProvider_Info *providerInterface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Register a new data provider within the OPC UA server.

**Parameters**

+---------+-------------------+----------------------------------+
| [in]    | providerInterface | Table of the provider interface. |
+---------+-------------------+----------------------------------+

**Returns:**

Operation result:

.. _group___cmp_o_p_c_u_a_server_itf_1gaf4c5e0a98384d6dccf9d897ddbdc8329:

RTS_RESULT OpcUaServerUnRegisterProvider (OpcUaProvider_Info *providerInterface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Unregister an already registered data provider within the OPC UA server.

IMPLEMENTATION NOTE: Use CH_EXIT_TASK or later to unregister the provider. Don't unregister the provider while the OPC UA server is running. This may lead to undefined behavior.

**Parameters**

+---------+-------------------+----------------------------------+
| [in]    | providerInterface | Table of the provider interface. |
+---------+-------------------+----------------------------------+

**Returns:**

Operation result:

.. _group___cmp_o_p_c_u_a_server_itf_1gafc6ae84c876865bf97dd57b2df6e3b22:

OpcUa_Boolean OpcUaServerCheckReferenceRecursive (const OpcUa_NodeId *pRequestedReference, OpcUa_Boolean bIncludeSubtypes, const OpcUa_NodeId *pReferenceToCheck)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Check if to follow OPCU UA referencetype ID. Since referencetype IDs may are derived only the server who knows all IDs can check this.

**Parameters**

+---------+---------------------+---------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pRequestedReference | The referencetype ID the client requested.                                                                                            |
+---------+---------------------+---------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | bIncludeSubtypes    | The flag if subtypes should be followed too. Set by the client.                                                                       |
+---------+---------------------+---------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pReferenceToCheck   | The referencetype ID the compare against. Usually the referencetype ID of the current node (e.g. while browsing) in the adress space. |
+---------+---------------------+---------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

The function returns OpcUa_True if following the referencetype ID is allowed. OpcUa_False is returned otherwise.

.. _group___cmp_o_p_c_u_a_server_itf_1ga3578151788386611686c858999b7cbbf:

OpcUa_StatusCode OpcUaServerCheckIfReferenceIsValid (const OpcUa_NodeId *pRefTypeId)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function checks if a referencetype ID is valid.

**Parameters**

+---------+------------+---------------------------+
| [in]    | pRefTypeId | Referecetype ID to check. |
+---------+------------+---------------------------+

**Returns:**

Returns either OpcUa_Good or OpcUa_BadRefereceTypeIdInvalid.

.. _group___cmp_o_p_c_u_a_server_itf_1ga79b878aa715b751d83a1c121e93c07a1:

OpcUa_Int16 OpcUaServerGetNamespaceIndex (OpcUa_String *pNamespace)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the namespace index of the given namespace. Do not relay on constant referencetype IDs. They may depend on the registration order of different providers.

**Parameters**

+---------+------------+----------------------------+
| [in]    | pNamespace | The namespace of interest. |
+---------+------------+----------------------------+

**Returns:**

-1: If the namespace is not registered yet. index: The index of the namespace. This does not change while the server is running.

.. _group___cmp_o_p_c_u_a_server_itf_1ga59bd82a3f2e58427e82d3b7116053b83:

OpcUa_Int16 OpcUaServerRegisterNamespace (OpcUa_String *pNamespace)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Register a new namespace to the server. If the namespace is registered already this index is returned.

**Parameters**

+---------+------------+--------------------------------------+
| [in]    | pNamespace | Namespace to register at the server. |
+---------+------------+--------------------------------------+

**Returns:**

Returns the index of the registered namespace.

.. _group___cmp_o_p_c_u_a_server_itf_1gaa1395d40ae1c961c9a3220530856b1e7:

OpcUa_StatusCode OpcUaServerParseIndexRange (const OpcUa_String *pString, NumericRange *pRangeArray, OpcUa_UInt32 *pMaxRanges)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Parse the index range string which is part of some OPC UA requests with arrays to a structured form.

**Parameters**

+---------+-------------+---------------------------------------------------------------+
| [in]    | pString     | String to parse.                                              |
+---------+-------------+---------------------------------------------------------------+
| [inout] | pRangeArray | Pointer to the arrays where to store the parsed index ranges. |
+---------+-------------+---------------------------------------------------------------+
| [in]    | pMaxRanges  | Maximum length of the array.                                  |
+---------+-------------+---------------------------------------------------------------+

**Returns:**

Returns the index of the registered namespace.

.. _group___cmp_o_p_c_u_a_server_itf_1ga6682590cbc123062e581915b2816f657:

OpcUa_Double OpcUaServerGetMinimumSamplingRate (void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function returns the minimum sampling rate supported by the server.

.. _group___cmp_o_p_c_u_a_server_itf_1gae04722050790333dfa6aeec15389a524:

RTS_RESULT OpcUaServerAddNodes (OpcUaProvider_Info *providerInterface, OpcUaServerNodeDescription *pNodes, RTS_UI32 numNodes)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Use this function to add nodes to the address space of the OPC UA server. The nodes added by this function will be handled by the server. In combination with OpcUaServerAddReferences it is possible to add a complex structures to the OPC UA server. The OPC UA server will then take care on browsing, reading, writing, monitoring.

Note: The values given here are copied to the OPC UA server. You can safely use static or stack values to call this function. The caller is is responsible for this data.

Note: The nodes are added in one transaction. The OPC UA server prepares all nodes to be added. Only if everything was prepared properly the complete set of nodes will be added to the server. If this function returns an error nothing was changed at the address space.

Note: If a node is already existing in the address space this node will be skipped. No error is generated in this case.

Note: Normally if the address space have changed a ModelChangedEvent is sent to the clients. This can be done using OpcUaServerIndicateAddressSpaceChange.

**Parameters**

+---------+-------------------+--------------------------------------------------------------------------------------------+
| [in]    | providerInterface | Pointer to the provider description. Use the same value as in OpcUaServerRegisterProvider. |
+---------+-------------------+--------------------------------------------------------------------------------------------+
| [in]    | pNode             | Pointer to a list of nodes to be added.                                                    |
+---------+-------------------+--------------------------------------------------------------------------------------------+
| [in]    | numNodes          | How many nodes should be added.                                                            |
+---------+-------------------+--------------------------------------------------------------------------------------------+

**Returns:**

Result of the Operation.

- ERR_OK if everything went fine.

- ERR_NOMEMORY if the server runs out of memory.

- ERR_PARAMETER if if a given parameter was invalid.

- ERR_PARAMETER if the given nodes are not configured properly

.. _group___cmp_o_p_c_u_a_server_itf_1gac1ae80ee7046a1f948dcc819376ec703:

RTS_RESULT OpcUaServerAddReferences (OpcUaServerReferenceDescription *pReferences, RTS_UI32 numReferences)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Use this function to add references to the address space of the OPC UA server. Use this function to add the references between the nodes added with OpcUaServerAddNodes or to link the added nodes to already existing nodes.

Note: The values given here are copied to the OPC UA server. You can safely use static or stack values to call this function. The caller is is responsible for this data.

Note: The references are added in one transaction. The OPC UA server prepares all references to be added. Only if everything was prepared properly the complete set of references will be added to the server. If this function returns an error nothing was changed at the address space.

Note: If an identical reference is already existing in the address space this node will be skipped. No error is generated in this case.

Note: Normally if the address space have changed a ModelChangedEvent is sent to the clients. This can be done using OpcUaServerIndicateAddressSpaceChange.

**Parameters**

+---------+---------------+----------------------------------------------+
| [in]    | pReferences   | Pointer to a list of references to be added. |
+---------+---------------+----------------------------------------------+
| [in]    | numReferences | How many references should be added.         |
+---------+---------------+----------------------------------------------+

**Returns:**

Result of the Operation.

- ERR_OK if everything went fine.

- ERR_NOMEMORY if the server runs out of memory.

- ERR_PARAMETER if if a given parameter was invalid.

- ERR_PARAMETER if the given references are not configured properly

.. _group___cmp_o_p_c_u_a_server_itf_1ga1e5c07785779ef4012f95af696fb61ed:

RTS_RESULT OpcUaServerRemoveNodes (OpcUaProvider_Info *providerInterface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1ga8a10a4a1c433fe7f52eb1c003adbdce2:

RTS_HANDLE OpcUaServerRegisterEventNotifier (OpcUa_NodeId *pNode, OpcUa_NodeId *pParentNotifier, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Registers a node defined by a provider as an event notifier. The node should have the SubscriptToEvents flags set. Since events are ordered hierarchical the parent event notifier node has to be given. This function allows to notify the events in a performant way. The corresponding references have to be added by the provider by himself.

**Parameters**

+---------+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pNode           | NodeId of the EventNotifier node                                                                                                                       |
+---------+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pParentNotifier | Pointer to the parent EventNotifier node. If NULL the server node will be assumed.                                                                     |
+---------+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | pResult         | Pointer to result.                                                                                                                                     |
|         |                 |                                                                                                                                                        |
|         |                 | - ERR_OK if everything went fine.                                                                                                                      |
|         |                 |                                                                                                                                                        |
|         |                 | - ERR_NOTIMPLEMENTED if eventing is not available in the configuration.                                                                                |
|         |                 |                                                                                                                                                        |
|         |                 | - ERR_DUPLICATE if the node was already registered. The handle of the original one is returned. Use OpcUaServerUnregisterEventNotifier to unregister.  |
|         |                 |                                                                                                                                                        |
|         |                 | - ERR_FAILED if something failed.                                                                                                                      |
+---------+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Handle to the registered node. Has to be used by OpcUaServerFireEvent and OpcUaServerUnregisterEventNotifier

.. _group___cmp_o_p_c_u_a_server_itf_1gaee3d73ba6b90b724a5444c28e7706352:

RTS_RESULT OpcUaServerUnregisterEventNotifier (RTS_HANDLE hNotifier)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Unregisters an event notifier. As events are organized hierarchical the complete subtree will be removed.

**Parameters**

+---------+-----------+-------------------------------+
| [in]    | hNotifier | Handle to the event notifier. |
+---------+-----------+-------------------------------+

**Returns:**

Result of operation. ERR_OK if everything went fine. ERR_INVALID_HANDLE if hNotifier was not a valid handle. ERR_FAILED in other cases.

.. _group___cmp_o_p_c_u_a_server_itf_1gaabcc9898c5592f7959d5c5f2ca1cc980:

RTS_HANDLE OpcUaServerRegisterEvent (OpcUaProvider_Info *providerInterface, OpcUa_NodeId *pEventTypeId, OpcUa_UInt32 ui32NumOfFields, OpcUaServer_BrowsePath *pEventFields, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1gabd3047a67d53d317d32e56821dd5bef6:

RTS_RESULT OpcUaServerUnregisterEvent (RTS_HANDLE hEvent)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Unregisters an event event.

**Parameters**

+---------+-----------+---------------------+
| [in]    | hNotifier | Handle to the event |
+---------+-----------+---------------------+

**Returns:**

Result of operation. ERR_OK if everything went fine. ERR_INVALID_HANDLE if hEvent was not a valid handle. ERR_FAILED in other cases.

.. _group___cmp_o_p_c_u_a_server_itf_1ga298dec569335db7a6fecf8ebb53e8789:

RTS_RESULT OpcUaServerFireEvent (RTS_HANDLE hNotifier, RTS_HANDLE hEvent, OpcUa_Variant *pValues)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Send an event to the OPC UA Server. This event will be transmitted to all monitored items where the monitoring parameters match to the sent event. According to the OPC UA specification events are also notified to the parent event notifier nodes. By doing so the server object will receive all events. The mandatory property ReveiveTime will be set by the server automatically. This function has all required attributes of the BaseEventType as parameters. Optional attributes or attributes of derived types can be set by last three parameters.

**Parameters**


| [in]    | hNotifier | Handle to the event notifier|

| [in]    | hEvent    | Handle to the registered event|

| [in]    | pValues   | Pointer to the event instance values. Must have the same order as the registered fields of hEvent. Note: The mandatory event fields of the BaseEventType must be available in pValues. Since EventType and ReceiveTime are handled by the server internally these values don't have to be set in pValues. Therefor the minimum number of values is 6. The following order is used, Add the additional fields after these fields: 1. EventId: Unique Id of the event: Datatype: OpcUa_ByteString 2. SourceNode: NodeId of the event source node. Datatype: OpcUa_NodeId 3. SourceName: Name of the event source. Datatype: OpcUa_String 4. Time: UtcTimestamp when the event occurred. Datatype: OpcUa_UtcTime 5. Message: Message of the event. Datatype: OpcUa_LocalizedText 6. Severity: Severity of the event. Datatype: OpcUa_UInt16. Range from 1 to 1000 is allowed |


**Returns:**

Result of the Operation.

- ERR_OK if everything went fine.

- ERR_PARAMETER if some parameter is invalid.

- ERR_INVALID_HANDLE if hNotifier or hEvent is not a valid handle.

- ERR_NOTIMPLEMENTED if eventing is not supported by the OPC UA Server.

- ERR_FAILED if something went wrong.

.. _group___cmp_o_p_c_u_a_server_itf_1ga49ea11ce90b9f615326dcdb2847ff7db:

RTS_RESULT OpcUaServerIndicateAddressSpaceChange (void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Send a BaseModelChange event to the client. As source node the Server (ns=0;i=2253) is used. This will cause the client to rebuild the complete address space.

Note: According to the OPC UA specification this should only be fired one per changing sequence. Fire this event if all changes are committed to your provider or to the OPC UA server.
**Returns:**

Result of the Operation.

- ERR_OK if everything went fine.

- ERR_NOTIMPLEMENTED if eventing is not supported by the OPC UA Server.

- ERR_FAILED if something went wrong.

.. _group___cmp_o_p_c_u_a_server_itf_1ga40d715d4cd287f1b33cb8ead90a97631:

RTS_UI32 OpcUaServerGetFirstSession (RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function returns the first available session. Use this function and OpcUaServerGetNextSession to get the initial session configuration. To get notified about changes register to the EVT_CmpOPCUAServerSessionsChanged event.

**Parameters**

+---------+---------+-----------------------------------------------------------------------+
| [out]   | pResult | Result of the operation. ERR_NOT_OBJECT if no sessions are available. |
+---------+---------+-----------------------------------------------------------------------+

**Returns:**

SessionId of the first session. 0xFFFFFFFF if no session is available.

.. _group___cmp_o_p_c_u_a_server_itf_1ga8ba493b8b4f1f2b73106a766113366f3:

RTS_UI32 OpcUaServerGetNextSession (RTS_UI32 ui32LastSessionId, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function returns the next available session.

**Parameters**

+---------+-------------------+------------------------------------------------------------------------------------------------------+
| [in]    | ui32LastSessionId | SessionID of the last session.                                                                       |
+---------+-------------------+------------------------------------------------------------------------------------------------------+
| [out]   | pResult           | Result of the operation. ERR_NOT_OBJECT if no sessions are available or ui32LastSession was invalid. |
+---------+-------------------+------------------------------------------------------------------------------------------------------+

**Returns:**

SessionId of the first session. 0xFFFFFFFF if no session is available.

.. _group___cmp_o_p_c_u_a_server_itf_1ga2c8e7df1a6e2492fbf16a91e16e3f088:

RTS_RESULT OpcUaServerGetSessionInfo (RTS_UI32 ui32SessionId, OpcUaServer_Session_Information *pInformation)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1ga5fe9ced8e8b9e4b7940485e8afdae306:

RTS_RESULT OpcUaServerCheckAccessRights (RTS_UI32 ui32SessionId, char *pszObject, RTS_UI32 ui32RequestedRights)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_o_p_c_u_a_server_itf_1gaf0d157d196ea6dd5b9fab621ce98b2a6:

RTS_HANDLE OpcUaServerGetUserHandle (RTS_UI32 ui32SessionId, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This function returns the user handle of the given session. This user handle can be used with the CmpUserMgr to check access rights when the object is unknown. (e.g. Access to symbols of the application)

**Parameters**

+---------+---------------+--------------------------------------------------+
| [in]    | ui32SessionId | SessionID of the session.  Pointer to error code |
+---------+---------------+--------------------------------------------------+

**Returns:**

Handle of sessions user. RTS_INVALID_HANDLE if no user is available or an error occurred.

.. last line of group.rst template
.. last line of composition.rst template


