.. first line of composition.rst template

.. first line of group.rst template

.. _group___cmp_checksum_itf:

==============
CmpChecksumItf
==============

Interface of CmpChecksum. :ref:`More... <group___cmp_checksum_itf-details>`

Data Structures
---------------

- struct :ref:`tagcrc16finish_struct <structtagcrc16finish__struct>`

- struct :ref:`tagcrc16init_struct <structtagcrc16init__struct>`

- struct :ref:`tagcrc16update_struct <structtagcrc16update__struct>`

- struct :ref:`tagcrc32finish_struct <structtagcrc32finish__struct>`

- struct :ref:`tagcrc32init_struct <structtagcrc32init__struct>`

- struct :ref:`tagcrc32update_struct <structtagcrc32update__struct>`

- struct :ref:`tagcrc32update2_struct <structtagcrc32update2__struct>`

- struct :ref:`ICmpChecksum_C <struct_i_cmp_checksum___c>`

Macros
------

- #define :ref:`ITF_CmpChecksum <group___cmp_checksum_itf_1gacb15083639027d98e53005341d3988f9>`

- #define :ref:`EXTITF_CmpChecksum <group___cmp_checksum_itf_1ga93f83cbded936a4d53836d9b6f6b2ebf>`

Typedefs
--------

- typedef struct :ref:`tagcrc16finish_struct <structtagcrc16finish__struct>` :ref:`crc16finish_struct <group___cmp_checksum_itf_1gabcd0a8a42f1e0371653c1e3e7cb6c1d9>`

- typedef struct :ref:`tagcrc16init_struct <structtagcrc16init__struct>` :ref:`crc16init_struct <group___cmp_checksum_itf_1ga65d69fff6a9282f18079d33bb4436473>`

- typedef struct :ref:`tagcrc16update_struct <structtagcrc16update__struct>` :ref:`crc16update_struct <group___cmp_checksum_itf_1gade30e0bd2db7a1f8d0230849c9911232>`

- typedef struct :ref:`tagcrc32finish_struct <structtagcrc32finish__struct>` :ref:`crc32finish_struct <group___cmp_checksum_itf_1ga803111b096cbc77a54cc52961255a8df>`

- typedef struct :ref:`tagcrc32init_struct <structtagcrc32init__struct>` :ref:`crc32init_struct <group___cmp_checksum_itf_1ga695f8dc25596ff92e63fc0b274417e4d>`

- typedef struct :ref:`tagcrc32update_struct <structtagcrc32update__struct>` :ref:`crc32update_struct <group___cmp_checksum_itf_1gaf4f6eac265141842f88b296d2780af1d>`

- typedef struct :ref:`tagcrc32update2_struct <structtagcrc32update2__struct>` :ref:`crc32update2_struct <group___cmp_checksum_itf_1gae61cea5a08f9c26368f305279bbbf365>`

- typedef :ref:`ICmpChecksum_C <struct_i_cmp_checksum___c>` :ref:`ICmpChecksum <group___cmp_checksum_itf_1ga93bbce419314ca703866fd41f566f803>`

Functions
---------

- void :ref:`crc16finish <group___cmp_checksum_itf_1ga39db4e65cde9ebb3e0b41a8654f1996b>` (:ref:`crc16finish_struct <group___cmp_checksum_itf_1gabcd0a8a42f1e0371653c1e3e7cb6c1d9>` * p)

- void :ref:`crc16init <group___cmp_checksum_itf_1ga20b4e3d85a313e3b8ac011c1922b3058>` (:ref:`crc16init_struct <group___cmp_checksum_itf_1ga65d69fff6a9282f18079d33bb4436473>` * p)

- void :ref:`crc16update <group___cmp_checksum_itf_1gacb2a030416f35cbb1b07604dc67a8172>` (:ref:`crc16update_struct <group___cmp_checksum_itf_1gade30e0bd2db7a1f8d0230849c9911232>` * p)

- void :ref:`crc32finish <group___cmp_checksum_itf_1gad52ea944514289d90a08c34ff393dad1>` (:ref:`crc32finish_struct <group___cmp_checksum_itf_1ga803111b096cbc77a54cc52961255a8df>` * p)

- void :ref:`crc32init <group___cmp_checksum_itf_1ga998f02a3160ef15e4ba5ee0b31d760d4>` (:ref:`crc32init_struct <group___cmp_checksum_itf_1ga695f8dc25596ff92e63fc0b274417e4d>` * p)

- void :ref:`crc32update <group___cmp_checksum_itf_1ga112a978e39e0550441f2a33fb6765285>` (:ref:`crc32update_struct <group___cmp_checksum_itf_1gaf4f6eac265141842f88b296d2780af1d>` * p)

- void :ref:`crc32update2 <group___cmp_checksum_itf_1gaffe51dd9cab4530ef5d8f0e266eff1af>` (:ref:`crc32update2_struct <group___cmp_checksum_itf_1gae61cea5a08f9c26368f305279bbbf365>` * p)

- RTS_UI16 :ref:`CRC16Init <group___cmp_checksum_itf_1ga0b0edf9df76cb44bb0c5251dd9d0d04c>` (void)

- RTS_UI16 :ref:`CRC16Update <group___cmp_checksum_itf_1gac07c6b999ab1bd26dfa941ba5ae70ffc>` (RTS_UI16 usCRC, const unsigned char * pData, RTS_SIZE ulSize)

- RTS_UI16 :ref:`CRC16Finish <group___cmp_checksum_itf_1gaff8802377fa9dae10cf89a0a609ec7e0>` (RTS_UI16 usCRC)

- RTS_UI32 :ref:`CRC32Init <group___cmp_checksum_itf_1gaf3ce9512f3bd397e92ec9b308983dcdb>` (void)

- RTS_UI32 :ref:`CRC32Update <group___cmp_checksum_itf_1gae9cc48232bf895046b6501713231c0f7>` (RTS_UI32 ulCRC, const unsigned char * pData, RTS_SIZE ulSize)

- RTS_UI32 :ref:`CRC32Finish <group___cmp_checksum_itf_1ga1e8ebfb29e9f5ce4ceb4e3b03759ce12>` (RTS_UI32 ulCRC)

- RTS_UI32 :ref:`CRC32Update2 <group___cmp_checksum_itf_1ga3662256fc9a5738dfc574774ef9377a0>` (RTS_UI32 ulCRC, const unsigned char * pData, RTS_SIZE ulSize)

- RTS_UI32 :ref:`CRC32Finish2 <group___cmp_checksum_itf_1ga2b5b5c74e69ace60393d8abdb4f77d2d>` (RTS_UI32 ulCRC)

.. _group___cmp_checksum_itf-details:

Detailed Description
--------------------

Interface of CmpChecksum.

Interface for the checksum utility component.

**Copyright:**

Copyright (c) 2017-2018 CODESYS GmbH, Copyright (c) 1994-2016 3S-Smart Software Solutions GmbH. All rights reserved.

Macro Definition Documentation
------------------------------
.. _group___cmp_checksum_itf_1gacb15083639027d98e53005341d3988f9:

#define ITF_CmpChecksum
^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_checksum_itf_1ga93f83cbded936a4d53836d9b6f6b2ebf:

#define EXTITF_CmpChecksum
^^^^^^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___cmp_checksum_itf_1gabcd0a8a42f1e0371653c1e3e7cb6c1d9:

typedef struct tagcrc16finish_struct  crc16finish_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EXTERN LIB SECTION BEGIN

crc16finish

.. _group___cmp_checksum_itf_1ga65d69fff6a9282f18079d33bb4436473:

typedef struct tagcrc16init_struct  crc16init_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

crc16init

.. _group___cmp_checksum_itf_1gade30e0bd2db7a1f8d0230849c9911232:

typedef struct tagcrc16update_struct  crc16update_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

crc16update

.. _group___cmp_checksum_itf_1ga803111b096cbc77a54cc52961255a8df:

typedef struct tagcrc32finish_struct  crc32finish_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

crc32finish

.. _group___cmp_checksum_itf_1ga695f8dc25596ff92e63fc0b274417e4d:

typedef struct tagcrc32init_struct  crc32init_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

crc32init

.. _group___cmp_checksum_itf_1gaf4f6eac265141842f88b296d2780af1d:

typedef struct tagcrc32update_struct  crc32update_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

crc32update

.. _group___cmp_checksum_itf_1gae61cea5a08f9c26368f305279bbbf365:

typedef struct tagcrc32update2_struct  crc32update2_struct
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

crc32update2

.. _group___cmp_checksum_itf_1ga93bbce419314ca703866fd41f566f803:

typedef ICmpChecksum_C ICmpChecksum
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function Documentation
----------------------

.. _group___cmp_checksum_itf_1ga39db4e65cde9ebb3e0b41a8654f1996b:

void crc16finish (crc16finish_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_checksum_itf_1ga20b4e3d85a313e3b8ac011c1922b3058:

void crc16init (crc16init_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_checksum_itf_1gacb2a030416f35cbb1b07604dc67a8172:

void crc16update (crc16update_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_checksum_itf_1gad52ea944514289d90a08c34ff393dad1:

void crc32finish (crc32finish_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_checksum_itf_1ga998f02a3160ef15e4ba5ee0b31d760d4:

void crc32init (crc32init_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_checksum_itf_1ga112a978e39e0550441f2a33fb6765285:

void crc32update (crc32update_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_checksum_itf_1gaffe51dd9cab4530ef5d8f0e266eff1af:

void crc32update2 (crc32update2_struct *p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_checksum_itf_1ga0b0edf9df76cb44bb0c5251dd9d0d04c:

RTS_UI16 CRC16Init (void)
^^^^^^^^^^^^^^^^^^^^^^^^^

EXTERN LIB SECTION END

Implementation of a 16-Bit CRC. The CRC is based on the CCITT polynom x^16 + x^12 + x^5 + 1. Since there seem to be different opinions about "the" CCITT CRC-16, here a description of the options used in this api:

- Bits are shifted in with MSB first

- Input bytes are NOT reversed

- The final CRC is NOT reversed

- Initial value is 0xFFFF

- 16 Zero-bits are implicitly appended to the end of the message

- The "checkvalue" is 0xE5CC (ie. the CRC of the ASCII string '123456789')

.. _group___cmp_checksum_itf_1gac07c6b999ab1bd26dfa941ba5ae70ffc:

RTS_UI16 CRC16Update (RTS_UI16 usCRC, const unsigned char *pData, RTS_SIZE ulSize)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Update the CRC with a block of data. Before the first call you have to initialize the CRC by calling CRC16Init.

**Parameters**

+---------+--------+-----------------------------------------------------------------------------------------+
| [in]    | usCRC  | The previous value of the crc as returned by the last call to CRC16Init or CRC16Update. |
+---------+--------+-----------------------------------------------------------------------------------------+
| [in]    | pData  | Points at the data which should be added to the crc.                                    |
+---------+--------+-----------------------------------------------------------------------------------------+
| [in]    | ulSize | The number of bytes in pData.                                                           |
+---------+--------+-----------------------------------------------------------------------------------------+

**Returns:**

*Returns the updated crc.

.. _group___cmp_checksum_itf_1gaff8802377fa9dae10cf89a0a609ec7e0:

RTS_UI16 CRC16Finish (RTS_UI16 usCRC)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

For the CRC to be valid it has to be finished after it is updated with all data. Use this as the last step during calculating your CRC.

**Parameters**

+---------+-------+----------------------------------------------+
| [in]    | usCRC | The current value of the crc to be finished. |
+---------+-------+----------------------------------------------+

**Returns:**

*The checksum over all data passed in via CRC16Update.

.. _group___cmp_checksum_itf_1gaf3ce9512f3bd397e92ec9b308983dcdb:

RTS_UI32 CRC32Init (void)
^^^^^^^^^^^^^^^^^^^^^^^^^

Implementation of a initial 32-Bit CRC. Initial value is 0xFFFFFFFF.

**Parameters**

+---------+-----------+--------------------------------------------------------------------+
| [in]    | InitValue | ***PSEUDO*** Define that sets the Initial Value RANGE=[INIT_VAL32] |
+---------+-----------+--------------------------------------------------------------------+

**Returns:**

Returns the initial CRC value.

.. _group___cmp_checksum_itf_1gae9cc48232bf895046b6501713231c0f7:

RTS_UI32 CRC32Update (RTS_UI32 ulCRC, const unsigned char *pData, RTS_SIZE ulSize)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Obsolete: Use CRC32Update2 instead!

Update the CRC with a block of data. Before the first call you have to initialize the crc by calling CRC32Init. Must only be used, if the CRC is calculated in one step and not using several calls of CRC32Update for adding data to the CRC.

ATTENTION: You have to finish the CRC with the function :ref:`CRC32Finish() <group___sys_file_flash_dep_1ga9a8e8228b360f39e9ff2bd7fc5d91b6c>` !

**Parameters**

+---------+--------+--------------------------------------------------------------------------+
| [in]    | ulCRC  | The previous value of the crc as returned by the last call to CRC32Init. |
+---------+--------+--------------------------------------------------------------------------+
| [in]    | pData  | Points at the data for which the CRC should be calculated.               |
+---------+--------+--------------------------------------------------------------------------+
| [in]    | ulSize | The number of bytes in pData.                                            |
+---------+--------+--------------------------------------------------------------------------+

**Returns:**

*Returns the updated CRC.

.. _group___cmp_checksum_itf_1ga1e8ebfb29e9f5ce4ceb4e3b03759ce12:

RTS_UI32 CRC32Finish (RTS_UI32 ulCRC)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Obsolete: Use CRC32Finish2 instead!

For the CRC to be valid it has to be finished after it is updated with all data. Use this as the last step during calculating your CRC.

In opposite to the other CRC algorithms, the resulting CRC is swapped to IntelByteOrder.

**Parameters**

+---------+-------+----------------------------------------------+
| [in]    | ulCRC | The current value of the CRC to be finished. |
+---------+-------+----------------------------------------------+

**Returns:**

*The checksum over all data passed in via CRC32Update.

.. _group___cmp_checksum_itf_1ga3662256fc9a5738dfc574774ef9377a0:

RTS_UI32 CRC32Update2 (RTS_UI32 ulCRC, const unsigned char *pData, RTS_SIZE ulSize)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Update the CRC with a block of data. Before the first call you have to initialize the CRC by calling CRC32Init. ATTENTION: You have to finish the CRC with the function :ref:`CRC32Finish2() <group___cmp_app_embedded_dep_1ga5ecca828ec71cad94a447069deb8fd49>` !

**Parameters**

+---------+--------+----------------------------------------------------------------------------------------------------------------+
| [in]    | ulCRC  | The previous value of the CRC as returned by the last call to CRC32Init or CRC32Update2. RANGE=[0,VALID_CRC32] |
+---------+--------+----------------------------------------------------------------------------------------------------------------+
| [in]    | pData  | Points at the data which should be added to the CRC. RANGE=[VALID_DATA_POINTER]                                |
+---------+--------+----------------------------------------------------------------------------------------------------------------+
| [in]    | ulSize | The number of bytes in pData. RANGE=[0,VALID_CRC32SIZE]                                                        |
+---------+--------+----------------------------------------------------------------------------------------------------------------+

**Returns:**

*Returns the updated CRC.

.. _group___cmp_checksum_itf_1ga2b5b5c74e69ace60393d8abdb4f77d2d:

RTS_UI32 CRC32Finish2 (RTS_UI32 ulCRC)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

For the CRC to be valid it has to be finished after it is updated with all data. Use this as the last step during calculating your CRC.

**Parameters**

+---------+-------+--------------------------------------------------------------------+
| [in]    | ulCRC | The current value of the CRC to be finished. RANGE=[0,VALID_CRC32] |
+---------+-------+--------------------------------------------------------------------+

**Returns:**

*The checksum over all data passed in via CRC32Update.

.. last line of group.rst template
.. last line of composition.rst template


