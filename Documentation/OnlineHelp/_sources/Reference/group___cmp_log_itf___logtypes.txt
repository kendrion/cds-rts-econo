.. first line of composition.rst template

.. first line of group.rst template

.. _group___cmp_log_itf___logtypes:

=========
Log types
=========

 :ref:`More... <group___cmp_log_itf___logtypes-details>`

Macros
------

- #define :ref:`LT_HIGHSPEED <group___cmp_log_itf___logtypes_1gabcf8ed4295ae462633d0912d2aa3e08b>` UINT32_C(0x00000001)

- #define :ref:`LT_SAFE <group___cmp_log_itf___logtypes_1ga3e94dfc64b8406f6904d7009857b02b3>` UINT32_C(0x00000002)

- #define :ref:`LT_NORMAL <group___cmp_log_itf___logtypes_1ga35c5fbf510e9962187c3709cc341a570>` UINT32_C(0x00000004)

- #define :ref:`LT_TS_BACKEND_LOCALTIME <group___cmp_log_itf___logtypes_1ga5d53a51943df7edcd162c1240306d063>` UINT32_C(0x00000008)

- #define :ref:`LT_TIMESTAMP_RTC <group___cmp_log_itf___logtypes_1gae53e229dedf8ac46d58e969bf795d763>` UINT32_C(0x00000010)

- #define :ref:`LT_TIMESTAMP_RTC_HIGHRES <group___cmp_log_itf___logtypes_1ga7a38a39c737179a9f67a6e7d4935f7df>` UINT32_C(0x00002000)

- #define :ref:`LT_TIMESTAMP_MS <group___cmp_log_itf___logtypes_1ga6c0d7ab3e05829d3ffd618213378b234>` UINT32_C(0x00000020)

- #define :ref:`LT_TIMESTAMP_US <group___cmp_log_itf___logtypes_1gaec8b0813f2ffe29474879ca508b9379e>` UINT32_C(0x00000040)

- #define :ref:`LT_TIMESTAMP_NS <group___cmp_log_itf___logtypes_1ga0b6c5cab16d3f23092901676bbaf126f>` UINT32_C(0x00000080)

- #define :ref:`LT_NO_DISABLE <group___cmp_log_itf___logtypes_1gacd3d8e8826be6810685745a7ded11bb7>` UINT32_C(0x00000100)

- #define :ref:`LT_DUMP_ASYNC <group___cmp_log_itf___logtypes_1gaeea137704689ea807c91bce43f70f714>` UINT32_C(0x00000200)

- #define :ref:`LT_DUMP_ALWAYS <group___cmp_log_itf___logtypes_1gaeacac141af919d0788fb7a634d34ee6c>` UINT32_C(0x00000400)

- #define :ref:`LT_DUMP_ON_CLOSE <group___cmp_log_itf___logtypes_1ga258c79f1645a664cdf4b17bdbbfaa853>` UINT32_C(0x00000800)

- #define :ref:`LT_DUMP_ON_REQUEST <group___cmp_log_itf___logtypes_1gad71ec9ca97a7380566b2da0f84fcda3f>` UINT32_C(0x00001000)

- #define :ref:`LT_DUMP_FORMAT2 <group___cmp_log_itf___logtypes_1gab32e63539ee22010df3113e62636bd13>` UINT32_C(0x00004000)

- #define :ref:`LT_STD <group___cmp_log_itf___logtypes_1ga63595be546137da9d0eba4d858f1f77a>` ( :ref:`LT_NORMAL <group___cmp_log_itf___logtypes_1ga35c5fbf510e9962187c3709cc341a570>` | :ref:`LT_TIMESTAMP_RTC <group___cmp_log_itf___logtypes_1gae53e229dedf8ac46d58e969bf795d763>` | :ref:`LT_NO_DISABLE <group___cmp_log_itf___logtypes_1gacd3d8e8826be6810685745a7ded11bb7>` | :ref:`LT_DUMP_ALWAYS <group___cmp_log_itf___logtypes_1gaeacac141af919d0788fb7a634d34ee6c>` )

- #define :ref:`LT_HAS_TYPE <group___cmp_log_itf___logtypes_1ga3d342c47562497b6b543a938908c0de9>` (pLogger->lo.iType & Type)

.. _group___cmp_log_itf___logtypes-details:

Detailed Description
--------------------





Macro Definition Documentation
------------------------------
.. _group___cmp_log_itf___logtypes_1gabcf8ed4295ae462633d0912d2aa3e08b:

#define LT_HIGHSPEED UINT32_C(0x00000001)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Types of a logger instance Not supported

.. _group___cmp_log_itf___logtypes_1ga3e94dfc64b8406f6904d7009857b02b3:

#define LT_SAFE UINT32_C(0x00000002)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Not supported. Dump log entries in ring buffer residing in retain memory.

.. _group___cmp_log_itf___logtypes_1ga35c5fbf510e9962187c3709cc341a570:

#define LT_NORMAL UINT32_C(0x00000004)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Dump log entries in ring buffer residing in volatile memory (RAM)

.. _group___cmp_log_itf___logtypes_1ga5d53a51943df7edcd162c1240306d063:

#define LT_TS_BACKEND_LOCALTIME UINT32_C(0x00000008)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_log_itf___logtypes_1gae53e229dedf8ac46d58e969bf795d763:

#define LT_TIMESTAMP_RTC UINT32_C(0x00000010)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Use realtime clock for the timestamp

.. _group___cmp_log_itf___logtypes_1ga7a38a39c737179a9f67a6e7d4935f7df:

#define LT_TIMESTAMP_RTC_HIGHRES UINT32_C(0x00002000)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Use realtime clock with high resolution for the timestamp

.. _group___cmp_log_itf___logtypes_1ga6c0d7ab3e05829d3ffd618213378b234:

#define LT_TIMESTAMP_MS UINT32_C(0x00000020)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Use millisecond ticks for the timestamp

.. _group___cmp_log_itf___logtypes_1gaec8b0813f2ffe29474879ca508b9379e:

#define LT_TIMESTAMP_US UINT32_C(0x00000040)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Use microsecond ticks for the timestamp

.. _group___cmp_log_itf___logtypes_1ga0b6c5cab16d3f23092901676bbaf126f:

#define LT_TIMESTAMP_NS UINT32_C(0x00000080)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Use nanosecond ticks for the timestamp

.. _group___cmp_log_itf___logtypes_1gacd3d8e8826be6810685745a7ded11bb7:

#define LT_NO_DISABLE UINT32_C(0x00000100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If this option is set, the logger cannot be disabled

.. _group___cmp_log_itf___logtypes_1gaeea137704689ea807c91bce43f70f714:

#define LT_DUMP_ASYNC UINT32_C(0x00000200)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Dump asynchronously in the backends

.. _group___cmp_log_itf___logtypes_1gaeacac141af919d0788fb7a634d34ee6c:

#define LT_DUMP_ALWAYS UINT32_C(0x00000400)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Dump into the backends at every log entry

.. _group___cmp_log_itf___logtypes_1ga258c79f1645a664cdf4b17bdbbfaa853:

#define LT_DUMP_ON_CLOSE UINT32_C(0x00000800)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Dump only the backends at closing the logger

.. _group___cmp_log_itf___logtypes_1gad71ec9ca97a7380566b2da0f84fcda3f:

#define LT_DUMP_ON_REQUEST UINT32_C(0x00001000)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Dump can be done by calling :ref:`LogDumpEntries() <group___cmp_log_itf_1ga64a7c9bb8e41346d850e073f145174ad>`

.. _group___cmp_log_itf___logtypes_1gab32e63539ee22010df3113e62636bd13:

#define LT_DUMP_FORMAT2 UINT32_C(0x00004000)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Dump with optional format 2. Is only recognized in the backends.

.. _group___cmp_log_itf___logtypes_1ga63595be546137da9d0eba4d858f1f77a:

#define LT_STD ( :ref:`LT_NORMAL <group___cmp_log_itf___logtypes_1ga35c5fbf510e9962187c3709cc341a570>` | :ref:`LT_TIMESTAMP_RTC <group___cmp_log_itf___logtypes_1gae53e229dedf8ac46d58e969bf795d763>` | :ref:`LT_NO_DISABLE <group___cmp_log_itf___logtypes_1gacd3d8e8826be6810685745a7ded11bb7>` | :ref:`LT_DUMP_ALWAYS <group___cmp_log_itf___logtypes_1gaeacac141af919d0788fb7a634d34ee6c>` )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_log_itf___logtypes_1ga3d342c47562497b6b543a938908c0de9:

#define LT_HAS_TYPE (pLogger->lo.iType & Type)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. last line of group.rst template
.. last line of composition.rst template


