.. first line of composition.rst template

.. first line of struct.rst template

.. _structtagcmptlsbufferopen__struct:

===========================================
tagcmptlsbufferopen_struct Struct Reference
===========================================

| #include ":ref:`CmpTlsItf.h <_cmp_tls_itf_8h>`"

Data Fields
-----------

- RTS_IEC_HANDLE :ref:`hTlsContext <structtagcmptlsbufferopen__struct_1ad3aeadc20f8a67dcef66bfa14d8185da>`
- :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * :ref:`pRxBuffer <structtagcmptlsbufferopen__struct_1aace614469df4256228596b81f7722e89>`
- :ref:`RtsByteString <group___cmp_crypto_itf_1ga0d96060febb92297b9262b8cd1d3a1e6>` * :ref:`pTxBuffer <structtagcmptlsbufferopen__struct_1aef727def4eaf5cd00cb9b95be0fcce71>`
- RTS_IEC_RESULT * :ref:`pResult <structtagcmptlsbufferopen__struct_1aa81cbe43c096f74e5b95e38db25768b0>`
- RTS_IEC_HANDLE :ref:`CmpTlsBufferOpen <structtagcmptlsbufferopen__struct_1a7c4ebe7b6496c87322ab33732b4353b8>`

Detailed Description
--------------------

Create a TLS connection around any existing transport media. There are two buffers needed: a send and a receive buffer. Put the data received from the peer to the Rx buffer. The data written by the TLS implementation will be put to the Tx buffer. This buffer has to be sent to the peer after calling the connect, accept or write functions. Maybe after calling the read function the buffer has to be sent too. This depends on internal TLS protocol stuff (change of session keys etc) which may occur at any time. This will be indicated throuth the corresponding returned flag. The TLS connection will be established explicit by calling TSLConnect, or on the server side by calling the Accept function. If the handshaking hasn't finished the read and write functions will internally finish the handshaking until the connection is established. The implementation will start writing at the beginning at each call. If the function indicated that the the data must be sent the next call will overwrite the data in the Tx buffer. So the caller must handle the data before calling the next TLS function. The buffers given here contain raw TLS protocol data. This data has to be transferred to the peer using a reliable way. The packages have to arrive completely and in the right order. Otherwise TLS won't work. To read or to write the corresponding plaintext data use the TlsRead and TlsWrite functions. Handling is done as follows: Received data:

- The bytestrings pointer will point to the beginning of the data.

- The bytestrings max length will hold the buffers size

- The bytestrings length will hold the current available amount of data.

- The function ResetRx will not change any of the byte string. Only the internal read position will be set to the beginning of the buffer

Transmit data:

- The bytestrings pointer will point to the of the empty writing buffer.

- The bytestrings max length will hold the buffer size

- The bytestrings length will contain the amount of data written by the TLS implementation.

- The function ResetTx will reset the internal write position. The length of the bytestring will be set to 0.

:return: The handle to the created TLS connection, or RTS_INVALID_HANDLE, if operation failed.

Field Documentation
-------------------

.. _structtagcmptlsbufferopen__struct_1ad3aeadc20f8a67dcef66bfa14d8185da:

RTS_IEC_HANDLE tagcmptlsbufferopen_struct::hTlsContext
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _structtagcmptlsbufferopen__struct_1aace614469df4256228596b81f7722e89:

RtsByteString* tagcmptlsbufferopen_struct::pRxBuffer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _structtagcmptlsbufferopen__struct_1aef727def4eaf5cd00cb9b95be0fcce71:

RtsByteString* tagcmptlsbufferopen_struct::pTxBuffer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _structtagcmptlsbufferopen__struct_1aa81cbe43c096f74e5b95e38db25768b0:

RTS_IEC_RESULT* tagcmptlsbufferopen_struct::pResult
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _structtagcmptlsbufferopen__struct_1a7c4ebe7b6496c87322ab33732b4353b8:

RTS_IEC_HANDLE tagcmptlsbufferopen_struct::CmpTlsBufferOpen
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

------------------------------------------------------------------------
The documentation for this struct was generated from the following file:
C:/Jenkins/workspace/3.5.14.x/BUILD_V3.5.14.x_RTS_Create_Docu/CodesysSpV3/Tools/GenerateDocumentation/Doxygen/temp/CmpTlsItf.h

.. last line of struct.rst template
.. last line of composition.rst template


